{"version":3,"sources":["actions/game.ts","stores/logEntry.tsx","actions/log.ts","utils/version.ts","definitions/structures/types.tsx","constants/version.tsx","components/widgets/SquareIconButton.tsx","components/widgets/Tab.tsx","components/widgets/Tabstrip.tsx","definitions/structures/alchemist.tsx","definitions/items/types.ts","utils/time.tsx","definitions/production/armour.tsx","definitions/structures/index.tsx","definitions/structures/armoursmith.tsx","definitions/structures/garden.tsx","definitions/structures/lumberMill.tsx","definitions/structures/mine.tsx","definitions/structures/quarry.tsx","definitions/structures/tannery.tsx","definitions/structures/tavern.tsx","definitions/structures/warehouse.tsx","definitions/production/weapons.tsx","definitions/structures/weaponsmith.tsx","definitions/structures/weaver.tsx","definitions/production/questItems.tsx","definitions/structures/workshop.tsx","definitions/items/deeds.ts","definitions/items/equipment.ts","definitions/items/weapons.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","utils/textManager.ts","components/log/SimpleLog.tsx","stores/quest.tsx","selectors/quests.tsx","stores/structure.tsx","containers/log/SimpleLog.tsx","utils/soundManager.ts","components/RealTownView.tsx","hoc/withAppContext.tsx","containers/RealTownView.tsx","actions/gold.ts","actions/resources.ts","definitions/resources.tsx","components/ui/items/ItemsBox.tsx","containers/ui/context/items/ItemsCostBox.tsx","constants/context.ts","constants/icons.ts","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","components/ui/ItemIcon.tsx","components/ui/Progressbar.tsx","actions/items.ts","actions/structures.ts","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/ProductionStructureView.tsx","selectors/workers.tsx","stores/task.tsx","containers/structures/ProductionStructureView.tsx","components/structures/ResourceStructureView.tsx","containers/structures/ResourceStructureView.tsx","actions/quests.ts","constants/dragging.ts","components/ui/AdventurerAvatar.tsx","components/ui/DraggableAdventurerAvatar.tsx","definitions/encounters/types.ts","definitions/quests/index.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","containers/structures/tavern/QuestBoard.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","actions/adventurers.ts","components/ui/DraggableItemIcon.tsx","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/ui/resources/ResourcesBox.tsx","components/structures/warehouse/WarehouseStructureView.tsx","selectors/adventurers.tsx","containers/structures/warehouse/WarehouseStructureView.tsx","components/StructureDetailsView.tsx","components/ui/window/Window.tsx","hoc/withWindow.tsx","containers/structures/StructureDetailsView.tsx","utils/random.ts","components/ui/DroppableAdventurerAvatar.tsx","components/ui/EquipmentSlot.tsx","components/ui/AdventurerInfo.tsx","containers/ui/AdventurerInfo.ts","storeHelpers/index.tsx","oracle/index.tsx","definitions/encounters/backstabbed.ts","definitions/encounters/goblinHouse.ts","definitions/encounters/index.ts","definitions/encounters/theBigTree.ts","components/ui/window/windows/PartyWindow.tsx","containers/windows/PartyWindow.tsx","components/world/QuestLineVisualization.tsx","components/partyScreen/RealWorldView.tsx","containers/world/RealWorldView.tsx","hoc/withPopup.tsx","actions/index.ts","manifest/app.tsx","components/preloading/Preloader.tsx","components/ui/window/windows/CheatWindow.tsx","constants/resources.ts","containers/windows/CheatWindow.tsx","components/ui/window/windows/Menu.tsx","components/topbar/Resourcebar.tsx","containers/topbar/Resourcebar.ts","containers/Topbar.tsx","components/topbar/Topbar.tsx","components/preloading/Indicator.tsx","containers/ui/context/ItemContext.tsx","components/App.tsx","components/ui/context/ItemContext.tsx","components/ui/context/ContextView.tsx","containers/App.tsx","mechanics/gameTick/producedResources.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","stores/engine.tsx","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/resources.tsx","stores/structures.tsx","reducers/structures.ts","stores/tasks.tsx","reducers/tasks.ts","reducers/index.ts","reducers/engine.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","index.tsx"],"names":["ActionType","LogChannel","addLogEntry","key","context","channel","arguments","length","undefined","common","channelContext","type","StructureType","asInt","semVer","parts","split","map","part","Number","Error","concat","forEach","numericVersion","i","convertSemVerToInt","SquareIconButton","props","className","react","onClick","e","text","Tab","active","children","Tabstrip","initialSelectedTab","id","_useState","useState","_useState2","Object","slicedToArray","activeTab","setActiveTab","React","Children","child","cloneElement","handleTabClick","tabId","onTabSelected","react_default","a","createElement","ItemType","Item","alchemist","production","cost","gold","time","levels","displayName","workerCapacity","produces","formatDuration","unit","moment","format","trim","Structure","boots1","item","resources","wood","iron","ONE_MINUTE","chest","cowl","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","stone","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","torch","sandwich","workshop","all","EquipmentType","itemType","deed","deeds","deedForLumbermill","structure","subText","iconImg","deedForWeaponsmith","equipment","basePath","WeaponType","weaponDefinitions","_weaponDefinitions","defineProperty","equipmentType","feet","boots2","boots3","chainmailHood","head","clothGloves","hands","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","material","_Item$arrowheads$Item","arrowheads","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","gunpowder","scales","spring","thread","questItem","questItemDefinitions","_questItemDefinitions","blueprints","crate","dynamite","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","tusk","vase","vial","weeds","trinket","trinketDefinitions","_trinketDefinitions","magicAmulet","ring","weapon","weapons_weaponDefinitions","battleAxe","weaponType","axe","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","objectSpread","questItems","trinkets","weapons","getDefinition","TextManager","classCallCheck","this","createClass","value","texts","precompile","templates","compileAll","initialized","template","getTemplate","console","error","textEntry","get","compile","name","_this","keys","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","ChannelType","itemArticleUndefined","getItemName","articleTemplate","noun","QuestStatus","SimpleLog","possibleConstructorReturn","getPrototypeOf","call","state","expanded","selectedTabId","_this2","channels","label","tabType","town","questNames","questName","push","getQuestTitle","quest","logEntries","currentTab","find","t","filter","lE","Tabs","tab","widgets_Tab","widgets_Tabstrip","handleTabSelected","widgets_SquareIconButton","handleToggleExpand","entry","logEntry","getLogEntryRow","setState","StructureState","getLog","log","selectActiveQuests","createSelector","quests","q","status","selectLastQuestLogEntry","l","connect","store","dispatch","MusicTrack","Sound","media","NotBuilt","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","_ref","_ref2","url","content","sound","play","track","hasOwnProperty","fade","nextMusic","playing","loop","RealTownView","plasmaBeam","anim","handleStructureClick","evt","onStructureClick","target","handleBackgroundClick","images","addMusicTrack","playMusic","stop","structures","index","structureDef","structureDefinitions","structureStore","levelDef","level","ReactKonva","x","y","fontSize","fill","width","height","scale","image","imgSrc","shadowBlur","shadowColor","shadowEnabled","strokeWidth","ref","node","drawHitFromCache","result","playMusicTrack","img","withAppContext","WrappedComponent","_React$Component","WithContext","apply","inherits","AppContext","Consumer","assign","compose","ownProps","addGold","amount","subtractGold","addResources","Resource","ItemsBox","itemsInInventory","aggregate","items","reduce","accumulator","current","listItems","listItemClass","itemDescription","itemsDescription","style","backgroundImage","tmpWarehouse","toConsumableArray","found","findIndex","_tmpWarehouse$splice","splice","removed","ContextType","IconSize","definitions_resources","_Resource$wood$Resour","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","workers","getClassName","size","smallest","small","medium","big","biggest","ItemIcon","itemDefinition","warn","event","showContext","originRect","currentTarget","getBoundingClientRect","onContextualObjectActivated","Progressbar","val","min","max","progress","UpDownValue","displayValue","upDisabled","onUp","downDisabled","onDown","ProductionStructureView","selectedItem","workersAssigned","structureDefinition","levelDefinition","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","stopPropagation","ui_ItemIcon","createCraftTabs","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","indexOf","costItemsContent","ItemsCostBox","resources_ResourcesCostBox","display","ui_UpDownValue","workersFree","craftingTime","formatted","makeTimeString","onCraft","createCraftingDetails","tasks","ui_Progressbar","startTime","timeRemaining","addItemToWarehouse","toSlot","addItem","finishBuildingStructure","upgradeStructure","increaseWorkers","decreaseWorkers","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","acc","running","productionDefinition","removeResources","craftItem","ResourceStructureView","onWorkersDown","onWorkersUp","createWorkersRow","generatesText","join","createGeneratesRow","advanceQuest","startEncounter","encounter","DragSourceType","DragType","AdventurerAvatar","adventurer","avatarImg","spec","beginDrag","sourceId","sourceType","adventurerInventory","Encounter","QuestNodeType","DraggableAdventurerAvatar","_this$props","isDragging","connectDragSource","ui_AdventurerAvatar","DragSource","monitor","dragSource","kill10Boars","nodes","nothing","goblinHouseOutside","backstabbed","boss","retrieveMagicAmulet","requiredItems","theBigTree","DroppableAdventurerSlot","isOver","canDrop","connectDropTarget","DropTarget","drop","onDrop","getItem","dropTarget","AssignAdventurers","slots","_loop","assignedAventurers","onRemoveAdventurer","ui_DroppableAdventurerSlot","onAddEventurer","availableSlots","slotsContent","QuestBoard","selectedQuest","questListContent","availableQuests","iconImgPath","icon","selectedQuestName","onQuestClick","questDefinition","fullParty","enoughItems","checkEnoughItems","canLaunch","getQuestDescription","tavern_AssignAdventurers","onAddAdventurer","onLaunchQuest","getQuestDetails","_this3","every","amountRequired","TavernStructureView","roomCount","available","roomContent","adventurers","room","assigned","party","getQuestByAdventurer","ui_DraggableAdventurerAvatar","createRooms","tavern_QuestBoard","handleQuestClick","handleAddAdventurer","handleRemoveAdventurer","handleLaunchQuest","adventurerId","values","launchQuest","moveItemInInventory","fromSlot","addItemToInventory","removeItemFromInventory","DraggableItemIcon","inventorySlot","InventorySlot","empty","contents","ui_DraggableItemIcon","slot","inventory_InventorySlot","iconSize","dragInfo","onDropItem","deltaResources","delta","toFixed","WarehouseStructureView","resourcesDelta","resourcesRef","selectedAdventurer","getStructureName","adventurerContent","adventurersInTown","inventory_Inventory","inventory","onMoveItemInInventory","onMoveItemToAdventurer","adventurersArea","handleAdventurerTabSelected","resources_ResourcesBox","onMoveItemInWarehouse","onMoveItemFromAdventurer","prevProps","classList","remove","setTimeout","add","getAdventurers","getQuests","selectAdventurersInTown","foundInParty","findAdventurerById","groupedAdventurers","foundAdventurers","adventurersOnQuest","action1","action2","moveItemInWarehouse","action","removeItem","removeItemFromWarehouse","StructureDetails","view","Building","buildTask","structures_ProductionStructureView","containers_structures_ResourceStructureView","structures_warehouse_WarehouseStructureView","tavern_TavernStructureView","getStructureView","Window","BackButton","backEnabled","onBack","CloseButton","closeEnabled","onClose","title","withWindow","WithWindow","window_Window","generator","onCheatGold","onCheatResources","StructureDetailsView","DroppableAdventurerAvatar","def","borderColor","AdventurerInfo","attributes","stats","stat","getEquipmentSlot","itemRef","adventurerEquipment","ui_EquipmentSlot","onRemoveItemFromInventory","onAssignEquipment","handleDropItemEquipment","equipmentList","assignEquipment","storeIsRehydrated","rngState","randomInt","Math","ceil","floor","dirty","random","Oracle","sort","b","questVars","oracles","getOracle","getDescription","oracle","getOptions","fight","flight","answer","option","finder","getRandomAdventurer","investigate","leave","goblinHouseHallway","strongest","getAdventurerWithHighest","walkAround","lift","treeState","vars","updateQuestVars","goldAmount","PartyWindow","getAvatars","selected","ui_DroppableAdventurerAvatar","handleAvatarClick","fromAdventurer","onMoveItemToOtherAdventurer","getBottomPart","getAdventurerInfo","getQuestDefinition","questNode","message","actions","lastLog","getTextEntry","getEncounterDefinition","currentEncounter","descriptionTextEntry","descriptionText","options","o","handleEncounterOptionClick","containers_ui_AdventurerInfo","onDispatch","onUpdateEncounterResult","Component","onAdvanceQuest","fromAdventurerId","toAdventurerId","moveItemToOtherAdventurer","nodeIndex","updateEncounterResult","QuestLineVisualization","questDefinitions","questNodes","n","spanProps","createNodeVisualization","onSelectQuest","RealWorldView","world","questLines","handleSelectQuest","window","containers_windows_PartyWindow","onOpenWindow","Placement","manifest","MediaType","CheatWindow","itemSelectRef","handleCheatGold","handleCheatWorkers","onCheatWorkers","handleCheatResources","handleCheatItem","onCheatItem","handleChangeStructureState","checked","onCheatStructureState","Built","handleChangeGold","handleChangeWorkers","handleChangeResources","onChange","getStructureRow","getItemOption","isNaN","getItemTypeOptions","resourceOrder","setStructureState","addWorkers","Menu","containers_windows_CheatWindow","Resourcebar","createItem","withRouter","containers_topbar_Resourcebar","windows_Menu","Indicator","itemsLoaded","itemsTotal","Preloader","loadMedia","promises","loadItem","catch","err","Promise","then","results","onLoadComplete","completed","asyncToGenerator","regenerator_default","mark","_callee","mediaType","_value","wrap","_context","prev","next","getType","loadImage","sent","Howl","src","abrupt","_x","complete","indicator","Indicator_Indicator","Image","resolve","reject","check","naturalWidth","removeEventListener","addEventListener","toLowerCase","endsWith","View","handleStartConstruction","startBuildingStructure","buildStructure","info","deedInfo","enoughGold","ContextView","context_ItemContext","withPopup","_React$useState","placement","bottom","_React$useState2","setPlacement","containerRect","referenceRect","popupElement","popupRect","top","opacity","left","offset","querySelector","transform","right","resolution","App","containerRef","selectStructure","structures_StructureDetailsView","handleWindowOpened","handleMediaLoadComplete","addSounds","buttonClick","handleContextualObjectActivated","selectedContext","contextInfo","contextType","contextRect","handleAppClick","activeWindows","handleWindowClose","handleWindowBack","slice","selectedStructure","handleResize","bind","assertThisInitialized","handleViewButtonClick","playSound","ContextPopup","_this$state$selectedC","context_ContextView","getActiveWindow","Provider","esm","backend","HTML5Backend","react_router_dom","Preloader_Preloader","containers_Topbar","react_router","from","to","path","component","persistor","purge","location","reload","color","containers_RealTownView","world_RealWorldView","containers_log_SimpleLog","topWindow","commonWindowProps","innerHeight","parentBox","getMaxResources","getProducedResources","factor","resourceStructureDefinition","handleStructure","getQuestUpdates","qss","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","nextNode","encounterDefintions","getRngState","Random","isLocalhost","Boolean","hostname","match","register","navigator","URL","process","toString","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","generateRandomStats","strength","perception","endurance","charisma","intelligenge","agility","luck","testState","health","initialState","lastTick","Date","now","gameTick","lU","encounterResults","reward","questsToUpdate","questToUpdate","_initialState","updateStructureState","structureState","createTask","combineReducers","element","_ref5","engine","GameActionType","StructureActionType","_ref3","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","configureStore","initial","_args","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","getState","initGame","axiosResult","axios","data","init","seed","seedrandom","continueGame","startNewGame","runGame","ReactDOM","es","containers_App","document","getElementById","registerServiceWorker","processCompletedTasks","handleCompletedTask","setInterval","resourcesUpdates","_getQuestUpdates"],"mappings":"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","file":"static/js/main.fb42a298.chunk.js","sourcesContent":["// tslint:disable:object-literal-sort-keys\nimport { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\nimport { State as seedrandomStateType } from \"seedrandom\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    gameTick = \"gameTick\",\n}\nexport interface GameTickAction {\n    type: ActionType;\n    delta: number;\n    rngState: seedrandomStateType | null;\n    resources: ResourceStoreState;\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\n// export type IncrementResource = IncrementResource // | others\n\n// tslint:disable: align\nexport function gameTick(delta: number,\n    rngState: seedrandomStateType | null,\n    resources: ResourceStoreState,\n    quests: QuestUpdate[],\n    log: LogUpdate[],\n): GameTickAction {\n    return {\n        type: ActionType.gameTick,\n        delta,\n        rngState,\n        resources,\n        quests,\n        log,\n    };\n}\n","import { TextEntry } from \"constants/text\";\n\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry extends TextEntry {\n    time: number;\n    channel: LogChannel;\n    channelContext?: string;\n}\n","// tslint:disable: object-literal-sort-keys\nimport { LogChannel } from \"stores/logEntry\";\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddLogEntryAction extends Action {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n    channelContext?: string;\n}\n\nexport function addLogEntry(key: string, context?: any, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        key,\n        channel,\n        channelContext,\n        context,\n    };\n}\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n                                  // todo: REMOVE\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.4\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","import * as React from \"react\";\nimport \"./css/squareiconbutton.css\";\n\nexport interface Props {\n    text: string; /* temp */\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n}\n\ntype AllProps = Props;\n\nconst SquareIconButton = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = props.className || \"\";\n    return <div className = { `ui-button widgets-squareiconbutton ${className}` } onClick = { handleClick }>\n        { props.text }\n    </div>;\n};\n\nexport default SquareIconButton;\n","import * as React from \"react\";\nimport \"./css/tabstrip.css\";\n\nexport interface Props {\n    id: string;\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    active?: boolean;\n    children?: any;\n}\n\ntype AllProps = Props;\n\nconst Tab = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = ((props.active) ? \"active\" : \"\") + (props.className || \"\");\n    return <li className = { `widget-tab ${className}` } onClick = { handleClick } >\n        { props.children }\n    </li>;\n};\n\nexport default Tab;\n","import React, { useState } from \"react\";\nimport \"./css/tabstrip.css\";\nimport { Props as TabProps } from \"./Tab\";\n\nexport interface Props {\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    onTabSelected?: (tabId: string) => void;\n    children?: any;\n}\n\ntype AllProps = Props;\nconst Tabstrip = (props: AllProps) => {\n    let initialSelectedTab = null;\n    if (props.children && props.children.length) {\n        initialSelectedTab = props.children[0].props.id;\n    }\n    const [activeTab, setActiveTab] = useState<string|null>(initialSelectedTab);\n    const className = props.className || \"\";\n\n    const children = React.Children.map(props.children, (child: React.ReactElement<TabProps>) => {\n        const clone: React.ReactElement<TabProps> = React.cloneElement(child, {\n            active: child.props.id === activeTab,\n            onClick: () => { handleTabClick(child.props.id); },\n        });\n        return clone;\n    });\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n        if (props.onTabSelected) {\n            props.onTabSelected(tabId);\n        }\n    };\n\n    const handleClick = (e: React.MouseEvent<Element>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n\n    return <ul className = { `widget-tabstrip ${className}` } onClick = { handleClick } >\n        { children }\n    </ul>;\n};\n\nexport default Tabstrip;\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","\nexport enum ItemType {\n    deed,\n    equipment,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    arrowheads = \"arrowheads\",\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    gunpowder = \"gunpowder\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    sandwich = \"sandwich\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","import * as moment from \"moment\";\nimport \"moment-duration-format\";\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\n\nexport const formatDuration = (time: number, unit: moment.DurationInputArg2 = \"milliseconds\" ): string => {\n    return moment.duration(time, unit)\n        .format(\"d [days] h [hours] m [min] s [sec]\", {\n        trim: \"both\",\n    });\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { ProductionStructureDefinition,\n    ResourceStructureDefinition,\n    WarehouseStructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport weaver from \"./weaver\";\nimport workshop from \"./workshop\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n    workshop = \"workshop\",\n}\n\nexport type StructureDefinition = WarehouseStructureDefinition |\nResourceStructureDefinition | ProductionStructureDefinition;\n\nconst all = {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n    workshop,\n};\n\nexport default all;\n\nexport function getDefinition(structure: string): StructureDefinition {\n    return all[structure];\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { stone: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { stone: 4 },\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { stone: 6 },\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n\nexport default weaver;\n","// tslint:disable:object-literal-sort-keys\n// todo: maybe 'quest items' is not the right name\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const torch: ProductionDefinition = {\n    item: Item.torch,\n    cost: {\n        resources: { wood: 2, fabric: 1 },\n        time: time.ONE_MINUTE,\n    },\n};\n\nexport const sandwich: ProductionDefinition = {\n    item: Item.sandwich,\n    cost: {\n        resources: { food: 1 },\n        time: time.ONE_MINUTE / 2,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { sandwich, torch } from \"definitions/production/questItems\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst workshop: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ torch, sandwich ],\n    }, {\n        // level 2:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }, {\n        // level 4:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\nexport default workshop;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.equipment;\nconst basePath = \"/img/items/equipment/\";\n\nexport enum EquipmentType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface EquipmentDefinition extends ItemDefinition {\n    equipmentType: EquipmentType;\n}\n\nconst weaponDefinitions: Record<string, EquipmentDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default weaponDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \" Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n    },\n};\nexport default weaponDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.arrowheads]: {\n        item: Item.arrowheads,\n        itemType,\n        iconImg: `${basePath}arrowheads.png`,\n    },\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.gunpowder]: {\n        item: Item.gunpowder,\n        itemType,\n        iconImg: `${basePath}gunpowder.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.sandwich]: {\n        item: Item.sandwich,\n        itemType,\n        iconImg: `${basePath}sandwich.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import deeds from \"./deeds\";\nimport equipment from \"./equipment\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...equipment,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import { TextEntry } from \"constants/text\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\nimport * as Handlebars from \"handlebars\";\nimport { Structure } from \"definitions/structures\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTextEntry(textEntry: TextEntry): string {\n        return this.get(textEntry.key, textEntry.context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    public static getStructureName(structure: Structure): string {\n        return this.get(`structure-${structure}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: Item, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: Item) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","import SquareIconButton from \"components/widgets/SquareIconButton\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport * as React from \"react\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/simplelog.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface StateProps  {\n    logEntries: LogEntry[];\n    questNames: string[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nenum ChannelType {\n    all,\n    town,\n    quest,\n}\n\ninterface ChannelDefinition {\n    label: string;\n    tabType: ChannelType;\n    tabId: string;\n    channelContext?: string;\n}\n\ninterface LocalState {\n    selectedTabId: string;\n    expanded: boolean;\n}\n\nclass SimpleLog extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            expanded: false,\n            selectedTabId: \"all\",\n        };\n    }\n\n    public render() {\n\n        const channels: ChannelDefinition[] = [{\n            label: TextManager.get(\"common-log-tab-all\"),\n            tabId: \"all\",\n            tabType: ChannelType.all,\n        }, {\n            label: TextManager.get(\"common-log-tab-town\"),\n            tabId: \"town\",\n            tabType: ChannelType.town,\n        }];\n\n        this.props.questNames.forEach((questName) => {\n            channels.push({\n                channelContext: questName,\n                label: TextManager.getQuestTitle(questName),\n                tabId: `quest-${questName}`,\n                tabType: ChannelType.quest,\n            });\n        });\n\n        let logEntries: LogEntry[] = [];\n        const currentTab = channels.find((t) => t.tabId === this.state.selectedTabId)!;\n        switch (currentTab.tabType) {\n            case ChannelType.all:\n                // All the things\n                logEntries = this.props.logEntries;\n                break;\n\n            case ChannelType.town:\n                // Only town\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.town);\n                break;\n\n            case ChannelType.quest:\n                // Only the selected quest\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.channelContext === currentTab.channelContext);\n                break;\n        }\n\n        const getLogEntryRow = (logEntry: LogEntry) => {\n            const text = TextManager.get(logEntry.key, logEntry.context);\n            return <div className = \"entry\" key={ logEntry.time }>\n                { text }\n            </div>;\n        };\n\n        const Tabs = channels.map((tab) => {\n            return <Tab id = { tab.tabId } key = { tab.tabId } >{ tab.label }</Tab>;\n        });\n\n        return <div className = { `log ${this.state.expanded ? \"expanded\" : \"\"}` }>\n            <div className = \"tab-bar\">\n                <Tabstrip className = \"tabs\"  onTabSelected = { (tabId: string) => this.handleTabSelected(tabId) } >\n                    { Tabs }\n                </Tabstrip>\n                <SquareIconButton className = \"expand-button\" onClick = { () => this.handleToggleExpand() } text = { this.state.expanded ? \"▼\" : \"▲\" }/>\n            </div>\n            <div className = \"log-entries\">\n                { logEntries.map((entry) => getLogEntryRow(entry))}\n            </div>\n        </div>;\n    }\n\n    private handleTabSelected(tabId: string) {\n        this.setState({\n            selectedTabId: tabId,\n        });\n    }\n\n    private handleToggleExpand() {\n        this.setState({\n            expanded: !this.state.expanded,\n        });\n    }\n}\n\nexport default SimpleLog;\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];        // list of adventurer ids\n    progress: number;       // Which questnode the party is at currently\n    questVars: any;\n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    icon: string;\n\n    currentEncounter: Encounter | null;\n    reward?: QuestReward;\n}\n","import { TextEntry } from \"constants/text\";\nimport { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getQuests = (state: StoreState) => state.quests;\nconst getLog = (state: StoreState) => state.log;\n\nconst activeQuests = (quests: QuestStoreState[]) => {\n    // returns the names of the active quests\n    return quests.filter((q) => q.status === QuestStatus.active).map((q) => q.name);\n};\n\nexport const selectActiveQuests = createSelector([\n    getQuests],\n    activeQuests,\n);\n\n/**\n * Returns the most recent log entry for a given quest\n */\nexport const selectLastQuestLogEntry = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry | undefined => {\n        const questLog = log.find((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n        return questLog;\n    },\n)(state);\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import SimpleLog, { DispatchProps, Props, StateProps } from \"components/log/SimpleLog\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectActiveQuests } from \"selectors/quests\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        logEntries: store.log,\n        questNames: selectActiveQuests(store),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(SimpleLog);\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\n\nexport class SoundManager {\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(1, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, 1, 500);\n\n        currentMusicTrack = track;\n    }\n}\n","import structureDefinitions, { Structure  } from \"definitions/structures\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport Konva from \"konva\";\nimport * as React from \"react\";\nimport { Image, Layer, Stage, Text } from \"react-konva\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/townView.css\";\nimport SmokeEmitter from \"./effects/SmokeEmitter\";\n\n// It's actually not the *real* town view hihi\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n\n}\n\nexport interface Props {\n    onStructureClick?: (structure: Structure | null) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n    // tasks: TaskStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {}\n\ntype AllProps = Props & DispatchProps & StateProps & AppContextProps;\n\nclass RealTownView extends React.Component<AllProps, LocalState> {\n\n    private plasmaBeam?: Konva.Rect = undefined;\n    private anim?: Konva.Animation = undefined;\n\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            images: {},\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n\n        /*        const period = 500;\n        if (this.plasmaBeam) {\n            this.plasmaBeam.filters([Konva.Filters.Brighten]);\n            //this.plasmaBeam.cache(null);\n            this.anim = new Konva.Animation((frame: any) => {\n                if (this.plasmaBeam){\n                const freq = 2; // speed\n                const brightness = (Math.sin((frame.time / period) * freq) + 1) / 2;   // fluctuate between 0 and 1\n                this.plasmaBeam.brightness(brightness);\n                //this.plasmaBeam.cache(null);\n                this.plasmaBeam.fillPatternOffsetX(this.plasmaBeam.fillPatternOffsetX() - 150);\n                }\n            }, this.plasmaBeam.getLayer());\n\n            this.anim.start();\n        }*/\n    }\n\n    public componentWillUnmount() {\n        if (this.anim) { this.anim.stop(); }\n        delete this.anim;\n    }\n\n    // public changeSize(node: Konva.Node) {\n    //     node.to({\n    //         scaleX: Math.random() + 2.8,\n    //         scaleY: Math.random() + 2.8,\n    //         duration: 10,\n    //     });\n    // }\n\n    public render() {\n        const structures = Object.keys(Structure).map((structure, index) => {\n            const structureDef = structureDefinitions[structure];\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            if (structureStore.state === StructureState.NotBuilt) {\n                return null;\n            }\n            const levelDef = structureDef.levels[structureStore.level];\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <Text name= { structure }\n                key = { structure }\n                text = { `${displayName} (level ${structureStore.level + 1})` }\n                x = { 100 }\n                y = { 50 * index + 100 }\n                fontSize = { 40 }\n                fill = { \"white\" }\n                onClick = { this.handleStructureClick }\n            />;\n        });\n        // tslint:disable-next-line:no-console\n        console.log(`rendered the town`); // TODO: remove\n\n        return (\n            <Stage width={1024} height={768} scale= { {x: 0.4, y: 0.4} }>\n            <Layer name=\"background\" onClick = { this.handleBackgroundClick } >\n                <Image image={ this.imgSrc(\"img/town/sky.jpg\") }></Image>\n            </Layer>\n            <Layer name=\"town\">\n                {/* <Rect\n                    x={20}\n                    y={20}\n                    width={50}\n                    height={50}\n                    fill={ \"white\"}\n\n                    // onClick={this.handleClick}\n                /> */}\n                {/* <Rect\n                     PLASMA BEAM\n                    x={20}\n                    y={20}\n                    width={1500}\n                    height={256}\n                    fillPatternImage = { this.imgSrc(\"img/town/effects/plasma_beam_heavy_green.png\") }\n                    fillPatternOffset = { { x: 20, y: 0 }}\n                    globalCompositeOperation = \"lighter\"\n                    shadowBlur={5}\n                    ref = { (node: Konva.Rect) => this.plasmaBeam = node }\n                /> */}\n                   <Image\n                        name = \"warehouse\"\n                        image={ this.imgSrc(\"img/town/tavern.png\") }\n                        x = { 15 }\n                        y = { 1057 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        shadowColor = \"red\"\n                        shadowEnabled = { true }\n                        strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        // ref={ (node) => { this.convaImages.tavern = node!; }}\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n\n                    <Image\n                        name = { Structure.warehouse }\n                        image={ this.imgSrc(\"img/town/lighthouse.png\") }\n                        // onClick = { this.handleStructureClick }\n\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    <Image\n                        name = \"lumberMill\"\n                        image = { this.imgSrc(\"img/town/mill.png\") }\n                        x = { 947 }\n                        y = { 1384 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        // shadowColor = \"red\"\n                        // shadowEnabled = { true }\n                        // strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    { structures }\n\n                    </Layer>\n                    {/* <SmokeEmitter\n                        emitterX = { 190 }\n                        emitterY = { 510 }\n                        smokeImg = { this.imgSrc(\"img/town/effects/smoke.png\") }\n                    /> */}\n\n            </Stage>\n        );\n    }\n\n    public handleStructureClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick( Structure[evt.target.name()]); }\n    }\n\n    public handleBackgroundClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick(null); }\n    }\n\n    private imgSrc(url: string): HTMLImageElement {\n        const result = this.props.media.find((m) => m.url === url);\n        if (result === undefined) {\n            throw Error(`Could not find image with url ${url}`);\n        } else {\n            return result.content as HTMLImageElement;\n        }\n    }\n\n    private playMusic() {\n        SoundManager.playMusicTrack(MusicTrack.town);\n    }\n}\n\nconst drawHitFromCache = (img: Konva.Image) => {\n    if (img) {\n       // img.cache(null);\n       // img.drawHitFromCache(0.5);\n    }\n};\n\nexport default RealTownView;\n","import { AppContext } from \"components/App\";\nimport { MediaItem } from \"components/preloading/Preloader\";\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport * as React from \"react\";\n\n// Sharing context within the entire App\nexport interface AppContextProps {\n    onContextualObjectActivated: (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => void;\n    onOpenWindow: (window: React.ReactElement) => void;\n    media: MediaItem[];\n}\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends React.Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n};\n","\nimport RealTownView, { DispatchProps, Props, StateProps } from \"components/RealTownView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        structures: store.structures,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealTownView) as React.ComponentType<Props>;\n","// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface ModifyGoldAction extends Action {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddResources {\n    type: ActionType;\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n};\n","import \"components/ui/css/common/icon.css\";\nimport itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items, to be used as requirements for something\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const aggregate = props.items.reduce((accumulator: object, current: Item) => {\n        if (!accumulator[current]) {\n            accumulator[current] = 0;\n        }\n        accumulator[current]++;\n        return accumulator;\n    }, {});\n\n    const listItems = Object.keys(aggregate).map((key: string) => {\n        const item = key as Item;\n        const amount = aggregate[key] as number;\n        let listItemClass = \"item\";\n\n        // Check if we have enough\n        const amountInInventory = itemsInInventory ? itemsInInventory.filter((i) => i === item).length : 0;\n        if (amount > amountInInventory) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className = { listItemClass } key = { item }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage: `url(${itemDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { `${TextManager.getItemName(item)} (${ amount })` }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    const tmpWarehouse = [ ... store.items];\n    ownProps.items.forEach((item: Item) => {\n        const found = tmpWarehouse.findIndex((i) => i === item);\n        if (found > -1) {\n            // Remove the item from tmpWarehouse and add to itemsInInventory\n            const [ removed ] = tmpWarehouse.splice(found, 1);\n            if (removed) {\n                itemsInInventory.push(removed);\n            }\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextView\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","export enum IconSize {\r\n    smallest,\r\n    small,\r\n    medium,\r\n    big,\r\n    biggest,\r\n}\r\n\r\nexport const getClassName = (size?: IconSize): string => {\r\n    switch (size) {\r\n        case IconSize.smallest:\r\n            return \"common-icon-smallest\";\r\n        case IconSize.small:\r\n            return \"common-icon-small\";\r\n        case IconSize.medium:\r\n            return \"common-icon-medium\";\r\n        case IconSize.big:\r\n            return \"common-icon-big\";\r\n        case IconSize.biggest:\r\n            return \"common-icon-biggest\";\r\n    }\r\n    return getClassName(IconSize.medium);\r\n};\r\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    return time - (.1 * time * workers);\n};\n","import { AppContext } from \"components/App\";\nimport \"components/ui/css/common/icon.css\";\nimport { ContextType } from \"constants/context\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\n\nexport interface Props {\n    item: Item;\n    onClick?: (event: React.MouseEvent) => void;\n    size?: IconSize;\n    showContext?: boolean;\n}\n\nconst ItemIcon: React.FC<Props> = (props) => {\n    const { item } = props;\n    const itemDefinition = getDefinition(item);\n    const context = React.useContext(AppContext)!;\n    const ref = React.useRef(null);\n\n    if (!itemDefinition) {\n        // tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    const handleClick = (event: React.MouseEvent) => {\n        if (props.showContext !== false) {\n            const origin = (event.currentTarget as HTMLElement);\n            const originRect = origin.getBoundingClientRect();\n            context.onContextualObjectActivated(\n                ContextType.item,\n                getDefinition(item),\n                ref,\n                originRect,\n            );\n        }\n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    };\n\n    const className = \"item-icon \" + getClassName(props.size);\n\n    return (\n        <div className = { className }\n            onClick = { handleClick }\n            style = {{\n                backgroundImage: `url(${itemDefinition.iconImg})`,\n            }}>\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps { }\nexport interface Props extends DispatchProps {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nconst Progressbar = (props: Props) => {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{ props.label }</div>\n            <div className=\"progressbar-info\" style= {{ width: `${progress * 100}%`}}>  </div>\n        </div>\n    );\n};\n\nexport default Progressbar;\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","import { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface MoveItemInWarehouseAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface Action {\n    type: ActionType;\n    structure: Structure;\n}\nexport interface StructureStateAction extends Action {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends Action {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): Action {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): Action {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): Action {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddAction extends Action {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: (e: React.MouseEvent) => void;\n    onDown?: (e: React.MouseEvent) => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = (e: React.MouseEvent) => {\n        if (props.onUp && !props.upDisabled) { props.onUp(e); }\n    };\n\n    const handleDown = (e: React.MouseEvent) => {\n        if (props.onDown && !props.downDisabled) { props.onDown(e); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import MaterialsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"utils/textManager\";\nimport { formatDuration } from \"utils/time\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport \"./css/productionstructureview.css\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Array<Item | null>;  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedItem: Item|null;\n    workersAssigned: number;\n}\n\nexport default class ProductionStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedItem: null,\n            workersAssigned: 0,\n        };\n    }\n\n    // public componentDidUpdate(prevProps: AllProps, prevState: LocalState) {\n    //     console.log(\"cdu\" + prevProps.workersFree);\n    // }\n\n    public componentWillMount() {\n// tslint:disable-next-line: no-console\n        console.log(\"component will mount\" + this.props.type);\n    }\n    public componentWillUnmount() {\n// tslint:disable-next-line: no-console\n        console.log(\"component will unmount\" + this.props.type);\n    }\n\n    public render() {\n        const structureDefinition  = structureDefinitions[this.props.type] as ProductionStructureDefinition;\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${this.props.type}\n                with type ProductionStructureDefinition.`);\n        }\n        const level: number = this.props.level || 0;\n        const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.get(levelDefinition.displayName);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style={{float: \"right\"}}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade } >\n                        { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const createCraftTabs = () => {\n            const selectedItem = this.state.selectedItem;\n\n            return levelDefinition.produces.map((produces) => {\n                const handleSelectCraftingItem = (e: React.MouseEvent) => {\n                    e.stopPropagation();\n\n                    this.setState({\n                        selectedItem: produces.item,\n                    });\n                };\n\n                return <li\n                    key = { `craft${produces.item}`}\n                    onClick = { handleSelectCraftingItem }\n                    className = { selectedItem === produces.item ? \"selected\" : \"\" }\n                >\n                    <ItemIcon item= { produces.item }  />\n                    { TextManager.getItemName(produces.item) }\n                </li>;\n            });\n        };\n\n        const createCraftingDetails = () => {\n            const item = this.state.selectedItem;\n            if (!item) { return null; }\n\n            const produces = levelDefinition.produces.find((p) => p.item === item)!;\n            const playerResources = this.props.resources || {};\n            const costResources = produces.cost.resources!;\n            const missingAtLeastOneResource = Object.keys(costResources)\n                .some((resource) => costResources[resource] > playerResources[resource]);\n\n            let missingAtLeastOneItem = false;\n            const costMaterials = produces.cost.materials;\n            if (costMaterials) {\n                missingAtLeastOneItem = costMaterials\n                    .some((i: Item) => this.props.items.indexOf(i) === -1);\n            }\n\n            const disabled = missingAtLeastOneResource || missingAtLeastOneItem || this.state.workersAssigned < 1;\n            // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n            const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n            const makeTimeString = (time: number): string => {\n                if (this.state.workersAssigned === 0) {\n                    return \"\";\n                }\n                const craftingTime = calculateProductionTime(time, this.state.workersAssigned);\n                const formatted = formatDuration(craftingTime);\n                return ` Crafting time: ${formatted}`;\n            };\n\n            const handleClick = (e: React.MouseEvent) => {\n                e.stopPropagation();\n\n                if (this.props.onCraft) {\n                    this.props.onCraft(produces, this.state.workersAssigned);\n                    this.setState({\n                        workersAssigned: 0,\n                    });\n                }\n            };\n\n            const handleUp = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned + 1,\n                });\n            };\n\n            const handleDown = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned - 1,\n                });\n            };\n\n            let costItemsContent = null;\n            if (costMaterials) {\n                costItemsContent = <MaterialsCostBox items = { costMaterials } />;\n            }\n            return (\n                <div className = \"crafting-details\">\n                    Craft a { TextManager.getItemName(itemDefinition.item) }\n                    <div className = \"crafting-costs\">\n                        <fieldset>\n                            <ResourcesCostBox resources = { costResources } />\n                        </fieldset>\n                        <fieldset>\n                            { costItemsContent }\n                        </fieldset>\n                    </div>\n                    <div style={ { display: \"flex \"}}>\n                        <UpDownValue\n                            value = { this.state.workersAssigned }\n                            label ={ \"Workers: \" }\n                            onUp = { handleUp }\n                            onDown = { handleDown }\n                            upDisabled={\n                                this.state.workersAssigned >= this.props.workersFree ||\n                                this.state.workersAssigned >= MAX_WORKERS_CRAFTING\n                            }\n                            downDisabled={ this.state.workersAssigned < 1 }\n                        />\n                        &nbsp;\n                        { makeTimeString(produces.cost.time || 0) }\n                    </div>\n                    <div>\n                        <button\n                            disabled = { disabled }\n                            onClick = { handleClick }>\n                            Craft\n                        </button>\n                    </div>\n                </div>\n            );\n        };\n\n        const createProgressbars = () => {\n            const tasks = this.props.tasks || [];\n            return tasks.map((t) => <Progressbar\n                key = { `${t.name}${t.startTime}` }\n                label = { `${t.name} (${formatDuration(t.timeRemaining)})` }\n                progress = { t.progress }/>,\n            );\n        };\n\n        return (\n            // TODO: abstract some stuff to generic StructureView\n            <details open = { true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            { createCraftTabs() }\n                        </ul>\n                        { createCraftingDetails() }\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        { createProgressbars() }\n                    </fieldset>\n                </section>\n            </details>\n        );\n    }\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    return {\n        gold: store.gold,\n        items: store.items,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ProductionStructureView);\n","import structureDefinitions, {  Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport UpDownValue from \"../ui/UpDownValue\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onWorkersUp?: () => void;\n    onWorkersDown?: () => void;\n}\n\nexport interface Props  {\n    type: Structure;\n}\n\nexport interface StateProps {\n    level?: number;\n    workers?: number;\n    workersFree?: number;\n    gold?: number;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ResourceStructureView = (props: AllProps) => {\n\n    const structureDefinition = structureDefinitions[props.type] as ResourceStructureDefinition;\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n    const level: number = props.level || 0;\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.get(levelDefinition.displayName);\n\n    const createWorkersRow = () => {\n\n        const handleUp = () => {\n            if (props.onWorkersUp) { props.onWorkersUp(); }\n        };\n        const handleDown = () => {\n            if (props.onWorkersDown) { props.onWorkersDown(); }\n        };\n\n        const upDisabled = props.workers === levelDefinition.workerCapacity || (props.workersFree || 0) < 1;\n        const downDisabled = props.workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value = { props.workers }\n            max = { levelDefinition.workerCapacity }\n            upDisabled = { upDisabled }\n            downDisabled = { downDisabled }\n            onDown = { handleDown }\n            onUp = { handleUp }\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const gold = props.gold || 0;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick = { handleClick }\n                disabled= { !canUpgrade } >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${props.workers} = ${generates[value] * (props.workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            { \"Generates (every minute): \" }\n            <br/>\n            { generatesText }\n        </div>;\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <details open = { true } className = \"structureview\">\n            <summary>{ displayName }</summary>\n            <section>\n                { createWorkersRow() }\n                { createUpgradeRow() }\n                { createGeneratesRow() }\n            </section>\n        </details>\n    );\n};\n\nexport default ResourceStructureView;\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport ResourceStructureView,  { DispatchProps, Props, StateProps } from \"../../components/structures/ResourceStructureView\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n    if (!structureStore) { throw new Error(`No structure '${ownProps.type}' found in the store!`); }\n    return {\n        gold: store.gold,\n        level: structureStore.level,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n        onWorkersDown: () => {\n            dispatch(decreaseWorkers(ownProps.type));\n        },\n        onWorkersUp: () => {\n            dispatch(increaseWorkers(ownProps.type));\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResourceStructureView);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",\n    advanceQuest = \"advanceQuest\",\n    updateQuestVars = \"updateQuestVars\",\n    updateEncounterResult = \"updateEncounterResult\",\n    startEncounter = \"startEncounter\",\n    updateQuests = \"updateQuests\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface QuestAction extends Action {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface StartEncounterAction extends QuestAction {\n    encounter: Encounter;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Move to the next node */\nexport function advanceQuest(quest: string): QuestAction {\n    return {\n        type: ActionType.advanceQuest,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\nexport function startEncounter(quest: string, encounter: Encounter): StartEncounterAction {\n    return {\n        type: ActionType.startEncounter,\n        questName: quest,\n        encounter,\n    };\n}\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurerInventory,\n    warehouse,\n    tavern,\n    adventurerEquipment,\n}\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\nimport \"./css/draggableadventureravatar.css\";\n\nexport interface Props {\n    sourceId?: string;\n    onClick?: () => void;\n    disabled?: boolean;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface AdventurerAvatarDragInfo {\n    adventurer: AdventurerStoreState;\n    sourceId?: string;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\n    beginDrag(props: Props & AdventurerAvatarProps) {\n        // Return the data describing the dragged item\n        return {\n            adventurer: props.adventurer,\n            sourceId: props.sourceId,\n            sourceType: DragSourceType.adventurerInventory,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableAdventurerAvatar extends React.Component<Props & CollectedProps & AdventurerAvatarProps> {\n\n    public render() {\n        const { isDragging, connectDragSource, disabled } = this.props;\n        let className = \"draggable-adventurer-avatar\";\n        if (disabled) {\n            className += \" disabled\";\n        }\n        if (isDragging) {\n            className += \" dragging\";\n        }\n\n        /*if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }*/\n        return connectDragSource(\n            <div className = { className }>\n                <AdventurerAvatar\n                    // Copy all props down to AdventurerAvatar\n                    { ...this.props }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\n","import { TextEntry } from \"constants/text\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nexport interface EncounterDefinition {\n    name: Encounter;\n    getOracle: (questName: string, store: StoreState) => Oracle;\n    chance?: number;    // number from 0 to 1, undefined means: 1\n    getDescription: (oracle: Oracle) => TextEntry;\n    getOptions: (oracle: Oracle) => Record<string, string>;\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => string;\n}\n\nexport enum Encounter {\n    backstabbed = \"backstabbed\",\n    goblinHouseHallway = \"goblinHouseHallway\",\n    goblinHouseOutside = \"goblinHouseOutside\",\n    theBigTree = \"theBigTree\",\n}\n","import { Item } from \"definitions/items/types\";\nimport { Encounter } from \"../encounters/types\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum QuestNodeType {\n    nothing = 0,    // Nothing much going on here\n    encounter = 1,\n    combat = 2,     // Not implemented\n    boss = 3,\n}\n\nexport interface QuestDefinition {\n    nodes: QuestNode[];\n    requiredItems?: Item[];\n}\n\nexport interface QuestNode {\n    x: number;\n    y: number;\n    type: QuestNodeType;\n    encounter?: Encounter; // TODO: or array of encounters\n    log?: string;      // this text will appear in the log upon entering the node. only at 'nothing' nodes\n}\n\nconst kill10Boars: QuestDefinition = {\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node0\",\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node1\",\n    // }, {\n    //     x: 0,\n    //     y: 3,\n    //     type: QuestNodeType.nothing,\n    //     log: \"In the distance, a forest looms\",\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.goblinHouseOutside,\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node4\",\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"The party spots a boss\",\n    }, {\n        x: 2,\n        y: 3,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst retrieveMagicAmulet: QuestDefinition = {\n    requiredItems: [\n        Item.torch,\n        Item.torch,\n        Item.torch,\n        Item.sandwich,\n        Item.sandwich,\n    ],\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Papa loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Mama loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Look at 'em sway with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"gettin' so gay with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.theBigTree,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 3,\n        y: 1,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst all = {\n    kill10Boars,\n    retrieveMagicAmulet,\n};\n\nexport default all;\n\nexport function getDefinition(quest: string): QuestDefinition {\n    return all[quest];\n}\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/droppableadventurerslot.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/*\n * Can drop adventurers on this */\nclass DroppableAdventurerSlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n        let className = \"droppable-adventurer-slot\";\n\n        if (isOver) {\n            className += \" active-drop\";\n        } else if (canDrop) {\n            className += \" can-drop\";\n        }\n\n        return connectDropTarget(\n            <div className = { className }>\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ADVENTURER,\n    dropTarget,\n    collect,\n)(DroppableAdventurerSlot);\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAddEventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (index: number) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = <AdventurerAvatar adventurer = { adventurer } displayName = { false } onClick = { () => props.onRemoveAdventurer(i) }/> ;\n                className = \"has-adventurer\";\n            } else {\n                content = <DroppableAdventurerSlot onDrop = { (item: AdventurerAvatarDragInfo) => { props.onAddEventurer(item, i); }} />;\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return <ul className = \"assign-adventurers\">\n        { slotsContent() }\n    </ul>;\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport ItemsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, QuestDefinition } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\n\nconst availableSlots = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface StateProps {\n    items: Array<Item | null>;  // items in inventory\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {}\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName: string | null;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n\n    onQuestClick: (questName: string) => void;\n    onRemoveAdventurer: (index: number) => void;\n    onAddAdventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onLaunchQuest: () => void;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n}\n\nexport default class QuestBoard extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n    }\n\n    public render() {\n        const questListContent: JSX.Element[] = this.props.availableQuests.map((q) => {\n            const iconImgPath = `img/sigils/${ q.icon }`;\n            const className = \"quest\" + ((q.name === this.props.selectedQuestName) ? \" selected\" : \"\");\n            return <li key={ q.name } className = { className } onClick = { () => { this.props.onQuestClick(q.name); } }>\n                <div\n                    className = \"icon\"\n                    style={{backgroundImage: `url(${iconImgPath})`}}\n                ></div>\n                <div className = \"title\">{ TextManager.getQuestTitle(q.name) } </div>\n            </li>;\n        });\n\n        const getQuestDetails = () => {\n            if (!this.props.selectedQuestName) {\n                return null;\n            }\n            const quest = this.props.availableQuests.find((q) => q.name === this.props.selectedQuestName);\n            if (!quest) {\n                return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n            }\n            const questDefinition = getDefinition(quest.name);\n\n            // Need a full party to launch\n            const fullParty = this.props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n            // Check if we have the required items\n            const enoughItems = this.checkEnoughItems(questDefinition);\n\n            const canLaunch = fullParty && enoughItems;\n\n            return <div className=\"quest-details\">\n                { TextManager.getQuestDescription(this.props.selectedQuestName) }\n                <AssignAdventurers\n                    availableSlots = { availableSlots }\n                    assignedAventurers = { this.props.assignedAventurers }\n                    onRemoveAdventurer = { this.props.onRemoveAdventurer }\n                    onAddEventurer = { this.props.onAddAdventurer } />\n                <ItemsCostBox items = { questDefinition.requiredItems || [] }/>\n                <button disabled = { !canLaunch } onClick = { () => this.props.onLaunchQuest() }>\n                    { TextManager.get(\"structure-tavern-button-launch-quest\") }\n                </button>\n            </div>;\n        };\n\n        // quest board, expanded quest info + assign adventurers + launch button\n        return <div className = \"quest-board\">\n            <h2> { TextManager.get(\"structure-tavern-title-quest-board\") } </h2>\n            <ul className = \"quest-list\">\n                { questListContent }\n            </ul>\n            { getQuestDetails() }\n        </div>;\n    }\n\n    /**\n     * Returns true if all the items required by the quest are in the inventory\n     */\n    public checkEnoughItems(questDefinition: QuestDefinition): boolean {\n        if (!questDefinition.requiredItems) {\n            return true;\n        }\n        return questDefinition.requiredItems.every((item: Item) => {\n            const amountRequired = (questDefinition.requiredItems)!.filter((i) => i === item).length;\n            return this.props.items.filter((i) => i === item).length >= amountRequired;\n        });\n    }\n}\n","import QuestBoard, { Props, StateProps } from \"components/structures/tavern/QuestBoard\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        items: store.items,\n    };\n}\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(QuestBoard);\n","import DraggableAdventurerAvatar, { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport QuestBoard from \"containers/structures/tavern/QuestBoard\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/tavernstructureview.css\";\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n    selectedQuestName: string | null;\n    assignedAventurers: AdventurerStoreState[];\n}\n\nconst SOURCE_ID = \"tavern\";\n\nexport default class TavernStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            assignedAventurers: [],\n            selectedQuestName: null,\n        };\n    }\n\n    public render() {\n        const structureDefinition  = structureDefinitions[Structure.tavern] as TavernStructureDefinition;\n        const level: number = this.props.level || 0;\n        const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.get(levelDefinition.displayName);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const roomCount = levelDefinition.rooms;\n        const createRooms = () => {\n\n            const roomContent: JSX.Element[] = [];\n            for (let i = 0; i < roomCount; i++) {\n                const adventurer = this.props.adventurers.find((a) => a.room === i);\n                let content = null;\n                if (adventurer) {\n                    let name = adventurer.name;\n\n                    const assigned = this.state.assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n                    const party = this.getQuestByAdventurer(adventurer.id);\n                    if (party) {\n                        name += \" (on a quest)\";\n                    }\n                    content = [<DraggableAdventurerAvatar\n                        disabled = { assigned || party != null }\n                        adventurer = { adventurer }\n                        className = \"adventurer-icon\"\n                        sourceId = { SOURCE_ID }\n                        key = { `avatar:${adventurer.id}` }\n                    />,\n                    name,\n                    /*\n                    <button\n                        className = \"boot\"\n                        key = { `boot:${adventurer.id}` }\n                    >\n                        Boot\n                    </button>,*/\n                ];\n                } else {\n                    content = \"(empty room)\";\n                }\n\n                roomContent.push(<div key = { `room${i}` } className = \"room\">\n                    { content }\n                </div>);\n            }\n\n            return <div className = \"rooms\">\n                <h2>Rooms</h2>\n                { roomContent }\n            </div>;\n        };\n\n        const availableQuests = this.props.quests.filter((q) => q.status === QuestStatus.available );\n\n        return (\n            <details open = { true } className = \"tavernstructureview\">\n                <summary>{ displayName }</summary>\n                { createUpgradeRow() }\n                <section>\n                    { createRooms() }\n                    <QuestBoard\n                        availableQuests = { availableQuests }\n                        selectedQuestName = { this.state.selectedQuestName }\n                        assignedAventurers = { this.state.assignedAventurers }\n                        onQuestClick = { (name: string) => this.handleQuestClick(name) }\n                        onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => this.handleAddAdventurer(item, index) }\n                        onRemoveAdventurer = { (index: number) => this.handleRemoveAdventurer(index) }\n                        onLaunchQuest = { () => this.handleLaunchQuest() }\n                    />\n                </section>\n            </details>\n        );\n    }\n\n    private handleQuestClick(name: string) {\n        if (this.state.selectedQuestName === name) {\n            this.setState( { selectedQuestName: null });\n        } else {\n            this.setState( { selectedQuestName: name });\n        }\n\n        // Unassign all adventurers\n        this.setState({\n            assignedAventurers: [],\n        });\n    }\n\n    private handleAddAdventurer(item: AdventurerAvatarDragInfo, index: number) {\n        if (item.sourceId === SOURCE_ID) {\n            const assignedAventurers = [ ...this.state.assignedAventurers];\n            assignedAventurers[index] = item.adventurer;\n            this.setState({\n                assignedAventurers,\n            });\n        }\n    }\n\n    /**\n     * Removes an assigned adventurer from a slot\n     * @param index\n     */\n    private handleRemoveAdventurer(index: number): void {\n        const assignedAventurers = [ ...this.state.assignedAventurers];\n        delete assignedAventurers[index];\n        this.setState({\n            assignedAventurers,\n        });\n    }\n\n    private handleLaunchQuest(): void {\n        const assignedAventurers = this.state.assignedAventurers;\n        const selectedQuestName = this.state.selectedQuestName!;\n        this.props.onLaunchQuest(selectedQuestName, assignedAventurers);\n    }\n\n    /**\n     * Returns the party the adventurer is in. undefined if not in any party\n     * @param adventurerId\n     */\n    private getQuestByAdventurer(adventurerId: string): QuestStoreState | undefined {\n        return Object.values(this.props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    }\n}\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.tavern,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(TavernStructureView);\n","import { EquipmentType } from \"definitions/items/equipment\";\nimport { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n    assignEquipment = \"assignEquipment\",\n}\n\nexport interface Action {\n    type: ActionType;\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends Action {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends Action {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport interface EquipmentAction extends Action {\n    item: Item;\n    equipmentType: EquipmentType;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n\nexport function assignEquipment(adventurerId: string, type: EquipmentType, item: Item): EquipmentAction {\n    return {\n        type: ActionType.assignEquipment,\n        adventurerId,\n        item,\n        equipmentType: type,\n    };\n}\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport ItemIcon from \"./ItemIcon\";\n\nexport interface Props {\n    index: number;\n    item: Item;\n    sourceType: DragSourceType;\n    sourceId?: string;\n    size?: IconSize;\n    onClick?: (event: React.MouseEvent) => void;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface InventoryItemDragInfo {\n    item: Item;\n    inventorySlot?: number;\n    sourceId?: string;\n    sourceType: DragSourceType;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\n    beginDrag(props: Props) {\n        // Return the data describing the dragged item\n        return {\n            inventorySlot: props.index,\n            item: props.item,\n            sourceId: props.sourceId,\n            sourceType: props.sourceType,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableItemIcon extends React.Component<Props & CollectedProps > {\n\n    public render() {\n        const { item, onClick, isDragging, connectDragSource, size } = this.props;\n\n        const handleClick = (event: React.MouseEvent) => {\n            if (onClick) {\n                onClick(event);\n            }\n        };\n        if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }\n        return connectDragSource(\n            <div>\n                <ItemIcon\n                    item = { item }\n                    onClick = { handleClick }\n                    size = { size }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\n","import { DragType } from \"constants/dragging\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props)  {\n        return props.empty;\n    },\n};\n\nexport interface Props {\n    empty: boolean;\n    onDrop: (item: any) => void;\n    size?: IconSize;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The InventorySlot displays a slot in which an item can be placed.\n */\nclass InventorySlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        const isActive = isOver && canDrop;\n\n        let borderColor = \"#1b8417\";\n        if (isActive) {\n            borderColor = \"#e2bc23\";\n        } else if (canDrop) {\n            borderColor = \"#7ea752\";\n        }\n        const className = \"inventory-item \" + getClassName(this.props.size);\n\n        return connectDropTarget(\n            <div className = { className }>\n                { this.props.children }\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(InventorySlot);\n","import DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport itemDefinitions from \"definitions/items\";\nimport {Item} from \"definitions/items/types\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    iconSize?: IconSize;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props & AppContextProps) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            /*if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }*/\n\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n        };\n\n        if (item) {\n            contents = <DraggableItemIcon\n                index = { i }\n                sourceId = { props.sourceId }\n                sourceType = { props.sourceType }\n                item = { item }\n            >\n            </DraggableItemIcon>;\n       }\n\n        const slot = <InventorySlot\n            key = { `inventory-slot-${i}` }\n            empty = { contents === undefined }\n            size = { props.iconSize }\n            onDrop = { handleDrop }\n        >\n                { contents }\n        </InventorySlot>;\n        slots.push(slot);\n   }\n    return <div className = \"inventory\">\n        {slots}\n    </div>;\n};\nexport default withAppContext(Inventory); // todo: we don't need appcontext\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n    deltaResources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox is used in the Warehouse to show a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n        resources,\n        deltaResources,\n    } = props;\n\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        const amount = props.resources[resource]!;\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        let delta;\n        if (deltaResources[resource]) {\n            delta = <span className = \"animate-up\">\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\n            </span>;\n        }\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { amount.toFixed(1) }\n            </div>\n            <div className = \"max\" >\n                { ` / ${props.maxResources[resource]}` }\n            </div>\n            <div className = \"delta\">\n                { delta }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport Inventory from \"components/ui/inventory/Inventory\";\nimport ResourcesBox from \"components/ui/resources/ResourcesBox\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { Item } from \"definitions/items/types\";\nimport structureDefinitions, {  Structure  } from \"definitions/structures\";\nimport { StructureDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/warehousestructureview.css\";\n\nexport interface DispatchProps {\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props  {\n}\n\nexport interface StateProps  {\n    level: number;\n    workers: number;\n    workersFree: number;\n    gold: number;\n    items: Array<Item|null>;\n    adventurersInTown: AdventurerStoreState[];\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\nconst warehouse = DragSourceType.warehouse;\n\nclass WarehouseStructureView extends React.Component<AllProps, LocalState> {\n    private resourcesDelta: ResourceStoreState;\n    private resourcesRef: HTMLFieldSetElement | null;\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedAdventurer: null,\n        };\n\n        this.resourcesDelta = {};\n        this.resourcesRef = null;\n    }\n\n    public render() {\n        const props = this.props;\n        const structureDefinition = structureDefinitions[Structure.warehouse] as StructureDefinition;\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\n        }\n        const level: number = props.level;\n        const displayName = TextManager.getStructureName(Structure.warehouse);\n\n        const createUpgradeRow = () => {\n            const gold = props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const handleDropItemWarehouse = (item: Item, fromSlot: number,\n                                         toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            switch (sourceType) {\n                case warehouse:\n                    if (props.onMoveItemInWarehouse) {\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\n                    }\n                    break;\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemFromAdventurer) {\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        const handleAdventurerTabSelected = (tabId: string) => {\n            this.setState({\n                selectedAdventurer: tabId,\n            });\n        };\n\n        const handleDropItemAdventurer = (item: Item, fromSlot: number,\n                                          toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            const adventurerId = this.state.selectedAdventurer!;\n            switch (sourceType) {\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemInInventory) {\n                        props.onMoveItemInInventory(adventurerId, fromSlot, toSlot);\n                    }\n                    break;\n                case warehouse:\n                    if (props.onMoveItemToAdventurer) {\n                        props.onMoveItemToAdventurer(adventurerId, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        let adventurerContent = null;\n        if (this.state.selectedAdventurer) {\n            const adventurer = props.adventurersInTown.find((a) => a.id === this.state.selectedAdventurer)!;\n            adventurerContent = <Inventory\n                sourceType = { warehouse }\n                items = { adventurer.inventory }\n                onDropItem = { handleDropItemAdventurer }\n            />;\n        }\n\n        const adventurersArea = <>\n            <Tabstrip className = \"adventurers-tabstrip\" onTabSelected = { (tabId: string) => handleAdventurerTabSelected(tabId) } >\n            { props.adventurersInTown.map((a) => {\n                return <Tab id = { a.id } key = { a.id }>\n                    <AdventurerAvatar adventurer = { a } className = \"common-icon-small\"/>\n                </Tab>;\n            }) }\n            </Tabstrip>\n            <div className = \"adventurer-info\">\n                { adventurerContent }\n            </div>\n        </>;\n\n        return (\n            <details open = { true } className = \"warehouse-structureview\">\n                <summary>{ displayName }</summary>\n                { createUpgradeRow() }\n                <fieldset className=\"resources\" ref = { (ref) => { this.resourcesRef = ref; }}>\n                    <legend>Resources</legend>\n                    <ResourcesBox\n                        resources = { props.resources }\n                        maxResources = { props.maxResources }\n                        deltaResources = { this.resourcesDelta }\n                    />\n                </fieldset>\n\n                <Inventory\n                    sourceType = { warehouse }\n                    items = { props.items }\n                    onDropItem = { handleDropItemWarehouse }\n                />\n                { adventurersArea }\n\n            </details>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<AllProps>) {\n        Object.keys(prevProps.resources).forEach((resource: string) => {\n            this.resourcesDelta[resource] = this.props.resources[resource]! - prevProps.resources[resource]!;\n        });\n\n        if (this.resourcesRef) {\n            this.resourcesRef.classList.remove(\"animate\");\n            setTimeout(() => {\n                if (this.resourcesRef) {\n                    this.resourcesRef.classList.add(\"animate\");\n                }\n            }, 200);\n        }\n    }\n}\n\nexport default WarehouseStructureView;\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n    const adventurersOnQuest = (quest: QuestStoreState): AdventurerStoreState[] => {\n        const party: string[] = quest.party;\n        return party.map((id: string) => findAdventurerById(id)!);\n    };\n\n    const findAdventurerById = (id: string): AdventurerStoreState | undefined => {\n        return adventurers.find((a) => a.id === id);\n    };\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\nconst getAdventurersInTown = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n    // Get an array of all adventurer ids on any active quest\n    const adventurersOnQuest = quests.reduce<string[]>((acc, val: QuestStoreState) => {\n        if (val.status === QuestStatus.active) {\n            acc.push(...val.party);\n        }\n        return acc;\n    }, []);\n\n    return adventurers.filter((a) => adventurersOnQuest.indexOf(a.id) === -1);\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersInTown = createSelector([\n    getAdventurers,\n    getQuests],\n    getAdventurersInTown,\n);\n","import { addItemToInventory, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse, moveItemInWarehouse, removeItemFromWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { upgradeStructure } from \"actions/structures\";\nimport WarehouseStructureView,\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\nimport { Item } from \"definitions/items/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectAdventurersInTown } from \"selectors/adventurers\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StoreState } from \"../../../stores\";\nimport { StructureStoreState } from \"../../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\n    const structureDefinition = structureDefinitions[Structure.warehouse] as WarehouseStructureDefinition;\n    const level: number = structureStore.level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    const adventurersInTown = selectAdventurersInTown(store);   // todo: refreshes too much. fix\n\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\n    return {\n        adventurersInTown,\n        gold: store.gold,\n        items: store.items,\n        level,\n        maxResources: levelDefinition.maxResources,\n        resources: store.resources,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number) {\n            const action1 = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToWarehouse(item, toSlot);\n            dispatch(action2);\n        },\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        // Moves item from warehouse to an adventurer\n        onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\n            const action1 = removeItemFromWarehouse(fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action2);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.warehouse,\n            }, LogChannel.town));\n        },\n    };\n}\n\n// export default compose(\n//     connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n// //    withAppContext,\n// )(WarehouseStructureView) as React.ComponentType<Props>;\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(WarehouseStructureView);\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport ResourceStructureView from \"containers/structures/ResourceStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst getStructureView = (structure: Structure) => {\n    const structureDefinition: StructureDefinition = structureDefinitions[structure as string];\n    switch (structureDefinition.type) {\n        case StructureType.production: {\n            return <ProductionStructureView type = { structure }/>;\n        }\n        case StructureType.resource: {\n            return <ResourceStructureView type = { structure }/>;\n        }\n        case StructureType.warehouse: {\n            return <WarehouseStructureView />;\n        }\n        case StructureType.tavern: {\n            return <TavernStructureView />;\n        }\n        default: {\n            return <div> { structure } </div>;\n        }\n    }\n};\n\nconst StructureDetails = (props: AllProps) => {\n    let view;\n    const structureState: StructureStoreState = props.structures[props.structure];\n    if (structureState.state === StructureState.Building) {\n        const progress = props.buildTask ? props.buildTask.progress : 1 ;\n        view = <div>\n            <Progressbar label = \"Building...\" progress= { progress } />\n        </div>;\n    } else {\n        view = getStructureView(props.structure) ;\n    }\n\n    return <fieldset className=\"structure-details\">\n        <legend>Structure</legend>\n        { view }\n    </fieldset>;\n};\n\nexport default StructureDetails;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport SquareIconButton from \"components/widgets/SquareIconButton\";\nimport * as React from \"react\";\n\nexport interface Props {\n    title: string;\n    backEnabled?: boolean;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n}\n\ntype AllProps = Props;\n\n/**\n *\n */\nconst Window: React.FunctionComponent<AllProps> = (props) => {\n\n    const handleClose = (e: React.MouseEvent) => {\n        if (props.onClose) {\n            props.onClose();\n        }\n    };\n    const handleBack = (e: React.MouseEvent) => {\n        if (props.onBack) {\n            props.onBack();\n        }\n    };\n\n    let BackButton = null;\n    if (props.backEnabled !== false) {\n         BackButton = <SquareIconButton className = \"back-button\" onClick = { handleBack } text = \"<\"/>;\n\n    }\n\n    let CloseButton = null;\n    if (props.closeEnabled !== false) {\n        CloseButton = <SquareIconButton className = \"close-button\" onClick = { handleClose } text = \"x\"/>;\n    }\n\n    return <div className = \"window\">\n        <div className = \"header\">\n            { BackButton }\n            <h3>{ props.title }</h3>\n            { CloseButton }\n        </div>\n        { props.children }\n    </div>;\n};\n\nexport default Window;\n","import \"components/ui/window/css/window.css\";\nimport Window, { Props } from \"components/ui/window/Window\";\nimport * as React from \"react\";\n\nexport const withWindow = <TWrappedComponentProps extends Props>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    return class WithWindow extends React.Component<TWrappedComponentProps> {\n\n        constructor(props: TWrappedComponentProps) {\n            super(props);\n        }\n\n        public render() {\n            return <Window { ...this.props } >\n                <WrappedComponent { ...this.props } />\n            </Window>;\n        }\n    };\n};\n","import { addGold } from \"actions/gold\";\nimport { addResources } from \"actions/resources\";\nimport StructureDetailsView, { DispatchProps, Props, StateProps } from \"components/StructureDetailsView\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>): DispatchProps {\n    return {\n        onCheatGold: (amount: number) => dispatch(addGold(amount)),\n        onCheatResources: (amount: ResourceStoreState) => dispatch(addResources(amount)),\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(StructureDetailsView) as React.ComponentType<Props & WindowProps>;\n","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps} from \"./AdventurerAvatar\";\nimport \"./css/droppableadventureravatar.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props extends AdventurerAvatarProps {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nclass DroppableAdventurerAvatar extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n\n        return connectDropTarget(\n            <div className=\"droppable-adventurer-avatar\">\n                <AdventurerAvatar\n                    adventurer = { this.props.adventurer }\n                    onClick = { this.props.onClick }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(DroppableAdventurerAvatar);\n","// todo: hooks!\n// https://github.com/react-dnd/react-dnd/pull/1244\nimport { DragType } from \"constants/dragging\";\nimport { getDefinition } from \"definitions/items\";\nimport { EquipmentDefinition, EquipmentType } from \"definitions/items/equipment\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/equipmentslot.css\";\nimport { InventoryItemDragInfo } from \"./DraggableItemIcon\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        const item = monitor.getItem().item;\n        const def = getDefinition(item);\n        // Can only drop the right equipment type\n        if (def.itemType !== ItemType.equipment) {\n            return false;\n        }\n        const equipmentDef = def as EquipmentDefinition;\n        return equipmentDef.equipmentType === props.type;\n    },\n};\n\nexport interface Props {\n    type: EquipmentType;\n    onDrop: (item: InventoryItemDragInfo) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The EquipmentSlot displays a slot in which an item can be placed.\n */\nconst EquipmentSlot = (props: React.PropsWithChildren<Props & DropSourceProps>) => {\n    const {\n        isOver,\n        canDrop,\n        connectDropTarget,\n    } = props;\n    const isActive = isOver && canDrop;\n    let borderColor = \"grey\";\n    if (isActive) {\n        borderColor = \"green\";\n    } else if (canDrop) {\n        borderColor = \"orange\";\n    }\n\n    return connectDropTarget(\n        <div  className = \"equipment-slot\" style = { { borderColor }}>\n            { props.children }\n        </div>,\n    );\n};\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(EquipmentSlot);\n","import { AppContext } from \"components/App\";\r\nimport { ContextType } from \"constants/context\";\r\nimport { DragSourceType } from \"constants/dragging\";\r\nimport { IconSize } from \"constants/icons\";\r\nimport { getDefinition } from \"definitions/items\";\r\nimport { EquipmentType } from \"definitions/items/equipment\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport \"./css/adventurerinfo.css\";\r\nimport DraggableItemIcon, { InventoryItemDragInfo } from \"./DraggableItemIcon\";\r\nimport EquipmentSlot from \"./EquipmentSlot\";\r\nimport Inventory from \"./inventory/Inventory\";\r\n\r\nexport interface Props {\r\n    adventurer: AdventurerStoreState;\r\n}\r\n\r\nexport interface DispatchProps {\r\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\r\n    onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => void;\r\n    onAssignEquipment: (adventurerId: string, type: EquipmentType, item: Item) => void;\r\n}\r\n\r\ntype AllProps = Props & DispatchProps;\r\n\r\nconst AdventurerInfo = (props: AllProps) => {\r\n\r\n    const context = React.useContext(AppContext)!;\r\n    const adventurer = props.adventurer;\r\n    const attributes = Object.keys(adventurer.stats).map((stat) => {\r\n        const value: number = adventurer.stats[stat];\r\n        return <div key = { `${adventurer.id}-${stat}`} > <b>{ stat }</b>: { value.toFixed(1) } </div>;\r\n    });\r\n    // const equipmentList = Object.keys(getEquipment(.map((equipment) =) {\r\n    //     return <div key = { `${adventurer.id}-${equipment}` } ><b>{ equipment }</b>: { getEquipment(equipment] }  </di)>;\r\n    // });\r\n\r\n    const handleDropItemEquipment = (type: EquipmentType, dragInfo: InventoryItemDragInfo) => {\r\n        const item = dragInfo.item;\r\n        props.onRemoveItemFromInventory(adventurer.id, dragInfo.inventorySlot!);\r\n        props.onAssignEquipment(adventurer.id, type, item);\r\n    };\r\n\r\n    const getEquipmentSlot = (type: EquipmentType) => {\r\n        // returns EquipmentSlot\r\n        const item: Item | undefined = adventurer.equipment[EquipmentType[type]];\r\n        let contents = null;\r\n\r\n        if (item) {\r\n            const itemRef: React.RefObject<any> = React.createRef();\r\n            const handleClick = (event: React.MouseEvent) => {\r\n                const origin = (event.currentTarget as HTMLElement);\r\n                const originRect = origin.getBoundingClientRect();\r\n                context.onContextualObjectActivated(\r\n                    ContextType.item,\r\n                    getDefinition(item),\r\n                    itemRef,\r\n                    originRect,\r\n                );\r\n                event.stopPropagation();\r\n            };\r\n\r\n            contents = <DraggableItemIcon\r\n                index = { type }\r\n                sourceId = { adventurer.id }\r\n                sourceType = { DragSourceType.adventurerEquipment }\r\n                item = { item }\r\n                onClick = { handleClick }\r\n                ref = { itemRef }\r\n                size = { IconSize.medium }\r\n            >\r\n            </DraggableItemIcon>;\r\n        }\r\n\r\n        return <EquipmentSlot\r\n            onDrop = { (dragInfo: InventoryItemDragInfo) => handleDropItemEquipment(type, dragInfo) }\r\n            type = { type }>\r\n                { contents }\r\n        </EquipmentSlot>;\r\n    };\r\n\r\n    const equipmentList = <ul>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.head) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.shoulders) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.chest) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.hands) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.legs) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.feet) }\r\n        </li>\r\n    </ul>;\r\n\r\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number): void => {\r\n        // TODO: what if the source is NOT adventurer?\r\n        if (props.onMoveItemInInventory) {\r\n            props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\r\n        }\r\n    };\r\n    return (\r\n        <div className = \"adventurer-info\">\r\n            <div className = \"left\">\r\n                <div className = \"name\">\r\n                    <b>{ adventurer.name }</b>\r\n                </div>\r\n                <div className = \"attributes\">\r\n                    { attributes }\r\n                </div>\r\n                <div className = \"equipment\">\r\n                    { equipmentList }\r\n                </div>\r\n            </div>\r\n            <div className = \"right\">\r\n                <Inventory\r\n                    sourceType = { DragSourceType.adventurerInventory }\r\n                    sourceId = { adventurer.id }\r\n                    items = { adventurer.inventory }\r\n                    onDropItem = { handleDropItemInventory }\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdventurerInfo;\r\n","import { assignEquipment, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\r\nimport AdventurerInfo, { DispatchProps, Props } from \"components/ui/AdventurerInfo\";\r\nimport { EquipmentType } from \"definitions/items/equipment\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction, Dispatch } from \"redux\";\r\nimport { StoreState } from \"stores\";\r\n\r\n// todo: perhaps not use container, just pass dispatch callbacks as props?\r\nconst mapStateToProps = (store: StoreState) => {\r\n\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\r\n    return {\r\n        // Equipment gets assigned to a slot\r\n        onAssignEquipment: (adventurerId: string, type: EquipmentType, item: Item) => {\r\n            const action = assignEquipment(adventurerId, type, item);\r\n            dispatch(action);\r\n        },\r\n        // Moves item within an adventurers' inventory\r\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\r\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\r\n            dispatch(action);\r\n        },\r\n        // Removes an item from an adventurers' inventory\r\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot) => {\r\n            const action = removeItemFromInventory(adventurerId, fromSlot);\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect<object, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurerInfo);\r\n","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (store: StoreState, quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(store, id)!);\n};\n\nexport const findAdventurerById = (store: StoreState, id: string): AdventurerStoreState | undefined => {\n    return store.adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n","import { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { randomInt } from \"utils/random\";\n\n/**\n * The Oracle is a helper class for retrieving relevant data during encounters\n */\nexport class Oracle {\n    public readonly questName: string;\n    public readonly store: StoreState;\n\n    constructor(questName: string, store: StoreState) {\n        this.questName = questName;\n        this.store = store;\n    }\n\n    /**\n     * Returns the questVars of the quest that this encounter is part of\n     */\n    public get questVars(): any {\n        return this.quest.questVars;\n    }\n\n    /**\n     * Returns the quest that this encounter is part of\n     */\n    public get quest(): QuestStoreState {\n        return this.store.quests.find((q) => q.name === this.questName)!;\n    }\n\n    /**\n     * Returns all adventurers on this quest\n     */\n    public get adventurers(): AdventurerStoreState[] {\n        return adventurersOnQuest(this.store, this.quest);\n    }\n\n    /**\n     * Returns the adventurer in the encounter with highest given stat\n     * @param stat\n     */\n    public getAdventurerWithHighest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (b.stats[stat] - a.stats[stat]))[0];\n    }\n\n    /**\n     * Returns the adventurer in the encounter with lowest given stat\n     * @param stat\n     */\n    public getAdventurerWithLowest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (a.stats[stat] - b.stats[stat]))[0];\n    }\n\n    /**\n     * Returns a random adventurer in the party\n     */\n    public getRandomAdventurer(): AdventurerStoreState {\n        return this.adventurers[randomInt(0, this.adventurers.length)];\n    }\n}\n\nexport const oracles: any = {\n    // This will be the global store to hold all oracles, keyed by quest\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addItemToInventory } from \"actions/adventurers\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Item } from \"../items/types\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const backstabbed: EncounterDefinition = {\n    name: Encounter.backstabbed,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-backstabbed-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            fight: \"Fight the brigands\",\n            flight: \"Run away!\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        switch (option) {\n            case \"flight\":\n                return \"You run away like a pussy\";\n            case \"fight\":\n                const finder = oracle.getRandomAdventurer();\n                dispatch(addItemToInventory(finder.id, Item.deedForWeaponsmith));\n                return `The party fights off the rogues. One of them drops a document. ${finder.name} picks it up`;\n            default:\n                throw new Error(`Unhandled option '${option}`);\n        }\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { startEncounter, updateQuestVars, advanceQuest } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const goblinHouseOutside: EncounterDefinition = {\n    name: Encounter.goblinHouseOutside,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseOutside-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Investigate\",\n            leave: \"Keep walking\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"investigate\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            case \"leave\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\nexport const goblinHouseHallway: EncounterDefinition = {\n    name: Encounter.goblinHouseHallway,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseHallway-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Go inside the house\",\n            leave: \"Leave the premise\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"leave\":\n                // const nextEncounter = startEncounter(quest.name, goblinhouseInside)\n                const action = advanceQuest(oracle.questName);\n                dispatch(action);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party escapes the house unscathed`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\n// todo: other goblinHouse encounters\n","import { backstabbed } from \"./backstabbed\";\nimport { goblinHouseHallway, goblinHouseOutside } from \"./goblinHouse\";\nimport { theBigTree } from \"./theBigTree\";\nimport { EncounterDefinition } from \"./types\";\n\nconst all = {\n    backstabbed,\n    goblinHouseHallway,\n    goblinHouseOutside,\n    theBigTree,\n};\n\nexport default all;\n\nexport function getDefinition(encounter: string): EncounterDefinition {\n    return all[encounter];\n}\n","// tslint:disable:object-literal-sort-keys\nimport { addGold } from \"actions/gold\";\nimport { updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { randomInt } from \"utils/random\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\nexport interface QuestVars {\n    treeState: string;\n}\n\nexport const theBigTree: EncounterDefinition = {\n    name: Encounter.theBigTree,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     return `A huge tree blocks the way. ${pyromancer.name} offers to burn it`;\n        // }\n        return { key: \"encounter-thebigtree-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        //const store = oracle.store;\n        const strongest = oracle.getAdventurerWithHighest(\"strength\");\n        //        const strongest = { name: \"<<NAME>>\" };\n        const options: Record<string, string> = {\n            walkAround: \"Walk around the tree\",\n            lift: `Lift the tree (${strongest.name})`,\n        };\n        // todo: should be 'type' or 'class'\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     options.burn = \"Burn it down (${pyromancer.name}\";\n        // }\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"lift\":\n                const strongest = oracle.getAdventurerWithHighest(\"strength\");\n                questVars.treeState = \"lifted\";\n\n                const action = updateQuestVars(quest.name, questVars);\n                dispatch(action);\n\n                const goldAmount = randomInt(2, 5);\n                const goldAction = addGold(goldAmount);\n                dispatch(goldAction);\n\n                // tslint:disable-next-line:max-line-length\n                return `${strongest.name} heaves and lifts the heavy tree, moving it aside. Underneath your party finds ${goldAmount} gold coins`;\n\n                // if(random() < strongest.stats.strenth) {\n                //     questState.bigTreeState = \"lifted\";\n                //     giveGold(3);\n                //     return \"${strongest.name} heaves and lifts the heavy tree,\n                // moving it aside. Underneath your party finds 3 gold coins\";\n                // }\n                // else {\n                //     strongest.loseHealth(20);\n                //     if(strongest.isDead){\n                //         return \"${strongest.name} attempted to lift the\n                // tree but it is too heavy, causing him to die\".\n                //     }\n                //     return \"%{strongest.name} attempted to lift the tree but it is too heavy, losing 20 hp\";\n                // }\n            // case \"burn\":\n            //     const pyrommancer = store.adventurers.find(a => a.type == \"pyromancer\")\n            //     questState.bigTreeState = \"burned\";\n            //     return \"${pyromancer.name} cackles as you sets the tree ablaze.\n            // The party steps over the smouldering ashes and continues\"\n            // }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n","import { InventoryItemDragInfo } from \"components/ui/DraggableItemIcon\";\nimport DroppableAdventurerAvatar from \"components/ui/DroppableAdventurerAvatar\";\nimport Inventory from \"components/ui/inventory/Inventory\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { TextEntry } from \"constants/text\";\nimport AdventurerInfo from \"containers/ui/AdventurerInfo\";\nimport { getDefinition as getEncounterDefinition } from \"definitions/encounters\";\nimport { EncounterDefinition } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition as getQuestDefinition, QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport React from \"react\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/partywindow.css\";\n\nexport interface StateProps {\n    adventurers: AdventurerStoreState[];\n    store: StoreState;\n    lastLog?: TextEntry;\n}\n\nexport interface Props {\n    quest: QuestStoreState;\n}\n\nexport interface DispatchProps {\n    onDispatch: Dispatch<AnyAction>;\n    onAdvanceQuest: (quest: string) => void;\n    onUpdateEncounterResult: (nodeIndex: number, result: string) => void;\n    onMoveItemInInventory?: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToOtherAdventurer?: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => void;\n}\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n\n// export default\nclass PartyWindow extends React.Component<AllProps, LocalState> {\n\n    // This Component has local state, so it's a class\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            selectedAdventurer: null,\n        };\n    }\n\n    public render() {\n        return (\n            <div className = \"partywindow\">\n                <div className = \"avatars\">\n                    { this.getAvatars() }\n                </div>\n                { this.getBottomPart() }\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (prevProps.quest !== this.props.quest) {\n            // The active quest has changed, so it doesn't make sense to keep any adventurer selected\n            this.setState({\n                selectedAdventurer: null,\n            });\n        }\n    }\n\n    private getAdventurerInfo(adventurer: AdventurerStoreState): any {\n        if (!adventurer) {\n            return null;\n        }\n        return <AdventurerInfo adventurer = { adventurer } />;\n    }\n\n    private handleAvatarClick(adventurerId: string | null): void {\n        if (this.state.selectedAdventurer === adventurerId) {\n            adventurerId = null;\n        }\n        this.setState({\n            selectedAdventurer: adventurerId,\n        });\n    }\n\n    private handleEncounterOptionClick(encounter: EncounterDefinition, option: string, oracle: any): any {\n        const result = encounter.answer(option, oracle, this.props.onDispatch);\n\n        /*if (!isEqual(questVars, this.props.quest.questVars)){\n            this.props.onUpdateQuestVars(questVars);\n        }*/\n        this.props.onUpdateEncounterResult(this.props.quest.progress, result);\n       // this.props.onAdvanceQuest(this.props.quest.name);\n    }\n\n    private getAvatars = () => {\n        return this.props.adventurers.map((adventurer: AdventurerStoreState) => {\n            const handleDropItem = (dragInfo: InventoryItemDragInfo) => {\n                const fromAdventurer = this.state.selectedAdventurer!; // The adventurer that has the item\n                if (adventurer.id === fromAdventurer) {\n                    // Dropping on yourself.. nothing happens\n                    return;\n                }\n\n                if (this.props.onMoveItemToOtherAdventurer) {\n                    const {\n                        inventorySlot: fromSlot,\n                    } = dragInfo;\n                    this.props.onMoveItemToOtherAdventurer(fromAdventurer, fromSlot!, adventurer.id);\n                }\n            };\n\n            const selected = this.state.selectedAdventurer === adventurer.id;\n            return <DroppableAdventurerAvatar\n                key = { `${adventurer.id}-avatar` }\n                className = { (selected ? \" selected\" : \"\") }\n                adventurer = { adventurer }\n                onClick = { () => this.handleAvatarClick(adventurer.id) }\n                onDrop = { handleDropItem }\n            />;\n        });\n    }\n\n    private getBottomPart = () => {\n\n        if (this.state.selectedAdventurer) {\n            const adventurer: AdventurerStoreState = this.props.adventurers\n                .find((a) => a.id === this.state.selectedAdventurer)!;\n            return this.getAdventurerInfo(adventurer);\n        } else {\n            const quest = this.props.quest;\n            const questDefinition: QuestDefinition = getQuestDefinition(quest.name);\n            const progress: number = Math.floor(quest.progress);\n            const questNode: QuestNode = questDefinition.nodes[progress];\n\n            let message = <p></p>;\n            let actions = <p></p>;\n\n            switch (questNode.type) {\n                case QuestNodeType.nothing: {\n                    message = <div> {\n                        this.props.lastLog && TextManager.getTextEntry(this.props.lastLog)\n                    } </div>;\n                    break;\n                }\n                case QuestNodeType.encounter: {\n                    // if (quest.encounterResults[quest.progress]) {\n                    //     message = <p> { quest.encounterResults[quest.progress] } </p>;\n                    //     break;\n                    // }\n                    const store = this.props.store;\n                    const encounter = getEncounterDefinition(quest.currentEncounter!);\n                    const oracle = encounter.getOracle(quest.name, store);\n                    const descriptionTextEntry = encounter.getDescription(oracle);\n                    const descriptionText = TextManager.getTextEntry(descriptionTextEntry);\n\n                    message = <div><p> { descriptionText } </p></div>;\n\n                    const options = encounter.getOptions(oracle);\n\n                    actions = <ul>\n                        { Object.keys(options).map((o) => <li key={ o }>\n                            <button onClick= { () => this.handleEncounterOptionClick(encounter, o, oracle) }>\n                                { o }\n                            </button>{ options[o]}\n                        </li>)}\n                    </ul>;\n\n                    break;\n                }\n                case QuestNodeType.boss: {\n                    message = <p> { \"Boss fight!\" } </p>;\n                    break;\n                }\n            }\n\n            return (\n            <div className=\"questlog\">\n                { message }\n                <div className=\"actions\">\n                    { actions}\n                </div>\n            </div>);\n        }\n    }\n}\n\nexport default PartyWindow;\n","import { moveItemInInventory, moveItemToOtherAdventurer } from \"actions/adventurers\";\nimport { updateEncounterResult } from \"actions/quests\";\nimport { advanceQuest } from \"actions/quests\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport PartyWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/PartyWindow\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { selectLastQuestLogEntry } from \"selectors/quests\";\nimport { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const adventurers = adventurersOnQuest(store, ownProps.quest);\n    const lastLog = selectLastQuestLogEntry(store, ownProps.quest.name);\n    return {\n        adventurers,\n        lastLog,\n        store, // needed for the oracle, causes update all the time :/\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n            dispatch(advanceQuest(quest));\n        },\n        onDispatch: dispatch,\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onMoveItemToOtherAdventurer: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => {\n            const action = moveItemToOtherAdventurer(fromAdventurerId, fromSlot, toAdventurerId);\n            dispatch(action);\n        },\n        onUpdateEncounterResult: (nodeIndex: number, result: string) => {\n            const action = updateEncounterResult(ownProps.quest.name, nodeIndex, result);\n            dispatch(action);\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(PartyWindow) as React.ComponentType<Props & WindowProps>;\n","\nimport questDefinitions, { QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/questlinevisualization.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n    quest: QuestStoreState;\n    selected: boolean;\n    onSelectQuest: (questName: string) => void;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    // onAdvanceQuest: (questName: string) => void;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface StateProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n/**\n * Shows quest line\n * @param props\n */\nexport default function(props: AllProps) {\n    const { quest } = props;\n    const questDefinition: QuestDefinition = questDefinitions[quest.name];\n\n    const createNodeVisualization = (node: QuestNode, index: number) => {\n        const progress: number = Math.floor(quest.progress);\n        const className = progress === index ? \"active\" : \"\";\n        const spanProps = {\n            className,\n            key: `node_${index}`,\n        };\n        switch (node.type) {\n            case QuestNodeType.encounter:\n                return <span title=\"encounter\" { ...spanProps }>*</span>;\n            case QuestNodeType.boss:\n                return <span title=\"boss\" { ...spanProps }>#</span>;\n            case QuestNodeType.nothing:\n            default:\n                return <span { ...spanProps }>-</span>;\n            }\n    };\n\n    const questNodes = questDefinition.nodes.map((n, i) => createNodeVisualization(n, i));\n\n    return <div className=\"questlinevisualization\">\n        <div className=\"questname\"> { TextManager.getQuestTitle(quest.name) } </div>\n        { questNodes }\n        { props.selected ? <span className=\"selected\">selected</span> : <button className=\"select\"\n            onClick={ () => props.onSelectQuest(quest.name)}>select</button> }\n    </div>;\n}\n","import PartyWindow from \"containers/windows/PartyWindow\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport QuestLineVisualization from \"../world/QuestLineVisualization\";\nimport \"./css/realworldview.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface DispatchProps {\n    onAdvanceQuest: (questName: string) => void;\n}\n\nexport interface StateProps {\n    quests: QuestStoreState[];\n}\n\ninterface LocalState {\n    selectedQuest: string | null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n/**\n * Temporary wrapper around PartyScreen. Shows quest line\n * @param props\n */\nexport default class RealWorldView extends React.Component<AllProps, LocalState> {\n\n    // This Component has local state, so it's a class\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\n    }\n\n    public render() {\n        const selectedQuest = this.props.quests.find((q) => q.name === this.state.selectedQuest);\n        const activeQuests = this.props.quests.filter((q) => q.status === QuestStatus.active );\n        const questLines = activeQuests.map((q) => {\n            return <QuestLineVisualization key={ q.name }\n                selected={q === selectedQuest}\n                quest={q}\n                onSelectQuest={() => this.handleSelectQuest(q.name)}\n            />;\n        });\n\n        return <div className=\"realworldview\">\n            <fieldset className=\"progress\">\n                <legend>Quest progress</legend>\n                {questLines}\n            </fieldset>\n        </div>;\n    }\n\n    public handleSelectQuest(questName: string) {\n        this.setState({\n            selectedQuest: questName,\n        });\n        const quest = this.props.quests.find((q) => q.name === questName)!;\n        const title = TextManager.getQuestTitle(quest.name);\n        const window = <PartyWindow quest = { quest }  title = { title } />;\n        this.props.onOpenWindow(window);\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n    }\n\n    private playMusic() {\n       SoundManager.playMusicTrack(MusicTrack.world);\n    }\n\n}\n","import RealWorldView,\n    { DispatchProps, Props, StateProps } from \"components/partyScreen/RealWorldView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealWorldView) as React.ComponentType<Props>;\n","import \"components/ui/popup/css/popup.css\";\nimport * as React from \"react\";\n\nconst ARROW_SIZE = 8; // warning: sync to popup.css var\nconst PADDING = 8;\n\n// Sharing context within the entire App\nexport interface PopupProps {\n    containerRect: ClientRect;\n    referenceRect: ClientRect;\n    placement?: Placement;\n    children: any;\n}\n\nexport enum Placement {\n    bottom,\n    top,\n    left,\n    right,\n}\n\nexport const withPopup = <TWrappedComponentProps extends PopupProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n\n    const WithPopup = (props: TWrappedComponentProps) => {\n\n        const ref = React.useRef<HTMLDivElement>(null);\n        const [ placement, setPlacement ] = React.useState<Placement>(props.placement || Placement.bottom);\n\n        const containerRect = props.containerRect;\n        const referenceRect = props.referenceRect;\n\n        React.useEffect(() => {\n            // Reposition if needed\n            const popupElement = ref.current!;\n            const popupRect = popupElement.getBoundingClientRect();\n\n            // Flip vertically\n            switch (placement) {\n                case Placement.top:\n                    if (popupRect.top - popupRect.height - ARROW_SIZE - PADDING < containerRect.top) {\n                        // Too high, place underneath\n                        setPlacement(Placement.bottom);\n                        return;\n                    }\n                case Placement.bottom:\n                    if (popupRect.top + popupRect.height + ARROW_SIZE + PADDING > containerRect.height ) {\n                        // Too low, place top\n                        setPlacement(Placement.top);\n                        return;\n                    }\n            }\n            popupElement.style.opacity = \"1\"; // animated through css\n\n            // Check left bounding edge\n            if (popupRect.left < containerRect.left + PADDING) {\n                const offset = containerRect.left - popupRect.left + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${offset}px)`;\n            }\n\n            // Check right bounding edge\n            if (popupRect.right > containerRect.right - PADDING) {\n                const offset = popupRect.right - containerRect.right + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${-offset}px)`;\n            }\n        });\n\n        let x: number = 0;\n        let y: number = 0;\n        let className: string = \"\";\n\n        switch (placement) {\n            case Placement.bottom:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top + referenceRect.height;\n                className = \"popup-bottom\";\n                break;\n            case Placement.top:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top;\n                className = \"popup-top\";\n                break;\n        }\n\n        return (\n            <div className = { `popup ${className}` }\n                style = {{\n                    left: x,\n                    opacity: 0,\n                    top: y,\n                }}\n                ref = { ref }\n            >\n                <div className = \"popup-arrow\"></div>\n                <div className = \"popup-content\">\n                    <WrappedComponent {...props } />\n                </div>\n            </div>\n        );\n    }\n    return WithPopup;\n};\n// export const withPopup = <P extends object>(Component: React.ComponentType<P>): React.FC<P & PopupProps> => ({...props}: PopupProps) => {\n//     return     <div className = \"popup\" style = {{ background: \"pink\" }} >\n//          <Component {...props as P} />\n//     </div>\n// };\n","\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface ModifyWorkersAction extends Action {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","export const manifest = [\n    \"img/town/effects/plasma_beam_heavy_green.png\",\n    \"img/town/effects/smoke.png\",\n    \"img/town/sky.jpg\",\n    \"img/town/lighthouse.png\",\n    \"img/town/tavern.png\",\n    \"img/town/mill.png\",\n    \"sound/fx/button-click.ogg\",\n    \"sound/music/Soliloquy.mp3\",\n    \"sound/music/TheLoomingBattle.ogg\",\n\n];\n","import { Howl } from \"howler\";\nimport * as React from \"react\";\nimport Indicator from \"./Indicator\";\n\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\nexport interface Props {\n    manifest: string[];\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\n}\n\nexport enum MediaType {\n    image,\n    sound,\n}\n\nexport interface MediaItem {\n    url: string;\n    mediaType: MediaType;\n    content?: HTMLImageElement | Howl;\n    sound?: Howl;\n}\n\ninterface State {\n    itemsLoaded: number;\n    completed: boolean;\n}\n\nexport default class Preloader extends React.Component<Props, State> {\n//    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            completed: false,\n            itemsLoaded: 0,\n        };\n    }\n\n    public componentDidMount() {\n        // this.mounted = true;\n        this.loadMedia();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        // const { images } = this.props;\n        // const oldImages = new Set(prevProps.images);\n\n        // let hasChanged = false;\n        // for (let i = 0; i < images.length; i += 1) {\n        //     const image = images[i];\n        //     if (!oldImages.has(image)) {\n        //         hasChanged = true;\n        //         break;\n        //     }\n        // }\n\n        // if (hasChanged) {\n        //     this.loadImages();\n        // }\n        // todo: implement\n    }\n\n    public componentWillUnmount() {\n        // this.mounted = false;\n        // if (this.autoResolveTimeout) {\n        //     clearTimeout(this.autoResolveTimeout);\n        // }\n    }\n\n    public render() {\n//        console.log(`loaded: ${this.state.itemsLoaded} `);\n        const { children, manifest } = this.props;\n        const complete = this.state.completed;\n\n        const indicator = <Indicator\n            itemsLoaded = { this.state.itemsLoaded }\n            itemsTotal = { manifest.length }\n        />;\n\n        return complete ? children : indicator;\n\n    }\n\n    protected loadMedia = () => {\n        // todo: what if props get set at runtime\n        this.setState({\n            itemsLoaded: 0,\n        });\n\n        const promises = this.props.manifest\n            .map((url) => this.loadItem(url)\n            // tslint:disable-next-line:no-console\n            .catch((err) => console.error(err)));\n\n        Promise.all(promises).then((results) => {\n            if (this.props.onLoadComplete) {\n                this.props.onLoadComplete(media);\n            }\n            this.setState({\n                completed: true,\n            });\n        });\n    }\n\n    protected loadItem = async (url: string): Promise<MediaItem> => {\n        if (media.some((m) => m.url === url)) {\n            // tslint:disable-next-line:no-console\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\n        }\n        const mediaType = getType(url);\n        let item;\n        if (mediaType === MediaType.image) {\n            // try {\n            const value = await loadImage(url);\n            // console.log(`loaded ${url}`); // tODO: remove\n            item = {\n                content: value,\n                mediaType,\n                url,\n            } ;\n            // } catch (e) {\n            //     throw Error(`Could not load image with url '${url}'`);\n            // }\n        }\n        if (mediaType === MediaType.sound) {\n            const value = new Howl({\n                src: [ url ],\n            });\n            item = {\n                content: value,\n                mediaType,\n                url,\n            };\n        }\n        if (item) {\n            media.push(item);\n            this.setState({\n                itemsLoaded: this.state.itemsLoaded + 1,\n            });\n            return item;\n        } else {\n            throw new Error(`Unknown error while trying to load ${url}`);\n        }\n    }\n}\n\nconst media: MediaItem[] = [];\n\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\n    const image = new Image();\n    image.src = url;\n\n    return new Promise((resolve, reject) => {\n        if (image.naturalWidth) {\n            resolve(image);\n        } else if (image.complete) {\n            reject(null);\n        } else {\n            image.addEventListener(\"load\", check);\n            image.addEventListener(\"error\", check);\n        }\n        function check() {\n            if (image.naturalWidth) {\n                resolve(image);\n            } else {\n                reject(null);\n            }\n            image.removeEventListener(\"load\", check);\n            image.removeEventListener(\"error\", check);\n        }\n    });\n};\n\nconst getType = (url: string): MediaType => {\n    url = url.toLowerCase();\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\n        return MediaType.image;\n    }\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\n        return MediaType.sound;\n    }\n    throw Error(`Could not determine type for ${url}`);\n};\n","import { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport structureDefinitions, { Structure  } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/cheatbox.css\";\n\nexport interface DispatchProps {\n    onCheatGold?: (amount: number) => void;\n    onCheatWorkers?: (amount: number) => void;\n    onCheatResources?: (amount: number) => void;\n    onCheatItem?: (item: Item) => void;\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n    gold: number;\n    workers: number;\n    resources: number;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\nclass CheatWindow extends React.Component<AllProps, LocalState> {\n\n    private itemSelectRef: React.RefObject<HTMLSelectElement>;\n    /**\n     *\n     */\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            gold: 50,\n            resources: 50,\n            workers: 10,\n        };\n\n        this.itemSelectRef = React.createRef();\n    }\n\n    public render() {\n\n        const getStructureRow = (structure: Structure) => {\n            const structureDef = structureDefinitions[structure];\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            const levelDef = structureDef.levels[structureStore.level];\n\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <div\n                className=\"label-dropdown\"\n                key={structure}\n            >\n                <label title={structure}>\n                    { `${displayName}` }\n                </label>\n                <input\n                    key={structure}\n                    type=\"checkbox\"\n                    checked={this.props.structures[structure].state === StructureState.Built }\n                    onChange={ () => this.handleChangeStructureState(structure, this.props.structures[structure].state !== StructureState.Built)}\n                />\n            </div>;\n        };\n\n        const structures = Object.keys(this.props.structures)\n            .map((structure) => getStructureRow(structure as Structure));\n\n        const getItemTypeOptions = (type: ItemType) => {\n            return Object.keys(Item)\n                // tslint:disable-next-line: triple-equals\n                .filter((item: string) => getDefinition(item as Item).itemType == type)\n                .map((item: string) => getItemOption(item as Item));\n        };\n\n        const getItemOption = (item: Item) => {\n            return <option value = { item } key = { item }>\n                { TextManager.getItemName(item) }\n            </option>;\n        };\n\n        const items = Object.keys(ItemType)\n            .filter((val: any) => !isNaN(val))\n            .map((type: string) => {\n            return <optgroup label = { ItemType[type] } key = { type }>\n                { getItemTypeOptions(type as unknown as ItemType) }\n            </optgroup>;\n        });\n\n        return (\n            <div className=\"cheat-box\">\n                <div className=\"label-numberbox-button\">\n                    <label>Gold</label>\n                    <input type=\"number\"\n                        value= {this.state.gold}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeGold }>\n                    </input>\n                    <button onClick= { this.handleCheatGold }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Workers</label>\n                    <input type=\"number\"\n                        value= {this.state.workers}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeWorkers }>\n                    </input>\n                    <button onClick= { this.handleCheatWorkers }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Resources</label>\n                    <input type=\"number\"\n                        value= {this.state.resources}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeResources }>\n                    </input>\n                    <button onClick= { this.handleCheatResources }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Items</label>\n                    <select style={{ width: \"150px\"}} ref = { this.itemSelectRef }>\n                        { items }\n                    </select>\n                    <button onClick= { this.handleCheatItem }>Add</button>\n                </div>\n                { structures }\n            </div>\n        );\n    }\n\n    private handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const amount = this.state.gold;\n        if (this.props.onCheatGold) { this.props.onCheatGold(amount); }\n    }\n\n    private handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const amount = this.state.workers;\n        if (this.props.onCheatWorkers) { this.props.onCheatWorkers(amount); }\n    }\n\n    private handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        if (this.props.onCheatResources) { this.props.onCheatResources(this.state.resources); }\n    }\n\n    private handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const item = this.itemSelectRef.current!.value as Item;\n        if (this.props.onCheatItem) { this.props.onCheatItem(item); }\n    }\n\n    private handleChangeStructureState = (structure: Structure, checked: boolean) => {\n        if (this.props.onCheatStructureState) {\n            this.props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\n        }\n    }\n\n    private handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.value);\n        this.setState({\n            gold: amount,\n        });\n    }\n\n    private handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.value);\n        this.setState({\n            workers: amount,\n        });\n    }\n\n    private handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.checked);\n        this.setState({\n            resources: amount,\n        });\n    }\n}\n\nexport default CheatWindow;\n","import { Resource } from \"definitions/resources\";\n\nexport const resourceOrder = [\n    Resource.food,\n    Resource.wood,\n    Resource.stone,\n    Resource.fabric,\n    Resource.leather,\n];\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/CheatWindow\";\nimport { resourceOrder } from \"constants/resources\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => {\n            dispatch(addGold(amount));\n            dispatch(addLogEntry(\"common-cheat-gold-added\", { amount }, LogChannel.common));\n        },\n        onCheatItem: (item: Item) => {\n            dispatch(addItemToWarehouse(item));\n            dispatch(addLogEntry(\"common-cheat-item-added\", { item }, LogChannel.common));\n        },\n        onCheatResources: (amount: number) => {\n            // Create ResourceStoreState where value of each resource is `amount`\n            const resources = resourceOrder.reduce((acc: ResourceStoreState, resource) => {\n                acc[resource] = amount;\n                return acc;\n            }, {});\n\n            dispatch(addResources(resources));\n            dispatch(addLogEntry(\"common-cheat-resources-added\", { amount }, LogChannel.common));\n        },\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => {\n            dispatch(addWorkers(amount));\n            dispatch(addLogEntry(\"common-cheat-workers-added\", { amount }, LogChannel.common));\n        },\n    };\n};\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(CheatWindow) as React.ComponentType<Props & WindowProps>;\n","import { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow from \"containers/windows/CheatWindow\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { compose } from \"redux\";\nimport \"./css/cheatbox.css\";\n\nexport interface DispatchProps {\n}\n\nexport interface StateProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\nclass Menu extends React.Component<AllProps & AppContextProps, LocalState> {\n\n    constructor(props: AllProps & AppContextProps) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    public render() {\n\n        const handleClickCheats = () => {\n            const window = <CheatWindow title = \"Cheats\" />;\n            this.props.onOpenWindow(window);\n        };\n        return (\n            <div className=\"menu\">\n                <ul>\n                    <li onClick = { handleClickCheats }>Cheats!</li>\n                </ul>\n            </div>\n        );\n    }\n\n}\n\nexport default compose(\n    withWindow,\n    withAppContext,\n)(Menu) as React.ComponentType<AllProps>;\n","import \"components/ui/css/common/icon.css\";\nimport { resourceOrder } from \"constants/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcebar.css\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props {\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n    resources: ResourceStoreState;\n}\n\nconst Resourcebar = (props: Props & StateProps & DispatchProps) => {\n\n    const createItem = (icon: string, amount: number, title: string) => {\n        return <li title = { title } key = { title }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${icon})`,\n            }}></div>\n            <div className = \"amount\">\n                { amount.toFixed(0) }\n            </div>\n        </li>;\n    };\n\n    const resources = resourceOrder.map((resource) => {\n        const resourceDescription = resourceDescriptions[resource];\n        return createItem(resourceDescription.iconImg, props.resources[resource as string], TextManager.getResourceName(resource));\n    });\n\n    resources.push(\n        createItem(\"/img/resources/worker.png\", props.workersFree, \"workers\"),\n        createItem(\"/img/resources/gold.png\", props.gold, \"gold\"),\n    );\n\n// <span>\n//     workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n// </span>\n// <span>\n//     gold: <b>{ props.gold }</b>\n// </span>\n\n    return (\n        <ul className=\"resourcebar\">\n            { resources }\n        </ul>\n    );\n};\nexport default Resourcebar;\n","import Resourcebar, { Props, StateProps } from \"components/topbar/Resourcebar\";\nimport { connect } from \"react-redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n\n    return {\n        gold: store.gold,\n        resources: store.resources,\n        workers: store.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n};\n\n// const mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n//     return {\n//     };\n// };\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(Resourcebar);\n","import Topbar, { Props, StateProps } from \"components/topbar/Topbar\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"../stores\";\n\n// todo this container might not be strictly necessary\n// also withRouter is probably not necessary\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n    };\n};\n\nexport default compose(\n    connect<StateProps, null, Props, StoreState>(mapStateToProps),\n    withRouter,\n    withAppContext,\n)(Topbar) as React.ComponentType<Props>;\n","import Menu from \"components/ui/window/windows/Menu\";\nimport Resourcebar from \"containers/topbar/Resourcebar\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport \"./css/topbar.css\";\n\nexport interface Props {\n}\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & RouteComponentProps & AppContextProps;\n\nexport default function(props: AllProps) {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const window = <Menu title = \"Menu\" />;\n        props.onOpenWindow(window);\n    };\n    return (\n        <div className = \"topbar\">\n            <div className = \"topbar-left\">\n                <Resourcebar />\n            </div>\n            <div className = \"topbar-right\">\n                <div className = \"hamburger\" onClick = { handleClick }>☰</div>\n            </div>\n        </div>\n    );\n}\n","import * as React from \"react\";\n\nexport interface Props {\n    itemsLoaded?: number;\n    itemsTotal?: number;\n}\n\n/**\n * Loading indicator\n */\nexport default class Indicator extends React.Component<Props> {\n    public render() {\n        const { itemsLoaded, itemsTotal } = this.props;\n        return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\n    }\n}\n","\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/context/ItemContext\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const structureDefinition = structureDefinitions[structure];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","// tslint:disable: object-literal-sort-keys\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport SimpleLog from \"containers/log/SimpleLog\";\nimport RealTownView from \"containers/RealTownView\";\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\nimport RealWorldView from \"containers/world/RealWorldView\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport { Placement } from \"hoc/withPopup\";\nimport { manifest } from \"manifest/app\";\nimport * as React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { BrowserRouter as Router, Link, Redirect, Route } from \"react-router-dom\";\nimport { Persistor } from \"redux-persist\";\nimport { Sound, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport Topbar from \"../containers/Topbar\";\nimport { Structure } from \"../definitions/structures\";\nimport \"./css/app.css\";\nimport Preloader, { MediaItem, MediaType } from \"./preloading/Preloader\";\nimport ContextView from \"./ui/context/ContextView\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface StateProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\nexport enum View {\n    Town,\n    World,\n}\n\nexport interface Props {\n    persistor: Persistor;\n}\n\ninterface LocalState {\n    media: MediaItem[];\n    selectedStructure: Structure | null;\n    selectedContext: SelectedContext | null;\n    containerRect: ClientRect | null;\n\n    activeWindows: React.ReactElement[];\n}\n\ninterface SelectedContext {\n    contextType: ContextType ;\n    contextInfo: ContextInfo;\n    contextRect: ClientRect;\n}\n\nconst resolution = {\n    height: 860, // 972,\n    width: 648,\n};\n\nexport const AppContext = React.createContext<AppContextProps | null>(null);\n\nexport default class App extends React.Component<Props & StateProps & DispatchProps, LocalState> {\n    private containerRef: React.RefObject<HTMLDivElement>;\n\n    // This Component has local state, so it\"s a class\n    constructor(props: Props & StateProps & DispatchProps) {\n        super(props);\n\n        this.state = {\n            selectedContext: null,\n            containerRect: null,\n            media: [],\n            selectedStructure: null,\n            activeWindows: [],\n        };\n        this.containerRef = React.createRef();\n        this.handleResize = this.handleResize.bind(this);\n    }\n\n    public render() {\n        const handleViewButtonClick = () => {\n            SoundManager.playSound(Sound.buttonClick);\n        };\n\n        const handleResetClick = () => {\n            this.props.persistor.purge();\n            window.location.reload();\n        };\n\n        // Router elements\n        const TownButton = () => <Link to=\"/town\">\n            <button onClick= { () => handleViewButtonClick() }> { TextManager.get(`common-view-button-town`) } </button>\n        </Link>;\n\n        const WorldButton = () => <Link to=\"/world\">\n            <button onClick= { () => handleViewButtonClick() }> { TextManager.get(`common-view-button-world`) } </button>\n        </Link>;\n\n        const TownView = ()  => <RealTownView onStructureClick = { this.selectStructure } />;\n        const WorldView = () => <RealWorldView/>;\n\n        // A contextual popup showing what you just clicked. Can be an Item\n        let ContextPopup = null;\n        if (this.state.selectedContext) {\n\n            const { contextType, contextInfo, contextRect } = this.state.selectedContext;\n\n            ContextPopup = <ContextView\n                type = { contextType }\n                info = { contextInfo }\n                containerRect = { this.state.containerRect! }\n                referenceRect = { contextRect }\n                placement = { Placement.bottom }\n            >\n            </ContextView>;\n        }\n\n        const Window = this.getActiveWindow();\n\n        return <AppContext.Provider value = {{\n            media: this.state.media,\n            onContextualObjectActivated: this.handleContextualObjectActivated,\n            onOpenWindow: this.handleWindowOpened,\n        }}>\n            <div className = \"app\"\n                ref = { this.containerRef }\n                style = {{\n                    width: resolution.width,\n                    height: resolution.height,\n                }}\n                onClick = { this.handleAppClick }\n            >\n                <DndProvider backend={ HTML5Backend }>\n                <Router>\n                    <Preloader\n                        manifest = { manifest }\n                        onLoadComplete = { this.handleMediaLoadComplete }\n                    >\n                    <Topbar/>\n                    <Redirect from=\"/\" to=\"town\" />\n                    <Route path=\"/world\" component = { TownButton } />\n                    <Route path=\"/town\" component = { WorldButton } />\n                    { ` | ` }\n                    <button onClick= { () => handleResetClick() } style={ { color: \"red\" } }> Restart! </button>\n                    <Route path=\"/town\" component = { TownView } />\n                    <Route path=\"/world\" component = { WorldView } />\n\n                { Window }\n                { ContextPopup }\n                <SimpleLog/>\n                </Preloader>\n                </Router>\n                </DndProvider>\n            </div>\n        </AppContext.Provider>;\n    }\n\n    public componentDidMount() {\n        window.addEventListener(\"resize\", this.handleResize);\n        this.handleResize();\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleResize);\n    }\n\n    private getActiveWindow(): React.ReactElement | null {\n        if (!this.state.activeWindows.length) {\n            return null;\n        }\n\n        const topWindow = this.state.activeWindows[this.state.activeWindows.length - 1];\n        const commonWindowProps = {\n            onClose: this.handleWindowClose,\n            onBack: this.handleWindowBack,\n            backEnabled: this.state.activeWindows.length > 1,\n            closeEnabled: true,\n        };\n\n        const element = React.cloneElement(topWindow, commonWindowProps);\n        return element;\n    }\n\n    private handleResize() {\n        if (this.containerRef.current) {\n            if (window.innerHeight < resolution.height) {\n                this.containerRef.current.style.transform = `scale(${window.innerHeight / resolution.height}) translateX(-50%)`;\n\n            } else {\n                this.containerRef.current.style.transform = `scale(1) translateX(-50%)`;\n            }\n            const parentBox = this.containerRef.current.getBoundingClientRect();\n\n            this.setState({\n                containerRect: parentBox,\n                selectedContext: null, // this would be in the wrong place\n            });\n        }\n    }\n\n    private selectStructure = (structure: Structure | null) => {\n        if (structure) {\n            const displayName = TextManager.getStructureName(structure);\n\n            const window = <StructureDetailsView structure = { structure } title = { displayName }/>;\n            this.handleWindowOpened(window);\n        }\n    }\n\n    private handleMediaLoadComplete = (media: MediaItem[]) => {\n\n        const sounds = media.filter((m) => m.mediaType === MediaType.sound);\n        SoundManager.loadMedia(sounds);\n\n        SoundManager.addSounds({\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\n            // add more sounds here\n        });\n\n        this.setState({\n            media,\n        });\n    }\n\n    private handleContextualObjectActivated = (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => {\n\n        this.setState({\n            selectedContext: {\n                contextInfo: info,\n                contextType: type,\n                contextRect: originRect,\n            },\n        });\n    }\n\n    private handleAppClick = () => {\n        if (this.state.selectedContext) {\n            this.setState({\n                selectedContext: null,\n            });\n        }\n    }\n\n    private handleWindowOpened = (window: React.ReactElement) => {\n        this.setState({\n            activeWindows: [\n                ...this.state.activeWindows,\n                window,\n            ],\n        });\n    }\n\n    /**\n     * Closes all windows\n     */\n    private handleWindowClose = () => {\n        if (this.state.activeWindows.length) {\n            this.setState({\n                activeWindows: [],\n            });\n        }\n    }\n\n    /**\n     * Closes the top window of the stack\n     */\n    private handleWindowBack = () => {\n        if (this.state.activeWindows.length) {\n            this.setState({\n                activeWindows: this.state.activeWindows.slice(0, -1),\n            });\n        }\n    }\n}\n","\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = structureDefinitions[deedInfo.structure];\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","import { ContextInfo, ContextType } from \"constants/context\";\nimport ItemContext from \"containers/ui/context/ItemContext\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { PopupProps, withPopup } from \"hoc/withPopup\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/contextview.css\";\n\nexport interface Props {\n    type: ContextType | null;\n    info: ContextInfo | null;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & DispatchProps & PopupProps;\n/**\n * The ContextView shows the player contextual information about the item she clicked\n * @param props\n */\nclass ContextView extends React.Component<AllProps> {\n\n    public render() {\n        let { info } = this.props;\n        const { type } = this.props;\n\n        if (!info) {\n            info = {\n                iconImg: \"/img/items/deeds/deed.png\",\n                item: Item.deedForWeaponsmith,\n                itemType: ItemType.weapon,\n                subText: \"It allows for the construction of a weaponsmith\",\n            };\n        }\n        let content;\n\n        switch (type) {\n            case ContextType.item:\n            default:\n                content = <ItemContext info= { info } />;\n        }\n\n        const name = TextManager.getItemName(info.item);\n        return <div className = \"contextbox\">\n            <div>{ name } </div>\n            { content }\n        </div>;\n    }\n\n    public componentDidUpdate() {\n    //    // console.log(this.containerRef.current)\n    //     //console.log(this.props.origin)\n\n    //     if (this.containerRef.current && this.props.origin) {\n    //        // var rect = (this.props.origin as HTMLElement).getBoundingClientRect();\n    //        // console.log(rect)\n    //         const reference = this.props.origin as Element;\n\n    //         const popperInstance = new Popper(reference, this.containerRef.current\n    //             // popper options here\n    //         );\n    //     }\n    }\n}\n\nexport default withPopup<AllProps>(ContextView);\n","import App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import structureDefinitions, { Structure } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { StoreState } from \"stores\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\n\n /*\n  * Calculates how many resources are generated by the in the town.\n  * Will return a ResourceStoreState with the amount of each resource to add  */\nconst getProducedResources = (delta: number, store: StoreState): ResourceStoreState => {\n    const structures: StructuresStoreState = store.structures;\n    const result: ResourceStoreState = {};\n    const factor = delta / RESOURCE_INTERVAL;\n    // this function can run at different intervals\n    // faster or slower than once a minute\n    // we will multiply the resource amount by the factor to normalize\n    const maxResources = getMaxResources(store);\n\n    const handleStructure = (structure: string) => {\n        const structureDefinition: StructureDefinition = structureDefinitions[structure];\n\n        if (structureDefinition.type === StructureType.resource) {\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\n            const level: number = structures[structure].level;\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\n\n            // Store all the resources that this structure will generate this tick into `result`\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\n                return accumulator;\n            }, result);\n        }\n    };\n\n    // Calculate what each structure generates. Stores in `result`.\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\n\n    // Check if the warehouse can actually hold it\n    // todo: [10/07/2019] move to reducer\n    Object.keys(result).forEach((resource: string) => {\n        if (result[resource]) {\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\n            }\n        }\n//        console.log(`Adding: ${resource} ${result[resource]}`);\n    });\n\n    return result;\n};\n\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\n    const structureDefinition = structureDefinitions[Structure.warehouse] as WarehouseStructureDefinition;\n    const level: number = store.structures[Structure.warehouse].level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    return levelDefinition.maxResources;\n};\n\nexport default getProducedResources;\n","import { TextEntry } from \"constants/text\";\nimport encounterDefintions from \"definitions/encounters\";\nimport { Encounter } from \"definitions/encounters/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { oracles } from \"oracle\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nexport interface QuestUpdate {\n    name: string;\n    currentEncounter: Encounter | null;\n    progress: number;\n}\n\nexport interface LogUpdate extends TextEntry {\n    key: string;\n    channel: LogChannel;\n    channelContext?: any;\n}\n\ninterface QuestGameTickResponse {\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: StoreState): QuestGameTickResponse => {\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the user has to do something to move the quest along\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n\n    store.quests.forEach((qss: QuestStoreState) => {\n        if (qss.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[qss.name];\n        const currentProgress = qss.progress;\n        const currentNodeIndex =  Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            let currentEncounter = qss.currentEncounter;\n\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n                    const encounter = encounterDefintions[nextNode.encounter!];\n                    const oracle = oracles[qss.name];\n                    nextProgress = currentNodeIndex + i;\n                    currentEncounter = nextNode.encounter!;\n                    // Start encounter(encounter)\n\n                    // Add quest to log\n                    log.push({\n                        channel: LogChannel.quest,\n                        channelContext: qss.name,\n                        ...encounter.getDescription(oracle),\n                    });\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    currentEncounter = null;\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: qss.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                currentEncounter,\n                name: qss.name,\n                progress: nextProgress,\n            });\n        }\n    });\n\n    return {\n        log,\n        quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action, ActionType,\n    EquipmentAction, InventoryAction,\n    MoveItemInInventoryAction, MoveItemToOtherAdventurerAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { EquipmentType } from \"definitions/items/equipment\";\nimport { Item } from \"definitions/items/types\";\nimport { Reducer } from \"redux\";\nimport { AdventurerStoreState, EquipmentStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\nconst generateRandomGear = (): EquipmentStoreState => {\n\n    const second = [\"Burning Damnation\",\n        \"Fury\", \"Some old guy\", \"the Depths\", \"Frozen Hells\",\n        \"Broken bones\", \"the Claw\", \"Resilience\", \"Shattered Damnation\", \"the Seer\" ];\n    const combine = (first: string[]): string => {\n        const firstPart = first[Math.floor(Math.random() * first.length)];\n        const secondPart = second[Math.floor(Math.random() * second.length)];\n        return `${firstPart} of ${secondPart}`;\n    };\n    return {\n        /*\n        hands: combine([\"Fists\", \"Grips\", \"Hands\", \"Handguards\", \"Gauntlets\"]),\n        chest: combine([\"Breastplate\", \"Mithril Vest\", \"Titanium Armor\", \"Primitive Armor\", \"Scaled Raiment\"]),\n        feet: combine([\"Sabatons\", \"Footguards\", \"Warboots\", \"Slippers\"]),\n        head: combine([\"Helmet\", \"Headguard\", \"Obsidian Crown\", \"Scaled Hood\"]),\n        */\n    };\n\n};\n\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `/img/avatars/andy-victorovych-a1.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `/img/avatars/andy-victorovych-a2.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, null, null, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"ec6f1050\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `/img/avatars/andy-victorovych-a3.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `/img/avatars/andy-victorovych-a4.jpg`,\n    inventory: [ null, null, null, null, Item.khopesh, Item.hornedHelmet ],\n}, {\n    id: \"96c686c3\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `/img/avatars/andy-victorovych-a5.jpg`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `/img/avatars/andy-victorovych-a6.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `/img/avatars/andy-victorovych-a7.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `/img/avatars/andy-victorovych-a8.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `/img/avatars/andy-victorovych-a9.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"12c613d4\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `/img/avatars/andy-victorovych-a10.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], Action> = (\n    state: AdventurerStoreState[] = testState, action: Action) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null) {\n                        toSlot = inventory.findIndex((val) => val === null || val === undefined);\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.assignEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentType, item } = action as EquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentType[equipmentType]]: item,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\n\nexport interface EngineStoreState {\n    lastTick: number;\n}\n\nexport const initialState: EngineStoreState = {\n    lastTick: Date.now(),\n};\n","\nimport { GameTickAction } from \"actions/game\";\nimport { Action, ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\nimport { Item } from \"definitions/items/types\";\nimport { Reducer } from \"redux\";\n\nconst testState = [\n    null,\n    null,\n    null,\n    Item.dagger,\n    Item.deedForWeaponsmith,\n];\n\n// Items in warehouse\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\n                                                 action: Action| GameTickAction) => {\n    switch (action.type) {\n        case ActionType.addItem: {\n            // toSlot is optional\n            const { item } = (action as AddAction);\n            let { toSlot } = (action as AddAction);\n            if (toSlot === undefined) {\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\n                if (toSlot === -1) {\n                    // Still not found. Add at end\n                    // todo: [07/07/2019] GAME DESIGN\n                    return [ ...state, item ];\n                }\n            }\n            return state.map((element, index) => index === toSlot ? item : element);\n        }\n\n        case ActionType.moveItemInWarehouse: {\n            const {\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInWarehouseAction);\n\n            return state.map((element, index) => {\n                // todo: items switch places\n                if (index === fromSlot) { return null; }\n                if (index === toSlot) { return state[fromSlot]; }\n                return element;\n            });\n        }\n        case ActionType.removeItem: {\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\n\n            return state.map((element, index) => index !== fromSlot ? element : null);\n        }\n    }\n\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const { key, channel, channelContext, context } = (action as AddLogEntryAction);\n            const time = Date.now();\n            return [{\n                    channel,\n                    channelContext,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, StartEncounterAction, UpdateEncounterResultAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil1.png\",\n    currentEncounter: null,\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil2.png\",\n    currentEncounter: null,\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState,\n                                                   action: AnyAction | GameTickAction) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.advanceQuest:\n            return advanceQuest(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        case ActionType.startEncounter:\n            return startEncounter(state, action as StartEncounterAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (state: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n            };\n        }\n        return qss;\n    });\n};\n\nconst advanceQuest = (state: QuestStoreState[], action: QuestAction) => {\n    // deprecated\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            const nextNode = questDefinition.nodes[Math.floor(progress)];\n\n            return {\n                ...qss,\n                progress,\n            };\n        }\n        return qss;\n    });\n};\n\nconst startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                currentEncounter: action.encounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n    if (!questsToUpdate.length) {\n        return state;\n    }\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n    [Structure.workshop]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: { level: 0, workers: 0, state: StructureState.NotBuilt },\n    [Structure.workshop]: { level: 0, workers: 0, state: StructureState.NotBuilt },\n};\n","import { Action, ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, Action> = (state: StructuresStoreState = initialState,\n                                                                  action: Action) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { Action as AnyTaskAction, ActionType, AddAction} from \"actions/tasks\";\nimport { Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyTaskAction | GameTickAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\n// import { version } from \"./version\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    engine,\n    gold,\n    items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType as GameActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { EngineStoreState, initialState } from \"stores/engine\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case GameActionType.gameTick:\n            return {\n                ...state,\n                lastTick: Date.now(),\n            };\n    }\n    return state;\n};\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { Action as StructureAction,\n    ActionType as StructureActionType } from \"actions/structures\";\nimport structureDefinitions from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n\n        case StructureActionType.startBuildingStructure:\n            // Started building a structure\n            const structureDefinition = structureDefinitions[(action as StructureAction).structure];\n            const cost = structureDefinition.cost.gold || 0;\n            return state - cost;\n    }\n    return state;\n};\n","\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { ActionType, AddResources } from \"../actions/resources\";\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\n                                                       action: AnyAction | GameTickAction) => {\n\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\n        // todo: Check if warehouse can hold it\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\n            return accumulator;\n        }, {});\n    };\n\n    switch (action.type) {\n        case ActionType.addResources: {\n            const resourcesToAdd = (action as AddResources).resources;\n            return addResources(resourcesToAdd);\n        }\n        case ActionType.removeResources: {\n            const resourcesToRemove = (action as AddResources).resources;\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\n                return accumulator;\n            }, {});\n        }\n\n        case GameActionType.gameTick: {\n            const resourcesToAdd = (action as GameTickAction).resources;\n            return addResources(resourcesToAdd);\n        }\n    }\n    return state;\n};\n","import { ActionType, GameTickAction } from \"actions/game\";\nimport { Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, GameTickAction> = (state: seedrandomStateType = initialState,\n                                                                       action: GameTickAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { Action, ActionType, ModifyWorkersAction } from \"actions\";\nimport { Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: Action) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import axios from \"axios\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Persistor } from \"redux-persist\";\r\nimport { gameTick } from \"./actions/game\";\r\nimport { addLogEntry } from \"./actions/log\";\r\nimport version from \"./constants/version\";\r\nimport App from \"./containers/App\";\r\nimport \"./index.css\";\r\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\r\nimport getQuestUpdates from \"./mechanics/gameTick/quests\";\r\nimport getRngState from \"./mechanics/gameTick/rngState\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { StoreState } from \"./stores\";\r\nimport { TaskStoreState } from \"./stores/task\";\r\nimport { TasksStoreState } from \"./stores/tasks\";\r\nimport configureStore from \"./utils/configureStore\";\r\nimport * as Random from \"./utils/random\";\r\nimport { TextManager } from \"./utils/textManager\";\r\n\r\nlet interval: NodeJS.Timeout;\r\n\r\nconst initGame = async () => {\r\n    const axiosResult = await axios.get(\"lang/en-US.json\");\r\n    const texts = axiosResult.data as Record<string, string>;\r\n    TextManager.init(texts);\r\n    Random.init(\"GILLESROX2\");\r\n\r\n    const { store, persistor, isHydrated } = await configureStore();\r\n    if (!isHydrated) {\r\n        startNewGame(store);\r\n    } else {\r\n        continueGame(store);\r\n    }\r\n    runGame(store, persistor);\r\n};\r\n\r\n/**\r\n * Gets called when a player\r\n * @param store\r\n */\r\nconst startNewGame = (store: any) => {\r\n\r\n    store.dispatch(addLogEntry(\"test-game-welcome\"));\r\n    // todo: here is a good place to launch a tutorial or something\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\nconst continueGame = (store: any) => {\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\n// const stopGame = () => {\r\n//     clearTimeout(interval);\r\n// };\r\n\r\nconst runGame = (store: any, persistor: Persistor) => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App persistor={ persistor }/>\r\n        </Provider>,\r\n        document.getElementById(\"root\") as HTMLElement,\r\n    );\r\n    registerServiceWorker();\r\n\r\n    const processCompletedTasks = (tasks: TasksStoreState) => {\r\n        const handleCompletedTask = (task: TaskStoreState) => {\r\n            // Fire all callbacks\r\n            task.callbacks.forEach((action) => store.dispatch(action));\r\n        };\r\n\r\n        tasks.completed.forEach((task) => handleCompletedTask(task));\r\n    };\r\n\r\n    // store.dispatch(addGold(400));\r\n\r\n    // TODO: find something less ugly and hacky than this\r\n//    oracles.kill10b = theBigTree.getOracle(\"kill_10_boars\", store);\r\n  //  oracles[\"retrieve_magic_amulet\"] = backstabbed.getOracle(\"retrieve_magic_amulet\", store);\r\n    const gameLoop = () => {\r\n        const state: StoreState = store.getState();\r\n        const delta = Date.now() - state.engine.lastTick;\r\n\r\n        const resourcesUpdates = getProducedResources(delta, state);\r\n        const rngState = getRngState();\r\n        const { quests, log } = getQuestUpdates(delta, state);\r\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, quests, log));\r\n\r\n        processCompletedTasks(state.tasks);\r\n\r\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", LogChannel.common, { item: Item.teeth }));\r\n    };\r\n\r\n    interval = setInterval(gameLoop, 2500);\r\n};\r\n\r\ninitGame();\r\n"],"sourceRoot":""}