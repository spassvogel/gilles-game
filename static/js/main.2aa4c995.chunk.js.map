{"version":3,"sources":["actions/combat.ts","stores/combat.ts","actions/game.ts","stores/logEntry.ts","actions/log.ts","mechanics/gameTick/combat.ts","utils/version.ts","definitions/items/types.ts","constants/version.tsx","components/widgets/SquareIconButton.tsx","components/widgets/Tab.tsx","components/widgets/Tabstrip.tsx","definitions/items/apparel.ts","definitions/structures/types.tsx","definitions/structures/alchemist.tsx","definitions/structures/index.tsx","utils/time.tsx","definitions/production/armour.tsx","definitions/structures/armoursmith.tsx","definitions/structures/garden.tsx","definitions/structures/lumberMill.tsx","definitions/structures/mine.tsx","definitions/structures/quarry.tsx","definitions/structures/tannery.tsx","definitions/structures/tavern.tsx","definitions/structures/warehouse.tsx","definitions/production/weapons.tsx","definitions/structures/weaponsmith.tsx","definitions/structures/weaver.tsx","definitions/production/questItems.tsx","definitions/structures/workshop.tsx","definitions/items/deeds.ts","definitions/items/weapons.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","utils/textManager.ts","components/log/SimpleLog.tsx","stores/quest.ts","selectors/quests.tsx","stores/structure.ts","containers/log/SimpleLog.tsx","utils/soundManager.ts","components/RealTownView.tsx","hoc/withAppContext.tsx","containers/RealTownView.tsx","actions/gold.ts","actions/resources.ts","definitions/resources.tsx","components/ui/items/ItemsBox.tsx","containers/ui/context/items/ItemsCostBox.tsx","constants/context.ts","constants/icons.ts","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","components/ui/ItemIcon.tsx","components/ui/Progressbar.tsx","actions/items.ts","actions/structures.ts","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/ProductionStructureView.tsx","selectors/workers.tsx","stores/task.ts","containers/structures/ProductionStructureView.tsx","components/structures/ResourceStructureView.tsx","containers/structures/ResourceStructureView.tsx","actions/quests.ts","constants/dragging.ts","components/ui/AdventurerAvatar.tsx","components/ui/DraggableAdventurerAvatar.tsx","definitions/encounters/types.ts","definitions/quests/index.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","containers/structures/tavern/QuestBoard.tsx","actions/adventurers.ts","components/ui/EquipmentSlot.tsx","components/ui/DraggableItemIcon.tsx","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/ui/AdventurerInfo.tsx","components/ui/window/Window.tsx","hoc/withWindow.tsx","components/ui/window/windows/AdventurerInfoWindow.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","components/ui/resources/ResourcesBox.tsx","components/structures/warehouse/WarehouseStructureView.tsx","selectors/adventurers.tsx","containers/structures/warehouse/WarehouseStructureView.tsx","components/StructureDetailsView.tsx","containers/structures/StructureDetailsView.tsx","components/three/Controls.tsx","components/three/debug/Sphere.tsx","components/three/DebugInspector.js","hooks/useModel.ts","components/three/world/WorldMapTerrain.tsx","components/three/debug/Cube.tsx","hooks/useAnimations.ts","components/three/world/Guy.tsx","components/three/world/structures/Structure.tsx","components/three/world/WorldMap.tsx","components/partyScreen/RealWorldView.tsx","containers/world/RealWorldView.tsx","hoc/withPopup.tsx","actions/index.ts","manifest/app.tsx","components/preloading/Preloader.tsx","components/ui/window/windows/CheatWindow.tsx","constants/resources.ts","containers/windows/CheatWindow.tsx","components/ui/window/windows/MenuWindow.tsx","components/topbar/Resourcebar.tsx","containers/topbar/Resourcebar.ts","containers/Topbar.tsx","components/topbar/Topbar.tsx","components/preloading/Indicator.tsx","containers/ui/context/ItemContext.tsx","components/App.tsx","components/ui/context/ItemContext.tsx","components/ui/context/ContextView.tsx","containers/App.tsx","utils/random.ts","mechanics/gameTick/producedResources.ts","storeHelpers/index.tsx","oracle/index.tsx","definitions/encounters/backstabbed.ts","definitions/encounters/goblinHouse.ts","definitions/encounters/index.ts","definitions/encounters/theBigTree.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","reducers/combat.ts","stores/engine.ts","reducers/engine.ts","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/resources.ts","stores/structures.ts","reducers/structures.ts","stores/tasks.ts","reducers/tasks.ts","reducers/index.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","index.tsx"],"names":["ActionType","Allegiance","CombatActionType","LogChannel","barBrawl","actors","allegiance","player","health","location","name","remainingAP","turn","updateCombat","delta","store","actor","combat","getState","action","endsAt","Date","now","enemy","type","move","dispatch","target","moveActor","clearCombatAction","addLogEntry","key","context","channel","common","channelContext","ItemType","Item","asInt","semVer","parts","split","map","part","Number","length","Error","forEach","numericVersion","i","convertSemVerToInt","SquareIconButton","props","className","onClick","e","text","Tab","active","children","Tabstrip","initialSelectedTab","id","useState","activeTab","setActiveTab","React","Children","child","cloneElement","handleTabClick","tabId","onTabSelected","ApparelType","itemType","apparel","basePath","StructureType","all","boots1","item","equipmentType","feet","subText","iconImg","boots2","boots3","chainmailHood","head","armorRating","chest","clothGloves","hands","cowl","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","Structure","alchemist","production","cost","gold","time","levels","displayName","workerCapacity","produces","formatDuration","unit","moment","format","trim","resources","wood","iron","ONE_MINUTE","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","stone","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","torch","sandwich","workshop","getDefinition","structure","WeaponType","DamageType","deed","deedForLumbermill","deedForWeaponsmith","material","arrowheads","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","gunpowder","scales","spring","thread","questItem","questItemDefinitions","blueprints","crate","dynamite","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","tusk","vase","vial","weeds","trinket","trinketDefinitions","magicAmulet","ring","weapon","weaponDefinitions","battleAxe","weaponType","axe","damage","kinetic","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","deeds","questItems","trinkets","TextManager","texts","precompile","this","templates","compileAll","initialized","template","getTemplate","console","error","textEntry","get","compile","Object","keys","value","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","ChannelType","itemArticleUndefined","getItemName","articleTemplate","noun","QuestStatus","SimpleLog","state","expanded","selectedTabId","channels","label","tabType","town","questNames","questName","push","getQuestTitle","quest","logEntries","currentTab","find","t","filter","lE","Tabs","tab","handleTabSelected","handleToggleExpand","entry","logEntry","getLogEntryRow","setState","StructureState","selectActiveQuests","createSelector","quests","q","status","connect","log","MusicTrack","Sound","media","initialState","level","NotBuilt","workers","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","url","content","sound","play","track","hasOwnProperty","fade","nextMusic","playing","loop","RealTownView","anim","undefined","handleStructureClick","evt","onStructureClick","handleBackgroundClick","images","addMusicTrack","playMusic","stop","structures","index","structureDef","structureStore","levelDef","x","y","fontSize","fill","width","height","scale","image","imgSrc","shadowBlur","shadowColor","shadowEnabled","strokeWidth","ref","node","drawHitFromCache","result","playMusicTrack","img","withAppContext","WrappedComponent","AppContext","Consumer","compose","ownProps","addGold","amount","subtractGold","addResources","Resource","ItemsBox","itemsInInventory","aggregate","items","reduce","accumulator","current","listItems","listItemClass","itemDescription","itemsDescription","style","backgroundImage","tmpWarehouse","found","findIndex","splice","removed","ContextType","IconSize","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","getClassName","size","smallest","small","medium","big","biggest","ItemIcon","itemDefinition","warn","event","showContext","originRect","currentTarget","getBoundingClientRect","onContextualObjectActivated","Progressbar","val","min","max","progress","UpDownValue","displayValue","upDisabled","onUp","downDisabled","onDown","ProductionStructureView","selectedItem","workersAssigned","structureDefinition","levelDefinition","getStructureName","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","stopPropagation","createCraftTabs","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","indexOf","costItemsContent","display","workersFree","craftingTime","formatted","makeTimeString","onCraft","createCraftingDetails","tasks","startTime","timeRemaining","addItemToWarehouse","toSlot","addItem","finishBuildingStructure","upgradeStructure","increaseWorkers","decreaseWorkers","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","acc","running","productionDefinition","removeResources","craftItem","ResourceStructureView","onWorkersDown","onWorkersUp","createWorkersRow","generatesText","join","createGeneratesRow","startEncounter","encounter","DragSourceType","DragType","AdventurerAvatar","adventurer","avatarImg","spec","beginDrag","sourceId","sourceType","adventurerInventory","Encounter","QuestNodeType","DraggableAdventurerAvatar","isDragging","connectDragSource","DragSource","monitor","dragSource","kill10Boars","nodes","nothing","goblinHouseOutside","backstabbed","boss","retrieveMagicAmulet","requiredItems","theBigTree","DroppableAdventurerSlot","isOver","canDrop","connectDropTarget","DropTarget","drop","onDrop","getItem","dropTarget","AssignAdventurers","slots","assignedAventurers","onRemoveAdventurer","onAddEventurer","availableSlots","slotsContent","QuestBoard","selectedQuest","questListContent","availableQuests","iconImgPath","icon","selectedQuestName","onQuestClick","questDefinition","fullParty","a","enoughItems","checkEnoughItems","canLaunch","getQuestDescription","onAddAdventurer","ItemsCostBox","onLaunchQuest","getQuestDetails","every","amountRequired","moveItemInInventory","adventurerId","fromSlot","addItemToInventory","removeItemFromInventory","EquipmentSlotType","DraggableItemIcon","inventorySlot","itemAndEquipmentSlotMatch","equipmentSlotType","checkEquipment","mainHand","offHand","borderColor","title","dragInfo","adventurerEquipment","InventorySlot","isActive","classNames","contents","slot","iconSize","onDropItem","AdventurerInfo","attributes","stats","stat","toFixed","getEquipmentSlot","slotType","equipment","itemRef","onRemoveItemFromInventory","onAssignEquipment","existingEquipment","onAddItemToInventory","onRemoveEquipment","handleDropItemEquipment","equipmentList","inventory","onMoveItemInInventory","Window","BackButton","backEnabled","onBack","CloseButton","closeEnabled","onClose","withWindow","adventurers","equipmentSlot","assignEquipment","removeEquipment","TavernStructureView","setAassignedAdventurers","setSelectedQuest","roomCount","getAvailableQuests","available","getQuestByAdventurer","values","party","handleAdventurerNameClick","window","AdventurerInfoWindow","onOpenWindow","roomContent","room","assigned","createRooms","handleQuestClick","copy","handleAddAdventurer","handleRemoveAdventurer","launchQuest","deltaResources","WarehouseStructureView","resourcesDelta","resourcesRef","selectedAdventurer","adventurerContent","adventurersInTown","onMoveItemToAdventurer","adventurersArea","handleAdventurerTabSelected","onMoveItemInWarehouse","onMoveItemFromAdventurer","prevProps","classList","remove","setTimeout","add","getAdventurers","getQuests","selectAdventurersInTown","foundInParty","findAdventurerById","groupedAdventurers","foundAdventurers","adventurersOnQuest","action1","action2","moveItemInWarehouse","removeItem","removeItemFromWarehouse","StructureDetails","view","Building","buildTask","getStructureView","onCheatGold","onCheatResources","StructureDetailsView","DEFAULT_CAMERA_POS","THREE","Controls","camera","useThree","controls","useRef","useEffect","mapControls","MapControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","position","localStorage","savedCamera","JSON","parse","cam","scrollToPosition","Vector3","z","useRender","update","mouseDown","onCameraMove","setItem","stringify","handleMouseDown","handleMouseUp","document","addEventListener","removeEventListener","Sphere","geometry","color","object","DebugInspector","scene","useModel","group","setGroup","toLowerCase","endsWith","OBJLoader","load","grp","ColladaLoader","collada","colladaGroup","Group","FBXLoader","WorldMapTerrain","texture","useMemo","modelInfo","wrapS","wrapT","rotation","attach","fog","Cube","parseVector3","input","useAnimations","animations","setAnimations","textureUrl","Guy","mixer","bones","clipAction","useFrame","terrainRotation","terrainScale","townPos","WorldMap","activeQuests","questPosition","getQuestWorldPosition","fov","unproject","compassCenter","compassPos","Vector2","distance","distanceTo","angle","onMapMove","screenLocation","groundY","vector","set","direction","sub","normalize","clone","multiplyScalar","roundedProgress","floor","lastPosition","nextPosition","lastPostionWorld","nextPostionWorld","lerp","RealWorldView","compassRef","setScrollToPosition","world","compassEl","compassTextEl","firstElementChild","transform","opacity","innerHTML","Placement","onAdvanceQuest","manifest","MediaType","CheatWindow","itemSelectRef","handleCheatGold","handleCheatWorkers","onCheatWorkers","handleCheatResources","handleCheatItem","onCheatItem","handleChangeStructureState","checked","onCheatStructureState","Built","handleChangeGold","handleChangeWorkers","handleChangeResources","getStructureDefinition","onChange","getStructureRow","getItemOption","isNaN","getItemTypeOptions","resourceOrder","setStructureState","addWorkers","Menu","Resourcebar","createItem","withRouter","Indicator","itemsLoaded","itemsTotal","Preloader","loadMedia","promises","loadItem","catch","err","Promise","then","results","onLoadComplete","completed","mediaType","getType","loadImage","Howl","src","complete","indicator","Image","resolve","reject","check","naturalWidth","View","handleStartConstruction","startBuildingStructure","buildStructure","info","deedInfo","enoughGold","weaponDefinition","apparelDefinition","getApparelDefinition","ContextView","withPopup","placement","bottom","setPlacement","containerRect","referenceRect","popupElement","popupRect","top","left","offset","querySelector","right","resolution","App","containerRef","selectStructure","handleWindowOpened","handleMediaLoadComplete","addSounds","buttonClick","handleContextualObjectActivated","selectedContext","contextInfo","contextType","contextRect","handleAppClick","activeWindows","handleWindowClose","handleWindowBack","slice","selectedStructure","handleResize","bind","handleViewButtonClick","playSound","ContextPopup","getActiveWindow","Provider","backend","HTML5Backend","from","to","path","component","persistor","purge","reload","topWindow","commonWindowProps","innerHeight","parentBox","generator","getMaxResources","getProducedResources","factor","resourceStructureDefinition","handleStructure","storeIsRehydrated","rngState","randomInt","ceil","dirty","random","Oracle","concat","sort","b","questVars","oracles","getOracle","getDescription","oracle","getOptions","fight","flight","answer","option","finder","getRandomAdventurer","investigate","leave","goblinHouseHallway","advanceQuest","strongest","getAdventurerWithHighest","walkAround","lift","treeState","vars","updateQuestVars","goldAmount","getQuestUpdates","qss","questDefinitions","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","currentEncounter","nextNode","encounterDefintions","logUpdates","questUpdates","getRngState","Random","isLocalhost","Boolean","hostname","match","register","navigator","URL","process","toString","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","generateRandomStats","strength","perception","endurance","charisma","intelligenge","agility","luck","testState","lastTick","gameTick","lU","encounterResults","reward","questsToUpdate","questToUpdate","assign","updateEncounterResult","nodeIndex","structureInitialState","updateStructureState","structureState","createTask","combineReducers","element","moveItemToOtherAdventurer","fromAdventurerId","toAdventurerId","fromAdventurer","startCombatAction","addAction","combatType","moveAction","engine","GameActionType","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","initial","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","initGame","axios","axiosResult","data","init","seed","seedrandom","configureStore","continueGame","startNewGame","runGame","ReactDOM","getElementById","registerServiceWorker","processCompletedTasks","handleCompletedTask","setInterval","logs","resourcesUpdates"],"mappings":"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GAAcZ,UACpBA,UAAWW,GAAUY,aACtB,CACC1K,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,QACpBjN,IAAK,0BACN,CACCyC,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcY,QAmGxBC,oBA/FyC,CACzCC,cAAe,CACXve,EAAKoI,MACLpI,EAAKoI,MACLpI,EAAKoI,MACLpI,EAAKqI,SACLrI,EAAKqI,UAET4V,MAAO,CAAC,CACJvK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,QACpBjN,IAAK,oBACN,CACCyC,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,QACpBjN,IAAK,oBACN,CACCyC,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,QACpBjN,IAAK,4BACN,CACCyC,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,QACpBjN,IAAK,0BACN,CACCyC,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcZ,UACpBA,UAAWW,GAAUgB,YACtB,CACC9K,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcS,SACrB,CACCxK,EAAG,EACHC,EAAG,EACHxU,KAAMse,GAAcZ,U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","file":"static/js/main.2aa4c995.chunk.js","sourcesContent":["// tslint:disable:object-literal-sort-keys\nimport { Action, AnyAction } from \"redux\";\nimport { CombatActionType } from \"stores/combat\";\n\nexport enum ActionType {\n    clearCombatAction = \"clearCombatAction\",\n    startCombatAction = \"startCombatAction\",\n    moveActor = \"moveActor\",\n}\n\nexport interface AddCombatActionAction extends Action<ActionType> {\n    combatType: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport interface MoveActorAction extends Action<ActionType> {\n    actor: string;\n    location: number[];\n}\n\nexport function startCombatAction(type: CombatActionType, actor: string, target: number[], endsAt: number): AddCombatActionAction {\n    return {\n        type: ActionType.startCombatAction,\n        combatType: type,\n        actor,\n        target,\n        endsAt,\n    };\n}\n\nexport function moveActor(actor: string, location: number[]): MoveActorAction {\n    return {\n        type: ActionType.moveActor,\n        actor,\n        location,\n    };\n}\n\nexport function clearCombatAction(): Action<ActionType> {\n    // currently there is only one combat possible. so only one needs to be cleared\n    return {\n        type: ActionType.clearCombatAction,\n    };\n}\n","export interface CombatStoreState {\n    actors: Actor[];\n    turn: Allegiance;\n    action?: CombatAction;\n}\n\nexport interface Actor {\n    name: string;\n    allegiance: Allegiance;\n    location: number[];\n    health: number;\n    remainingAP: number;\n}\n\nexport enum Allegiance {\n    player,\n    enemy,\n}\n\nexport interface CombatAction {\n    type: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport enum CombatActionType {\n    move = \"move\",\n    slash = \"slash\",\n    shoot = \"shoot\",\n}\n\nexport const barBrawl: CombatStoreState = {\n    actors: [{\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [3, 5],\n        name: \"c4a5d270\",\n        remainingAP: 5,\n    }, {\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [4, 6],\n        name: \"2e655832\",\n        remainingAP: 4,\n    }],\n    turn: Allegiance.player,\n};\n","// tslint:disable:object-literal-sort-keys\nimport { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\nimport { Action } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    gameTick = \"gameTick\",\n}\nexport interface GameTickAction extends Action<ActionType> {\n    delta: number;\n    rngState: seedrandomStateType | null;\n    resources: ResourceStoreState;\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\n// export type IncrementResource = IncrementResource // | others\n\n// tslint:disable: align\nexport function gameTick(delta: number,\n    rngState: seedrandomStateType | null,\n    resources: ResourceStoreState,\n    quests: QuestUpdate[],\n    log: LogUpdate[],\n): GameTickAction {\n    return {\n        type: ActionType.gameTick,\n        delta,\n        rngState,\n        resources,\n        quests,\n        log,\n    };\n}\n","import { TextEntry } from \"constants/text\";\n\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry extends TextEntry {\n    time: number;\n    channel: LogChannel;\n    channelContext?: string;\n}\n","// tslint:disable: object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { LogChannel } from \"stores/logEntry\";\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface AddLogEntryAction extends Action<ActionType> {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n    channelContext?: string;\n}\n\nexport function addLogEntry(key: string, context?: any, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        key,\n        channel,\n        channelContext,\n        context,\n    };\n}\n","import { clearCombatAction, moveActor } from \"actions/combat\";\nimport { Store } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Allegiance, CombatAction, CombatActionType } from \"stores/combat\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface CombatUpdate  {\n    // todo: maybe this is not needed\n    action: CombatAction | null;\n}\n\nconst updateCombat = (delta: number, store: Store<StoreState>): CombatUpdate | null => {\n    const state = store.getState();\n    const combat = state.combat;\n    if (combat.action) {\n        const action = combat.action;\n        if (action.endsAt < Date.now()) {\n            if (combat.turn === Allegiance.enemy) {\n                /* if (apLeft(enemy))\n                determine next action\n                else\n                players turn now\n                */\n            } else if (combat.turn === Allegiance.player) {\n                switch (combat.action.type) {\n                    case CombatActionType.move:\n                        store.dispatch(moveActor(combat.action.actor, combat.action.target));\n                        store.dispatch(clearCombatAction());\n                        break;\n                    default:\n                        break;\n                }\n                return {\n                    action: null,\n                };\n            }\n        }\n    }\n    return null;\n};\n\nexport default updateCombat;\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","\nexport enum ItemType {\n    deed,\n    apparel,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    arrowheads = \"arrowheads\",\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    gunpowder = \"gunpowder\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    sandwich = \"sandwich\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.4\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","import * as React from \"react\";\nimport \"./css/squareiconbutton.css\";\n\nexport interface Props {\n    text: string; /* temp */\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n}\n\ntype AllProps = Props;\n\nconst SquareIconButton = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = props.className || \"\";\n    return <div className = { `ui-button widgets-squareiconbutton ${className}` } onClick = { handleClick }>\n        { props.text }\n    </div>;\n};\n\nexport default SquareIconButton;\n","import * as React from \"react\";\nimport \"./css/tabstrip.css\";\n\nexport interface Props {\n    id: string;\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    active?: boolean;\n    children?: any;\n}\n\ntype AllProps = Props;\n\nconst Tab = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = ((props.active) ? \"active\" : \"\") + (props.className || \"\");\n    return <li className = { `widget-tab ${className}` } onClick = { handleClick } >\n        { props.children }\n    </li>;\n};\n\nexport default Tab;\n","import React, { useState } from \"react\";\nimport \"./css/tabstrip.css\";\nimport { Props as TabProps } from \"./Tab\";\n\nexport interface Props {\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    onTabSelected?: (tabId: string) => void;\n    children?: any;\n}\n\ntype AllProps = Props;\nconst Tabstrip = (props: AllProps) => {\n    let initialSelectedTab = null;\n    if (props.children && props.children.length) {\n        initialSelectedTab = props.children[0].props.id;\n    }\n    const [activeTab, setActiveTab] = useState<string|null>(initialSelectedTab);\n    const className = props.className || \"\";\n\n    const children = React.Children.map(props.children, (child: React.ReactElement<TabProps>) => {\n        const clone: React.ReactElement<TabProps> = React.cloneElement(child, {\n            active: child.props.id === activeTab,\n            onClick: () => { handleTabClick(child.props.id); },\n        });\n        return clone;\n    });\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n        if (props.onTabSelected) {\n            props.onTabSelected(tabId);\n        }\n    };\n\n    const handleClick = (e: React.MouseEvent<Element>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n\n    return <ul className = { `widget-tabstrip ${className}` } onClick = { handleClick } >\n        { children }\n    </ul>;\n};\n\nexport default Tabstrip;\n","// tslint:disable:object-literal-sort-keys\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.apparel;\nconst basePath = \"/img/items/apparel/\";\n\nexport enum ApparelType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface ApparelDefinition extends ItemDefinition {\n    equipmentType: ApparelType;\n    armorRating?: number;\n}\n\nconst all: Record<string, ApparelDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n        armorRating: 3,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n        armorRating: 2,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n        armorRating: 20,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n        armorRating: 10,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n        armorRating: 10,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default all;\n\nexport function getDefinition<T extends ApparelDefinition>(apparel: string): T {\n    return all[apparel] as T;\n}\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n                                  // todo: REMOVE\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { StructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport weaver from \"./weaver\";\nimport workshop from \"./workshop\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n    workshop = \"workshop\",\n}\n\nconst all = {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n    workshop,\n};\n\nexport default all;\n\nexport function getDefinition<T extends StructureDefinition>(structure: string): T {\n    return all[structure] as T;\n}\n","import * as moment from \"moment\";\nimport \"moment-duration-format\";\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\n\nexport const formatDuration = (time: number, unit: moment.DurationInputArg2 = \"milliseconds\" ): string => {\n    return moment.duration(time, unit)\n        .format(\"d [days] h [hours] m [min] s [sec]\", {\n        trim: \"both\",\n    });\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { stone: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { stone: 4 },\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { stone: 6 },\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n\nexport default weaver;\n","// tslint:disable:object-literal-sort-keys\n// todo: maybe 'quest items' is not the right name\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const torch: ProductionDefinition = {\n    item: Item.torch,\n    cost: {\n        resources: { wood: 2, fabric: 1 },\n        time: time.ONE_MINUTE,\n    },\n};\n\nexport const sandwich: ProductionDefinition = {\n    item: Item.sandwich,\n    cost: {\n        resources: { food: 1 },\n        time: time.ONE_MINUTE / 2,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { sandwich, torch } from \"definitions/production/questItems\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst workshop: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ torch, sandwich ],\n    }, {\n        // level 2:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }, {\n        // level 4:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\nexport default workshop;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\nexport enum DamageType {\n    kinetic = \"kinetic\",\n}\n\nexport interface DamageDefinition {\n    [DamageType.kinetic]: number | undefined;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n    damage: DamageDefinition;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n        damage: { [DamageType.kinetic]: 20 },\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \" Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n        damage: { [DamageType.kinetic]: 3 },\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n        damage: { [DamageType.kinetic]: 5 },\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n        damage: { [DamageType.kinetic]: 25 },\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n        damage: { [DamageType.kinetic]: 2 },\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n        damage: { [DamageType.kinetic]: 12 },\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 14 },\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n        damage: { [DamageType.kinetic]: 16 },\n    },\n};\nexport default weaponDefinitions;\n\nexport function getDefinition<T extends WeaponDefinition>(weapon: string): T {\n    return weaponDefinitions[weapon] as T;\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.arrowheads]: {\n        item: Item.arrowheads,\n        itemType,\n        iconImg: `${basePath}arrowheads.png`,\n    },\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.gunpowder]: {\n        item: Item.gunpowder,\n        itemType,\n        iconImg: `${basePath}gunpowder.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.sandwich]: {\n        item: Item.sandwich,\n        itemType,\n        iconImg: `${basePath}sandwich.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import apparel from \"./apparel\";\nimport deeds from \"./deeds\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...apparel,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import { TextEntry } from \"constants/text\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\nimport * as Handlebars from \"handlebars\";\nimport { Structure } from \"definitions/structures\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTextEntry(textEntry: TextEntry): string {\n        return this.get(textEntry.key, textEntry.context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    public static getStructureName(structure: Structure): string {\n        return this.get(`structure-${structure}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: Item, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: Item) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","import SquareIconButton from \"components/widgets/SquareIconButton\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport * as React from \"react\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/simplelog.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface StateProps  {\n    logEntries: LogEntry[];\n    questNames: string[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nenum ChannelType {\n    all,\n    town,\n    quest,\n}\n\ninterface ChannelDefinition {\n    label: string;\n    tabType: ChannelType;\n    tabId: string;\n    channelContext?: string;\n}\n\ninterface LocalState {\n    selectedTabId: string;\n    expanded: boolean;\n}\n\nclass SimpleLog extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            expanded: false,\n            selectedTabId: \"all\",\n        };\n    }\n\n    public render() {\n\n        const channels: ChannelDefinition[] = [{\n            label: TextManager.get(\"common-log-tab-all\"),\n            tabId: \"all\",\n            tabType: ChannelType.all,\n        }, {\n            label: TextManager.get(\"common-log-tab-town\"),\n            tabId: \"town\",\n            tabType: ChannelType.town,\n        }];\n\n        this.props.questNames.forEach((questName) => {\n            channels.push({\n                channelContext: questName,\n                label: TextManager.getQuestTitle(questName),\n                tabId: `quest-${questName}`,\n                tabType: ChannelType.quest,\n            });\n        });\n\n        let logEntries: LogEntry[] = [];\n        const currentTab = channels.find((t) => t.tabId === this.state.selectedTabId)!;\n        switch (currentTab.tabType) {\n            case ChannelType.all:\n                // All the things\n                logEntries = this.props.logEntries;\n                break;\n\n            case ChannelType.town:\n                // Only town\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.town);\n                break;\n\n            case ChannelType.quest:\n                // Only the selected quest\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.channelContext === currentTab.channelContext);\n                break;\n        }\n\n        const getLogEntryRow = (logEntry: LogEntry) => {\n            const text = TextManager.get(logEntry.key, logEntry.context);\n            return <div className = \"entry\" key={ logEntry.time }>\n                { text }\n            </div>;\n        };\n\n        const Tabs = channels.map((tab) => {\n            return <Tab id = { tab.tabId } key = { tab.tabId } >{ tab.label }</Tab>;\n        });\n\n        return <div className = { `log ${this.state.expanded ? \"expanded\" : \"\"}` }>\n            <div className = \"tab-bar\">\n                <Tabstrip className = \"tabs\"  onTabSelected = { (tabId: string) => this.handleTabSelected(tabId) } >\n                    { Tabs }\n                </Tabstrip>\n                <SquareIconButton className = \"expand-button\" onClick = { () => this.handleToggleExpand() } text = { this.state.expanded ? \"▼\" : \"▲\" }/>\n            </div>\n            <div className = \"log-entries\">\n                { logEntries.map((entry) => getLogEntryRow(entry))}\n            </div>\n        </div>;\n    }\n\n    private handleTabSelected(tabId: string) {\n        this.setState({\n            selectedTabId: tabId,\n        });\n    }\n\n    private handleToggleExpand() {\n        this.setState({\n            expanded: !this.state.expanded,\n        });\n    }\n}\n\nexport default SimpleLog;\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];        // list of adventurer ids\n    progress: number;       // Which questnode the party is at currently\n    questVars: any;\n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    icon: string;\n\n    currentEncounter: Encounter | null;\n    reward?: QuestReward;\n}\n","import { TextEntry } from \"constants/text\";\nimport { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getQuests = (state: StoreState) => state.quests;\nconst getLog = (state: StoreState) => state.log;\n\nconst activeQuests = (quests: QuestStoreState[]) => {\n    // returns the names of the active quests\n    return quests.filter((q) => q.status === QuestStatus.active).map((q) => q.name);\n};\n\nexport const selectActiveQuests = createSelector([\n    getQuests],\n    activeQuests,\n);\n\n/**\n * Returns the most recent log entry for a given quest\n */\nexport const selectLastQuestLogEntry = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry | undefined => {\n        const questLog = log.find((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n        return questLog;\n    },\n)(state);\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import SimpleLog, { DispatchProps, Props, StateProps } from \"components/log/SimpleLog\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectActiveQuests } from \"selectors/quests\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        logEntries: store.log,\n        questNames: selectActiveQuests(store),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(SimpleLog);\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n    error,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\n\nexport class SoundManager {\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            // todo: assert\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(1, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, 1, 500);\n\n        currentMusicTrack = track;\n    }\n}\n","import { getDefinition, Structure  } from \"definitions/structures\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport Konva from \"konva\";\nimport * as React from \"react\";\nimport { Image, Layer, Stage, Text } from \"react-konva\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/townView.css\";\n\n// It's actually not the *real* town view hihi\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n\n}\n\nexport interface Props {\n    onStructureClick?: (structure: Structure | null) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n    // tasks: TaskStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {}\n\ntype AllProps = Props & DispatchProps & StateProps & AppContextProps;\n\nclass RealTownView extends React.Component<AllProps, LocalState> {\n\n    private anim?: Konva.Animation = undefined;\n\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            images: {},\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n\n        /*        const period = 500;\n        if (this.plasmaBeam) {\n            this.plasmaBeam.filters([Konva.Filters.Brighten]);\n            //this.plasmaBeam.cache(null);\n            this.anim = new Konva.Animation((frame: any) => {\n                if (this.plasmaBeam){\n                const freq = 2; // speed\n                const brightness = (Math.sin((frame.time / period) * freq) + 1) / 2;   // fluctuate between 0 and 1\n                this.plasmaBeam.brightness(brightness);\n                //this.plasmaBeam.cache(null);\n                this.plasmaBeam.fillPatternOffsetX(this.plasmaBeam.fillPatternOffsetX() - 150);\n                }\n            }, this.plasmaBeam.getLayer());\n\n            this.anim.start();\n        }*/\n    }\n\n    public componentWillUnmount() {\n        if (this.anim) { this.anim.stop(); }\n        delete this.anim;\n    }\n\n    // public changeSize(node: Konva.Node) {\n    //     node.to({\n    //         scaleX: Math.random() + 2.8,\n    //         scaleY: Math.random() + 2.8,\n    //         duration: 10,\n    //     });\n    // }\n\n    public render() {\n        const structures = Object.keys(Structure).map((structure, index) => {\n            const structureDef = getDefinition(structure);\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            if (structureStore.state === StructureState.NotBuilt) {\n                return null;\n            }\n            const levelDef = structureDef.levels[structureStore.level];\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <Text name= { structure }\n                key = { structure }\n                text = { `█ ${displayName} (level ${structureStore.level + 1})` }\n                x = { 100 }\n                y = { 90 * index + 100 }\n                fontSize = { 80 }\n                fill = { \"white\" }\n                onClick = { this.handleStructureClick }\n            />;\n        });\n        // tslint:disable-next-line:no-console\n        console.log(`rendered the town`); // TODO: remove\n\n        return (\n            <Stage width={1024} height={768} scale= { {x: 0.4, y: 0.4} }>\n            <Layer name=\"background\" onClick = { this.handleBackgroundClick } >\n                <Image image={ this.imgSrc(\"img/town/sky.jpg\") }></Image>\n            </Layer>\n            <Layer name=\"town\">\n                {/* <Rect\n                    x={20}\n                    y={20}\n                    width={50}\n                    height={50}\n                    fill={ \"white\"}\n\n                    // onClick={this.handleClick}\n                /> */}\n                {/* <Rect\n                     PLASMA BEAM\n                    x={20}\n                    y={20}\n                    width={1500}\n                    height={256}\n                    fillPatternImage = { this.imgSrc(\"img/town/effects/plasma_beam_heavy_green.png\") }\n                    fillPatternOffset = { { x: 20, y: 0 }}\n                    globalCompositeOperation = \"lighter\"\n                    shadowBlur={5}\n                    ref = { (node: Konva.Rect) => this.plasmaBeam = node }\n                /> */}\n                   <Image\n                        name = \"warehouse\"\n                        image={ this.imgSrc(\"img/town/tavern.png\") }\n                        x = { 15 }\n                        y = { 1057 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        shadowColor = \"red\"\n                        shadowEnabled = { true }\n                        strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        // ref={ (node) => { this.convaImages.tavern = node!; }}\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n\n                    <Image\n                        name = { Structure.warehouse }\n                        image={ this.imgSrc(\"img/town/lighthouse.png\") }\n                        // onClick = { this.handleStructureClick }\n\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    <Image\n                        name = \"lumberMill\"\n                        image = { this.imgSrc(\"img/town/mill.png\") }\n                        x = { 947 }\n                        y = { 1384 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        // shadowColor = \"red\"\n                        // shadowEnabled = { true }\n                        // strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    { structures }\n\n                    </Layer>\n                    {/* <SmokeEmitter\n                        emitterX = { 190 }\n                        emitterY = { 510 }\n                        smokeImg = { this.imgSrc(\"img/town/effects/smoke.png\") }\n                    /> */}\n\n            </Stage>\n        );\n    }\n\n    public handleStructureClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick( Structure[evt.target.name()]); }\n    }\n\n    public handleBackgroundClick = () => {\n        if (this.props.onStructureClick) { this.props.onStructureClick(null); }\n    }\n\n    private imgSrc(url: string): HTMLImageElement {\n        const result = this.props.media.find((m) => m.url === url);\n        if (result === undefined) {\n            throw Error(`Could not find image with url ${url}`);\n        } else {\n            return result.content as HTMLImageElement;\n        }\n    }\n\n    private playMusic() {\n        SoundManager.playMusicTrack(MusicTrack.town);\n    }\n}\n\nconst drawHitFromCache = (img: Konva.Image) => {\n    if (img) {\n       // img.cache(null);\n       // img.drawHitFromCache(0.5);\n    }\n};\n\nexport default RealTownView;\n","import { AppContext } from \"components/App\";\nimport { MediaItem } from \"components/preloading/Preloader\";\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport * as React from \"react\";\n\n// Sharing context within the entire App\nexport interface AppContextProps {\n    onContextualObjectActivated: (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => void;\n    onOpenWindow: (window: React.ReactElement) => void;\n    media: MediaItem[];\n}\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends React.Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n};\n","\nimport RealTownView, { DispatchProps, Props, StateProps } from \"components/RealTownView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        structures: store.structures,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealTownView) as React.ComponentType<Props>;\n","import { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface ModifyGoldAction extends Action<ActionType> {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface AddResources extends Action<ActionType> {\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n};\n","import \"components/ui/css/common/icon.css\";\nimport itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items, to be used as requirements for something\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const aggregate = props.items.reduce((accumulator: object, current: Item) => {\n        if (!accumulator[current]) {\n            accumulator[current] = 0;\n        }\n        accumulator[current]++;\n        return accumulator;\n    }, {});\n\n    const listItems = Object.keys(aggregate).map((key: string) => {\n        const item = key as Item;\n        const amount = aggregate[key] as number;\n        let listItemClass = \"item\";\n\n        // Check if we have enough\n        const amountInInventory = itemsInInventory ? itemsInInventory.filter((i) => i === item).length : 0;\n        if (amount > amountInInventory) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className = { listItemClass } key = { item }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage: `url(${itemDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { `${TextManager.getItemName(item)} (${ amount })` }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    const tmpWarehouse = [ ...store.items];\n    ownProps.items.forEach((item: Item) => {\n        const found = tmpWarehouse.findIndex((i) => i === item);\n        if (found > -1) {\n            // Remove the item from tmpWarehouse and add to itemsInInventory\n            const [ removed ] = tmpWarehouse.splice(found, 1);\n            if (removed) {\n                itemsInInventory.push(removed);\n            }\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextView\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","export enum IconSize {\r\n    smallest,\r\n    small,\r\n    medium,\r\n    big,\r\n    biggest,\r\n}\r\n\r\nexport const getClassName = (size?: IconSize): string => {\r\n    switch (size) {\r\n        case IconSize.smallest:\r\n            return \"common-icon-smallest\";\r\n        case IconSize.small:\r\n            return \"common-icon-small\";\r\n        case IconSize.medium:\r\n            return \"common-icon-medium\";\r\n        case IconSize.big:\r\n            return \"common-icon-big\";\r\n        case IconSize.biggest:\r\n            return \"common-icon-biggest\";\r\n    }\r\n    return getClassName(IconSize.medium);\r\n};\r\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    // Each additional worker shaves off 10% of the production time\n    return time - (.1 * time * (workers - 1));\n};\n","import { AppContext } from \"components/App\";\nimport \"components/ui/css/common/icon.css\";\nimport { ContextType } from \"constants/context\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\n\nexport interface Props {\n    item: Item;\n    onClick?: (event: React.MouseEvent) => void;\n    size?: IconSize;\n    showContext?: boolean;\n}\n\nconst ItemIcon: React.FC<Props> = (props) => {\n    const { item } = props;\n    const itemDefinition = getDefinition(item);\n    const context = React.useContext(AppContext)!;\n    const ref = React.useRef(null);\n\n    if (!itemDefinition) {\n        // tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    const handleClick = (event: React.MouseEvent) => {\n        if (props.showContext !== false) {\n            const origin = (event.currentTarget as HTMLElement);\n            const originRect = origin.getBoundingClientRect();\n            context.onContextualObjectActivated(\n                ContextType.item,\n                getDefinition(item),\n                ref,\n                originRect,\n            );\n        }\n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    };\n\n    const className = \"item-icon \" + getClassName(props.size);\n\n    return (\n        <div className = { className }\n            onClick = { handleClick }\n            style = {{\n                backgroundImage: `url(${itemDefinition.iconImg})`,\n            }}>\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps { }\nexport interface Props extends DispatchProps {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nconst Progressbar = (props: Props) => {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{ props.label }</div>\n            <div className=\"progressbar-info\" style= {{ width: `${progress * 100}%`}}>  </div>\n        </div>\n    );\n};\n\nexport default Progressbar;\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","import { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface MoveItemInWarehouseAction extends Action<ActionType> {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { Action } from \"redux\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface StructureAction extends Action<ActionType> {\n    structure: Structure;\n}\nexport interface StructureStateAction extends StructureAction {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends StructureAction {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action, AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface AddAction extends Action<ActionType> {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: (e: React.MouseEvent) => void;\n    onDown?: (e: React.MouseEvent) => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = (e: React.MouseEvent) => {\n        if (props.onUp && !props.upDisabled) { props.onUp(e); }\n    };\n\n    const handleDown = (e: React.MouseEvent) => {\n        if (props.onDown && !props.downDisabled) { props.onDown(e); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import MaterialsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"utils/textManager\";\nimport { formatDuration } from \"utils/time\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport \"./css/productionstructureview.css\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Array<Item | null>;  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedItem: Item|null;\n    workersAssigned: number;\n}\n\nexport default class ProductionStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedItem: null,\n            workersAssigned: 0,\n        };\n    }\n\n    public render() {\n        const structureDefinition = getDefinition<ProductionStructureDefinition>(this.props.type);\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${this.props.type}\n                with type ProductionStructureDefinition.`);\n        }\n        const level: number = this.props.level || 0;\n        const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.getStructureName(this.props.type);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style={{float: \"right\"}}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade } >\n                        { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const createCraftTabs = () => {\n            const selectedItem = this.state.selectedItem;\n\n            return levelDefinition.produces.map((produces) => {\n                const handleSelectCraftingItem = (e: React.MouseEvent) => {\n                    e.stopPropagation();\n\n                    this.setState({\n                        selectedItem: produces.item,\n                    });\n                };\n\n                return <li\n                    key = { `craft${produces.item}`}\n                    onClick = { handleSelectCraftingItem }\n                    className = { selectedItem === produces.item ? \"selected\" : \"\" }\n                >\n                    <ItemIcon item= { produces.item }  />\n                    { TextManager.getItemName(produces.item) }\n                </li>;\n            });\n        };\n\n        const createCraftingDetails = () => {\n            const item = this.state.selectedItem;\n            if (!item) { return null; }\n\n            const produces = levelDefinition.produces.find((p) => p.item === item)!;\n            const playerResources = this.props.resources || {};\n            const costResources = produces.cost.resources!;\n            const missingAtLeastOneResource = Object.keys(costResources)\n                .some((resource) => costResources[resource] > playerResources[resource]);\n\n            let missingAtLeastOneItem = false;\n            const costMaterials = produces.cost.materials;\n            if (costMaterials) {\n                missingAtLeastOneItem = costMaterials\n                    .some((i: Item) => this.props.items.indexOf(i) === -1);\n            }\n\n            const disabled = missingAtLeastOneResource || missingAtLeastOneItem || this.state.workersAssigned < 1;\n            // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n            const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n            const makeTimeString = (time: number): string => {\n                if (this.state.workersAssigned === 0) {\n                    return \"\";\n                }\n                const craftingTime = calculateProductionTime(time, this.state.workersAssigned);\n                const formatted = formatDuration(craftingTime);\n                return ` Crafting time: ${formatted}`;\n            };\n\n            const handleClick = (e: React.MouseEvent) => {\n                e.stopPropagation();\n\n                if (this.props.onCraft) {\n                    this.props.onCraft(produces, this.state.workersAssigned);\n                    this.setState({\n                        workersAssigned: 0,\n                    });\n                }\n            };\n\n            const handleUp = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned + 1,\n                });\n            };\n\n            const handleDown = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned - 1,\n                });\n            };\n\n            let costItemsContent = null;\n            if (costMaterials) {\n                costItemsContent = <MaterialsCostBox items = { costMaterials } />;\n            }\n            return (\n                <div className = \"crafting-details\">\n                    Craft a { TextManager.getItemName(itemDefinition.item) }\n                    <div className = \"crafting-costs\">\n                        <fieldset>\n                            <ResourcesCostBox resources = { costResources } />\n                        </fieldset>\n                        <fieldset>\n                            { costItemsContent }\n                        </fieldset>\n                    </div>\n                    <div style={ { display: \"flex \"}}>\n                        <UpDownValue\n                            value = { this.state.workersAssigned }\n                            label ={ \"Workers: \" }\n                            onUp = { handleUp }\n                            onDown = { handleDown }\n                            upDisabled={\n                                this.state.workersAssigned >= this.props.workersFree ||\n                                this.state.workersAssigned >= MAX_WORKERS_CRAFTING\n                            }\n                            downDisabled={ this.state.workersAssigned < 1 }\n                        />\n                        &nbsp;\n                        { makeTimeString(produces.cost.time || 0) }\n                    </div>\n                    <div>\n                        <button\n                            disabled = { disabled }\n                            onClick = { handleClick }>\n                            Craft\n                        </button>\n                    </div>\n                </div>\n            );\n        };\n\n        const createProgressbars = () => {\n            const tasks = this.props.tasks || [];\n            return tasks.map((t) => <Progressbar\n                key = { `${t.name}${t.startTime}` }\n                label = { `${t.name} (${formatDuration(t.timeRemaining)})` }\n                progress = { t.progress }/>,\n            );\n        };\n\n        return (\n            // TODO: abstract some stuff to generic StructureView\n            <details open = { true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            { createCraftTabs() }\n                        </ul>\n                        { createCraftingDetails() }\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        { createProgressbars() }\n                    </fieldset>\n                </section>\n            </details>\n        );\n    }\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    return {\n        gold: store.gold,\n        items: store.items,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ProductionStructureView);\n","import { getDefinition, Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport UpDownValue from \"../ui/UpDownValue\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onWorkersUp?: () => void;\n    onWorkersDown?: () => void;\n}\n\nexport interface Props  {\n    type: Structure;\n}\n\nexport interface StateProps {\n    level?: number;\n    workers?: number;\n    workersFree?: number;\n    gold?: number;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ResourceStructureView = (props: AllProps) => {\n\n    const structureDefinition = getDefinition<ResourceStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n    const level: number = props.level || 0;\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(props.type);\n\n    const createWorkersRow = () => {\n\n        const handleUp = () => {\n            if (props.onWorkersUp) { props.onWorkersUp(); }\n        };\n        const handleDown = () => {\n            if (props.onWorkersDown) { props.onWorkersDown(); }\n        };\n\n        const upDisabled = props.workers === levelDefinition.workerCapacity || (props.workersFree || 0) < 1;\n        const downDisabled = props.workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value = { props.workers }\n            max = { levelDefinition.workerCapacity }\n            upDisabled = { upDisabled }\n            downDisabled = { downDisabled }\n            onDown = { handleDown }\n            onUp = { handleUp }\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const gold = props.gold || 0;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick = { handleClick }\n                disabled= { !canUpgrade } >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${props.workers} = ${generates[value] * (props.workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            { \"Generates (every minute): \" }\n            <br/>\n            { generatesText }\n        </div>;\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <details open = { true } className = \"structureview\">\n            <summary>{ displayName }</summary>\n            <section>\n                { createWorkersRow() }\n                { createUpgradeRow() }\n                { createGeneratesRow() }\n            </section>\n        </details>\n    );\n};\n\nexport default ResourceStructureView;\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport ResourceStructureView,  { DispatchProps, Props, StateProps } from \"../../components/structures/ResourceStructureView\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n    if (!structureStore) { throw new Error(`No structure '${ownProps.type}' found in the store!`); }\n    return {\n        gold: store.gold,\n        level: structureStore.level,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n        onWorkersDown: () => {\n            dispatch(decreaseWorkers(ownProps.type));\n        },\n        onWorkersUp: () => {\n            dispatch(increaseWorkers(ownProps.type));\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResourceStructureView);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Action } from \"redux\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",\n    advanceQuest = \"advanceQuest\",\n    updateQuestVars = \"updateQuestVars\",\n    updateEncounterResult = \"updateEncounterResult\",\n    startEncounter = \"startEncounter\",\n    updateQuests = \"updateQuests\",\n}\n\nexport interface QuestAction extends Action<ActionType> {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface StartEncounterAction extends QuestAction {\n    encounter: Encounter;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Move to the next node */\nexport function advanceQuest(quest: string): QuestAction {\n    return {\n        type: ActionType.advanceQuest,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\nexport function startEncounter(quest: string, encounter: Encounter): StartEncounterAction {\n    return {\n        type: ActionType.startEncounter,\n        questName: quest,\n        encounter,\n    };\n}\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurerInventory,\n    warehouse,\n    tavern,\n    adventurerEquipment,\n}\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\nimport \"./css/draggableadventureravatar.css\";\n\nexport interface Props {\n    sourceId?: string;\n    onClick?: () => void;\n    disabled?: boolean;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface AdventurerAvatarDragInfo {\n    adventurer: AdventurerStoreState;\n    sourceId?: string;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\n    beginDrag(props: Props & AdventurerAvatarProps) {\n        // Return the data describing the dragged item\n        return {\n            adventurer: props.adventurer,\n            sourceId: props.sourceId,\n            sourceType: DragSourceType.adventurerInventory,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableAdventurerAvatar extends React.Component<Props & CollectedProps & AdventurerAvatarProps> {\n\n    public render() {\n        const { isDragging, connectDragSource, disabled } = this.props;\n        let className = \"draggable-adventurer-avatar\";\n        if (disabled) {\n            className += \" disabled\";\n        }\n        if (isDragging) {\n            className += \" dragging\";\n        }\n\n        /*if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }*/\n        return connectDragSource(\n            <div className = { className }>\n                <AdventurerAvatar\n                    // Copy all props down to AdventurerAvatar\n                    { ...this.props }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\n","import { TextEntry } from \"constants/text\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nexport interface EncounterDefinition {\n    name: Encounter;\n    getOracle: (questName: string, store: StoreState) => Oracle;\n    chance?: number;    // number from 0 to 1, undefined means: 1\n    getDescription: (oracle: Oracle) => TextEntry;\n    getOptions: (oracle: Oracle) => Record<string, string>;\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => string;\n}\n\nexport enum Encounter {\n    backstabbed = \"backstabbed\",\n    goblinHouseHallway = \"goblinHouseHallway\",\n    goblinHouseOutside = \"goblinHouseOutside\",\n    theBigTree = \"theBigTree\",\n}\n","import { Item } from \"definitions/items/types\";\nimport { Encounter } from \"../encounters/types\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum QuestNodeType {\n    nothing = 0,    // Nothing much going on here\n    encounter = 1,\n    combat = 2,     // Not implemented\n    boss = 3,\n}\n\nexport interface QuestDefinition {\n    nodes: QuestNode[];\n    requiredItems?: Item[];\n}\n\nexport interface QuestNode {\n    x: number;\n    y: number;\n    type: QuestNodeType;\n    encounter?: Encounter; // TODO: or array of encounters\n    log?: string;      // this text will appear in the log upon entering the node. only at 'nothing' nodes\n}\n\nconst kill10Boars: QuestDefinition = {\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node0\",\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node1\",\n    // }, {\n    //     x: 0,\n    //     y: 3,\n    //     type: QuestNodeType.nothing,\n    //     log: \"In the distance, a forest looms\",\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.goblinHouseOutside,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node4\",\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 3,\n        y: 3,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 4,\n        y: 4,\n        type: QuestNodeType.nothing,\n        log: \"The party spots a boss\",\n    }, {\n        x: 5,\n        y: 4,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst retrieveMagicAmulet: QuestDefinition = {\n    requiredItems: [\n        Item.torch,\n        Item.torch,\n        Item.torch,\n        Item.sandwich,\n        Item.sandwich,\n    ],\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Papa loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Mama loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Look at 'em sway with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"gettin' so gay with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.theBigTree,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 3,\n        y: 1,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst all = {\n    kill10Boars,\n    retrieveMagicAmulet,\n};\n\nexport default all;\n\nexport function getDefinition(quest: string): QuestDefinition {\n    return all[quest];\n}\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/droppableadventurerslot.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/*\n * Can drop adventurers on this */\nclass DroppableAdventurerSlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n        let className = \"droppable-adventurer-slot\";\n\n        if (isOver) {\n            className += \" active-drop\";\n        } else if (canDrop) {\n            className += \" can-drop\";\n        }\n\n        return connectDropTarget(\n            <div className = { className }>\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ADVENTURER,\n    dropTarget,\n    collect,\n)(DroppableAdventurerSlot);\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAddEventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (index: number) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = <AdventurerAvatar adventurer = { adventurer } displayName = { false } onClick = { () => props.onRemoveAdventurer(i) }/> ;\n                className = \"has-adventurer\";\n            } else {\n                content = <DroppableAdventurerSlot onDrop = { (item: AdventurerAvatarDragInfo) => { props.onAddEventurer(item, i); }} />;\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return <ul className = \"assign-adventurers\">\n        { slotsContent() }\n    </ul>;\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport ItemsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, QuestDefinition } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\n\nconst availableSlots = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface StateProps {\n    items: Array<Item | null>;  // items in inventory\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {}\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName: string | null;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n\n    onQuestClick: (questName: string) => void;\n    onRemoveAdventurer: (index: number) => void;\n    onAddAdventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onLaunchQuest: () => void;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n}\n\nexport default class QuestBoard extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n    }\n\n    public render() {\n        const questListContent: JSX.Element[] = this.props.availableQuests.map((q) => {\n            const iconImgPath = `img/sigils/${ q.icon }`;\n            const className = \"quest\" + ((q.name === this.props.selectedQuestName) ? \" selected\" : \"\");\n            return <li key={ q.name } className = { className } onClick = { () => { this.props.onQuestClick(q.name); } }>\n                <div\n                    className = \"icon\"\n                    style={{backgroundImage: `url(${iconImgPath})`}}\n                ></div>\n                <div className = \"title\">{ TextManager.getQuestTitle(q.name) } </div>\n            </li>;\n        });\n\n        const getQuestDetails = () => {\n            if (!this.props.selectedQuestName) {\n                return null;\n            }\n            const quest = this.props.availableQuests.find((q) => q.name === this.props.selectedQuestName);\n            if (!quest) {\n                return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n            }\n            const questDefinition = getDefinition(quest.name);\n\n            // Need a full party to launch\n            const fullParty = this.props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n            // Check if we have the required items\n            const enoughItems = this.checkEnoughItems(questDefinition);\n\n            const canLaunch = fullParty && enoughItems;\n\n            return <div className=\"quest-details\">\n                { TextManager.getQuestDescription(this.props.selectedQuestName) }\n                <AssignAdventurers\n                    availableSlots = { availableSlots }\n                    assignedAventurers = { this.props.assignedAventurers }\n                    onRemoveAdventurer = { this.props.onRemoveAdventurer }\n                    onAddEventurer = { this.props.onAddAdventurer } />\n                <ItemsCostBox items = { questDefinition.requiredItems || [] }/>\n                <button disabled = { !canLaunch } onClick = { () => this.props.onLaunchQuest() }>\n                    { TextManager.get(\"structure-tavern-button-launch-quest\") }\n                </button>\n            </div>;\n        };\n\n        // quest board, expanded quest info + assign adventurers + launch button\n        return <div className = \"quest-board\">\n            <h2> { TextManager.get(\"structure-tavern-title-quest-board\") } </h2>\n            <ul className = \"quest-list\">\n                { questListContent }\n            </ul>\n            { getQuestDetails() }\n        </div>;\n    }\n\n    /**\n     * Returns true if all the items required by the quest are in the inventory\n     */\n    public checkEnoughItems(questDefinition: QuestDefinition): boolean {\n        if (!questDefinition.requiredItems) {\n            return true;\n        }\n        return questDefinition.requiredItems.every((item: Item) => {\n            const amountRequired = (questDefinition.requiredItems)!.filter((i) => i === item).length;\n            return this.props.items.filter((i) => i === item).length >= amountRequired;\n        });\n    }\n}\n","import QuestBoard, { Props, StateProps } from \"components/structures/tavern/QuestBoard\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        items: store.items,\n    };\n}\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(QuestBoard);\n","import { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n    assignEquipment = \"assignEquipment\",\n    removeEquipment = \"removeEquipment\",\n}\n\nexport interface Action {\n    type: ActionType;\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends Action {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends Action {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport interface AssignEquipmentAction extends Action {\n    item: Item;\n    equipmentSlot: EquipmentSlotType;\n}\nexport interface RemoveEquipmentAction extends Action {\n    equipmentSlot: EquipmentSlotType;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n\nexport function assignEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item): AssignEquipmentAction {\n    return {\n        type: ActionType.assignEquipment,\n        adventurerId,\n        item,\n        equipmentSlot,\n    };\n}\n\nexport function removeEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType): RemoveEquipmentAction {\n    return {\n        type: ActionType.removeEquipment,\n        adventurerId,\n        equipmentSlot,\n    };\n}\n","// todo: hooks!\n// https://github.com/react-dnd/react-dnd/pull/1244\nimport { DragType } from \"constants/dragging\";\nimport { getDefinition } from \"definitions/items\";\nimport { ApparelDefinition, ApparelType } from \"definitions/items/apparel\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/equipmentslot.css\";\nimport { InventoryItemDragInfo } from \"./DraggableItemIcon\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        const item = monitor.getItem().item;\n\n        return itemAndEquipmentSlotMatch(item, props.type);\n    },\n};\n\n// Returns true if item can be slotted in equipmentSlotType\nexport const itemAndEquipmentSlotMatch = (item: Item, equipmentSlotType: EquipmentSlotType) => {\n    switch (equipmentSlotType) {\n        case EquipmentSlotType.chest:\n            return checkEquipment(item, ApparelType.chest);\n         case EquipmentSlotType.feet:\n            return checkEquipment(item, ApparelType.feet);\n        case EquipmentSlotType.hands:\n            return checkEquipment(item, ApparelType.hands);\n        case EquipmentSlotType.head:\n            return checkEquipment(item, ApparelType.head);\n        case EquipmentSlotType.legs:\n            return checkEquipment(item, ApparelType.legs);\n        case EquipmentSlotType.mainHand:\n        case EquipmentSlotType.offHand:\n            const itemDefinition = getDefinition(item);\n            if (itemDefinition.itemType !== ItemType.weapon) {\n                return false;\n            }\n\n            // todo: prevent shields to be equipped in main hand\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport enum EquipmentSlotType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n    mainHand,\n    offHand,\n}\n\nexport interface Props {\n    type: EquipmentSlotType;\n    onDrop: (item: InventoryItemDragInfo) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The EquipmentSlot displays a slot in which an item can be placed.\n */\nconst EquipmentSlot = (props: React.PropsWithChildren<Props & DropSourceProps>) => {\n    const {\n        isOver,\n        canDrop,\n        connectDropTarget,\n    } = props;\n    const isActive = isOver && canDrop;\n    let borderColor = \"grey\";\n    if (isActive) {\n        borderColor = \"green\";\n    } else if (canDrop) {\n        borderColor = \"orange\";\n    }\n\n    return connectDropTarget(\n        <div className = \"equipment-slot\" style = { { borderColor }} title={EquipmentSlotType[props.type]}>\n            { props.children }\n        </div>,\n    );\n};\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(EquipmentSlot);\n\nconst checkEquipment = (item: Item, equipmentType: ApparelType) => {\n    const itemDefinition = getDefinition(item);\n    if (itemDefinition.itemType !== ItemType.apparel) {\n        return false;\n    }\n    return (itemDefinition as ApparelDefinition).equipmentType === equipmentType;\n};\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport ItemIcon from \"./ItemIcon\";\n\nexport interface Props {\n    index: number;\n    item: Item;\n    sourceType: DragSourceType;\n    sourceId?: string;\n    size?: IconSize;\n    onClick?: (event: React.MouseEvent) => void;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface InventoryItemDragInfo {\n    item: Item;\n    inventorySlot?: number;\n    sourceId?: string;\n    sourceType: DragSourceType;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\n    beginDrag(props: Props) {\n        // Return the data describing the dragged item\n        return {\n            inventorySlot: props.index,\n            item: props.item,\n            sourceId: props.sourceId,\n            sourceType: props.sourceType,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableItemIcon extends React.Component<Props & CollectedProps > {\n\n    public render() {\n        const { item, onClick, isDragging, connectDragSource, size } = this.props;\n\n        const handleClick = (event: React.MouseEvent) => {\n            if (onClick) {\n                onClick(event);\n            }\n        };\n        if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }\n        return connectDragSource(\n            <div>\n                <ItemIcon\n                    item = { item }\n                    onClick = { handleClick }\n                    size = { size }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport { InventoryItemDragInfo } from \"../DraggableItemIcon\";\nimport { itemAndEquipmentSlotMatch } from \"../EquipmentSlot\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor) {\n        const dragInfo: InventoryItemDragInfo = monitor.getItem();\n        if (dragInfo.sourceType === DragSourceType.adventurerEquipment) {\n            return props.item == null || itemAndEquipmentSlotMatch(props.item, dragInfo.inventorySlot!);\n        }\n        return true;\n    },\n};\n\nexport interface Props {\n    item: Item | null;\n    onDrop: (item: any) => void;\n    size?: IconSize;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The InventorySlot displays a slot in which an item can be placed.\n */\nclass InventorySlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        const isActive = isOver && canDrop;\n\n        const classNames = [\n            \"inventory-item\",\n            getClassName(this.props.size),\n        ];\n\n        if (isActive) {\n            classNames.push(\"drop-active\");\n        } else if (canDrop) {\n            classNames.push(\"drop-possible\");\n        }\n\n        return connectDropTarget(\n            <div className = { classNames.join(\" \") }>\n                { this.props.children }\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(InventorySlot);\n","import DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport {Item} from \"definitions/items/types\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    iconSize?: IconSize;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props & AppContextProps) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n        };\n\n        if (item) {\n            contents = <DraggableItemIcon\n                index = { i }\n                sourceId = { props.sourceId }\n                sourceType = { props.sourceType }\n                item = { item }\n            >\n            </DraggableItemIcon>;\n       }\n\n        const slot = <InventorySlot\n            key = { `inventory-slot-${i}` }\n            item = { item }\n            size = { props.iconSize }\n            onDrop = { handleDrop }\n        >\n            { contents }\n        </InventorySlot>;\n        slots.push(slot);\n   }\n    return <div className = \"inventory\">\n        {slots}\n    </div>;\n};\nexport default withAppContext(Inventory); // todo: we don't need appcontext\n","import { AppContext } from \"components/App\";\nimport { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventurerinfo.css\";\nimport DraggableItemIcon, { InventoryItemDragInfo } from \"./DraggableItemIcon\";\nimport EquipmentSlot, { EquipmentSlotType } from \"./EquipmentSlot\";\nimport Inventory from \"./inventory/Inventory\";\n\nexport interface Props {\n    adventurerId: string;\n}\n\nexport interface DispatchProps {\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => void;\n    onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => void;\n    onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => void;\n    onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => void;\n}\n\nexport interface StateProps {\n    adventurer: AdventurerStoreState;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\nconst AdventurerInfo = (props: AllProps) => {\n\n    const context = React.useContext(AppContext)!;\n    const adventurer = props.adventurer;\n    const attributes = Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key = { `${adventurer.id}-${stat}`} > <b>{ stat }</b>: { value.toFixed(1) } </div>;\n    });\n    // const equipmentList = Object.keys(getEquipment(.map((equipment) =) {\n    //     return <div key = { `${adventurer.id}-${equipment}` } ><b>{ equipment }</b>: { getEquipment(equipment] }  </di)>;\n    // });\n\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        // When an item gets dropped on equipment slot\n        const item = dragInfo.item;\n\n        switch (dragInfo.sourceType) {\n            case DragSourceType.adventurerInventory: {\n                // Dragged from inventory\n                props.onRemoveItemFromInventory(adventurer.id, dragInfo.inventorySlot!);\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.adventurerEquipment: {\n                // Dragged from equipment slot (only applicable to weapons)\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n            }\n        }\n    };\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n            const handleClick = (event: React.MouseEvent) => {\n                const origin = (event.currentTarget as HTMLElement);\n                const originRect = origin.getBoundingClientRect();\n                context.onContextualObjectActivated(\n                    ContextType.item,\n                    getDefinition(item),\n                    itemRef,\n                    originRect,\n                );\n                event.stopPropagation();\n            };\n\n            contents = <DraggableItemIcon\n                index = { slotType }\n                sourceId = { adventurer.id }\n                sourceType = { DragSourceType.adventurerEquipment }\n                item = { item }\n                onClick = { handleClick }\n                ref = { itemRef }\n                size = { IconSize.medium }\n            >\n            </DraggableItemIcon>;\n        }\n\n        return (\n            <EquipmentSlot\n                onDrop = { (dragInfo: InventoryItemDragInfo) => handleDropItemEquipment(dragInfo, slotType) }\n                type = { slotType }\n            >\n                { contents }\n            </EquipmentSlot>\n        );\n    };\n\n    const equipmentList = <ul>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.head) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.shoulders) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.chest) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.hands) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.legs) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.feet) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.mainHand) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.offHand) }\n        </li>\n    </ul>;\n\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        switch (sourceType) {\n            case DragSourceType.adventurerInventory:\n                // Drag from one inventory slot to another\n                if (props.onMoveItemInInventory) {\n                    props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\n                }\n                break;\n\n            case DragSourceType.adventurerEquipment:\n                // Drag from equipment slot\n                if (props.onAddItemToInventory && props.onRemoveEquipment) {\n                    props.onAddItemToInventory(adventurer.id, item, toSlot);\n                }\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n        }\n    };\n    return (\n        <div className = \"adventurer-info\">\n            <div className = \"left\">\n                <div className = \"name\">\n                    <b>{ adventurer.name }</b>\n                </div>\n                <div className = \"attributes\">\n                    { attributes }\n                </div>\n                <div className = \"equipment\">\n                    { equipmentList }\n                </div>\n            </div>\n            <div className = \"right\">\n                <Inventory\n                    sourceType = { DragSourceType.adventurerInventory }\n                    sourceId = { adventurer.id }\n                    items = { adventurer.inventory }\n                    onDropItem = { handleDropItemInventory }\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AdventurerInfo;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport SquareIconButton from \"components/widgets/SquareIconButton\";\nimport * as React from \"react\";\n\nexport interface Props {\n    title: string;\n    backEnabled?: boolean;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n}\n\ntype AllProps = Props;\n\n/**\n *\n */\nconst Window: React.FunctionComponent<AllProps> = (props) => {\n\n    const handleClose = (e: React.MouseEvent) => {\n        if (props.onClose) {\n            props.onClose();\n        }\n    };\n    const handleBack = (e: React.MouseEvent) => {\n        if (props.onBack) {\n            props.onBack();\n        }\n    };\n\n    let BackButton = null;\n    if (props.backEnabled !== false) {\n         BackButton = <SquareIconButton className = \"back-button\" onClick = { handleBack } text = \"<\"/>;\n\n    }\n\n    let CloseButton = null;\n    if (props.closeEnabled !== false) {\n        CloseButton = <SquareIconButton className = \"close-button\" onClick = { handleClose } text = \"x\"/>;\n    }\n\n    return <div className = \"window\">\n        <div className = \"header\">\n            { BackButton }\n            <h3>{ props.title }</h3>\n            { CloseButton }\n        </div>\n        { props.children }\n    </div>;\n};\n\nexport default Window;\n","import \"components/ui/window/css/window.css\";\nimport Window, { Props } from \"components/ui/window/Window\";\nimport * as React from \"react\";\n\nexport const withWindow = <TWrappedComponentProps extends Props>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    return class WithWindow extends React.Component<TWrappedComponentProps> {\n\n        public render() {\n            return <Window { ...this.props } >\n                <WrappedComponent { ...this.props } />\n            </Window>;\n        }\n    };\n};\n","import { addItemToInventory, assignEquipment, moveItemInInventory, removeEquipment, removeItemFromInventory } from \"actions/adventurers\";\nimport AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { Item } from \"definitions/items/types\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\ntype AllProps = Props & WindowProps;\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        // Adds item to inventory of adventurer\n        onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => {\n            const action = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action);\n        },\n        // Equipment gets assigned to a slot\n        onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => {\n            const action = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(action);\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => {\n            const action = removeEquipment(adventurerId, equipmentSlot);\n            dispatch(action);\n        },\n        // Removes an item from an adventurers' inventory\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot) => {\n            const action = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default compose(\n    withWindow,\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n)(AdventurerInfo) as React.ComponentType<AllProps>;\n","import DraggableAdventurerAvatar, { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport QuestBoard from \"containers/structures/tavern/QuestBoard\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/tavernstructureview.css\";\nimport { AppContext } from \"components/App\";\nimport AdventurerInfoWindow from \"components/ui/window/windows/AdventurerInfoWindow\";\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n    selectedQuestName: string | null;\n    assignedAventurers: AdventurerStoreState[];\n}\n\nconst SOURCE_ID = \"tavern\";\n\nconst TavernStructureView = (props: AllProps) => {\n    const [assignedAventurers, setAassignedAdventurers] = React.useState<AdventurerStoreState[]>([]);\n    const [selectedQuest, setSelectedQuest] = React.useState<string | null>(null);\n    const context = React.useContext(AppContext)!;\n\n    const structureDefinition = getDefinition<TavernStructureDefinition>(Structure.tavern);\n    const level: number = props.level || 0;\n    const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(Structure.tavern);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style = {{ float: \"right\" }}\n                onClick = { handleClick }\n                disabled= { !canUpgrade }\n            >\n                { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const roomCount = levelDefinition.rooms;\n    const createRooms = () => {\n\n        const roomContent: JSX.Element[] = [];\n        for (let i = 0; i < roomCount; i++) {\n            const adventurer = props.adventurers.find((a) => a.room === i);\n            let content = null;\n            if (adventurer) {\n                let name = adventurer.name;\n\n                const assigned = assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n                const party = getQuestByAdventurer(adventurer.id);\n                if (party) {\n                    name += \" (on a quest)\";\n                }\n                content = [<DraggableAdventurerAvatar\n                    disabled = { assigned || party != null }\n                    adventurer = { adventurer }\n                    className = \"adventurer-icon\"\n                    sourceId = { SOURCE_ID }\n                    key = { `avatar:${adventurer.id}` }\n                />,\n                <a key = { adventurer.id } onClick = { () => handleAdventurerNameClick(adventurer) }> { name }</a>,\n                /*\n                <button\n                    className = \"boot\"\n                    key = { `boot:${adventurer.id}` }\n                >\n                    Boot\n                </button>,*/\n            ];\n            } else {\n                content = \"(empty room)\";\n            }\n\n            roomContent.push(<div key = { `room${i}` } className = \"room\">\n                { content }\n            </div>);\n        }\n\n        return <div className = \"rooms\">\n            <h2>Rooms</h2>\n            { roomContent }\n        </div>;\n    };\n\n    const getAvailableQuests = props.quests.filter((q) => q.status === QuestStatus.available );\n\n    const getQuestByAdventurer = (adventurerId: string): QuestStoreState | undefined => {\n        return Object.values(props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    };\n\n    const handleQuestClick = (name: string) => {\n        if (selectedQuest === name) {\n            setSelectedQuest(null);\n        } else {\n            setSelectedQuest(name);\n        }\n\n        // Unassign all adventurers\n        setAassignedAdventurers([]);\n    };\n\n    const handleAddAdventurer = (item: AdventurerAvatarDragInfo, index: number) => {\n        if (item.sourceId === SOURCE_ID) {\n            const copy = [ ...assignedAventurers];\n            copy[index] = item.adventurer;\n            setAassignedAdventurers(copy);\n        }\n    };\n\n    const handleRemoveAdventurer = (index: number): void => {\n        const copy = [ ...assignedAventurers];\n        delete copy[index];\n        setAassignedAdventurers(copy);\n    };\n\n    const handleLaunchQuest = (): void => {\n        props.onLaunchQuest(selectedQuest!, assignedAventurers);\n    };\n\n    const handleAdventurerNameClick = (adventurer: AdventurerStoreState) => {\n        const window = <AdventurerInfoWindow adventurerId = { adventurer.id } title = { adventurer.name } />;\n        context.onOpenWindow(window);\n    };\n\n    return (\n        <details open = { true } className = \"tavernstructureview\">\n            <summary>{ displayName }</summary>\n            { createUpgradeRow() }\n            <section>\n                { createRooms() }\n                <QuestBoard\n                    availableQuests = { getAvailableQuests }\n                    selectedQuestName = { selectedQuest }\n                    assignedAventurers = { assignedAventurers }\n                    onQuestClick = { (name: string) => handleQuestClick(name) }\n                    onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => handleAddAdventurer(item, index) }\n                    onRemoveAdventurer = { (index: number) => handleRemoveAdventurer(index) }\n                    onLaunchQuest = { () => handleLaunchQuest() }\n                />\n            </section>\n        </details>\n    );\n};\n\nexport default TavernStructureView;\n\n// export default class TavernStructureView extends React.Component<AllProps, LocalState> {\n\n//     constructor(props: AllProps) {\n//         super(props);\n\n//         this.state = {\n//             assignedAventurers: [],\n//             selectedQuestName: null,\n//         };\n//     }\n\n//     public render() {\n//         const structureDefinition = getDefinition<TavernStructureDefinition>(Structure.tavern);\n//         const level: number = this.props.level || 0;\n//         const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n//         const displayName = TextManager.getStructureName(Structure.tavern);\n\n//         const createUpgradeRow = () => {\n//             const gold = this.props.gold;\n//             const nextLevel = structureDefinition.levels[level + 1];\n//             const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n//             const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n//             const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n//             const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//                 if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n//             };\n//             return <div>\n//                 <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n//                 <button\n//                     style = {{ float: \"right\" }}\n//                     onClick = { handleClick }\n//                     disabled= { !canUpgrade }\n//                 >\n//                     { upgradeText }\n//                 </button>\n//             </div>;\n//         };\n\n//         const roomCount = levelDefinition.rooms;\n//         const createRooms = () => {\n\n//             const roomContent: JSX.Element[] = [];\n//             for (let i = 0; i < roomCount; i++) {\n//                 const adventurer = this.props.adventurers.find((a) => a.room === i);\n//                 let content = null;\n//                 if (adventurer) {\n//                     let name = adventurer.name;\n\n//                     const assigned = this.state.assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n//                     const party = this.getQuestByAdventurer(adventurer.id);\n//                     if (party) {\n//                         name += \" (on a quest)\";\n//                     }\n//                     content = [<DraggableAdventurerAvatar\n//                         disabled = { assigned || party != null }\n//                         adventurer = { adventurer }\n//                         className = \"adventurer-icon\"\n//                         sourceId = { SOURCE_ID }\n//                         key = { `avatar:${adventurer.id}` }\n//                     />,\n//                     <a key = { adventurer.id } onClick = { () => this.handleAdventurerNameClick(adventurer) }> { name }</a>,\n//                     /*\n//                     <button\n//                         className = \"boot\"\n//                         key = { `boot:${adventurer.id}` }\n//                     >\n//                         Boot\n//                     </button>,*/\n//                 ];\n//                 } else {\n//                     content = \"(empty room)\";\n//                 }\n\n//                 roomContent.push(<div key = { `room${i}` } className = \"room\">\n//                     { content }\n//                 </div>);\n//             }\n\n//             return <div className = \"rooms\">\n//                 <h2>Rooms</h2>\n//                 { roomContent }\n//             </div>;\n//         };\n\n//         const availableQuests = this.props.quests.filter((q) => q.status === QuestStatus.available );\n\n//         return (\n//             <details open = { true } className = \"tavernstructureview\">\n//                 <summary>{ displayName }</summary>\n//                 { createUpgradeRow() }\n//                 <section>\n//                     { createRooms() }\n//                     <QuestBoard\n//                         availableQuests = { availableQuests }\n//                         selectedQuestName = { this.state.selectedQuestName }\n//                         assignedAventurers = { this.state.assignedAventurers }\n//                         onQuestClick = { (name: string) => this.handleQuestClick(name) }\n//                         onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => this.handleAddAdventurer(item, index) }\n//                         onRemoveAdventurer = { (index: number) => this.handleRemoveAdventurer(index) }\n//                         onLaunchQuest = { () => this.handleLaunchQuest() }\n//                     />\n//                 </section>\n//             </details>\n//         );\n//     }\n\n//     private handleQuestClick(name: string) {\n//         if (this.state.selectedQuestName === name) {\n//             this.setState( { selectedQuestName: null });\n//         } else {\n//             this.setState( { selectedQuestName: name });\n//         }\n\n//         // Unassign all adventurers\n//         this.setState({\n//             assignedAventurers: [],\n//         });\n//     }\n\n//     private handleAdventurerNameClick(adventurer: AdventurerStoreState) {\n//         //console.log(name)\n//     }\n\n//     private handleAddAdventurer(item: AdventurerAvatarDragInfo, index: number) {\n//         if (item.sourceId === SOURCE_ID) {\n//             const assignedAventurers = [ ...this.state.assignedAventurers];\n//             assignedAventurers[index] = item.adventurer;\n//             this.setState({\n//                 assignedAventurers,\n//             });\n//         }\n//     }\n\n//     /**\n//      * Removes an assigned adventurer from a slot\n//      * @param index\n//      */\n//     private handleRemoveAdventurer(index: number): void {\n//         const assignedAventurers = [ ...this.state.assignedAventurers];\n//         delete assignedAventurers[index];\n//         this.setState({\n//             assignedAventurers,\n//         });\n//     }\n\n//     private handleLaunchQuest(): void {\n//         const assignedAventurers = this.state.assignedAventurers;\n//         const selectedQuestName = this.state.selectedQuestName!;\n//         this.props.onLaunchQuest(selectedQuestName, assignedAventurers);\n//     }\n\n//     /**\n//      * Returns the party the adventurer is in. undefined if not in any party\n//      * @param adventurerId\n//      */\n//     private getQuestByAdventurer(adventurerId: string): QuestStoreState | undefined {\n//         return Object.values(this.props.quests).find((quest) => {\n//             return quest.party.indexOf(adventurerId) > -1;\n//         });\n//     }\n// }\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.tavern,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(TavernStructureView);\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n    deltaResources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox is used in the Warehouse to show a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n        resources,\n        deltaResources,\n    } = props;\n\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        const amount = props.resources[resource]!;\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        let delta;\n        if (deltaResources[resource]) {\n            delta = <span className = \"animate-up\">\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\n            </span>;\n        }\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { amount.toFixed(1) }\n            </div>\n            <div className = \"max\" >\n                { ` / ${props.maxResources[resource]}` }\n            </div>\n            <div className = \"delta\">\n                { delta }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport Inventory from \"components/ui/inventory/Inventory\";\nimport ResourcesBox from \"components/ui/resources/ResourcesBox\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, Structure  } from \"definitions/structures\";\nimport { StructureDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/warehousestructureview.css\";\n\nexport interface DispatchProps {\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props  {\n}\n\nexport interface StateProps  {\n    level: number;\n    workers: number;\n    workersFree: number;\n    gold: number;\n    items: Array<Item|null>;\n    adventurersInTown: AdventurerStoreState[];\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\nconst warehouse = DragSourceType.warehouse;\n\nclass WarehouseStructureView extends React.Component<AllProps, LocalState> {\n    private resourcesDelta: ResourceStoreState;\n    private resourcesRef: HTMLFieldSetElement | null;\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedAdventurer: null,\n        };\n\n        this.resourcesDelta = {};\n        this.resourcesRef = null;\n    }\n\n    public render() {\n        const props = this.props;\n        const structureDefinition = getDefinition<StructureDefinition>(Structure.warehouse);\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\n        }\n        const level: number = props.level;\n        const displayName = TextManager.getStructureName(Structure.warehouse);\n\n        const createUpgradeRow = () => {\n            const gold = props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const handleDropItemWarehouse = (item: Item, fromSlot: number,\n                                         toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            switch (sourceType) {\n                case warehouse:\n                    if (props.onMoveItemInWarehouse) {\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\n                    }\n                    break;\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemFromAdventurer) {\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        const handleAdventurerTabSelected = (tabId: string) => {\n            this.setState({\n                selectedAdventurer: tabId,\n            });\n        };\n\n        const handleDropItemAdventurer = (item: Item, fromSlot: number,\n                                          toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            const adventurerId = this.state.selectedAdventurer!;\n            switch (sourceType) {\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemInInventory) {\n                        props.onMoveItemInInventory(adventurerId, fromSlot, toSlot);\n                    }\n                    break;\n                case warehouse:\n                    if (props.onMoveItemToAdventurer) {\n                        props.onMoveItemToAdventurer(adventurerId, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        let adventurerContent = null;\n        if (this.state.selectedAdventurer) {\n            const adventurer = props.adventurersInTown.find((a) => a.id === this.state.selectedAdventurer)!;\n            adventurerContent = <Inventory\n                sourceType = { warehouse }\n                items = { adventurer.inventory }\n                onDropItem = { handleDropItemAdventurer }\n            />;\n        }\n\n        const adventurersArea = <>\n            <Tabstrip className = \"adventurers-tabstrip\" onTabSelected = { (tabId: string) => handleAdventurerTabSelected(tabId) } >\n            { props.adventurersInTown.map((a) => {\n                return <Tab id = { a.id } key = { a.id }>\n                    <AdventurerAvatar adventurer = { a } className = \"common-icon-small\"/>\n                </Tab>;\n            }) }\n            </Tabstrip>\n            <div className = \"adventurer-info\">\n                { adventurerContent }\n            </div>\n        </>;\n\n        return (\n            <details open = { true } className = \"warehouse-structureview\">\n                <summary>{ displayName }</summary>\n                { createUpgradeRow() }\n                <fieldset className=\"resources\" ref = { (ref) => { this.resourcesRef = ref; }}>\n                    <legend>Resources</legend>\n                    <ResourcesBox\n                        resources = { props.resources }\n                        maxResources = { props.maxResources }\n                        deltaResources = { this.resourcesDelta }\n                    />\n                </fieldset>\n\n                <Inventory\n                    sourceType = { warehouse }\n                    items = { props.items }\n                    onDropItem = { handleDropItemWarehouse }\n                />\n                { adventurersArea }\n\n            </details>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<AllProps>) {\n        Object.keys(prevProps.resources).forEach((resource: string) => {\n            this.resourcesDelta[resource] = this.props.resources[resource]! - prevProps.resources[resource]!;\n        });\n\n        if (this.resourcesRef) {\n            this.resourcesRef.classList.remove(\"animate\");\n            setTimeout(() => {\n                if (this.resourcesRef) {\n                    this.resourcesRef.classList.add(\"animate\");\n                }\n            }, 200);\n        }\n    }\n}\n\nexport default WarehouseStructureView;\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n    const adventurersOnQuest = (quest: QuestStoreState): AdventurerStoreState[] => {\n        const party: string[] = quest.party;\n        return party.map((id: string) => findAdventurerById(id)!);\n    };\n\n    const findAdventurerById = (id: string): AdventurerStoreState | undefined => {\n        return adventurers.find((a) => a.id === id);\n    };\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\nconst getAdventurersInTown = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n    // Get an array of all adventurer ids on any active quest\n    const adventurersOnQuest = quests.reduce<string[]>((acc, val: QuestStoreState) => {\n        if (val.status === QuestStatus.active) {\n            acc.push(...val.party);\n        }\n        return acc;\n    }, []);\n\n    return adventurers.filter((a) => adventurersOnQuest.indexOf(a.id) === -1);\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersInTown = createSelector([\n    getAdventurers,\n    getQuests],\n    getAdventurersInTown,\n);\n","import { addItemToInventory, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse, moveItemInWarehouse, removeItemFromWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { upgradeStructure } from \"actions/structures\";\nimport WarehouseStructureView,\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectAdventurersInTown } from \"selectors/adventurers\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\n    const level: number = structureStore.level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    const adventurersInTown = selectAdventurersInTown(store);   // todo: refreshes too much. fix\n\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\n    return {\n        adventurersInTown,\n        gold: store.gold,\n        items: store.items,\n        level,\n        maxResources: levelDefinition.maxResources,\n        resources: store.resources,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number) {\n            const action1 = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToWarehouse(item, toSlot);\n            dispatch(action2);\n        },\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        // Moves item from warehouse to an adventurer\n        onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\n            const action1 = removeItemFromWarehouse(fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action2);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.warehouse,\n            }, LogChannel.town));\n        },\n    };\n}\n\n// export default compose(\n//     connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n// //    withAppContext,\n// )(WarehouseStructureView) as React.ComponentType<Props>;\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(WarehouseStructureView);\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport ResourceStructureView from \"containers/structures/ResourceStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst getStructureView = (structure: Structure) => {\n    const structureDefinition: StructureDefinition = getDefinition(structure);\n    switch (structureDefinition.type) {\n        case StructureType.production: {\n            return <ProductionStructureView type = { structure }/>;\n        }\n        case StructureType.resource: {\n            return <ResourceStructureView type = { structure }/>;\n        }\n        case StructureType.warehouse: {\n            return <WarehouseStructureView />;\n        }\n        case StructureType.tavern: {\n            return <TavernStructureView />;\n        }\n        default: {\n            return <div> { structure } </div>;\n        }\n    }\n};\n\nconst StructureDetails = (props: AllProps) => {\n    let view;\n    const structureState: StructureStoreState = props.structures[props.structure];\n    if (structureState.state === StructureState.Building) {\n        const progress = props.buildTask ? props.buildTask.progress : 1 ;\n        view = <div>\n            <Progressbar label = \"Building...\" progress= { progress } />\n        </div>;\n    } else {\n        view = getStructureView(props.structure) ;\n    }\n\n    return <fieldset className=\"structure-details\">\n        <legend>Structure</legend>\n        { view }\n    </fieldset>;\n};\n\nexport default StructureDetails;\n","import { addGold } from \"actions/gold\";\nimport { addResources } from \"actions/resources\";\nimport StructureDetailsView, { DispatchProps, Props, StateProps } from \"components/StructureDetailsView\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>): DispatchProps {\n    return {\n        onCheatGold: (amount: number) => dispatch(addGold(amount)),\n        onCheatResources: (amount: ResourceStoreState) => dispatch(addResources(amount)),\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(StructureDetailsView) as React.ComponentType<Props & WindowProps>;\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useThree } from \"react-three-fiber\";\r\nimport { useRender } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\nimport { Camera, Vector2, Vector3 } from \"three\";\r\nimport { MapControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"worldpos\";\r\nconst DEFAULT_CAMERA_POS = new THREE.Vector3(-50, 150, 50);\r\n\r\nexport interface Props {\r\n  scrollToPosition?: Vector2;\r\n  onCameraMove: (camera: Camera, controls: MapControls) => void;\r\n}\r\n\r\nconst Controls = (props: Props) => {\r\n    const { camera } = useThree();\r\n    const controls = useRef<MapControls>();\r\n\r\n    useEffect(() => {\r\n      const mapControls = new MapControls( camera );\r\n      mapControls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n      mapControls.dampingFactor = 0.05;\r\n      mapControls.screenSpacePanning = true;\r\n      mapControls.minDistance = 1;\r\n      mapControls.maxDistance = 250;\r\n      mapControls.maxPolarAngle = Math.PI / 2;\r\n      mapControls.target = new THREE.Vector3(0, 0, 0);\r\n      // mapControls.enableRotate = false;\r\n      // mapControls.enableZoom = false;\r\n      controls.current = mapControls;\r\n\r\n      camera.position.copy(DEFAULT_CAMERA_POS);\r\n      if (localStorage.getItem(LOCAL_STORAGE_KEY)) {\r\n        const savedCamera = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)!);\r\n\r\n        // Restore earlier saved position\r\n        if (savedCamera) {\r\n          camera.position.copy( savedCamera.cam );\r\n          mapControls.target.copy( savedCamera.target );\r\n        }\r\n      }\r\n    }, [camera]);\r\n\r\n    useEffect(() => {\r\n      if (controls.current && props.scrollToPosition) {\r\n        const { x, y } = props.scrollToPosition!;\r\n        const target =  new Vector3(x, 0, y);\r\n        controls.current!.target = target;\r\n        // console.log(target.cross(DEFAULT_CAMERA_POS));\r\n        camera.position.copy(new Vector3(x + DEFAULT_CAMERA_POS.x, DEFAULT_CAMERA_POS.y, DEFAULT_CAMERA_POS.z + y));\r\n      }\r\n\r\n    }, [props.scrollToPosition]);\r\n\r\n    useRender(() => {\r\n      if (controls.current) {\r\n        controls.current.update();\r\n      }\r\n\r\n      if (mouseDown.current || true) {\r\n        props.onCameraMove(camera, controls.current!);\r\n\r\n        // todo: save in redux or just here?\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify({\r\n          cam: camera.position,\r\n          target: controls.current!.target,\r\n        }));\r\n      }\r\n    }, false);\r\n\r\n    useEffect(() => {\r\n      const savePosition = () => {\r\n        if (!mouseDown.current) {\r\n          return;\r\n        }\r\n        props.onCameraMove(camera, controls.current!);\r\n\r\n        // todo: save in redux or just here?\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify({\r\n          cam: camera.position,\r\n          target: controls.current!.target,\r\n        }));\r\n\r\n      };\r\n      // const interval = setInterval(savePosition, 150);\r\n      // todo: use requestAnimationFrame https://css-tricks.com/using-requestanimationframe-with-react-hooks/\r\n      return () => {\r\n        // clearInterval(interval);\r\n      };\r\n    }, [camera.position]);\r\n\r\n    //\r\n    const mouseDown = useRef<boolean>(false);\r\n    useEffect(() => {\r\n      const handleMouseDown = () => {\r\n        mouseDown.current = true;\r\n      };\r\n\r\n      const handleMouseUp = () => {\r\n        mouseDown.current = false;\r\n      };\r\n\r\n      document.addEventListener(\"mousedown\", handleMouseDown);\r\n      document.addEventListener(\"mouseup\", handleMouseUp);\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", handleMouseDown);\r\n        document.removeEventListener(\"mouseup\", handleMouseUp);\r\n      };\r\n    }, []);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Controls;\r\n","import React, {  } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport interface Props {\r\n  name?: string;\r\n  position?: THREE.Vector3|number[];\r\n  onClick?: (object: THREE.Object3D) => void;\r\n}\r\n\r\nconst Sphere = (props: Props) => {\r\n    const geometry = new THREE.SphereGeometry( 5, 32, 32 );\r\n    const material = new THREE.MeshBasicMaterial( {color: \"purple\"} );\r\n\r\n    const handleClick = (evt: any) => {\r\n      if (props.onClick) {\r\n        props.onClick(evt.object);\r\n      }\r\n    };\r\n\r\n    if (!geometry) {\r\n      return null;\r\n    }\r\n    return (\r\n      <mesh\r\n        name={ props.name}\r\n        position={props.position}\r\n        onClick={ handleClick }\r\n        geometry={ geometry }\r\n        material={ material }\r\n      />\r\n    );\r\n  };\r\n\r\nexport default Sphere;\r\n","// It's a js file because there is some problem with the\r\nimport React, { useEffect } from 'react'\r\nimport { useThree } from 'react-three-fiber'\r\nimport * as THREE from 'three'\r\n\r\nfunction DebugInspector(props/*: ModelProps | any*/) {\r\n    const { scene } = useThree();\r\n\r\n    useEffect(() => {\r\n      if (!window.scene) { window.scene = scene; }\r\n      window.THREE = THREE;\r\n    }, []);\r\n\r\n    return null;\r\n}\r\n\r\nexport default DebugInspector;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Geometry, Group, Mesh } from \"three\";\r\nimport { ColladaLoader } from \"three/examples/jsm/loaders/ColladaLoader\";\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\r\n\r\nconst useModel = (url: string) => {\r\n    // const [geometry, setGeometry] = useState<Geometry | null>();\r\n    const [group, setGroup] = useState<Group | null>();\r\n\r\n    useEffect(() => {\r\n        const onError = (e: ErrorEvent) => {\r\n            // tslint:disable-next-line: no-console\r\n            console.error(`Error loading model ${url}`, e);\r\n        };\r\n\r\n        if (url.toLowerCase().endsWith(\"obj\")) {\r\n            new OBJLoader().load(url, (grp: Group) => {\r\n                // setGeometry((grp.children[0] as Mesh).geometry as Geometry);\r\n            });\r\n        } else if (url.toLowerCase().endsWith(\"dae\")) {\r\n            new ColladaLoader().load(url, (collada) => {\r\n                const colladaGroup = new Group();\r\n                colladaGroup.children.push(collada.scene);\r\n                setGroup(colladaGroup);\r\n\r\n                // setGeometry((collada.scene.children[0] as Mesh).geometry as Geometry);\r\n                // console.log(collada.scene.children[0].geometry)\r\n            });\r\n        } else if (url.toLowerCase().endsWith(\"fbx\")) {\r\n            new FBXLoader().load(url, (object: Group) => {\r\n                // setGeometry((object.children[0] as Mesh).geometry as Geometry);\r\n                setGroup(object);\r\n            }, undefined, onError);\r\n        } else {\r\n            // tslint:disable-next-line: no-console\r\n            console.error(`Unknown format for model ${url}`);\r\n        }\r\n    }, [url]);\r\n    return group;\r\n};\r\n\r\nexport default useModel;\r\n","// It's a js file because there is some problem with the\r\nimport useModel from \"hooks/useModel\";\r\nimport React, { useMemo } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Mesh } from \"three\";\r\n\r\nexport interface Props {\r\n    rotation?: THREE.Euler|number[];\r\n    scale?: THREE.Vector3|number[];\r\n}\r\n\r\nconst WorldMapTerrain = (props: Props) => {\r\n\r\n    const url = \"models/terrain/terrain-grass.dae\";\r\n    const textureUrl = \"models/terrain/grass1.png\";\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl]);\r\n\r\n    const modelInfo = useModel(url);\r\n    const geometry = useMemo(() => {\r\n        if (modelInfo) {\r\n            return (modelInfo.children[0].children[0] as Mesh).geometry;\r\n        }\r\n        return null;\r\n    }, [modelInfo]);\r\n\r\n    if (texture) {\r\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n    }\r\n\r\n    if (!geometry || !texture) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <mesh\r\n            name={`Model (${url})`}\r\n            scale={props.scale || [1, 1, 1]}\r\n            rotation={props.rotation}\r\n        >\r\n            <meshBasicMaterial\r\n                attach=\"material\"\r\n                fog={true}\r\n            >\r\n            <primitive attach=\"map\" object={texture} />\r\n            </meshBasicMaterial>\r\n            <bufferGeometry attach=\"geometry\" {...geometry} />\r\n        </mesh>\r\n    );\r\n  };\r\n\r\nexport default WorldMapTerrain;\r\n","import React, {  } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Vector3 } from \"three\";\r\n\r\nexport interface Props {\r\n  name?: string;\r\n  color?: string;\r\n  size?: THREE.Vector3|number[];\r\n  position?: THREE.Vector3|number[];\r\n  onClick?: (object: THREE.Object3D) => void;\r\n}\r\n\r\nconst Cube = (props: Props) => {\r\n    const size = parseVector3(props.size || new THREE.Vector3(1, 1, 1));\r\n    const geometry = new THREE.BoxGeometry( size.x, size.y, size.z );\r\n    const material = new THREE.MeshBasicMaterial( {color: (props.color || \"green\")} );\r\n\r\n    const handleClick = (evt: any) => {\r\n      if (props.onClick) {\r\n        props.onClick(evt.object);\r\n      }\r\n    };\r\n\r\n    if (!geometry) {\r\n      return null;\r\n    }\r\n    return (\r\n      <mesh\r\n        name={props.name}\r\n        position={props.position}\r\n        onClick={handleClick }\r\n        geometry={geometry }\r\n        material={material }\r\n      />\r\n    );\r\n  };\r\n\r\nexport default Cube;\r\n\r\nconst parseVector3 = (input: THREE.Vector3|number[]): THREE.Vector3 => {\r\n    if (input instanceof THREE.Vector3) {\r\n        return input;\r\n    }\r\n    const [x, y, z] = input;\r\n    return new Vector3(x, y, z);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Geometry, Group, Mesh, AnimationClip } from \"three\";\r\nimport { ColladaLoader } from \"three/examples/jsm/loaders/ColladaLoader\";\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\r\n\r\nconst useAnimations = (url: string) => {\r\n    const [animations, setAnimations] = useState<AnimationClip[] | null>();\r\n\r\n    useEffect(() => {\r\n        const onError = (e: ErrorEvent) => {\r\n            // tslint:disable-next-line: no-console\r\n            console.error(`Error loading file ${url}`, e);\r\n        };\r\n\r\n        if (url.toLowerCase().endsWith(\"fbx\")) {\r\n            new FBXLoader().load(url, (object: any) => {\r\n                setAnimations(object.animations);\r\n            }, undefined, onError);\r\n        } else {\r\n            // tslint:disable-next-line: no-console\r\n            console.error(`Unknown format for model file ${url}`);\r\n        }\r\n    }, [url]);\r\n    return animations;\r\n//   const geom = useMemo(() => {\r\n//     const temp = []\r\n//     scene.traverse(child => child.isMesh && temp.push(child.geometry))\r\n//     return temp\r\n//   }, [scene])\r\n//   return [geom, scene.children[0].position]\r\n};\r\n\r\nexport default useAnimations;\r\n","import useAnimations from \"hooks/useAnimations\";\r\nimport useModel from \"hooks/useModel\";\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\nimport { Mesh } from \"three\";\r\n\r\nconst textureUrl = \"models/world/human/Textures/RTS_human_atlas_4096.png\";\r\nconst animationUrl = \"models/westernkingdoms/animation/archer/WK_archer_01_idle_A.FBX\";\r\n\r\nexport interface Props {\r\n    url: string;\r\n    position?: THREE.Vector3|number[];\r\n}\r\n\r\nconst speed = 1;\r\nconst Guy = (props: Props) => {\r\n\r\n    const modelInfo = useModel(props.url);\r\n    const animations = useAnimations(animationUrl);\r\n    const group = useRef();\r\n\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl]);\r\n    const [mixer] = useState(() => new THREE.AnimationMixer(null));\r\n\r\n    const geometry = useMemo(() => {\r\n        if (modelInfo) {\r\n            return (modelInfo.children[0] as Mesh).geometry;\r\n        }\r\n        return null;\r\n    }, [modelInfo]);\r\n\r\n    const bones = useMemo(() => {\r\n        if (modelInfo) {\r\n            return (modelInfo.children[1] as Mesh).geometry;\r\n        }\r\n        return null;\r\n    }, [modelInfo]);\r\n\r\n    useEffect(() => {\r\n        // console.log('a', animations)\r\n        // console.log('b', group)\r\n            if (animations) {\r\n            // console.log(animations)\r\n            mixer.clipAction(animations[0], group.current).play();\r\n        }\r\n    } , [animations, bones]);\r\n\r\n    useFrame((state, delta) => {\r\n      mixer.update(delta * speed);\r\n    });\r\n\r\n    // const textureUrl = \"models/terrain/grass1.png\";\r\n    // const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl])\r\n    if (!geometry || !texture) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <group ref={group}>\r\n        <mesh\r\n            name={`Model (${props.url})`}\r\n            position={props.position}\r\n            scale={[1, 1, 1]}\r\n        >\r\n            <meshBasicMaterial\r\n                attach=\"material\"\r\n                fog={true}\r\n                color={\"purple\"}\r\n                map={texture}\r\n            />\r\n            <bufferGeometry attach=\"geometry\" {...geometry} />\r\n        </mesh>\r\n        </group>\r\n    );\r\n};\r\n\r\nexport default Guy;\r\n// https://codesandbox.io/embed/react-three-fiber-gltf-loader-animations-c671i\r\n","import useModel from \"hooks/useModel\";\r\nimport React, { useMemo } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Mesh } from \"three\";\r\n\r\nconst textureUrl = \"models/world/human/Textures/RTS_human_atlas_4096.png\";\r\n\r\nexport interface Props {\r\n    url: string;\r\n    position?: THREE.Vector3|number[];\r\n}\r\n\r\nconst Structure = (props: Props) => {\r\n\r\n   // const loader = useLoader(FBXLoader, props.url);\r\n\r\n    const modelInfo = useModel(props.url);\r\n    const geometry = useMemo(() => {\r\n        if (modelInfo) {\r\n            return (modelInfo.children[0] as Mesh).geometry;\r\n        }\r\n        return null;\r\n    }, [modelInfo]);\r\n\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl]);\r\n    // const textureUrl = \"models/terrain/grass1.png\";\r\n    // const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl])\r\n    if (!geometry || !texture) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <mesh\r\n            name={`Model (${props.url})`}\r\n            position={props.position}\r\n            scale={[.01, .01, .01]}\r\n        >\r\n            <meshBasicMaterial\r\n                attach=\"material\"\r\n                fog={true}\r\n                map={texture}\r\n            />\r\n            <bufferGeometry attach=\"geometry\" {...geometry} />\r\n\r\n        </mesh>\r\n    );\r\n};\r\n\r\nexport default Structure;\r\n","import Controls from \"components/three/Controls\";\r\nimport Sphere from \"components/three/debug/Sphere\";\r\nimport DebugInspector from \"components/three/DebugInspector\";\r\nimport WorldMapTerrain from \"components/three/world/WorldMapTerrain\";\r\nimport React from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport { QuestStoreState } from \"stores/quest\";\r\nimport { Camera, Object3D, Vector2, Vector3 } from \"three\";\r\nimport { MapControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport Cube from \"../debug/Cube\";\r\nimport Guy from \"./Guy\";\r\nimport Structure from \"./structures/Structure\";\r\nimport { getDefinition } from \"definitions/quests\";\r\n\r\nconst terrainRotation = [-90 * (Math.PI / 180), 0, 0];\r\nconst terrainScale = [40, 40, 40];\r\nconst townPos = new Vector3(0, 0, 0);\r\nconst WIDTH = 648;\r\nconst HEIGHT = 690;\r\nexport interface Props {\r\n  quests: QuestStoreState[];\r\n  compassCenter: Vector2; // compass center in 2d UI coordinate system\r\n  scrollToPosition?: Vector2;\r\n  onMapMove: (distance: number, angle: number) => void;\r\n  activeQuests: QuestStoreState[];\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface DispatchProps {\r\n  // onAdvanceQuest: (questName: string) => void;\r\n}\r\n\r\ntype AllProps = Props & DispatchProps;\r\n\r\nconst WorldMap = (props: AllProps) => {\r\n    // useEffect(() => {\r\n    // }, [props.scrollToPosition]);\r\n\r\n    const handleClick = (object: Object3D) => {\r\n        // console.log(object);\r\n    };\r\n\r\n    const handleCameraMove = (camera: Camera) => {\r\n\r\n        // the position of the compass as if it was in 3d space\r\n        const { x, z } = unproject(camera, props.compassCenter);\r\n\r\n        // Calculate the distance and angle between the town and the virtual compass in 3d space\r\n        const compassPos = new Vector2(x, z);\r\n        const distance = compassPos.distanceTo(new Vector2(townPos.x, townPos.z));\r\n        const angle = compassPos.angle(); // This only works because our town is at 0, 0\r\n\r\n        props.onMapMove(distance, angle);\r\n    };\r\n\r\n    const quest = props.activeQuests[0];\r\n\r\n    const questPosition = getQuestWorldPosition(quest);\r\n    console.log(quest.progress, questPosition);\r\n    return (\r\n        <Canvas style = {{ height: HEIGHT, width: WIDTH }} camera={{ fov: 10 }} >\r\n            <DebugInspector /> */}\r\n            <Controls onCameraMove={handleCameraMove} scrollToPosition={props.scrollToPosition} />\r\n            <WorldMapTerrain rotation={terrainRotation} scale={terrainScale} />\r\n            <Sphere onClick={handleClick} position={[62, 0, 14]} name=\"party1\" />\r\n            {/* <Sphere onClick={handleClick} name=\"party2\" /> */}\r\n            <Cube size={[1, 1, 1]} position={questPosition} color=\"red\"/>\r\n            <Cube size={[1, 1, 1]} position={[0, 0, 1]} color=\"blue\"/>\r\n            <Cube size={[1, 1, 1]} position={[1, 0, 2]} color=\"blue\"/>\r\n            <Guy url=\"models/westernkingdoms/models/WK_archer.FBX\" position={[220, 20, 110]} />\r\n\r\n            <Structure url=\"models/world/human/house_atlas.fbx\" position={[10, 0, 0]}/>\r\n            <Structure url=\"models/world/human/smithy_atlas.fbx\" position={[20, 0, 10]}/>\r\n        </Canvas>\r\n    );\r\n};\r\n\r\nexport default WorldMap;\r\n\r\n// returns a point on the ground under the camera\r\nconst unproject = (camera: Camera, screenLocation: Vector2, groundY: number = 0): Vector3 => {\r\n    const vector = new Vector3();\r\n    vector.set(\r\n      (screenLocation.x / WIDTH) * 2 - 1,\r\n      -(screenLocation.y / HEIGHT) * 2 + 1,\r\n      0.5,\r\n    );\r\n    vector.unproject( camera );\r\n\r\n    const direction = vector.sub(camera.position).normalize();\r\n    const distance = (groundY - camera.position.y) / direction.y;\r\n    return camera.position.clone().add(direction.multiplyScalar(distance));\r\n};\r\n\r\n// Gets 3d world position of quest\r\nconst getQuestWorldPosition = (quest: QuestStoreState): Vector3 => {\r\n    const questDefinition = getDefinition(quest.name);\r\n    const roundedProgress = Math.floor(quest.progress);\r\n    const lastPosition = questDefinition.nodes[roundedProgress];\r\n    const nextPosition = questDefinition.nodes[roundedProgress + 1];\r\n    const lastPostionWorld = new Vector3(lastPosition.x, 1, lastPosition.y);\r\n    const nextPostionWorld = new Vector3(nextPosition.x, 1, nextPosition.y);\r\n    return lastPostionWorld.lerp(nextPostionWorld, quest.progress - roundedProgress);\r\n};","import WorldMap from \"components/three/world/WorldMap\";\r\nimport PartyWindow from \"containers/windows/PartyWindow\";\r\nimport { AppContextProps } from \"hoc/withAppContext\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\r\nimport { Vector2 } from \"three\";\r\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\r\nimport { TextManager } from \"utils/textManager\";\r\nimport QuestLineVisualization from \"../world/QuestLineVisualization\";\r\nimport \"./css/realworldview.css\";\r\nimport { getDefinition } from \"definitions/quests\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\nexport interface DispatchProps {\r\n    onAdvanceQuest: (questName: string) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    quests: QuestStoreState[];\r\n}\r\n\r\ninterface LocalState {\r\n    selectedQuest: string | null;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\r\n\r\n/**\r\n * Temporary wrapper around PartyScreen. Shows quest line\r\n * @param props\r\n */\r\nconst RealWorldView = (props: AllProps) => {\r\n    const compassRef = useRef<HTMLDivElement>(null);\r\n    const [scrollToPosition, setScrollToPosition] = useState<Vector2>();\r\n    const [selectedQuest, setSelectedQuest] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\r\n        SoundManager.playMusicTrack(MusicTrack.world);\r\n    }, []);\r\n\r\n    const handleMapMove = (distance: number, angle: number) => {\r\n        const compassEl = compassRef!.current!;\r\n        const compassTextEl = compassEl.firstElementChild! as HTMLElement;\r\n\r\n        // Rotate the compass\r\n        compassEl.style.transform = `rotate(${angle - (Math.PI / 2)}rad)`;\r\n        compassEl.style.opacity = distance > 10 ? \"1\" : \"0\";\r\n        compassTextEl.style.transform = `rotate(${-angle + (Math.PI / 2)}rad)`;\r\n        compassTextEl.innerHTML = `${distance.toFixed(0)}`;\r\n    };\r\n\r\n    const handleCompassClick = () => {\r\n        setScrollToPosition(new Vector2(1, 1));\r\n    };\r\n    const activeQuests = props.quests.filter((q) => q.status === QuestStatus.active );\r\n    const quest = activeQuests[0];\r\n    \r\n\r\n    return (\r\n\r\n        //const selectedQuest = this.props.quests.find((q) => q.name === selectedQuest);\r\n\r\n        // const questLines = activeQuests.map((q) => {\r\n        //     return <QuestLineVisualization key={q.name}\r\n        //         selected={q === selectedQuest}\r\n        //         quest={q}\r\n        //         onSelectQuest={() => this.handleSelectQuest(q.name)}\r\n        //     />;\r\n        // });\r\n        <div className=\"realworldview\">\r\n            <div className=\"compass\" ref={compassRef} onClick={handleCompassClick}>\r\n                <div className=\"distance\"></div>\r\n            </div>\r\n            <WorldMap quests={props.quests} onMapMove={handleMapMove} activeQuests={activeQuests} compassCenter={new Vector2(525, 585)} scrollToPosition={scrollToPosition}/>\r\n        </div>\r\n    );\r\n\r\n    // public handleSelectQuest(questName: string) {\r\n    //     this.setState({\r\n    //         selectedQuest: questName,\r\n    //     });\r\n    //     const quest = this.props.quests.find((q) => q.name === questName)!;\r\n    //     const title = TextManager.getQuestTitle(quest.name);\r\n    //     const window = <PartyWindow quest={quest} title={title} />;\r\n    //     this.props.onOpenWindow(window);\r\n    // }\r\n};\r\n\r\nexport default RealWorldView;\r\n","import RealWorldView,\n    { DispatchProps, Props, StateProps } from \"components/partyScreen/RealWorldView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealWorldView) as React.ComponentType<Props>;\n","import \"components/ui/popup/css/popup.css\";\nimport * as React from \"react\";\n\nconst ARROW_SIZE = 8; // warning: sync to popup.css var\nconst PADDING = 8;\n\n// Sharing context within the entire App\nexport interface PopupProps {\n    containerRect: ClientRect;\n    referenceRect: ClientRect;\n    placement?: Placement;\n    children: any;\n}\n\nexport enum Placement {\n    bottom,\n    top,\n    left,\n    right,\n}\n\nexport const withPopup = <TWrappedComponentProps extends PopupProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n\n    const WithPopup = (props: TWrappedComponentProps) => {\n\n        const ref = React.useRef<HTMLDivElement>(null);\n        const [ placement, setPlacement ] = React.useState<Placement>(props.placement || Placement.bottom);\n\n        const containerRect = props.containerRect;\n        const referenceRect = props.referenceRect;\n\n        React.useEffect(() => {\n            // Reposition if needed\n            const popupElement = ref.current!;\n            const popupRect = popupElement.getBoundingClientRect();\n\n            // Flip vertically\n            switch (placement) {\n                case Placement.top:\n                    if (popupRect.top - popupRect.height - ARROW_SIZE - PADDING < containerRect.top) {\n                        // Too high, place underneath\n                        setPlacement(Placement.bottom);\n                        return;\n                    }\n                    break;\n                case Placement.bottom:\n                    if (popupRect.top + popupRect.height + ARROW_SIZE + PADDING > containerRect.height ) {\n                        // Too low, place top\n                        setPlacement(Placement.top);\n                        return;\n                    }\n                    break;\n            }\n            popupElement.style.opacity = \"1\"; // animated through css\n\n            // Check left bounding edge\n            if (popupRect.left < containerRect.left + PADDING) {\n                const offset = containerRect.left - popupRect.left + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${offset}px)`;\n            }\n\n            // Check right bounding edge\n            if (popupRect.right > containerRect.right - PADDING) {\n                const offset = popupRect.right - containerRect.right + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${-offset}px)`;\n            }\n        }, [placement]);\n\n        let x: number = 0;\n        let y: number = 0;\n        let className: string = \"\";\n\n        switch (placement) {\n            case Placement.bottom:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top + referenceRect.height;\n                className = \"popup-bottom\";\n                break;\n            case Placement.top:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top;\n                className = \"popup-top\";\n                break;\n        }\n\n        return (\n            <div className = { `popup ${className}` }\n                style = {{\n                    left: x,\n                    opacity: 0,\n                    top: y,\n                }}\n                ref = { ref }\n            >\n                <div className = \"popup-arrow\"></div>\n                <div className = \"popup-content\">\n                    <WrappedComponent {...props } />\n                </div>\n            </div>\n        );\n    };\n    return WithPopup;\n};\n// export const withPopup = <P extends object>(Component: React.ComponentType<P>): React.FC<P & PopupProps> => ({...props}: PopupProps) => {\n//     return     <div className = \"popup\" style = {{ background: \"pink\" }} >\n//          <Component {...props as P} />\n//     </div>\n// };\n","import { Action } from \"redux\";\n\n// todo this should go somewhere else\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface ModifyWorkersAction extends Action<ActionType> {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","export const manifest = [\r\n    \"img/terrain/mountains512.png\",\r\n    \"img/town/effects/plasma_beam_heavy_green.png\",\r\n    \"img/town/effects/smoke.png\",\r\n    \"img/town/sky.jpg\",\r\n    \"img/town/lighthouse.png\",\r\n    \"img/town/tavern.png\",\r\n    \"img/town/mill.png\",\r\n    \"sound/fx/button-click.ogg\",\r\n    \"sound/fx/error.ogg\",\r\n    \"sound/music/Soliloquy.mp3\",\r\n    \"sound/music/TheLoomingBattle.ogg\",\r\n\r\n];\r\n","import { Howl } from \"howler\";\nimport * as React from \"react\";\nimport Indicator from \"./Indicator\";\n\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\nexport interface Props {\n    manifest: string[];\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\n}\n\nexport enum MediaType {\n    image,\n    sound,\n}\n\nexport interface MediaItem {\n    url: string;\n    mediaType: MediaType;\n    content?: HTMLImageElement | Howl;\n    sound?: Howl;\n}\n\ninterface State {\n    itemsLoaded: number;\n    completed: boolean;\n}\n\nexport default class Preloader extends React.Component<Props, State> {\n//    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            completed: false,\n            itemsLoaded: 0,\n        };\n    }\n\n    public componentDidMount() {\n        // this.mounted = true;\n        this.loadMedia();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        // const { images } = this.props;\n        // const oldImages = new Set(prevProps.images);\n\n        // let hasChanged = false;\n        // for (let i = 0; i < images.length; i += 1) {\n        //     const image = images[i];\n        //     if (!oldImages.has(image)) {\n        //         hasChanged = true;\n        //         break;\n        //     }\n        // }\n\n        // if (hasChanged) {\n        //     this.loadImages();\n        // }\n        // todo: implement\n    }\n\n    public componentWillUnmount() {\n        // this.mounted = false;\n        // if (this.autoResolveTimeout) {\n        //     clearTimeout(this.autoResolveTimeout);\n        // }\n    }\n\n    public render() {\n//        console.log(`loaded: ${this.state.itemsLoaded} `);\n        const { children, manifest } = this.props;\n        const complete = this.state.completed;\n\n        const indicator = <Indicator\n            itemsLoaded = { this.state.itemsLoaded }\n            itemsTotal = { manifest.length }\n        />;\n\n        return complete ? children : indicator;\n\n    }\n\n    protected loadMedia = () => {\n        // todo: what if props get set at runtime\n        this.setState({\n            itemsLoaded: 0,\n        });\n\n        const promises = this.props.manifest\n            .map((url) => this.loadItem(url)\n            // tslint:disable-next-line:no-console\n            .catch((err) => console.error(err)));\n\n        Promise.all(promises).then((results) => {\n            if (this.props.onLoadComplete) {\n                this.props.onLoadComplete(media);\n            }\n            this.setState({\n                completed: true,\n            });\n        });\n    }\n\n    protected loadItem = async (url: string): Promise<MediaItem> => {\n        if (media.some((m) => m.url === url)) {\n            // tslint:disable-next-line:no-console\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\n        }\n        const mediaType = getType(url);\n        let item;\n        if (mediaType === MediaType.image) {\n            // try {\n            const value = await loadImage(url);\n            // console.log(`loaded ${url}`); // tODO: remove\n            item = {\n                content: value,\n                mediaType,\n                url,\n            } ;\n            // } catch (e) {\n            //     throw Error(`Could not load image with url '${url}'`);\n            // }\n        }\n        if (mediaType === MediaType.sound) {\n            const value = new Howl({\n                src: [ url ],\n            });\n            item = {\n                content: value,\n                mediaType,\n                url,\n            };\n        }\n        if (item) {\n            media.push(item);\n            this.setState({\n                itemsLoaded: this.state.itemsLoaded + 1,\n            });\n            return item;\n        } else {\n            throw new Error(`Unknown error while trying to load ${url}`);\n        }\n    }\n}\n\nconst media: MediaItem[] = [];\n\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\n    const image = new Image();\n    image.src = url;\n\n    return new Promise((resolve, reject) => {\n        if (image.naturalWidth) {\n            resolve(image);\n        } else if (image.complete) {\n            reject(null);\n        } else {\n            image.addEventListener(\"load\", check);\n            image.addEventListener(\"error\", check);\n        }\n        function check() {\n            if (image.naturalWidth) {\n                resolve(image);\n            } else {\n                reject(null);\n            }\n            image.removeEventListener(\"load\", check);\n            image.removeEventListener(\"error\", check);\n        }\n    });\n};\n\nconst getType = (url: string): MediaType => {\n    url = url.toLowerCase();\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\n        return MediaType.image;\n    }\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\n        return MediaType.sound;\n    }\n    throw Error(`Could not determine type for ${url}`);\n};\n","import { getDefinition } from \"definitions/items\";\r\nimport { Item, ItemType } from \"definitions/items/types\";\r\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\r\nimport * as React from \"react\";\r\nimport { StructureState, StructureStoreState } from \"stores/structure\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"utils/textManager\";\r\nimport \"./css/cheatbox.css\";\r\n\r\nexport interface DispatchProps {\r\n    onCheatGold?: (amount: number) => void;\r\n    onCheatWorkers?: (amount: number) => void;\r\n    onCheatResources?: (amount: number) => void;\r\n    onCheatItem?: (item: Item) => void;\r\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    structures: StructuresStoreState;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n    gold: number;\r\n    workers: number;\r\n    resources: number;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\nclass CheatWindow extends React.Component<AllProps, LocalState> {\r\n\r\n    private itemSelectRef: React.RefObject<HTMLSelectElement>;\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: AllProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gold: 50,\r\n            resources: 50,\r\n            workers: 10,\r\n        };\r\n\r\n        this.itemSelectRef = React.createRef();\r\n    }\r\n\r\n    public render() {\r\n\r\n        const getStructureRow = (structure: Structure) => {\r\n            const structureDef = getStructureDefinition(structure);\r\n            const structureStore: StructureStoreState = this.props.structures[structure];\r\n            const levelDef = structureDef.levels[structureStore.level];\r\n\r\n            const displayName = TextManager.get(levelDef.displayName);\r\n\r\n            return <div\r\n                className=\"label-dropdown\"\r\n                key={structure}\r\n            >\r\n                <label title={structure}>\r\n                    { `${displayName}` }\r\n                </label>\r\n                <input\r\n                    key={structure}\r\n                    type=\"checkbox\"\r\n                    checked={this.props.structures[structure].state === StructureState.Built }\r\n                    onChange={() => this.handleChangeStructureState(structure, this.props.structures[structure].state !== StructureState.Built)}\r\n                />\r\n            </div>;\r\n        };\r\n\r\n        const structures = Object.keys(this.props.structures)\r\n            .map((structure) => getStructureRow(structure as Structure));\r\n\r\n        const getItemTypeOptions = (type: ItemType) => {\r\n            return Object.keys(Item)\r\n                // tslint:disable-next-line: triple-equals\r\n                .filter((item: string) => getDefinition(item as Item).itemType == type)\r\n                .map((item: string) => getItemOption(item as Item));\r\n        };\r\n\r\n        const getItemOption = (item: Item) => {\r\n            return <option value ={item } key ={item }>\r\n                { TextManager.getItemName(item) }\r\n            </option>;\r\n        };\r\n\r\n        const items = Object.keys(ItemType)\r\n            .filter((val: any) => !isNaN(val))\r\n            .map((type: string) => {\r\n            return <optgroup label ={ItemType[type] } key ={type }>\r\n                { getItemTypeOptions(type as unknown as ItemType) }\r\n            </optgroup>;\r\n        });\r\n\r\n        return (\r\n            <div className=\"cheat-box\">\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Gold</label>\r\n                    <input type=\"number\"\r\n                        value= {this.state.gold}\r\n                        style={{width: \"50px\"}}\r\n                        onChange={this.handleChangeGold}>\r\n                    </input>\r\n                    <button onClick={this.handleCheatGold}>Add</button>\r\n                </div>\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Workers</label>\r\n                    <input type=\"number\"\r\n                        value= {this.state.workers}\r\n                        style={{width: \"50px\"}}\r\n                        onChange={this.handleChangeWorkers}>\r\n                    </input>\r\n                    <button onClick={this.handleCheatWorkers}>Add</button>\r\n                </div>\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Resources</label>\r\n                    <input type=\"number\"\r\n                        value= {this.state.resources}\r\n                        style={{width: \"50px\"}}\r\n                        onChange={this.handleChangeResources}>\r\n                    </input>\r\n                    <button onClick={this.handleCheatResources}>Add</button>\r\n                </div>\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Items</label>\r\n                    <select style={{width: \"150px\"}} ref={this.itemSelectRef}>\r\n                        { items }\r\n                    </select>\r\n                    <button onClick={this.handleCheatItem}>Add</button>\r\n                </div>\r\n                { structures }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = this.state.gold;\r\n        if (this.props.onCheatGold) { this.props.onCheatGold(amount); }\r\n    }\r\n\r\n    private handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = this.state.workers;\r\n        if (this.props.onCheatWorkers) { this.props.onCheatWorkers(amount); }\r\n    }\r\n\r\n    private handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (this.props.onCheatResources) { this.props.onCheatResources(this.state.resources); }\r\n    }\r\n\r\n    private handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const item = this.itemSelectRef.current!.value as Item;\r\n        if (this.props.onCheatItem) { this.props.onCheatItem(item); }\r\n    }\r\n\r\n    private handleChangeStructureState = (structure: Structure, checked: boolean) => {\r\n        if (this.props.onCheatStructureState) {\r\n            this.props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\r\n        }\r\n    }\r\n\r\n    private handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        this.setState({\r\n            gold: amount,\r\n        });\r\n    }\r\n\r\n    private handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        this.setState({\r\n            workers: amount,\r\n        });\r\n    }\r\n\r\n    private handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.checked);\r\n        this.setState({\r\n            resources: amount,\r\n        });\r\n    }\r\n}\r\n\r\nexport default CheatWindow;\r\n","import { Resource } from \"definitions/resources\";\n\nexport const resourceOrder = [\n    Resource.food,\n    Resource.wood,\n    Resource.stone,\n    Resource.fabric,\n    Resource.leather,\n];\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/CheatWindow\";\nimport { resourceOrder } from \"constants/resources\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => {\n            dispatch(addGold(amount));\n            dispatch(addLogEntry(\"common-cheat-gold-added\", { amount }, LogChannel.common));\n        },\n        onCheatItem: (item: Item) => {\n            dispatch(addItemToWarehouse(item));\n            dispatch(addLogEntry(\"common-cheat-item-added\", { item }, LogChannel.common));\n        },\n        onCheatResources: (amount: number) => {\n            // Create ResourceStoreState where value of each resource is `amount`\n            const resources = resourceOrder.reduce((acc: ResourceStoreState, resource) => {\n                acc[resource] = amount;\n                return acc;\n            }, {});\n\n            dispatch(addResources(resources));\n            dispatch(addLogEntry(\"common-cheat-resources-added\", { amount }, LogChannel.common));\n        },\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => {\n            dispatch(addWorkers(amount));\n            dispatch(addLogEntry(\"common-cheat-workers-added\", { amount }, LogChannel.common));\n        },\n    };\n};\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(CheatWindow) as React.ComponentType<Props & WindowProps>;\n","import { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow from \"containers/windows/CheatWindow\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { compose } from \"redux\";\nimport \"./css/cheatbox.css\";\n\nexport interface DispatchProps {\n}\n\nexport interface StateProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\nclass Menu extends React.Component<AllProps & AppContextProps, LocalState> {\n\n    constructor(props: AllProps & AppContextProps) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    public render() {\n\n        const handleClickCheats = () => {\n            const window = <CheatWindow title = \"Cheats\" />;\n            this.props.onOpenWindow(window);\n        };\n        return (\n            <div className=\"menu\">\n                <ul>\n                    <li onClick = { handleClickCheats }>Cheats!</li>\n                </ul>\n            </div>\n        );\n    }\n\n}\n\nexport default compose(\n    withWindow,\n    withAppContext,\n)(Menu) as React.ComponentType<AllProps>;\n","import \"components/ui/css/common/icon.css\";\nimport { resourceOrder } from \"constants/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcebar.css\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props {\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n    resources: ResourceStoreState;\n}\n\nconst Resourcebar = (props: Props & StateProps & DispatchProps) => {\n\n    const createItem = (icon: string, amount: number, title: string) => {\n        return <li title = { title } key = { title }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${icon})`,\n            }}></div>\n            <div className = \"amount\">\n                { amount.toFixed(0) }\n            </div>\n        </li>;\n    };\n\n    const resources = resourceOrder.map((resource) => {\n        const resourceDescription = resourceDescriptions[resource];\n        return createItem(resourceDescription.iconImg, props.resources[resource as string], TextManager.getResourceName(resource));\n    });\n\n    resources.push(\n        createItem(\"/img/resources/worker.png\", props.workersFree, \"workers\"),\n        createItem(\"/img/resources/gold.png\", props.gold, \"gold\"),\n    );\n\n// <span>\n//     workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n// </span>\n// <span>\n//     gold: <b>{ props.gold }</b>\n// </span>\n\n    return (\n        <ul className=\"resourcebar\">\n            { resources }\n        </ul>\n    );\n};\nexport default Resourcebar;\n","import Resourcebar, { Props, StateProps } from \"components/topbar/Resourcebar\";\nimport { connect } from \"react-redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n\n    return {\n        gold: store.gold,\n        resources: store.resources,\n        workers: store.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n};\n\n// const mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n//     return {\n//     };\n// };\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(Resourcebar);\n","import Topbar, { Props, StateProps } from \"components/topbar/Topbar\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"../stores\";\n\n// todo this container might not be strictly necessary\n// also withRouter is probably not necessary\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n    };\n};\n\nexport default compose(\n    connect<StateProps, null, Props, StoreState>(mapStateToProps),\n    withRouter,\n    withAppContext,\n)(Topbar) as React.ComponentType<Props>;\n","import Menu from \"components/ui/window/windows/MenuWindow\";\nimport Resourcebar from \"containers/topbar/Resourcebar\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport \"./css/topbar.css\";\n\nexport interface Props {\n}\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & RouteComponentProps & AppContextProps;\n\nexport default function(props: AllProps) {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const window = <Menu title = \"Menu\" />;\n        props.onOpenWindow(window);\n    };\n    return (\n        <div className = \"topbar\">\n            <div className = \"topbar-left\">\n                <Resourcebar />\n            </div>\n            <div className = \"topbar-right\">\n                <div className = \"hamburger\" onClick = { handleClick }>☰</div>\n            </div>\n        </div>\n    );\n}\n","import * as React from \"react\";\n\nexport interface Props {\n    itemsLoaded?: number;\n    itemsTotal?: number;\n}\n\n/**\n * Loading indicator\n */\nexport default class Indicator extends React.Component<Props> {\n    public render() {\n        const { itemsLoaded, itemsTotal } = this.props;\n        return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\n    }\n}\n","\nimport { subtractGold } from \"actions/gold\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/context/ItemContext\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            const structureDefinition = getDefinition(structure);\n\n            dispatch(subtractGold(structureDefinition.cost.gold || 0));\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","// tslint:disable: object-literal-sort-keys\r\nimport { ContextInfo, ContextType} from \"constants/context\";\r\nimport CombatView from \"containers/combat/CombatView\";\r\nimport SimpleLog from \"containers/log/SimpleLog\";\r\nimport RealTownView from \"containers/RealTownView\";\r\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\r\nimport RealWorldView from \"containers/world/RealWorldView\";\r\nimport { AppContextProps} from \"hoc/withAppContext\";\r\nimport { Placement} from \"hoc/withPopup\";\r\nimport { manifest} from \"manifest/app\";\r\nimport * as React from \"react\";\r\nimport { DndProvider} from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { BrowserRouter as Router, Link, Redirect, Route} from \"react-router-dom\";\r\nimport { Persistor} from \"redux-persist\";\r\nimport { Sound, SoundManager} from \"utils/soundManager\";\r\nimport { TextManager} from \"utils/textManager\";\r\nimport Topbar from \"../containers/Topbar\";\r\nimport { Structure} from \"../definitions/structures\";\r\nimport \"./css/app.css\";\r\nimport Preloader, { MediaItem, MediaType} from \"./preloading/Preloader\";\r\nimport ContextView from \"./ui/context/ContextView\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport enum View {\r\n    Town,\r\n    World,\r\n}\r\n\r\nexport interface Props {\r\n    persistor: Persistor;\r\n}\r\n\r\ninterface LocalState {\r\n    media: MediaItem[];\r\n    selectedStructure: Structure | null;\r\n    selectedContext: SelectedContext | null;\r\n    containerRect: ClientRect | null;\r\n\r\n    activeWindows: React.ReactElement[];\r\n}\r\n\r\ninterface SelectedContext {\r\n    contextType: ContextType ;\r\n    contextInfo: ContextInfo;\r\n    contextRect: ClientRect;\r\n}\r\n\r\nconst resolution = {\r\n    height: 860, // 972,\r\n    width: 648,\r\n};\r\n\r\nexport const AppContext = React.createContext<AppContextProps | null>(null);\r\n\r\nexport default class App extends React.Component<Props & StateProps & DispatchProps, LocalState> {\r\n    private containerRef: React.RefObject<HTMLDivElement>;\r\n\r\n    // This Component has local state, so it\"s a class\r\n    constructor(props: Props & StateProps & DispatchProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedContext: null,\r\n            containerRect: null,\r\n            media: [],\r\n            selectedStructure: null,\r\n            activeWindows: [],\r\n       };\r\n        this.containerRef = React.createRef();\r\n        this.handleResize = this.handleResize.bind(this);\r\n   }\r\n\r\n    public render() {\r\n        const handleViewButtonClick = () => {\r\n            SoundManager.playSound(Sound.buttonClick);\r\n       };\r\n\r\n        const handleResetClick = () => {\r\n            this.props.persistor.purge();\r\n            (window as any).location.reload();\r\n       };\r\n\r\n        // Router elements\r\n        const TownButton = () => <Link to=\"/town\">\r\n            <button onClick= { () => handleViewButtonClick()}> { TextManager.get(`common-view-button-town`)} </button>\r\n        </Link>;\r\n\r\n        const WorldButton = () => <Link to=\"/world\">\r\n            <button onClick= { () => handleViewButtonClick()}> { TextManager.get(`common-view-button-world`)} </button>\r\n        </Link>;\r\n\r\n        const TownView = () => <RealTownView onStructureClick={this.selectStructure} />;\r\n        const WorldView = () => <RealWorldView/>;\r\n\r\n        // A contextual popup showing what you just clicked. Can be an Item\r\n        let ContextPopup = null;\r\n        if (this.state.selectedContext) {\r\n\r\n            const { contextType, contextInfo, contextRect} = this.state.selectedContext;\r\n\r\n            ContextPopup = <ContextView\r\n                type={contextType}\r\n                info={contextInfo}\r\n                containerRect={this.state.containerRect!}\r\n                referenceRect={contextRect}\r\n                placement={Placement.bottom}\r\n            >\r\n            </ContextView>;\r\n        }\r\n\r\n        const Window = this.getActiveWindow();\r\n\r\n        return <AppContext.Provider value={{\r\n            media: this.state.media,\r\n            onContextualObjectActivated: this.handleContextualObjectActivated,\r\n            onOpenWindow: this.handleWindowOpened,\r\n        }}>\r\n            <div className = \"app\"\r\n                ref={this.containerRef}\r\n                style={{\r\n                    width: resolution.width,\r\n                    height: resolution.height,\r\n                }}\r\n                onClick={this.handleAppClick}\r\n            >\r\n                <DndProvider backend={HTML5Backend}>\r\n                <Router>\r\n                    <Preloader\r\n                        manifest={manifest}\r\n                        onLoadComplete={this.handleMediaLoadComplete}\r\n                    >\r\n                    <Topbar/>\r\n                    <Redirect from=\"/\" to=\"world\" />\r\n                    <Route path=\"/world\" component={TownButton} />\r\n                    <Route path=\"/town\" component={WorldButton} />\r\n                    { ` | `}\r\n                    <button onClick= { () => handleResetClick()} style={ { color: \"red\"}}> Restart! </button>\r\n                    <Route path=\"/town\" component={TownView} />\r\n                    <Route path=\"/world\" component={WorldView} />\r\n                { Window}\r\n                { ContextPopup}\r\n                <SimpleLog/>\r\n\r\n                </Preloader>\r\n                </Router>\r\n                </DndProvider>\r\n            </div>\r\n        </AppContext.Provider>;\r\n   }\r\n\r\n    public componentDidMount() {\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n        this.handleResize();\r\n   }\r\n\r\n    public componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n   }\r\n\r\n    private getActiveWindow(): React.ReactElement | null {\r\n        if (!this.state.activeWindows.length) {\r\n            return null;\r\n       }\r\n\r\n        const topWindow = this.state.activeWindows[this.state.activeWindows.length - 1];\r\n        const commonWindowProps = {\r\n            onClose: this.handleWindowClose,\r\n            onBack: this.handleWindowBack,\r\n            backEnabled: this.state.activeWindows.length > 1,\r\n            closeEnabled: true,\r\n       };\r\n\r\n        const element = React.cloneElement(topWindow, commonWindowProps);\r\n        return element;\r\n   }\r\n\r\n    private handleResize() {\r\n        if (this.containerRef.current) {\r\n            if (window.innerHeight < resolution.height) {\r\n                this.containerRef.current.style.transform = `scale(${window.innerHeight / resolution.height}) translateX(-50%)`;\r\n\r\n           } else {\r\n                this.containerRef.current.style.transform = `scale(1) translateX(-50%)`;\r\n           }\r\n            const parentBox = this.containerRef.current.getBoundingClientRect();\r\n\r\n            this.setState({\r\n                containerRect: parentBox,\r\n                selectedContext: null, // this would be in the wrong place\r\n           });\r\n       }\r\n   }\r\n\r\n    private selectStructure = (structure: Structure | null) => {\r\n        if (structure) {\r\n            const displayName = TextManager.getStructureName(structure);\r\n\r\n            const window = <StructureDetailsView structure={structure} title={displayName}/>;\r\n            this.handleWindowOpened(window);\r\n       }\r\n   }\r\n\r\n    private handleMediaLoadComplete = (media: MediaItem[]) => {\r\n\r\n        const sounds = media.filter((m) => m.mediaType === MediaType.sound);\r\n        SoundManager.loadMedia(sounds);\r\n\r\n        SoundManager.addSounds({\r\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\r\n            [Sound.error]: \"sound/fx/error.ogg\",\r\n            // add more sounds here\r\n       });\r\n\r\n        this.setState({\r\n            media,\r\n       });\r\n\r\n        // todo: temporary!\r\n        // const window = <CombatView/>;\r\n        // this.handleWindowOpened(window);\r\n   }\r\n\r\n    private handleContextualObjectActivated = (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => {\r\n\r\n        this.setState({\r\n            selectedContext: {\r\n                contextInfo: info,\r\n                contextType: type,\r\n                contextRect: originRect,\r\n           },\r\n       });\r\n   }\r\n\r\n    private handleAppClick = () => {\r\n        if (this.state.selectedContext) {\r\n            this.setState({\r\n                selectedContext: null,\r\n           });\r\n       }\r\n   }\r\n\r\n    private handleWindowOpened = (window: React.ReactElement) => {\r\n        this.setState({\r\n            activeWindows: [\r\n                ...this.state.activeWindows,\r\n                window,\r\n            ],\r\n       });\r\n   }\r\n\r\n    /**\r\n     * Closes all windows\r\n     */\r\n    private handleWindowClose = () => {\r\n        if (this.state.activeWindows.length) {\r\n            this.setState({\r\n                activeWindows: [],\r\n           });\r\n       }\r\n   }\r\n\r\n    /**\r\n     * Closes the top window of the stack\r\n     */\r\n    private handleWindowBack = () => {\r\n        if (this.state.activeWindows.length) {\r\n            this.setState({\r\n                activeWindows: this.state.activeWindows.slice(0, -1),\r\n           });\r\n       }\r\n   }\r\n}\r\n","\nimport { getDefinition as getApparelDefinition } from \"definitions/items/apparel\";\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport { DamageType, getDefinition as getWeaponDefinition } from \"definitions/items/weapons\";\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = getStructureDefinition(deedInfo.structure);\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n\n        case ItemType.weapon:\n            const weaponDefinition = getWeaponDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    <p> damage: { weaponDefinition.damage[DamageType.kinetic] } </p>\n                </>\n            );\n\n        case ItemType.apparel:\n            const apparelDefinition = getApparelDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    { apparelDefinition.armorRating && <p> armor: { apparelDefinition.armorRating } </p> }\n                </>\n            );\n\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","import { ContextInfo, ContextType } from \"constants/context\";\nimport ItemContext from \"containers/ui/context/ItemContext\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { PopupProps, withPopup } from \"hoc/withPopup\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/contextview.css\";\n\nexport interface Props {\n    type: ContextType | null;\n    info: ContextInfo | null;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & DispatchProps & PopupProps;\n/**\n * The ContextView shows the player contextual information about the item she clicked\n * @param props\n */\nclass ContextView extends React.Component<AllProps> {\n\n    public render() {\n        let { info } = this.props;\n        const { type } = this.props;\n\n        if (!info) {\n            info = {\n                iconImg: \"/img/items/deeds/deed.png\",\n                item: Item.deedForWeaponsmith,\n                itemType: ItemType.weapon,\n                subText: \"It allows for the construction of a weaponsmith\",\n            };\n        }\n        let content;\n\n        switch (type) {\n            case ContextType.item:\n            default:\n                content = <ItemContext info= { info } />;\n        }\n\n        const name = TextManager.getItemName(info.item);\n        return <div className = \"contextbox\">\n            <div>{ name } </div>\n            { content }\n        </div>;\n    }\n\n    public componentDidUpdate() {\n    //    // console.log(this.containerRef.current)\n    //     //console.log(this.props.origin)\n\n    //     if (this.containerRef.current && this.props.origin) {\n    //        // var rect = (this.props.origin as HTMLElement).getBoundingClientRect();\n    //        // console.log(rect)\n    //         const reference = this.props.origin as Element;\n\n    //         const popperInstance = new Popper(reference, this.containerRef.current\n    //             // popper options here\n    //         );\n    //     }\n    }\n}\n\nexport default withPopup<AllProps>(ContextView);\n","import App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import { getDefinition, Structure } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { StoreState } from \"stores\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\n\n /*\n  * Calculates how many resources are generated by the in the town.\n  * Will return a ResourceStoreState with the amount of each resource to add  */\nconst getProducedResources = (delta: number, store: StoreState): ResourceStoreState => {\n    const structures: StructuresStoreState = store.structures;\n    const result: ResourceStoreState = {};\n    const factor = delta / RESOURCE_INTERVAL;\n    // this function can run at different intervals\n    // faster or slower than once a minute\n    // we will multiply the resource amount by the factor to normalize\n    const maxResources = getMaxResources(store);\n\n    const handleStructure = (structure: string) => {\n        const structureDefinition = getDefinition(structure);\n\n        if (structureDefinition.type === StructureType.resource) {\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\n            const level: number = structures[structure].level;\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\n\n            // Store all the resources that this structure will generate this tick into `result`\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\n                return accumulator;\n            }, result);\n        }\n    };\n\n    // Calculate what each structure generates. Stores in `result`.\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\n\n    // Check if the warehouse can actually hold it\n    // todo: [10/07/2019] move to reducer\n    Object.keys(result).forEach((resource: string) => {\n        if (result[resource]) {\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\n            }\n        }\n//        console.log(`Adding: ${resource} ${result[resource]}`);\n    });\n\n    return result;\n};\n\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\n    const level: number = store.structures[Structure.warehouse].level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    return levelDefinition.maxResources;\n};\n\nexport default getProducedResources;\n","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (store: StoreState, quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(store, id)!);\n};\n\nexport const findAdventurerById = (store: StoreState, id: string): AdventurerStoreState | undefined => {\n    return store.adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n","import { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { randomInt } from \"utils/random\";\n\n/**\n * The Oracle is a helper class for retrieving relevant data during encounters\n */\nexport class Oracle {\n    public readonly questName: string;\n    public readonly store: StoreState;\n\n    constructor(questName: string, store: StoreState) {\n        this.questName = questName;\n        this.store = store;\n    }\n\n    /**\n     * Returns the questVars of the quest that this encounter is part of\n     */\n    public get questVars(): any {\n        return this.quest.questVars;\n    }\n\n    /**\n     * Returns the quest that this encounter is part of\n     */\n    public get quest(): QuestStoreState {\n        return this.store.quests.find((q) => q.name === this.questName)!;\n    }\n\n    /**\n     * Returns all adventurers on this quest\n     */\n    public get adventurers(): AdventurerStoreState[] {\n        return adventurersOnQuest(this.store, this.quest);\n    }\n\n    /**\n     * Returns the adventurer in the encounter with highest given stat\n     * @param stat\n     */\n    public getAdventurerWithHighest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (b.stats[stat] - a.stats[stat]))[0];\n    }\n\n    /**\n     * Returns the adventurer in the encounter with lowest given stat\n     * @param stat\n     */\n    public getAdventurerWithLowest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (a.stats[stat] - b.stats[stat]))[0];\n    }\n\n    /**\n     * Returns a random adventurer in the party\n     */\n    public getRandomAdventurer(): AdventurerStoreState {\n        return this.adventurers[randomInt(0, this.adventurers.length)];\n    }\n}\n\nexport const oracles: any = {\n    // This will be the global store to hold all oracles, keyed by quest\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addItemToInventory } from \"actions/adventurers\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Item } from \"../items/types\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const backstabbed: EncounterDefinition = {\n    name: Encounter.backstabbed,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-backstabbed-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            fight: \"Fight the brigands\",\n            flight: \"Run away!\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        switch (option) {\n            case \"flight\":\n                return \"You run away like a pussy\";\n            case \"fight\":\n                const finder = oracle.getRandomAdventurer();\n                dispatch(addItemToInventory(finder.id, Item.deedForWeaponsmith));\n                return `The party fights off the rogues. One of them drops a document. ${finder.name} picks it up`;\n            default:\n                throw new Error(`Unhandled option '${option}`);\n        }\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { startEncounter, updateQuestVars, advanceQuest } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const goblinHouseOutside: EncounterDefinition = {\n    name: Encounter.goblinHouseOutside,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseOutside-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Investigate\",\n            leave: \"Keep walking\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"investigate\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            case \"leave\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\nexport const goblinHouseHallway: EncounterDefinition = {\n    name: Encounter.goblinHouseHallway,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseHallway-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Go inside the house\",\n            leave: \"Leave the premise\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"leave\":\n                // const nextEncounter = startEncounter(quest.name, goblinhouseInside)\n                const action = advanceQuest(oracle.questName);\n                dispatch(action);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party escapes the house unscathed`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\n// todo: other goblinHouse encounters\n","import { backstabbed } from \"./backstabbed\";\nimport { goblinHouseHallway, goblinHouseOutside } from \"./goblinHouse\";\nimport { theBigTree } from \"./theBigTree\";\nimport { EncounterDefinition } from \"./types\";\n\nconst all = {\n    backstabbed,\n    goblinHouseHallway,\n    goblinHouseOutside,\n    theBigTree,\n};\n\nexport default all;\n\nexport function getDefinition(encounter: string): EncounterDefinition {\n    return all[encounter];\n}\n","// tslint:disable:object-literal-sort-keys\nimport { addGold } from \"actions/gold\";\nimport { updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { randomInt } from \"utils/random\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\nexport interface QuestVars {\n    treeState: string;\n}\n\nexport const theBigTree: EncounterDefinition = {\n    name: Encounter.theBigTree,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     return `A huge tree blocks the way. ${pyromancer.name} offers to burn it`;\n        // }\n        return { key: \"encounter-thebigtree-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        //const store = oracle.store;\n        const strongest = oracle.getAdventurerWithHighest(\"strength\");\n        //        const strongest = { name: \"<<NAME>>\" };\n        const options: Record<string, string> = {\n            walkAround: \"Walk around the tree\",\n            lift: `Lift the tree (${strongest.name})`,\n        };\n        // todo: should be 'type' or 'class'\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     options.burn = \"Burn it down (${pyromancer.name}\";\n        // }\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"lift\":\n                const strongest = oracle.getAdventurerWithHighest(\"strength\");\n                questVars.treeState = \"lifted\";\n\n                const action = updateQuestVars(quest.name, questVars);\n                dispatch(action);\n\n                const goldAmount = randomInt(2, 5);\n                const goldAction = addGold(goldAmount);\n                dispatch(goldAction);\n\n                // tslint:disable-next-line:max-line-length\n                return `${strongest.name} heaves and lifts the heavy tree, moving it aside. Underneath your party finds ${goldAmount} gold coins`;\n\n                // if(random() < strongest.stats.strenth) {\n                //     questState.bigTreeState = \"lifted\";\n                //     giveGold(3);\n                //     return \"${strongest.name} heaves and lifts the heavy tree,\n                // moving it aside. Underneath your party finds 3 gold coins\";\n                // }\n                // else {\n                //     strongest.loseHealth(20);\n                //     if(strongest.isDead){\n                //         return \"${strongest.name} attempted to lift the\n                // tree but it is too heavy, causing him to die\".\n                //     }\n                //     return \"%{strongest.name} attempted to lift the tree but it is too heavy, losing 20 hp\";\n                // }\n            // case \"burn\":\n            //     const pyrommancer = store.adventurers.find(a => a.type == \"pyromancer\")\n            //     questState.bigTreeState = \"burned\";\n            //     return \"${pyromancer.name} cackles as you sets the tree ablaze.\n            // The party steps over the smouldering ashes and continues\"\n            // }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n","import { TextEntry } from \"constants/text\";\nimport encounterDefintions from \"definitions/encounters\";\nimport { Encounter } from \"definitions/encounters/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { oracles } from \"oracle\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nexport interface QuestUpdate {\n    name: string;\n    currentEncounter: Encounter | null;\n    progress: number;\n}\n\nexport interface LogUpdate extends TextEntry {\n    key: string;\n    channel: LogChannel;\n    channelContext?: any;\n}\n\ninterface QuestGameTickResponse {\n    questUpdates: QuestUpdate[];\n    logUpdates: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: StoreState): QuestGameTickResponse => {\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the user has to do something to move the quest along\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n\n    store.quests.forEach((qss: QuestStoreState) => {\n        if (qss.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[qss.name];\n        const currentProgress = qss.progress;\n        const currentNodeIndex =  Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            let currentEncounter = qss.currentEncounter;\n\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n                    const encounter = encounterDefintions[nextNode.encounter!];\n                    const oracle = oracles[qss.name];\n                    nextProgress = currentNodeIndex + i;\n                    currentEncounter = nextNode.encounter!;\n                    // Start encounter(encounter)\n\n                    // Add quest to log\n                    log.push({\n                        channel: LogChannel.quest,\n                        channelContext: qss.name,\n                        ...encounter.getDescription(oracle),\n                    });\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    currentEncounter = null;\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: qss.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                currentEncounter,\n                name: qss.name,\n                progress: nextProgress,\n            });\n        }\n    });\n\n    return {\n        logUpdates: log,\n        questUpdates: quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ActionType,\n    AssignEquipmentAction,\n    InventoryAction,\n    MoveItemInInventoryAction,\n    MoveItemToOtherAdventurerAction, RemoveEquipmentAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { AdventurerStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: {\n        chest: Item.chest,\n        head: Item.cowl,\n    },\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `/img/avatars/andy-victorovych-a1.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `/img/avatars/andy-victorovych-a2.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, Item.boots1, Item.chainmailHood, Item.nomadHelmet, Item.plateChest4, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null, Item.plateHelmet, Item.cowl],\n}, {\n    id: \"ec6f1050\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `/img/avatars/andy-victorovych-a3.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `/img/avatars/andy-victorovych-a4.jpg`,\n    inventory: [ null, null, null, null, Item.khopesh, Item.hornedHelmet ],\n}, {\n    id: \"96c686c3\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `/img/avatars/andy-victorovych-a5.jpg`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `/img/avatars/andy-victorovych-a6.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `/img/avatars/andy-victorovych-a7.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `/img/avatars/andy-victorovych-a8.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `/img/avatars/andy-victorovych-a9.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null, Item.shoulders1, Item.fedora, Item.greaves2 ],\n}, {\n    id: \"12c613d4\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `/img/avatars/andy-victorovych-a10.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], AnyAction> = (\n    state: AdventurerStoreState[] = testState, action: AnyAction) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null) {\n                        toSlot = inventory.findIndex((val) => val === null || val === undefined);\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.assignEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot, item } = action as AssignEquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: item,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.removeEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot } = action as RemoveEquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: null,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","import { ActionType, AddCombatActionAction, MoveActorAction } from \"actions/combat\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { barBrawl, CombatStoreState } from \"stores/combat\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const combat: Reducer<CombatStoreState> = (state: CombatStoreState = barBrawl, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startCombatAction:\n            const addAction = action as AddCombatActionAction;\n\n            return {\n                ...state,\n                action: {\n                    actor: addAction.actor,\n                    endsAt: addAction.endsAt,\n                    target: addAction.target,\n                    type: addAction.combatType,\n                },\n            };\n\n        case ActionType.moveActor:\n            const moveAction = action as MoveActorAction;\n\n            // Moves an actor to another position\n            const actors = state.actors.map((a) => {\n                if (a.name === moveAction.actor) {\n                    return {\n                        ...a,\n                        location: moveAction.location,\n                    };\n                }\n                return a;\n            });\n\n            return {\n                ...state,\n                actors,\n            };\n\n            case ActionType.clearCombatAction:\n            // Clears current combat action\n            return {\n                ...state,\n                action: undefined,\n            };\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\n\nexport interface EngineStoreState {\n    lastTick: number;\n}\n\nexport const initialState: EngineStoreState = {\n    lastTick: Date.now(),\n};\n","import { ActionType as GameActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { EngineStoreState, initialState } from \"stores/engine\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case GameActionType.gameTick:\n            return {\n                ...state,\n                lastTick: Date.now(),\n            };\n    }\n    return state;\n};\n","\nimport {  ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\n\nconst testState = [\n    null,\n    null,\n    null,\n    Item.dagger,\n    Item.deedForWeaponsmith,\n];\n\n// Items in warehouse\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\n                                                 action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addItem: {\n            // toSlot is optional\n            const { item } = (action as AddAction);\n            let { toSlot } = (action as AddAction);\n            if (toSlot === undefined) {\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\n                if (toSlot === -1) {\n                    // Still not found. Add at end\n                    // todo: [07/07/2019] GAME DESIGN\n                    return [ ...state, item ];\n                }\n            }\n            return state.map((element, index) => index === toSlot ? item : element);\n        }\n\n        case ActionType.moveItemInWarehouse: {\n            const {\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInWarehouseAction);\n\n            return state.map((element, index) => {\n                // todo: items switch places\n                if (index === fromSlot) { return null; }\n                if (index === toSlot) { return state[fromSlot]; }\n                return element;\n            });\n        }\n        case ActionType.removeItem: {\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\n\n            return state.map((element, index) => index !== fromSlot ? element : null);\n        }\n    }\n\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const { key, channel, channelContext, context } = (action as AddLogEntryAction);\n            const time = Date.now();\n            return [{\n                    channel,\n                    channelContext,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, StartEncounterAction, UpdateEncounterResultAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport questDefinitions, { QuestDefinition } from \"definitions/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil1.png\",\n    currentEncounter: null,\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil2.png\",\n    currentEncounter: null,\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState,\n                                                   action: AnyAction | GameTickAction) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.advanceQuest:\n            return advanceQuest(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        case ActionType.startEncounter:\n            return startEncounter(state, action as StartEncounterAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (state: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n            };\n        }\n        return qss;\n    });\n};\n\nconst advanceQuest = (state: QuestStoreState[], action: QuestAction) => {\n    // deprecated\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            // const nextNode = questDefinition.nodes[Math.floor(progress)];\n\n            return {\n                ...qss,\n                progress,\n            };\n        }\n        return qss;\n    });\n};\n\nconst startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                currentEncounter: action.encounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n    if (!questsToUpdate.length) {\n        return state;\n    }\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState, initialState as structureInitialState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n    [Structure.workshop]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: structureInitialState,\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: structureInitialState,\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: structureInitialState,\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: structureInitialState,\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: structureInitialState,\n    [Structure.workshop]: structureInitialState,\n};\n","import { ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, AnyAction> = (state: StructuresStoreState = initialState,\n                                                                     action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport {  ActionType, AddAction} from \"actions/tasks\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\n\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { combat } from \"./combat\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    combat,\n    engine,\n    gold,\n    items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n    }\n    return state;\n};\n","\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { ActionType, AddResources } from \"../actions/resources\";\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\n                                                       action: AnyAction | GameTickAction) => {\n\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\n        // todo: Check if warehouse can hold it\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\n            return accumulator;\n        }, {});\n    };\n\n    switch (action.type) {\n        case ActionType.addResources: {\n            const resourcesToAdd = (action as AddResources).resources;\n            return addResources(resourcesToAdd);\n        }\n        case ActionType.removeResources: {\n            const resourcesToRemove = (action as AddResources).resources;\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\n                return accumulator;\n            }, {});\n        }\n\n        case GameActionType.gameTick: {\n            const resourcesToAdd = (action as GameTickAction).resources;\n            return addResources(resourcesToAdd);\n        }\n    }\n    return state;\n};\n","import { ActionType, GameTickAction } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, AnyAction> = (state: seedrandomStateType = initialState,\n                                                                  action: AnyAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { ActionType, ModifyWorkersAction } from \"actions\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import axios from \"axios\";\r\nimport updateCombat from \"mechanics/gameTick/combat\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Persistor } from \"redux-persist\";\r\nimport { gameTick } from \"./actions/game\";\r\nimport { addLogEntry } from \"./actions/log\";\r\nimport version from \"./constants/version\";\r\nimport App from \"./containers/App\";\r\nimport \"./index.css\";\r\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\r\nimport getQuestUpdates, { LogUpdate } from \"./mechanics/gameTick/quests\";\r\nimport getRngState from \"./mechanics/gameTick/rngState\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { StoreState } from \"./stores\";\r\nimport { TaskStoreState } from \"./stores/task\";\r\nimport { TasksStoreState } from \"./stores/tasks\";\r\nimport configureStore from \"./utils/configureStore\";\r\nimport * as Random from \"./utils/random\";\r\nimport { TextManager } from \"./utils/textManager\";\r\nimport WorldMap from \"components/three/world/WorldMap\";\r\n//import \"threetest.ts\";\r\n\r\n\r\nlet interval: NodeJS.Timeout;\r\nconst initGame = async () => {\r\n    const axiosResult = await axios.get(\"lang/en-US.json\");\r\n    const texts = axiosResult.data as Record<string, string>;\r\n    TextManager.init(texts);\r\n    Random.init(\"GILLESROX2\");\r\n\r\n    const { store, persistor, isHydrated } = await configureStore();\r\n    if (!isHydrated) {\r\n        startNewGame(store);\r\n    } else {\r\n        continueGame(store);\r\n    }\r\n    runGame(store, persistor);\r\n};\r\n\r\n/**\r\n * Gets called when a player\r\n * @param store\r\n */\r\nconst startNewGame = (store: any) => {\r\n\r\n    store.dispatch(addLogEntry(\"test-game-welcome\"));\r\n    // todo: here is a good place to launch a tutorial or something\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\nconst continueGame = (store: any) => {\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\n// const stopGame = () => {\r\n//     clearTimeout(interval);\r\n// };\r\n\r\nconst runGame = (store: any, persistor: Persistor) => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App persistor={ persistor }/>\r\n        </Provider>,\r\n        document.getElementById(\"root\") as HTMLElement,\r\n    );\r\n    registerServiceWorker();\r\n\r\n    const processCompletedTasks = (tasks: TasksStoreState) => {\r\n        const handleCompletedTask = (task: TaskStoreState) => {\r\n            // Fire all callbacks\r\n            task.callbacks.forEach((action) => store.dispatch(action));\r\n        };\r\n\r\n        tasks.completed.forEach((task) => handleCompletedTask(task));\r\n    };\r\n\r\n    // store.dispatch(addGold(400));\r\n\r\n    // TODO: find something less ugly and hacky than this\r\n//    oracles.kill10b = theBigTree.getOracle(\"kill_10_boars\", store);\r\n  //  oracles[\"retrieve_magic_amulet\"] = backstabbed.getOracle(\"retrieve_magic_amulet\", store);\r\n    const gameLoop = () => {\r\n        const state: StoreState = store.getState();\r\n        const delta = Date.now() - state.engine.lastTick;\r\n\r\n        const logs: LogUpdate[] = [];\r\n        const resourcesUpdates = getProducedResources(delta, state);\r\n        const rngState = getRngState();\r\n        updateCombat(delta, store);\r\n        const { questUpdates, logUpdates } = getQuestUpdates(delta, state);\r\n        logs.push(...logUpdates);\r\n\r\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, questUpdates, logs));\r\n\r\n        processCompletedTasks(state.tasks);\r\n\r\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", LogChannel.common, { item: Item.teeth }));\r\n    };\r\n\r\n    interval = setInterval(gameLoop, 2500);\r\n};\r\n\r\ninitGame();\r\n"],"sourceRoot":""}