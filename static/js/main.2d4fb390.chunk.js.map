{"version":3,"sources":["actions/combat.ts","stores/combat.ts","actions/game.ts","stores/logEntry.ts","actions/log.ts","mechanics/gameTick/combat.ts","utils/version.ts","definitions/items/types.ts","constants/version.tsx","definitions/items/apparel.ts","definitions/structures/types.tsx","definitions/structures/alchemist.tsx","definitions/structures/index.tsx","utils/time.tsx","definitions/production/armour.tsx","definitions/structures/armoursmith.tsx","definitions/structures/garden.tsx","definitions/structures/lumberMill.tsx","definitions/structures/mine.tsx","definitions/structures/quarry.tsx","definitions/structures/tannery.tsx","definitions/structures/tavern.tsx","definitions/structures/warehouse.tsx","definitions/production/weapons.tsx","definitions/structures/weaponsmith.tsx","definitions/structures/weaver.tsx","definitions/production/questItems.tsx","definitions/structures/workshop.tsx","definitions/items/deeds.ts","definitions/items/weapons.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","global/TextManager.ts","definitions/resources.tsx","components/ui/items/ItemsBox.tsx","containers/ui/context/items/ItemsCostBox.tsx","constants/context.ts","constants/icons.ts","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","global/EventEmitter.ts","global/TooltipManager.ts","components/ui/ItemIcon.tsx","components/ui/Progressbar.tsx","actions/gold.ts","actions/items.ts","actions/resources.ts","actions/structures.ts","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/StructureViewHeader.tsx","components/structures/ProductionStructureView.tsx","stores/task.ts","selectors/workers.tsx","containers/structures/ProductionStructureView.tsx","actions/quests.ts","constants/dragging.ts","components/ui/AdventurerAvatar.tsx","components/ui/DraggableAdventurerAvatar.tsx","definitions/encounters/types.ts","definitions/quests/index.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","containers/structures/tavern/QuestBoard.tsx","stores/quest.ts","components/ui/DraggableItemIcon.tsx","components/ui/EquipmentSlot.tsx","actions/adventurers.ts","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/ui/AdventurerInfo.tsx","containers/ui/AdventurerInfo.ts","global/SoundManager.ts","components/ui/buttons/SquareIconButton.tsx","components/ui/window/Window.tsx","hoc/withWindow.tsx","components/ui/window/windows/AdventurerInfoWindow.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","components/ui/resources/ResourcesBox.tsx","components/ui/tabs/Tab.tsx","components/ui/tabs/Tabstrip.tsx","hooks/usePrevious.ts","stores/resources.ts","components/structures/warehouse/WarehouseStructureView.tsx","storeHelpers/index.tsx","selectors/adventurers.tsx","containers/structures/warehouse/WarehouseStructureView.tsx","stores/structure.ts","components/structures/ResourceStructureView.tsx","components/StructureDetailsView.tsx","containers/structures/StructureDetailsView.tsx","components/preloading/Preloader.tsx","manifest/app.tsx","components/preloading/Indicator.tsx","components/ui/toasts/Toast.tsx","components/pixi/Viewport.tsx","utils/hitAreaShapes.ts","components/town/structures/LumberMill/index.tsx","components/pixi/ParticleEmitter.ts","components/town/structures/Tavern/index.tsx","components/town/TownView.tsx","global/ToastManager.tsx","components/ui/toasts/Toasts.tsx","actions/index.ts","components/ui/window/windows/CheatWindow.tsx","constants/resources.ts","containers/windows/CheatWindow.tsx","components/ui/window/windows/SettingsWindow.tsx","components/ui/window/windows/MenuWindow.tsx","hoc/withAppContext.tsx","components/ui/topbar/Resourcebar.tsx","utils/number.ts","components/ui/topbar/Topbar.tsx","utils/pixiJs.ts","components/world/WorldMap/QuestMarker.tsx","components/world/WorldMap/QuestLine.tsx","selectors/quests.tsx","components/world/WorldMap/index.tsx","components/world/QuestPanel/AdventurerTabstrip.tsx","components/world/QuestPanel/AdventurerEquipment.tsx","components/world/QuestPanel/AdventurerPanel.tsx","components/pixi/RectTileLayer.tsx","components/pixi/Tilemap.tsx","components/pixi/SceneObject.tsx","components/pixi/Scene.tsx","components/world/QuestPanel/index.tsx","components/world/QuestPanel/QuestDetails.tsx","components/log/SimpleLog.tsx","components/world/WorldView.tsx","containers/ui/context/ItemContext.tsx","components/ui/tooltip/Tooltip.tsx","components/ui/tooltip/context/ItemContext.tsx","components/App.tsx","components/ui/tooltip/ContextTooltip.tsx","containers/App.tsx","utils/random.ts","mechanics/gameTick/producedResources.ts","oracle/index.tsx","definitions/encounters/backstabbed.ts","definitions/encounters/goblinHouse.ts","definitions/encounters/index.ts","definitions/encounters/theBigTree.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","stores/engine.ts","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/structures.ts","reducers/structures.ts","stores/tasks.ts","reducers/tasks.ts","reducers/index.ts","reducers/combat.ts","reducers/engine.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","index.tsx"],"names":["ActionType","Allegiance","CombatActionType","LogChannel","barBrawl","actors","allegiance","player","health","location","name","remainingAP","turn","updateCombat","delta","store","actor","combat","getState","action","endsAt","Date","now","enemy","type","move","dispatch","target","moveActor","clearCombatAction","addLogEntry","key","context","channel","common","channelContext","ItemType","Item","asInt","semVer","parts","split","map","part","Number","length","Error","forEach","numericVersion","i","convertSemVerToInt","ApparelType","itemType","apparel","basePath","StructureType","all","boots1","item","equipmentType","feet","subText","iconImg","boots2","boots3","chainmailHood","head","armourRating","chest","clothGloves","hands","cowl","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","Structure","alchemist","production","cost","gold","time","levels","displayName","workerCapacity","produces","formatDuration","unit","moment","format","trim","resources","wood","iron","ONE_MINUTE","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","stone","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","torch","sandwich","workshop","getDefinition","structure","WeaponType","DamageType","deed","deedForLumbermill","deedForWeaponsmith","material","arrowheads","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","gunpowder","scales","spring","thread","questItem","questItemDefinitions","blueprints","crate","dynamite","dragonEye","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","tusk","vase","vial","weeds","trinket","trinketDefinitions","magicAmulet","ring","weapon","weaponDefinitions","battleAxe","weaponType","axe","damage","kinetic","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","deeds","questItems","trinkets","weapons","TextManager","texts","precompile","this","templates","compileAll","initialized","template","getTemplate","console","error","textEntry","get","compile","Object","keys","value","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","Resource","itemArticleUndefined","getItemName","articleTemplate","noun","ItemsBox","props","itemsInInventory","className","aggregate","items","reduce","accumulator","current","listItems","amount","listItemClass","filter","itemDescription","itemsDescription","style","backgroundImage","process","connect","ownProps","tmpWarehouse","stockpile","found","findIndex","splice","removed","push","ContextType","IconSize","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","workers","getClassName","size","smallest","small","medium","big","biggest","EventEmitter","eventName","listener","events","event","fn","TooltipManager","info","originRect","referenceRect","deepEquals","lastContext","clear","emit","EVENT_CONTEXT_UPDATED","undefined","ItemIcon","itemDefinition","warn","onClick","showContext","currentTarget","getBoundingClientRect","showContextTooltip","stopPropagation","Progressbar","val","min","max","progress","label","width","UpDownValue","displayValue","upDisabled","e","onUp","downDisabled","onDown","StructureViewHeader","ProductionStructureView","useState","selectedItem","setSelectedItem","workersAssigned","setWorkersAssigned","structureDefinition","level","levelDefinition","getStructureName","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","find","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","indexOf","costItemsContent","display","workersFree","craftingTime","formatted","makeTimeString","onCraft","createCraftingDetails","tasks","t","startTime","timeRemaining","addGold","subtractGold","addItemToWarehouse","toSlot","addItem","removeItemFromWarehouse","fromSlot","removeItem","addResources","finishBuildingStructure","upgradeStructure","increaseWorkers","decreaseWorkers","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","createSelector","state","structures","acc","structureStore","running","productionDefinition","removeResources","craftItem","town","startEncounter","quest","encounter","questName","DragSourceType","DragType","AdventurerAvatar","adventurer","avatarImg","id","spec","beginDrag","sourceId","sourceType","adventurerInventory","Encounter","QuestNodeType","DragSource","monitor","connectDragSource","dragSource","isDragging","kill10Boars","nodes","x","y","nothing","log","goblinHouseOutside","backstabbed","boss","retrieveMagicAmulet","requiredItems","theBigTree","DropTarget","drop","onDrop","getItem","canDrop","connectDropTarget","dropTarget","isOver","AssignAdventurers","slots","content","assignedAventurers","onRemoveAdventurer","onAddEventurer","availableSlots","slotsContent","QuestBoard","questListContent","availableQuests","q","iconImgPath","icon","selectedQuestName","onQuestClick","getQuestTitle","checkEnoughItems","questDefinition","every","amountRequired","fullParty","a","enoughItems","canLaunch","getQuestDescription","onAddAdventurer","ItemsCostBox","onLaunchQuest","getQuestDetails","QuestStatus","EquipmentSlotType","inventorySlot","index","itemAndEquipmentSlotMatch","equipmentSlotType","checkEquipment","mainHand","offHand","borderColor","title","children","dragInfo","adventurerEquipment","isActive","classNames","join","Inventory","contents","slot","iconSize","onDropItem","AdventurerInfo","attributes","stats","stat","toFixed","getEquipmentSlot","slotType","equipment","itemRef","React","ref","onRemoveItemFromInventory","onAssignEquipment","existingEquipment","onAddItemToInventory","onAssignEquipmentFromWarehouse","onAddItemToWarehouse","onRemoveEquipment","handleDropItemEquipment","equipmentList","inventory","onMoveItemInInventory","otherItem","onMoveItemFromWarehouseToInventory","moveItemInInventory","adventurerId","addItemToInventory","removeItemFromInventory","assignEquipment","equipmentSlot","removeEquipment","MusicTrack","Sound","media","mapDispatchToProps","add","remove","assign","switchItem","adventurers","SquareIconButton","text","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","url","sound","play","track","hasOwnProperty","fade","musicVolume","nextMusic","playing","loop","volume","_musicVolume","localStorage","setItem","fromStorage","parseFloat","_soundVolume","Window","BackButton","backEnabled","onBack","playSound","buttonClick","CloseButton","closeEnabled","onClose","withWindow","WrappedComponent","compose","TavernStructureView","setAassignedAdventurers","selectedQuest","setSelectedQuest","AppContext","roomCount","getAvailableQuests","quests","status","available","getQuestByAdventurer","values","party","handleAdventurerNameClick","window","AdventurerInfoWindow","onOpenWindow","roomContent","room","assigned","createRooms","handleQuestClick","copy","handleAddAdventurer","handleRemoveAdventurer","launchQuest","deltaResources","getStructure","Tab","active","Tabstrip","initialSelectedTab","activeTab","setActiveTab","Children","child","cloneElement","handleTabClick","tabId","onTabSelected","usePrevious","useRef","useEffect","initialState","empty","WAREHOUSE","WarehouseStructureView","selectedAdventurer","setSelectedAdventurer","resourcesDelta","setResourcesDelta","previousResources","resourcesRef","classList","setTimeout","onMoveItemInWarehouse","onMoveItemFromAdventurer","adventurersInTown","adventurersOnQuest","findAdventurerById","getQuestLeader","leaderId","storeIsRehydrated","rngState","getAdventurers","getQuests","selectAdventurersInTown","foundInParty","groupedAdventurers","foundAdventurers","StructureState","moveItemInWarehouse","onMoveItemToAdventurer","NotBuilt","ResourceStructureView","useSelector","useDispatch","handleWorkersDown","handleWorkersUp","createWorkersRow","handleUpgrade","generatesText","createGeneratesRow","StructureDetails","Building","buildTask","renderContent","MediaType","StructureDetailsView","manifest","Indicator","itemsLoaded","itemsTotal","Math","floor","Type","loadImage","image","Image","src","Promise","resolve","reject","check","naturalWidth","removeEventListener","complete","addEventListener","getType","toLowerCase","endsWith","Preloader","completed","setCompleted","setItemsLoaded","loadMedia","indicator","promises","loadItem","catch","err","then","results","onLoadComplete","mediaType","Howl","Viewport","forwardRef","app","useApp","cursor","renderer","plugins","interaction","cursorStyles","pointer","PixiComponentViewport","PixiComponent","create","viewport","PixiViewport","screenWidth","screenHeight","worldWidth","worldHeight","ticker","on","minScale","maxScale","drag","pinch","wheel","clamp","direction","clampZoom","decelerate","HitAreaShapes","shapes","sprite","definition","shape","PIXI","contains","LumberMill","atlas","hitAreaShapes","polygons","textures","setTextures","loader","load","_","spritesheet","rotation","setRotation","useTick","r","interactive","buttonMode","pointertap","onStructureClick","hitArea","texture","anchor","ParticleEmitter","applyProps","instance","oldProps","newProps","config","newP","applyDefaultProps","emitter","_emitter","particles","from","elapsed","performance","tick","raf","requestAnimationFrame","update","willUnmount","cancelAnimationFrame","Tavern","smoke","TownView","addMusicTrack","playMusicTrack","handleStructureClick","dragging","onScroll","preventDefault","passive","MAX_WIDTH","height","options","sharedLoader","reverse","Toast","achievementUnlocked","typeText","alt","ToastManager","stack","EVENT_TOASTS_UPDATED","toast","lifeTime","Toasts","activeToasts","setActiveToasts","toastsUpdated","toastConfig","CheatWindow","itemSelectRef","cheats","setCheats","structureDef","getStructureDefinition","levelDef","checked","Built","onChange","handleChangeStructureState","getStructureRow","getItemOption","isNaN","getItemTypeOptions","onCheatStructureState","addToast","cheat","evt","onCheatGold","onCheatWorkers","onCheatResources","onCheatItem","resourceOrder","setStructureState","addWorkers","step","linear","pow","defaultValue","sqrt","Consumer","Resourcebar","storeProps","createItem","number","digits","SI_SYMBOL","tier","log10","suffix","scale","scaled","formatNumber","Topbar","useContext","lerp","n1","n2","alpha","QuestMarker","leader","encounterActive","position","selected","avatar","maskGraphics","beginFill","drawCircle","CIRCLE_DIAMETER","endFill","mask","addChild","pointerdown","QuestLine","positions","draw","graphics","lineStyle","moveTo","xc","yc","quadraticCurveTo","selectActiveQuests","WorldMap","retrieveWorldViewRef","smallMap","questSelector","useCallback","activeQuests","WIDTH","canvasWidth","setCanvasWidth","canvasHeight","setCanvasHeight","resize","worldView","worldViewWidth","clientWidth","worldViewHeight","clientHeight","SMALL_HEIGHT","focusOnQuestingParty","viewportRef","point","nodeLocationToPoint","moveCenter","partyLocation","getQuestWorldLocation","previousPositions","getPreviousPositions","currentPosition","questNode","onPartyClick","point1","point2","roundedProgress","lastNode","nextNode","WORLD_WIDTH","WORLD_HEIGHT","lastPosition","AdventurerTabstrip","onAdventurerTabSelected","AdventurerEquipment","onDropItemEquipment","createRef","AdventurerPanel","actions","RectTileLayer","tilemap","CompositeRectTileLayer","layer","tileset","horizontalTiles","data","w","tilewidth","h","tileheight","spriteId","addFrame","Tilemap","layers","setLayers","spritesheetData","parseSpritesheetData","getTileset","baseTexture","parse","visible","createTileLayer","mapData","tilesets","source","columns","frames","tilecount","frame","spriteSourceSize","rotated","trimmed","sourceSize","meta","imagewidth","imageheight","SceneObject","scenePosition","tileWidth","tileHeight","useMemo","Layout","Scene","setMapData","actorPosition","setActorPosition","jsonPath","substr","lastIndexOf","sceneWidth","sceneHeight","pointToScenePosition","global","drawRect","line","QuestDetails","ChannelType","QuestPanel","layout","auto","selectedAdventurerID","setSelectedAdventurerID","RealWorldView","worldMapRef","setSelectedQuestName","world","SimpleLog","expanded","setExpanded","selectedTabId","setSelectedTabId","logEntries","channels","tabType","displayEntries","currentTab","lE","Tabs","tab","handleTabSelected","entry","logEntry","getLogEntryRow","Placement","handleStartConstruction","startBuildingStructure","buildStructure","deedInfo","enoughGold","weaponDefinition","apparelDefinition","getApparelDefinition","View","Tooltip","placement","bottom","setPlacement","containerRect","setContainerRect","tooltipElement","tooltipRect","top","opacity","contentElement","querySelector","left","offset","transform","right","closest","ContextTooltip","selectedContext","setSelectedContext","tooltipUpdated","createContext","App","containerRef","setMedia","activeWindows","setActiveWindows","handleViewButtonClick","selectStructure","handleWindowOpened","handleWindowClose","handleWindowBack","slice","Provider","maxWidth","DndProvider","backend","HTML5Backend","mediaItems","addSounds","path","exact","to","data-for","data-tip2","persistor","purge","reload","color","component","WorldView","topWindow","commonWindowProps","renderWindow","generator","getMaxResources","getProducedResources","lastProducedUpdate","result","factor","resourceStructureDefinition","handleStructure","random","dirty","randomInt","ceil","Oracle","concat","sort","b","questVars","oracles","getOracle","getDescription","oracle","getOptions","fight","flight","answer","option","finder","getRandomAdventurer","investigate","leave","goblinHouseHallway","advanceQuest","strongest","getAdventurerWithHighest","walkAround","lift","treeState","vars","updateQuestVars","goldAmount","getQuestUpdates","questDefinitions","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","currentEncounter","encounterDefintions","questTitle","questEncounter","logUpdates","questUpdates","getRngState","Random","isLocalhost","Boolean","hostname","match","register","navigator","URL","toString","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","generateRandomStats","strength","perception","endurance","charisma","intelligenge","agility","luck","testState","lastTick","gameTick","lU","encounterResults","reward","qss","questsToUpdate","questToUpdate","updateEncounterResult","nodeIndex","structureInitialState","updateStructureState","structureState","createTask","combineReducers","element","moveItemToOtherAdventurer","fromAdventurerId","toAdventurerId","fromAdventurer","startCombatAction","addAction","combatType","moveAction","engine","GameActionType","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","initial","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","initGame","axios","axiosResult","init","seed","seedrandom","configureStore","continueGame","startNewGame","runGame","ReactDOM","document","getElementById","registerServiceWorker","processCompletedTasks","handleCompletedTask","setInterval","logs","resourcesUpdates"],"mappings":"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","file":"static/js/main.2d4fb390.chunk.js","sourcesContent":["// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { CombatActionType } from \"stores/combat\";\n\nexport enum ActionType {\n    clearCombatAction = \"clearCombatAction\",\n    startCombatAction = \"startCombatAction\",\n    moveActor = \"moveActor\",\n}\n\nexport interface AddCombatActionAction extends Action<ActionType> {\n    combatType: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport interface MoveActorAction extends Action<ActionType> {\n    actor: string;\n    location: number[];\n}\n\nexport function startCombatAction(type: CombatActionType, actor: string, target: number[], endsAt: number): AddCombatActionAction {\n    return {\n        type: ActionType.startCombatAction,\n        combatType: type,\n        actor,\n        target,\n        endsAt,\n    };\n}\n\nexport function moveActor(actor: string, location: number[]): MoveActorAction {\n    return {\n        type: ActionType.moveActor,\n        actor,\n        location,\n    };\n}\n\nexport function clearCombatAction(): Action<ActionType> {\n    // currently there is only one combat possible. so only one needs to be cleared\n    return {\n        type: ActionType.clearCombatAction,\n    };\n}\n","export interface CombatStoreState {\n    actors: Actor[];\n    turn: Allegiance;\n    action?: CombatAction;\n}\n\nexport interface Actor {\n    name: string;\n    allegiance: Allegiance;\n    location: number[];\n    health: number;\n    remainingAP: number;\n}\n\nexport enum Allegiance {\n    player,\n    enemy,\n}\n\nexport interface CombatAction {\n    type: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport enum CombatActionType {\n    move = \"move\",\n    slash = \"slash\",\n    shoot = \"shoot\",\n}\n\nexport const barBrawl: CombatStoreState = {\n    actors: [{\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [3, 5],\n        name: \"c4a5d270\",\n        remainingAP: 5,\n    }, {\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [4, 6],\n        name: \"2e655832\",\n        remainingAP: 4,\n    }],\n    turn: Allegiance.player,\n};\n","import { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\r\nimport { Action } from \"redux\";\r\nimport { State as seedrandomStateType } from \"seedrandom\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\n\r\nexport enum ActionType {\r\n    gameTick = \"gameTick\",\r\n}\r\nexport interface GameTickAction extends Action<ActionType> {\r\n    delta: number;\r\n    rngState: seedrandomStateType | null;\r\n    resources: ResourceStoreState | null;\r\n    quests: QuestUpdate[];\r\n    log: LogUpdate[];\r\n}\r\n\r\n// export type IncrementResource = IncrementResource // | others\r\n\r\n// tslint:disable: align\r\nexport function gameTick(delta: number,\r\n    rngState: seedrandomStateType | null,\r\n    resources: ResourceStoreState | null,\r\n    quests: QuestUpdate[],\r\n    log: LogUpdate[],\r\n): GameTickAction {\r\n    return {\r\n        type: ActionType.gameTick,\r\n        delta,\r\n        rngState,\r\n        resources,\r\n        quests,\r\n        log,\r\n    };\r\n}\r\n","import { TextEntry } from \"constants/text\";\n\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry extends TextEntry {\n    time: number;\n    channel: LogChannel;\n    channelContext?: string;\n}\n","// tslint:disable: object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { LogChannel } from \"stores/logEntry\";\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface AddLogEntryAction extends Action<ActionType> {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n    channelContext?: string;\n}\n\nexport function addLogEntry(key: string, context?: any, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        key,\n        channel,\n        channelContext,\n        context,\n    };\n}\n","import { clearCombatAction, moveActor } from \"actions/combat\";\nimport { Store } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Allegiance, CombatAction, CombatActionType } from \"stores/combat\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface CombatUpdate  {\n    // todo: maybe this is not needed\n    action: CombatAction | null;\n}\n\nconst updateCombat = (delta: number, store: Store<StoreState>): CombatUpdate | null => {\n    const state = store.getState();\n    const combat = state.combat;\n    if (combat.action) {\n        const action = combat.action;\n        if (action.endsAt < Date.now()) {\n            if (combat.turn === Allegiance.enemy) {\n                /* if (apLeft(enemy))\n                determine next action\n                else\n                players turn now\n                */\n            } else if (combat.turn === Allegiance.player) {\n                switch (combat.action.type) {\n                    case CombatActionType.move:\n                        store.dispatch(moveActor(combat.action.actor, combat.action.target));\n                        store.dispatch(clearCombatAction());\n                        break;\n                    default:\n                        break;\n                }\n                return {\n                    action: null,\n                };\n            }\n        }\n    }\n    return null;\n};\n\nexport default updateCombat;\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    // eslint-disable-next-line no-mixed-operators\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","\nexport enum ItemType {\n    deed,\n    apparel,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    arrowheads = \"arrowheads\",\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    gunpowder = \"gunpowder\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dragonEye = \"dragonEye\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    sandwich = \"sandwich\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.4\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","// tslint:disable:object-literal-sort-keys\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.apparel;\nconst basePath = \"/img/items/apparel/\";\n\nexport enum ApparelType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface ApparelDefinition extends ItemDefinition {\n    equipmentType: ApparelType;\n    armourRating?: number;\n}\n\nconst all: Record<string, ApparelDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n        armourRating: 3,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n        armourRating: 2,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n        armourRating: 20,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n        armourRating: 10,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n        armourRating: 10,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default all;\n\nexport function getDefinition<T extends ApparelDefinition>(apparel: string): T {\n    return all[apparel] as T;\n}\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n                                  // todo: REMOVE\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { StructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport weaver from \"./weaver\";\nimport workshop from \"./workshop\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n    workshop = \"workshop\",\n}\n\nconst all = {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n    workshop,\n};\n\nexport default all;\n\nexport function getDefinition<T extends StructureDefinition>(structure: string): T {\n    return all[structure] as T;\n}\n","import * as moment from \"moment\";\nimport \"moment-duration-format\";\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\n\nexport const formatDuration = (time: number, unit: moment.DurationInputArg2 = \"milliseconds\" ): string => {\n    return moment.duration(time, unit)\n        .format(\"d [days] h [hours] m [min] s [sec]\", {\n        trim: \"both\",\n    });\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { stone: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { stone: 4 },\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { stone: 6 },\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n\nexport default weaver;\n","// tslint:disable:object-literal-sort-keys\n// todo: maybe 'quest items' is not the right name\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const torch: ProductionDefinition = {\n    item: Item.torch,\n    cost: {\n        resources: { wood: 2, fabric: 1 },\n        time: time.ONE_MINUTE,\n    },\n};\n\nexport const sandwich: ProductionDefinition = {\n    item: Item.sandwich,\n    cost: {\n        resources: { food: 1 },\n        time: time.ONE_MINUTE / 2,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { sandwich, torch } from \"definitions/production/questItems\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst workshop: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ torch, sandwich ],\n    }, {\n        // level 2:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }, {\n        // level 4:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\nexport default workshop;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\nexport enum DamageType {\n    kinetic = \"kinetic\",\n}\n\nexport interface DamageDefinition {\n    [DamageType.kinetic]: number | undefined;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n    damage: DamageDefinition;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n        damage: { [DamageType.kinetic]: 20 },\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \" Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n        damage: { [DamageType.kinetic]: 3 },\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n        damage: { [DamageType.kinetic]: 5 },\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n        damage: { [DamageType.kinetic]: 25 },\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n        damage: { [DamageType.kinetic]: 2 },\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n        damage: { [DamageType.kinetic]: 12 },\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 14 },\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n        damage: { [DamageType.kinetic]: 16 },\n    },\n};\nexport default weaponDefinitions;\n\nexport function getDefinition<T extends WeaponDefinition>(weapon: string): T {\n    return weaponDefinitions[weapon] as T;\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.arrowheads]: {\n        item: Item.arrowheads,\n        itemType,\n        iconImg: `${basePath}arrowheads.png`,\n    },\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.gunpowder]: {\n        item: Item.gunpowder,\n        itemType,\n        iconImg: `${basePath}gunpowder.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.dragonEye]: {\n        item: Item.dragonEye,\n        itemType,\n        iconImg: `${basePath}dragon-eye.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.sandwich]: {\n        item: Item.sandwich,\n        itemType,\n        iconImg: `${basePath}sandwich.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import apparel from \"./apparel\";\nimport deeds from \"./deeds\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...apparel,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import { TextEntry } from \"constants/text\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\nimport { Structure } from \"definitions/structures\";\nimport * as Handlebars from \"handlebars\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTextEntry(textEntry: TextEntry): string {\n        return this.get(textEntry.key, textEntry.context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    public static getStructureName(structure: Structure): string {\n        return this.get(`structure-${structure}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: Item, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: Item) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n};\n","import \"components/ui/css/common/icon.css\";\nimport itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items, to be used as requirements for something\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const aggregate = props.items.reduce((accumulator: object, current: Item) => {\n        if (!accumulator[current]) {\n            accumulator[current] = 0;\n        }\n        accumulator[current]++;\n        return accumulator;\n    }, {});\n\n    const listItems = Object.keys(aggregate).map((key: string) => {\n        const item = key as Item;\n        const amount = aggregate[key] as number;\n        let listItemClass = \"item\";\n\n        // Check if we have enough\n        const amountInInventory = itemsInInventory ? itemsInInventory.filter((i) => i === item).length : 0;\n        if (amount > amountInInventory) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className = { listItemClass } key = { item }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage: `url(${process.env.PUBLIC_URL}${itemDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { `${TextManager.getItemName(item)} (${ amount })` }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    const tmpWarehouse = [ ...store.stockpile];\n    ownProps.items.forEach((item: Item) => {\n        const found = tmpWarehouse.findIndex((i) => i === item);\n        if (found > -1) {\n            // Remove the item from tmpWarehouse and add to itemsInInventory\n            const [ removed ] = tmpWarehouse.splice(found, 1);\n            if (removed) {\n                itemsInInventory.push(removed);\n            }\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextPopup\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","export enum IconSize {\r\n    smallest,\r\n    small,\r\n    medium,\r\n    big,\r\n    biggest,\r\n}\r\n\r\nexport const getClassName = (size?: IconSize): string => {\r\n    switch (size) {\r\n        case IconSize.smallest:\r\n            return \"common-icon-smallest\";\r\n        case IconSize.small:\r\n            return \"common-icon-small\";\r\n        case IconSize.medium:\r\n            return \"common-icon-medium\";\r\n        case IconSize.big:\r\n            return \"common-icon-big\";\r\n        case IconSize.biggest:\r\n            return \"common-icon-biggest\";\r\n    }\r\n    return getClassName(IconSize.medium);\r\n};\r\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${process.env.PUBLIC_URL}${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    // Each additional worker shaves off 10% of the production time\n    return time - (.1 * time * (workers - 1));\n};\n","function EventEmitter<TEventType>() {\n    abstract class EventEmitter {\n        static events = {};\n        \n        static addEventListener (eventName: string, listener: (event: TEventType) => void) {\n            this.events[eventName] = this.events[eventName] || [];\n            this.events[eventName].push(listener);\n        }\n\n        static removeEventListener (eventName: string, listener: (event: TEventType) => void) {\n            if (this.events[eventName]) {\n                for (var i = 0; i < this.events[eventName].length; i++) {\n                    if (this.events[eventName][i] === listener) {\n                        this.events[eventName].splice(i, 1);\n                        break;\n                    }\n                };\n            }\n        }\n\n        protected static emit (eventName: string, event: TEventType | undefined) {\n            if (this.events[eventName]) {\n                this.events[eventName].forEach((fn: (event: TEventType | undefined) => any) => fn(event));\n            }\n        }\n    }\n    return EventEmitter;\n}\n\nexport default EventEmitter;","import { ContextInfo, ContextType } from 'constants/context';\nimport deepEquals from 'deep-equal';\nimport EventEmitter from './EventEmitter';\n\nexport interface Context {\n    type: ContextType;\n    info: ContextInfo;\n    referenceRect: ClientRect;\n}\n\nexport abstract class TooltipManager extends EventEmitter<Context>() {\n\n    static EVENT_CONTEXT_UPDATED = \"tooltipContextUpdated\";\n    private static lastContext: Context | undefined; \n\n    static showContextTooltip (type: ContextType, info: ContextInfo, originRect: ClientRect) {\n        const context = { type, info, referenceRect: originRect};\n\n        if(deepEquals(context, this.lastContext)) {\n            this.clear();\n        } else {\n            this.emit(this.EVENT_CONTEXT_UPDATED, context);\n            this.lastContext = context;  \n        }\n    }\n    \n    static clear() {\n        this.emit(this.EVENT_CONTEXT_UPDATED, undefined);   \n        this.lastContext = undefined;    \n    }\n}","import \"components/ui/css/common/icon.css\";\nimport { ContextType } from \"constants/context\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\nimport { TooltipManager } from 'global/TooltipManager';\n\nexport interface Props {\n    item: Item;\n    onClick?: (event: React.MouseEvent) => void;\n    size?: IconSize;\n    showContext?: boolean;\n}\n\nconst ItemIcon: React.FC<Props> = (props) => {\n    const { item } = props;\n    const itemDefinition = getDefinition(item);\n\n    if (!itemDefinition) {\n        // tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    const handleClick = (event: React.MouseEvent) => {\n        if (props.showContext !== false) {\n            const origin = (event.currentTarget as HTMLElement);\n            const originRect = origin.getBoundingClientRect();\n            TooltipManager.showContextTooltip(ContextType.item, getDefinition(item), originRect);\n            event.stopPropagation();\n        }\n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    };\n\n    const className = `item-icon ${getClassName(props.size)}`;\n\n    return (\n        <div className={className}\n            onClick = {handleClick}\n            style = {{\n                backgroundImage: `url(${process.env.PUBLIC_URL}${itemDefinition.iconImg})`,\n            }}>\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps { }\nexport interface Props extends DispatchProps {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nconst Progressbar = (props: Props) => {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{ props.label }</div>\n            <div className=\"progressbar-info\" style= {{ width: `${progress * 100}%`}}>  </div>\n        </div>\n    );\n};\n\nexport default Progressbar;\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","import { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface ModifyGoldAction extends Action<ActionType> {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","import { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface MoveItemInWarehouseAction extends Action<ActionType> {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface AddResources extends Action<ActionType> {\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { Action } from \"redux\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface StructureAction extends Action<ActionType> {\n    structure: Structure;\n}\nexport interface StructureStateAction extends StructureAction {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends StructureAction {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action, AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface AddAction extends Action<ActionType> {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: (e: React.MouseEvent) => void;\n    onDown?: (e: React.MouseEvent) => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = (e: React.MouseEvent) => {\n        if (props.onUp && !props.upDisabled) { props.onUp(e); }\n    };\n\n    const handleDown = (e: React.MouseEvent) => {\n        if (props.onDown && !props.downDisabled) { props.onDown(e); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import React from \"react\";\nimport { Structure } from 'definitions/structures';\nimport \"./css/structureviewheader.css\";\n\ninterface Props {\n    structure: Structure;\n}\n\nconst StructureViewHeader = (props: Props) => {\n    //const displayName = TextManager.getStructureName(props.structure);\n    return (\n        <div className={`structureview-header structureview-header-${props.structure}`}>\n            {/* <h1 className=\"app-h1-white\">{displayName}</h1> */}\n        </div>\n    );\n}\n\nexport default StructureViewHeader;","import MaterialsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"global/TextManager\";\nimport { formatDuration } from \"utils/time\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport \"./css/productionstructureview.css\";\nimport { useState } from 'react';\nimport StructureViewHeader from './StructureViewHeader';\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Array<Item | null>;  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ProductionStructureView = (props: AllProps) => {\n\n    const [selectedItem, setSelectedItem] = useState<Item>();\n    const [workersAssigned, setWorkersAssigned] = useState<number>(0);\n\n\n    const structureDefinition = getDefinition<ProductionStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type}\n            with type ProductionStructureDefinition.`);\n    }\n    const level: number =   props.level || 0;\n    const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(props.type);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick = { handleClick }\n                disabled= { !canUpgrade } >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createCraftTabs = () => {\n\n        return levelDefinition.produces.map((produces) => {\n            const handleSelectCraftingItem = (e: React.MouseEvent) => {\n                e.stopPropagation();\n\n                setSelectedItem(produces.item);\n            };\n\n            return <li\n                key = { `craft${produces.item}`}\n                onClick = { handleSelectCraftingItem }\n                className = { selectedItem === produces.item ? \"selected\" : \"\" }\n            >\n                <ItemIcon item= { produces.item }  />\n                { TextManager.getItemName(produces.item) }\n            </li>;\n        });\n    };\n\n    const createCraftingDetails = () => {\n        const item = selectedItem;\n        if (!item) { return null; }\n\n        const produces = levelDefinition.produces.find((p) => p.item === item)!;\n        const playerResources = props.resources || {};\n        const costResources = produces.cost.resources!;\n        const missingAtLeastOneResource = Object.keys(costResources)\n            .some((resource) => costResources[resource] > playerResources[resource]);\n\n        let missingAtLeastOneItem = false;\n        const costMaterials = produces.cost.materials;\n        if (costMaterials) {\n            missingAtLeastOneItem = costMaterials\n                .some((i: Item) => props.items.indexOf(i) === -1);\n        }\n\n        const disabled = missingAtLeastOneResource || missingAtLeastOneItem || workersAssigned < 1;\n        // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n        const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n        const makeTimeString = (time: number): string => {\n            if (workersAssigned === 0) {\n                return \"\";\n            }\n            const craftingTime = calculateProductionTime(time, workersAssigned);\n            const formatted = formatDuration(craftingTime);\n            return ` Crafting time: ${formatted}`;\n        };\n\n        const handleClick = (e: React.MouseEvent) => {\n            e.stopPropagation();\n\n            if (props.onCraft) {\n                props.onCraft(produces, workersAssigned);\n                setWorkersAssigned(0);\n            }\n        };\n\n        const handleUp = (e: React.MouseEvent) => {\n            e.stopPropagation();\n            setWorkersAssigned(workersAssigned + 1);\n        };\n\n        const handleDown = (e: React.MouseEvent) => {\n            e.stopPropagation();\n            setWorkersAssigned(workersAssigned - 1);\n        };\n\n        let costItemsContent = null;\n        if (costMaterials) {\n            costItemsContent = <MaterialsCostBox items = { costMaterials } />;\n        }\n        return (\n            <div className = \"crafting-details\">\n                Craft a { TextManager.getItemName(itemDefinition.item) }\n                <div className = \"crafting-costs\">\n                    <fieldset>\n                        <ResourcesCostBox resources = { costResources } />\n                    </fieldset>\n                    <fieldset>\n                        { costItemsContent }\n                    </fieldset>\n                </div>\n                <div style={ { display: \"flex \"}}>\n                    <UpDownValue\n                        value = { workersAssigned }\n                        label ={ \"Workers: \" }\n                        onUp = { handleUp }\n                        onDown = { handleDown }\n                        upDisabled={\n                            workersAssigned >= props.workersFree ||\n                            workersAssigned >= MAX_WORKERS_CRAFTING\n                        }\n                        downDisabled={ workersAssigned < 1 }\n                    />\n                    &nbsp;\n                    { makeTimeString(produces.cost.time || 0) }\n                </div>\n                <div>\n                    <button\n                        disabled = { disabled }\n                        onClick = { handleClick }>\n                        Craft\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    const createProgressbars = () => {\n        const tasks = props.tasks || [];\n        return tasks.map((t) => <Progressbar\n            key = { `${t.name}${t.startTime}` }\n            label = { `${t.name} (${formatDuration(t.timeRemaining)})` }\n            progress = { t.progress }/>,\n        );\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <>\n            <StructureViewHeader structure={props.type} />\n\n            <details open = { true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            { createCraftTabs() }\n                        </ul>\n                        { createCraftingDetails() }\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        { createProgressbars() }\n                    </fieldset>\n                </section>\n            </details>\n        </>\n    );\n}\n\nexport default ProductionStructureView;\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    return {\n        gold: store.gold,\n        items: store.stockpile,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ProductionStructureView);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Action } from \"redux\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",\n    advanceQuest = \"advanceQuest\",\n    updateQuestVars = \"updateQuestVars\",\n    updateEncounterResult = \"updateEncounterResult\",\n    startEncounter = \"startEncounter\",\n    updateQuests = \"updateQuests\",\n}\n\nexport interface QuestAction extends Action<ActionType> {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface StartEncounterAction extends QuestAction {\n    encounter: Encounter;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Move to the next node */\nexport function advanceQuest(quest: string): QuestAction {\n    return {\n        type: ActionType.advanceQuest,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\nexport function startEncounter(quest: string, encounter: Encounter): StartEncounterAction {\n    return {\n        type: ActionType.startEncounter,\n        questName: quest,\n        encounter,\n    };\n}\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurerInventory,\n    warehouse,\n    tavern,\n    adventurerEquipment,\n}\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${process.env.PUBLIC_URL}${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport * as React from \"react\";\r\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\r\nimport \"./css/draggableadventureravatar.css\";\r\n\r\nexport interface Props {\r\n    sourceId?: string;\r\n    onClick?: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface CollectedProps {\r\n    isDragging: boolean;\r\n    connectDragSource: ConnectDragSource;\r\n}\r\n\r\nexport interface AdventurerAvatarDragInfo {\r\n    adventurer: AdventurerStoreState;\r\n    sourceId?: string;\r\n}\r\n\r\n/**\r\n * Specifies the drag source contract.\r\n * Only `beginDrag` function is required.\r\n */\r\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\r\n    beginDrag(props: Props & AdventurerAvatarProps) {\r\n        // Return the data describing the dragged item\r\n        return {\r\n            adventurer: props.adventurer,\r\n            sourceId: props.sourceId,\r\n            sourceType: DragSourceType.adventurerInventory,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging(),\r\n    };\r\n}\r\n\r\nconst DraggableAdventurerAvatar = (props: Props & CollectedProps & AdventurerAvatarProps) => {\r\n\r\n    const { isDragging, connectDragSource, disabled } = props;\r\n    let className = \"draggable-adventurer-avatar\";\r\n    if (disabled) {\r\n        className += \" disabled\";\r\n    }\r\n    if (isDragging) {\r\n        className += \" dragging\";\r\n    }\r\n\r\n    /*if (isDragging) {\r\n        // TODO: can show some sort of empty state?\r\n        return null;\r\n    }*/\r\n    return connectDragSource(\r\n        <div className = { className }>\r\n            <AdventurerAvatar\r\n                // Copy all props down to AdventurerAvatar\r\n                { ...props }\r\n            />\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\r\n","import { TextEntry } from \"constants/text\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nexport interface EncounterDefinition {\n    name: Encounter;\n    getOracle: (questName: string, store: StoreState) => Oracle;\n    chance?: number;    // number from 0 to 1, undefined means: 1\n    getDescription: (oracle: Oracle) => TextEntry;\n    getOptions: (oracle: Oracle) => Record<string, string>;\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => string;\n}\n\nexport enum Encounter {\n    backstabbed = \"backstabbed\",\n    goblinHouseHallway = \"goblinHouseHallway\",\n    goblinHouseOutside = \"goblinHouseOutside\",\n    theBigTree = \"theBigTree\",\n}\n","import { Item } from \"definitions/items/types\";\r\nimport { Encounter } from \"../encounters/types\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\n\r\nexport enum QuestNodeType {\r\n    nothing = 0,    // Nothing much going on here\r\n    encounter = 1,\r\n    combat = 2,     // Not implemented\r\n    boss = 3,\r\n}\r\n\r\nexport interface QuestDefinition {\r\n    nodes: QuestNode[];\r\n    requiredItems?: Item[];\r\n}\r\n\r\nexport interface QuestNode {\r\n    x: number;\r\n    y: number;\r\n    type: QuestNodeType;\r\n    encounter?: Encounter; // TODO: or array of encounters\r\n    log?: string;      // this text will appear in the log upon entering the node. only at 'nothing' nodes\r\n}\r\n\r\nconst kill10Boars: QuestDefinition = {\r\n    nodes: [{\r\n        x: 0,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n        log: \"quest-kill10Boars-node0\",\r\n    }, {\r\n        x: 0,\r\n        y: 2,\r\n        type: QuestNodeType.nothing,\r\n        log: \"quest-kill10Boars-node1\",\r\n    // }, {\r\n    //     x: 0,\r\n    //     y: 3,\r\n    //     type: QuestNodeType.nothing,\r\n    //     log: \"In the distance, a forest looms\",\r\n    }, {\r\n        x: 0,\r\n        y: 3,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.goblinHouseOutside,\r\n    }, {\r\n        x: 1,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n        log: \"quest-kill10Boars-node4\",\r\n    }, {\r\n        x: 1,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 2,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 3,\r\n        y: 3,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.backstabbed,\r\n    }, {\r\n        x: 4,\r\n        y: 4,\r\n        type: QuestNodeType.nothing,\r\n        log: \"The party spots a boss\",\r\n    }, {\r\n        x: 5,\r\n        y: 4,\r\n        type: QuestNodeType.boss,\r\n    }],\r\n};\r\n\r\nconst retrieveMagicAmulet: QuestDefinition = {\r\n    requiredItems: [\r\n        Item.torch,\r\n        Item.torch,\r\n        Item.torch,\r\n        Item.sandwich,\r\n        Item.sandwich,\r\n    ],\r\n    nodes: [{\r\n        x: 0,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 2,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 3,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 4,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 5,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 7,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 8,\r\n        y: 2,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 8,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 9,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 2,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 4,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 11,\r\n        y: 5,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 6,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 7,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 13,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 9,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 11,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 9,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 8,\r\n        y: 9,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 7,\r\n        y: 8,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.theBigTree,\r\n    }, {\r\n        x: 8,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 2,\r\n        y: 1,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.backstabbed,\r\n    }, {\r\n        x: 3,\r\n        y: 1,\r\n        type: QuestNodeType.boss,\r\n    }],\r\n};\r\n\r\n// const fulruhmRaid: QuestDefinition = {\r\n//     nodes: [{\r\n//         x: -4,\r\n//         y: -1,\r\n//         type: QuestNodeType.nothing,\r\n//     }, {\r\n//         x: -4,\r\n//         y: -1,\r\n//         type: QuestNodeType.nothing,\r\n\r\nconst all = {\r\n    kill10Boars,\r\n    retrieveMagicAmulet,\r\n};\r\n\r\nexport default all;\r\n\r\nexport function getDefinition(quest: string): QuestDefinition {\r\n    return all[quest];\r\n}\r\n","import { DragType } from \"constants/dragging\";\r\nimport * as React from \"react\";\r\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\r\nimport \"./css/droppableadventurerslot.css\";\r\n\r\nconst dropTarget: DropTargetSpec<Props> = {\r\n    drop(props: Props, monitor: DropTargetMonitor) {\r\n        props.onDrop(monitor.getItem());\r\n    },\r\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\r\n        return true; // todo: can't drop on yourself\r\n    },\r\n};\r\n\r\nexport interface Props {\r\n    onDrop: (item: any) => void;\r\n}\r\n\r\nexport interface DropSourceProps {\r\n    canDrop: boolean;\r\n    isOver: boolean;\r\n    connectDropTarget: ConnectDropTarget;\r\n}\r\n\r\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\r\n    canDrop: monitor.canDrop(),\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver(),\r\n});\r\n\r\n/*\r\n * Can drop adventurers on this */\r\nconst DroppableAdventurerSlot = (props: Props & DropSourceProps) => {\r\n    const {\r\n        isOver,\r\n        canDrop,\r\n        connectDropTarget,\r\n    } = props;\r\n    // const isActive = isOver && canDrop;\r\n    let className = \"droppable-adventurer-slot\";\r\n\r\n    if (isOver) {\r\n        className += \" active-drop\";\r\n    } else if (canDrop) {\r\n        className += \" can-drop\";\r\n    }\r\n\r\n    return connectDropTarget(\r\n        <div className = { className }>\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DropTarget<Props, DropSourceProps>(\r\n    DragType.ADVENTURER,\r\n    dropTarget,\r\n    collect,\r\n)(DroppableAdventurerSlot);\r\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAddEventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (index: number) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = <AdventurerAvatar adventurer = { adventurer } displayName = { false } onClick = { () => props.onRemoveAdventurer(i) }/> ;\n                className = \"has-adventurer\";\n            } else {\n                content = <DroppableAdventurerSlot onDrop = { (item: AdventurerAvatarDragInfo) => { props.onAddEventurer(item, i); }} />;\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return <ul className = \"assign-adventurers\">\n        { slotsContent() }\n    </ul>;\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport ItemsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, QuestDefinition } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"global/TextManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\n\nconst availableSlots = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface StateProps {\n    items: Array<Item | null>;  // items in inventory\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {}\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName: string | null;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n\n    onQuestClick: (questName: string) => void;\n    onRemoveAdventurer: (index: number) => void;\n    onAddAdventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onLaunchQuest: () => void;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\nconst QuestBoard = (props: AllProps) => {\n\n    const questListContent: JSX.Element[] = props.availableQuests.map((q) => {\n        const iconImgPath = `${process.env.PUBLIC_URL}img/sigils/${q.icon }`;\n        const className = \"quest\" + ((q.name === props.selectedQuestName) ? \" selected\" : \"\");\n        return <li key={ q.name } className = { className } onClick = { () => { props.onQuestClick(q.name); } }>\n            <div\n                className = \"icon\"\n                style={{backgroundImage: `url(${process.env.PUBLIC_URL}${iconImgPath})`}}\n            ></div>\n            <div className = \"title\">{ TextManager.getQuestTitle(q.name) } </div>\n        </li>;\n    });\n\n    const getQuestDetails = () => {\n        if (!props.selectedQuestName) {\n            return null;\n        }\n        const quest = props.availableQuests.find((q) => q.name === props.selectedQuestName);\n        if (!quest) {\n            return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n        }\n        const questDefinition = getDefinition(quest.name);\n\n        // Need a full party to launch\n        const fullParty = props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n        // Check if we have the required items\n        const enoughItems = checkEnoughItems(questDefinition);\n\n        const canLaunch = fullParty && enoughItems;\n\n        return <div className=\"quest-details\">\n            { TextManager.getQuestDescription(props.selectedQuestName) }\n            <AssignAdventurers\n                availableSlots = { availableSlots }\n                assignedAventurers = { props.assignedAventurers }\n                onRemoveAdventurer = { props.onRemoveAdventurer }\n                onAddEventurer = { props.onAddAdventurer } />\n            <ItemsCostBox items = { questDefinition.requiredItems || [] }/>\n            <button disabled = { !canLaunch } onClick = { () => props.onLaunchQuest() }>\n                { TextManager.get(\"structure-tavern-button-launch-quest\") }\n            </button>\n        </div>;\n    };\n\n    /**\n     * Returns true if all the items required by the quest are in the inventory */\n    const checkEnoughItems = (questDefinition: QuestDefinition): boolean => {\n        if (!questDefinition.requiredItems) {\n            return true;\n        }\n        return questDefinition.requiredItems.every((item: Item) => {\n            const amountRequired = (questDefinition.requiredItems)!.filter((i) => i === item).length;\n            return props.items.filter((i) => i === item).length >= amountRequired;\n        });\n    }\n\n    // quest board, expanded quest info + assign adventurers + launch button\n    return (\n        <div className = \"quest-board\">\n            <h2> { TextManager.get(\"structure-tavern-title-quest-board\") }</h2>\n            <ul className = \"quest-list\">\n                { questListContent }\n            </ul>\n            { getQuestDetails() }\n        </div>\n    );\n}\n\nexport default QuestBoard;\n","import QuestBoard, { Props, StateProps } from \"components/structures/tavern/QuestBoard\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        items: store.stockpile,\n    };\n}\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(QuestBoard);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];        // list of adventurer ids\n    progress: number;       // Which questnode the party is at currently\n    questVars: any;\n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    icon: string;\n\n    currentEncounter: Encounter | null;\n    reward?: QuestReward;\n}\n","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport { IconSize } from \"constants/icons\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\r\nimport ItemIcon from \"./ItemIcon\";\r\n\r\nexport interface Props {\r\n    index: number;\r\n    item: Item;\r\n    sourceType: DragSourceType;\r\n    sourceId?: string;\r\n    size?: IconSize;\r\n    onClick?: (event: React.MouseEvent) => void;\r\n}\r\n\r\ninterface CollectedProps {\r\n    isDragging: boolean;\r\n    connectDragSource: ConnectDragSource;\r\n}\r\n\r\nexport interface InventoryItemDragInfo {\r\n    item: Item;\r\n    inventorySlot?: number;\r\n    sourceId?: string;\r\n    sourceType: DragSourceType;\r\n}\r\n\r\n/**\r\n * Specifies the drag source contract.\r\n * Only `beginDrag` function is required.\r\n */\r\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\r\n    beginDrag(props: Props) {\r\n        // Return the data describing the dragged item\r\n        return {\r\n            inventorySlot: props.index,\r\n            item: props.item,\r\n            sourceId: props.sourceId,\r\n            sourceType: props.sourceType,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging(),\r\n    };\r\n}\r\n\r\nconst DraggableItemIcon = (props: Props & CollectedProps) => {   \r\n\r\n    const { item, onClick, isDragging, connectDragSource, size } = props;\r\n    const handleClick = (event: React.MouseEvent) => {\r\n        if (onClick) {\r\n            onClick(event);\r\n        }\r\n    };\r\n    if (isDragging) {\r\n        // TODO: can show some sort of empty state?\r\n        return null;\r\n    }\r\n    return connectDragSource((\r\n        <div>\r\n            <ItemIcon\r\n                item={item}\r\n                onClick={handleClick}\r\n                size={size}\r\n            />\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\r\n","// todo: hooks!\n// https://github.com/react-dnd/react-dnd/pull/1244\nimport { DragType } from \"constants/dragging\";\nimport { getDefinition } from \"definitions/items\";\nimport { ApparelDefinition, ApparelType } from \"definitions/items/apparel\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/equipmentslot.css\";\nimport { InventoryItemDragInfo } from \"./DraggableItemIcon\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        const item = monitor.getItem().item;\n\n        return itemAndEquipmentSlotMatch(item, props.type);\n    },\n};\n\nexport enum EquipmentSlotType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n    mainHand,\n    offHand,\n}\n\n// Returns true if item can be slotted in equipmentSlotType\nexport const itemAndEquipmentSlotMatch = (item: Item, equipmentSlotType: EquipmentSlotType) => {\n    switch (equipmentSlotType) {\n        case EquipmentSlotType.chest:\n            return checkEquipment(item, ApparelType.chest);\n         case EquipmentSlotType.feet:\n            return checkEquipment(item, ApparelType.feet);\n        case EquipmentSlotType.hands:\n            return checkEquipment(item, ApparelType.hands);\n        case EquipmentSlotType.head:\n            return checkEquipment(item, ApparelType.head);\n        case EquipmentSlotType.legs:\n            return checkEquipment(item, ApparelType.legs);\n        case EquipmentSlotType.mainHand:\n        case EquipmentSlotType.offHand:\n            const itemDefinition = getDefinition(item);\n            if (itemDefinition.itemType !== ItemType.weapon) {\n                return false;\n            }\n\n            // todo: prevent shields to be equipped in main hand\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport interface Props {\n    type: EquipmentSlotType;\n    onDrop: (item: InventoryItemDragInfo) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The EquipmentSlot displays a slot in which an item can be placed.\n */\nconst EquipmentSlot = (props: React.PropsWithChildren<Props & DropSourceProps>) => {\n    const {\n        isOver,\n        canDrop,\n        connectDropTarget,\n    } = props;\n    const isActive = isOver && canDrop;\n    let borderColor = \"grey\";\n    if (isActive) {\n        borderColor = \"green\";\n    } else if (canDrop) {\n        borderColor = \"orange\";\n    }\n\n    return connectDropTarget(\n        <div className = \"equipment-slot\" style = { { borderColor }} title={EquipmentSlotType[props.type]}>\n            { props.children }\n        </div>,\n    );\n};\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(EquipmentSlot);\n\nconst checkEquipment = (item: Item, equipmentType: ApparelType) => {\n    const itemDefinition = getDefinition(item);\n    if (itemDefinition.itemType !== ItemType.apparel) {\n        return false;\n    }\n    return (itemDefinition as ApparelDefinition).equipmentType === equipmentType;\n};\n","import { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n    assignEquipment = \"assignEquipment\",\n    removeEquipment = \"removeEquipment\",\n}\n\nexport interface AdventurerAction extends Action<ActionType> {\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends AdventurerAction {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends AdventurerAction {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends AdventurerAction {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends AdventurerAction {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport interface AssignEquipmentAction extends AdventurerAction {\n    item: Item;\n    equipmentSlot: EquipmentSlotType;\n}\nexport interface RemoveEquipmentAction extends AdventurerAction {\n    equipmentSlot: EquipmentSlotType;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n\nexport function assignEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item): AssignEquipmentAction {\n    return {\n        type: ActionType.assignEquipment,\n        adventurerId,\n        item,\n        equipmentSlot,\n    };\n}\n\nexport function removeEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType): RemoveEquipmentAction {\n    return {\n        type: ActionType.removeEquipment,\n        adventurerId,\n        equipmentSlot,\n    };\n}\n","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport { getClassName, IconSize } from \"constants/icons\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\r\nimport { InventoryItemDragInfo } from \"../DraggableItemIcon\";\r\nimport { itemAndEquipmentSlotMatch } from \"../EquipmentSlot\";\r\n\r\nconst dropTarget: DropTargetSpec<Props> = {\r\n    drop(props: Props, monitor: DropTargetMonitor) {\r\n        props.onDrop(monitor.getItem());\r\n    },\r\n    canDrop(props: Props, monitor: DropTargetMonitor) {\r\n        const dragInfo: InventoryItemDragInfo = monitor.getItem();\r\n        if (dragInfo.sourceType === DragSourceType.adventurerEquipment) {\r\n            return props.item == null || itemAndEquipmentSlotMatch(props.item, dragInfo.inventorySlot!);\r\n        }\r\n        return true;\r\n    },\r\n};\r\n\r\nexport interface Props {\r\n    item: Item | null;\r\n    onDrop: (item: any) => void;\r\n    size?: IconSize;\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport interface DropSourceProps {\r\n    canDrop: boolean;\r\n    isOver: boolean;\r\n    connectDropTarget: ConnectDropTarget;\r\n}\r\n\r\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\r\n    canDrop: monitor.canDrop(),\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver(),\r\n});\r\n\r\n/**\r\n * The InventorySlot displays a slot in which an item can be placed.\r\n */\r\nconst InventorySlot = (props: Props & DropSourceProps) => {\r\n    const {\r\n        isOver,\r\n        canDrop,\r\n        connectDropTarget,\r\n    } = props;\r\n    const isActive = isOver && canDrop;\r\n\r\n    const classNames = [\r\n        \"inventory-item\",\r\n        getClassName(props.size),\r\n    ];\r\n\r\n    if (isActive) {\r\n        classNames.push(\"drop-active\");\r\n    } else if (canDrop) {\r\n        classNames.push(\"drop-possible\");\r\n    }\r\n\r\n    return connectDropTarget(\r\n        <div className = { classNames.join(\" \") }>\r\n            { props.children }\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DropTarget<Props, DropSourceProps>(\r\n    DragType.ITEM,\r\n    dropTarget,\r\n    collect,\r\n)(InventorySlot);\r\n","import DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport {Item} from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    iconSize?: IconSize;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n    className?: string;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n        };\n\n        if (item) {\n            contents = (\n                <DraggableItemIcon\n                    index={i}\n                    sourceId={props.sourceId}\n                    sourceType={props.sourceType}\n                    item={item}\n                />\n            );\n       }\n\n        const slot = (\n            <InventorySlot\n                key={`inventory-slot-${i}`}\n                item={item}\n                size={props.iconSize}\n                onDrop={handleDrop}\n            >\n                {contents}\n            </InventorySlot>\n        );\n        slots.push(slot);\n   }\n    return (\n        <div className={`inventory ${props.className}`}>\n            {slots}\n        </div>\n    );\n};\nexport default Inventory;\n","import { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/adventurerinfo.css\";\nimport DraggableItemIcon, { InventoryItemDragInfo } from \"./DraggableItemIcon\";\nimport EquipmentSlot, { EquipmentSlotType } from \"./EquipmentSlot\";\nimport Inventory from \"./inventory/Inventory\";\nimport { TooltipManager } from 'global/TooltipManager';\n\nexport interface Props {\n    adventurerId: string;\n}\n\nexport interface DispatchProps {\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => void;\n    onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => void;\n    onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => void;\n    onMoveItemFromWarehouseToInventory: (adventurerId: string, fromSlot: number, toSlot: number, item: Item, otherItem: Item|null) => void;\n    onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => void;\n    onAddItemToWarehouse: (item: Item, toSlot: number) => void;\n    onAssignEquipmentFromWarehouse: (adventurerId: string, fromSlot: number, item: Item, equipmentSlot: EquipmentSlotType) => void;\n}\n\nexport interface StateProps {\n    adventurer: AdventurerStoreState;\n    warehouse: Array<Item|null>;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\nconst AdventurerInfo = (props: AllProps) => {\n\n    const adventurer = props.adventurer;\n    const attributes = Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key={`${adventurer.id}-${stat}`} > <b>{stat}</b>: {value.toFixed(1)} </div>;\n    });\n    // const equipmentList = Object.keys(getEquipment(.map((equipment) =) {\n    //     return <div key = { `${adventurer.id}-${equipment}` } ><b>{ equipment }</b>: { getEquipment(equipment] }  </di)>;\n    // });\n\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        // When an item gets dropped on equipment slot\n        const item = dragInfo.item;\n        switch (dragInfo.sourceType) {\n            case DragSourceType.adventurerInventory: {\n                // Dragged from inventory\n                props.onRemoveItemFromInventory(adventurer.id, dragInfo.inventorySlot!);\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                props.onAssignEquipmentFromWarehouse(adventurer.id, dragInfo.inventorySlot!, item, slotType);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToWarehouse(existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.adventurerEquipment: {\n                // Dragged from equipment slot (only applicable to weapons)\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n            }\n        }\n    };\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n            const handleClick = (event: React.MouseEvent) => {\n                const origin = (event.currentTarget as HTMLElement);\n                const originRect = origin.getBoundingClientRect();\n                TooltipManager.showContextTooltip(ContextType.item, getDefinition(item), originRect);\n                event.stopPropagation();\n            };\n\n            contents = (\n                <DraggableItemIcon\n                    index={slotType}\n                    sourceId={adventurer.id}\n                    sourceType={DragSourceType.adventurerEquipment}\n                    item={item}\n                    onClick={handleClick}\n                    ref={itemRef}\n                    size={IconSize.medium}\n                />\n            );\n        }\n\n        return (\n            <>\n                <EquipmentSlot\n                    onDrop={(dragInfo: InventoryItemDragInfo) => handleDropItemEquipment(dragInfo, slotType)}\n                    type={slotType}\n                >\n                    {contents}\n                </EquipmentSlot>\n                <span className=\"info\">{TextManager.get(`ui-equipmentslot-${EquipmentSlotType[slotType]}`)}</span>\n            </>\n        );\n    };\n\n    const equipmentList = (\n        <ul>\n            <li>{getEquipmentSlot(EquipmentSlotType.head)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.shoulders)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.chest)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.hands)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.legs)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.feet)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.mainHand)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.offHand)}</li>\n        </ul>\n    );\n\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        switch (sourceType) {\n            case DragSourceType.adventurerInventory:\n                // Drag from one inventory slot to another\n                if (props.onMoveItemInInventory) {\n                    props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\n                }\n                break;\n\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                const otherItem = adventurer.inventory[toSlot];\n                props.onMoveItemFromWarehouseToInventory(adventurer.id, fromSlot, toSlot, item, otherItem);\n                break;\n            }\n\n            case DragSourceType.adventurerEquipment:\n                // Drag from equipment slot\n                if (props.onAddItemToInventory && props.onRemoveEquipment) {\n                    props.onAddItemToInventory(adventurer.id, item, toSlot);\n                }\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n        }\n    };\n    return (\n        <div className=\"adventurer-info\">\n            <div className=\"left\">\n                <div className=\"name\">\n                    <b>{adventurer.name}</b>\n                </div>\n                <div className=\"attributes\">\n                    {attributes}\n                </div>\n                <div className=\"equipment\">\n                    {equipmentList}\n                </div>\n            </div>\n            <div className=\"right\">\n                <Inventory\n                    sourceType={DragSourceType.adventurerInventory}\n                    sourceId={adventurer.id}\n                    items={adventurer.inventory}\n                    onDropItem={handleDropItemInventory}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AdventurerInfo;\n","import { addItemToInventory, assignEquipment, moveItemInInventory, removeEquipment, removeItemFromInventory } from \"actions/adventurers\";\nimport { addItemToWarehouse, removeItemFromWarehouse } from \"actions/items\";\nimport AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n        warehouse: store.stockpile,\n    };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        // Adds item to inventory of adventurer\n        onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => {\n            const action = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action);\n        },\n        // Adds item to warehouse\n        onAddItemToWarehouse: (item: Item, toSlot: number) => {\n            const add = addItemToWarehouse(item, toSlot);\n            dispatch(add);\n        },\n        // Equipment gets assigned to a slot\n        onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => {\n            const action = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(action);\n        },\n        // Assigns an equipment from the warehouse directly to an adventurer equipment slot\n        onAssignEquipmentFromWarehouse: (adventurerId: string, fromSlot: number, item: Item, equipmentSlot: EquipmentSlotType) => {\n            const remove = removeItemFromWarehouse(fromSlot);\n            dispatch(remove);\n\n            const assign = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(assign);\n        },\n        // Item gets removed from warehouse\n        onMoveItemFromWarehouseToInventory: (adventurerId: string, fromSlot: number, toSlot: number, item: Item, otherItem: Item|null) => {\n            const remove = removeItemFromWarehouse(fromSlot);\n            dispatch(remove);\n\n            const add = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(add);\n\n            if (otherItem) {\n                const switchItem = addItemToWarehouse(otherItem, fromSlot);\n                dispatch(switchItem);\n            }\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => {\n            const action = removeEquipment(adventurerId, equipmentSlot);\n            dispatch(action);\n        },\n        // Removes an item from an adventurers' inventory\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => {\n            const action = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurerInfo);\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n    error,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\nconst DEFAULT_MUSIC_VOLUME = 0.8;\nconst STORAGE_KEY_MUSIC_VOLUME = \"musicVolume\";\n\nexport class SoundManager {\n    private static _musicVolume: number;\n    private static _soundVolume: number;\n\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            // todo: assert [10/07/2019 ASSERTS]\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        if (!media) { return; }\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (!media) { return; }\n\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(SoundManager.musicVolume, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, SoundManager.musicVolume, 500);\n\n        currentMusicTrack = track;\n    }\n\n    public static soundVolume(volume: number) {\n        \n    }\n\n    static set musicVolume(volume: number) {\n        if (currentMusicTrack) {\n            musicTracks[currentMusicTrack].volume(volume);\n        }\n        this._musicVolume = volume;\n        try {\n            localStorage.setItem(STORAGE_KEY_MUSIC_VOLUME, `${volume}`);\n        }\n        catch (e) {}\n    }\n\n    static get musicVolume() : number {\n        if (this._musicVolume !== undefined) {\n            return this._musicVolume;\n        }\n        const fromStorage = localStorage.getItem(STORAGE_KEY_MUSIC_VOLUME);\n        if (fromStorage == null) { \n            this._musicVolume = DEFAULT_MUSIC_VOLUME;\n        } else {\n            this._musicVolume = parseFloat(fromStorage);\n        }\n        return this._musicVolume;\n    }\n}\n","import * as React from \"react\";\nimport \"./css/squareiconbutton.css\";\n\nexport interface Props {\n    text: string; /* temp */\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n}\n\ntype AllProps = Props;\n\nconst SquareIconButton = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = props.className || \"\";\n    return <div className = { `ui-button widgets-squareiconbutton ${className}` } onClick = { handleClick }>\n        { props.text }\n    </div>;\n};\n\nexport default SquareIconButton;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport SquareIconButton from \"components/ui/buttons/SquareIconButton\";\nimport * as React from \"react\";\nimport { SoundManager, Sound } from 'global/SoundManager';\n\n// todo: refactor using WindowManager [30/03/2020]\nexport interface Props {\n    title: string;\n    backEnabled?: boolean;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n}\n\ntype AllProps = Props;\n\n/**\n *\n */\nconst Window: React.FunctionComponent<AllProps> = (props) => {\n\n    const handleClose = (e: React.MouseEvent) => {\n        if (props.onClose) {\n            props.onClose();\n\n            SoundManager.playSound(Sound.buttonClick);\n        }\n        \n    };\n    const handleBack = (e: React.MouseEvent) => {\n        if (props.onBack) {\n            props.onBack();\n\n            SoundManager.playSound(Sound.buttonClick);\n        }\n    };\n\n    let BackButton = null;\n    if (props.backEnabled !== false) {\n         BackButton = <SquareIconButton className = \"back-button\" onClick = { handleBack } text = \"<\"/>;\n\n    }\n\n    let CloseButton = null;\n    if (props.closeEnabled !== false) {\n        CloseButton = <SquareIconButton className = \"close-button\" onClick = { handleClose } text = \"x\"/>;\n    }\n\n    return <div className = \"window\">\n        <div className = \"header\">\n            { BackButton }\n            <h3>{ props.title }</h3>\n            { CloseButton }\n        </div>\n        { props.children }\n    </div>;\n};\n\nexport default Window;\n","import \"components/ui/window/css/window.css\";\nimport Window, { Props } from \"components/ui/window/Window\";\nimport * as React from \"react\";\n\nexport const withWindow = <TWrappedComponentProps extends Props>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    return class WithWindow extends React.Component<TWrappedComponentProps> {\n\n        public render() {\n            return <Window { ...this.props } >\n                <WrappedComponent { ...this.props } />\n            </Window>;\n        }\n    };\n};\n","// obsolete\nimport AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { mapDispatchToProps } from \"containers/ui/AdventurerInfo\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"stores\";\n\ntype AllProps = Props & WindowProps;\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n        warehouse: store.stockpile,\n    };\n};\n\nexport default compose(\n    withWindow,\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n)(AdventurerInfo) as React.ComponentType<AllProps>;\n","import DraggableAdventurerAvatar, { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport QuestBoard from \"containers/structures/tavern/QuestBoard\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/tavernstructureview.css\";\nimport { AppContext } from \"components/App\";\nimport AdventurerInfoWindow from \"components/ui/window/windows/AdventurerInfoWindow\";\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n    selectedQuestName: string | null;\n    assignedAventurers: AdventurerStoreState[];\n}\n\nconst SOURCE_ID = \"tavern\";\n\nconst TavernStructureView = (props: AllProps) => {\n    const [assignedAventurers, setAassignedAdventurers] = React.useState<AdventurerStoreState[]>([]);\n    const [selectedQuest, setSelectedQuest] = React.useState<string | null>(null);\n    const context = React.useContext(AppContext)!;\n\n    const structureDefinition = getDefinition<TavernStructureDefinition>(Structure.tavern);\n    const level: number = props.level || 0;\n    const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(Structure.tavern);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style = {{ float: \"right\" }}\n                onClick = { handleClick }\n                disabled= { !canUpgrade }\n            >\n                { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const roomCount = levelDefinition.rooms;\n    const createRooms = () => {\n\n        const roomContent: JSX.Element[] = [];\n        for (let i = 0; i < roomCount; i++) {\n            const adventurer = props.adventurers.find((a) => a.room === i);\n            let content = null;\n            if (adventurer) {\n                let name = adventurer.name;\n\n                const assigned = assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n                const party = getQuestByAdventurer(adventurer.id);\n                if (party) {\n                    name += \" (on a quest)\";\n                }\n                content = [<DraggableAdventurerAvatar\n                    disabled = { assigned || party != null }\n                    adventurer = { adventurer }\n                    className = \"adventurer-icon\"\n                    sourceId = { SOURCE_ID }\n                    key = { `avatar:${adventurer.id}` }\n                />,\n                <a key = { adventurer.id } onClick = { () => handleAdventurerNameClick(adventurer) }> { name }</a>,\n                /*\n                <button\n                    className = \"boot\"\n                    key = { `boot:${adventurer.id}` }\n                >\n                    Boot\n                </button>,*/\n            ];\n            } else {\n                content = \"(empty room)\";\n            }\n\n            roomContent.push(<div key = { `room${i}` } className = \"room\">\n                { content }\n            </div>);\n        }\n\n        return <div className = \"rooms\">\n            <h2>Rooms</h2>\n            { roomContent }\n        </div>;\n    };\n\n    const getAvailableQuests = props.quests.filter((q) => q.status === QuestStatus.available );\n\n    const getQuestByAdventurer = (adventurerId: string): QuestStoreState | undefined => {\n        return Object.values(props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    };\n\n    const handleQuestClick = (name: string) => {\n        if (selectedQuest === name) {\n            setSelectedQuest(null);\n        } else {\n            setSelectedQuest(name);\n        }\n\n        // Unassign all adventurers\n        setAassignedAdventurers([]);\n    };\n\n    const handleAddAdventurer = (item: AdventurerAvatarDragInfo, index: number) => {\n        if (item.sourceId === SOURCE_ID) {\n            const copy = [ ...assignedAventurers];\n            copy[index] = item.adventurer;\n            setAassignedAdventurers(copy);\n        }\n    };\n\n    const handleRemoveAdventurer = (index: number): void => {\n        const copy = [ ...assignedAventurers];\n        delete copy[index];\n        setAassignedAdventurers(copy);\n    };\n\n    const handleLaunchQuest = (): void => {\n        props.onLaunchQuest(selectedQuest!, assignedAventurers);\n    };\n\n    const handleAdventurerNameClick = (adventurer: AdventurerStoreState) => {\n        const window = <AdventurerInfoWindow adventurerId = { adventurer.id } title = { adventurer.name } />;\n        context.onOpenWindow(window);\n    };\n\n    return (\n        <details open = { true } className = \"tavernstructureview\">\n            <summary>{ displayName }</summary>\n            { createUpgradeRow() }\n            <section>\n                { createRooms() }\n                <QuestBoard\n                    availableQuests = { getAvailableQuests }\n                    selectedQuestName = { selectedQuest }\n                    assignedAventurers = { assignedAventurers }\n                    onQuestClick = { (name: string) => handleQuestClick(name) }\n                    onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => handleAddAdventurer(item, index) }\n                    onRemoveAdventurer = { (index: number) => handleRemoveAdventurer(index) }\n                    onLaunchQuest = { () => handleLaunchQuest() }\n                />\n            </section>\n        </details>\n    );\n};\n\nexport default TavernStructureView;\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.tavern,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(TavernStructureView);\n","import \"components/ui/css/common/icon.css\";\r\nimport \"components/ui/resources/css/resourcesbox.css\";\r\nimport { Resource } from \"definitions/resources\";\r\nimport resourceDescriptions from \"definitions/resources\";\r\nimport * as React from \"react\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport { StructuresStoreState } from 'stores/structures';\r\nimport { Structure } from 'definitions/structures';\r\n\r\nexport interface Props {\r\n    className?: string;\r\n    resources: ResourceStoreState;\r\n    structures: StructuresStoreState;\r\n    maxResources: ResourceStoreState;\r\n    deltaResources: ResourceStoreState;\r\n}\r\n\r\nexport interface StateProps {\r\n    sufficientResources?: Record<Resource, boolean>;\r\n}\r\n\r\ntype AllProps = Props & StateProps;\r\n\r\n/**\r\n * The ResourcesBox is used in the Warehouse to show a list of resources\r\n */\r\nconst ResourcesBox = (props: AllProps) => {\r\n    const {\r\n        sufficientResources,\r\n        resources,\r\n        deltaResources,\r\n    } = props;\r\n\r\n    const className = (props.className || \"\") + \" resourcesbox\";\r\n    const listItems = Object.keys(resources).map((resource: string) => {\r\n        let listItemClass = \"resource\";\r\n        if (sufficientResources && !sufficientResources[resource]) {\r\n             listItemClass += \" insufficient\";\r\n        }\r\n        const resourceDescription = resourceDescriptions[resource];\r\n        const amount = props.resources[resource]!;\r\n        if (!resourceDescription) {\r\n            throw new Error(`No resource description found for ${resource}`);\r\n        }\r\n\r\n        let delta;\r\n        if (deltaResources[resource]) {\r\n            delta = <span className = \"animate-up\">\r\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\r\n            </span>;\r\n        }\r\n\r\n        const structure = getStructure(resource);\r\n\r\n        return <li className = { listItemClass } key = { resource }>\r\n            <div className = \"icon common-icon-smallest\" style = {{\r\n                backgroundImage:  `url(${process.env.PUBLIC_URL}${resourceDescription.iconImg})`,\r\n            }}></div>\r\n            <div className = \"name\">\r\n                { TextManager.getResourceName(resource as Resource) }\r\n            </div>\r\n            <div className = \"amount\" >\r\n                { amount.toFixed(1) }\r\n            </div>\r\n            <div className = \"max\" >\r\n                { ` / ${props.maxResources[resource]}` }\r\n            </div>\r\n            <div className = \"delta\">\r\n                { delta }\r\n            </div>\r\n            <div className = \"structure\"> \r\n                source: { TextManager.getStructureName(structure) }\r\n            </div>\r\n        </li>;\r\n    });\r\n\r\n    return (\r\n        <ul className = { className } >\r\n            { listItems }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ResourcesBox;\r\n\r\nconst getStructure = (resource: string) : Structure => {\r\n    switch (resource) {\r\n        case Resource.fabric:\r\n            return Structure.weaver;\r\n        case Resource.food:\r\n            return Structure.garden;\r\n        case Resource.iron:\r\n            return Structure.mine;\r\n        case Resource.leather:\r\n            return Structure.tannery;\r\n        case Resource.stone:\r\n            return Structure.quarry;\r\n        case Resource.wood:\r\n            return Structure.lumberMill;\r\n    }\r\n    throw new Error(`Unknown structure for resource ${resource}`);\r\n}\r\n","import * as React from \"react\";\nimport \"./css/tabstrip.css\";\n\nexport interface Props {\n    id: string;\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    active?: boolean;\n    children?: any;\n}\n\ntype AllProps = Props;\n\nconst Tab = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = ((props.active) ? \"active\" : \"\") + (props.className || \"\");\n    return <li className = { `tabstrip-tab ${className}` } onClick = { handleClick } >\n        { props.children }\n    </li>;\n};\n\nexport default Tab;\n","import React, { useState } from \"react\";\nimport \"./css/tabstrip.css\";\nimport { Props as TabProps } from \"./Tab\";\n\nexport interface Props {\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    onTabSelected?: (tabId: string) => void;\n    children?: any;\n}\n\ntype AllProps = Props;\nconst Tabstrip = (props: AllProps) => {\n    let initialSelectedTab = null;\n    if (props.children && props.children.length) {\n        initialSelectedTab = props.children[0].props.id;\n    }\n    const [activeTab, setActiveTab] = useState<string|null>(initialSelectedTab);\n    const className = props.className || \"\";\n\n    const children = React.Children.map(props.children, (child: React.ReactElement<TabProps>) => {\n        const clone: React.ReactElement<TabProps> = React.cloneElement(child, {\n            active: child.props.id === activeTab,\n            onClick: () => { handleTabClick(child.props.id); },\n        });\n        return clone;\n    });\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n        if (props.onTabSelected) {\n            props.onTabSelected(tabId);\n        }\n    };\n\n    const handleClick = (e: React.MouseEvent<Element>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n\n    return <ul className = { `tabstrip ${className}` } onClick = { handleClick } >\n        { children }\n    </ul>;\n};\n\nexport default Tabstrip;\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst usePrevious = <T extends {}>(value: T) => {\r\n    const ref = useRef<T>();\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    });\r\n    return ref.current;\r\n};\r\nexport default usePrevious;\r\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n\nexport const empty: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 0,\n    leather: 0,\n    stone: 0,\n    wood: 0,\n};\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\r\nimport Inventory from \"components/ui/inventory/Inventory\";\r\nimport ResourcesBox from \"components/ui/resources/ResourcesBox\";\r\nimport Tab from \"components/ui/tabs/Tab\";\r\nimport Tabstrip from \"components/ui/tabs/Tabstrip\";\r\nimport { DragSourceType } from \"constants/dragging\";\r\nimport AdventurerInfo from \"containers/ui/AdventurerInfo\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { getDefinition, Structure  } from \"definitions/structures\";\r\nimport { StructureDefinition } from \"definitions/structures/types\";\r\nimport usePrevious from \"hooks/usePrevious\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport { empty, ResourceStoreState } from \"stores/resources\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/warehousestructureview.css\";\r\n\r\nexport interface DispatchProps {\r\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\r\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number, otherItem: Item|null) => void;\r\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\r\n    onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\r\n    onUpgrade?: (cost: number, level: number) => void;\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface Props  {\r\n}\r\n\r\nexport interface StateProps  {\r\n    level: number;\r\n    workers: number;\r\n    workersFree: number;\r\n    gold: number;\r\n    items: Array<Item|null>;\r\n    adventurersInTown: AdventurerStoreState[];\r\n    structures: StructuresStoreState;\r\n    resources: ResourceStoreState;\r\n    maxResources: ResourceStoreState;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\nconst WAREHOUSE = DragSourceType.warehouse;\r\n\r\n// todo 20191202: Resource update should happen at a set interval\r\nconst WarehouseStructureView = (props: AllProps) => {\r\n\r\n    const [selectedAdventurer, setSelectedAdventurer] = useState<string>();\r\n\r\n    const [resourcesDelta, setResourcesDelta] = useState<ResourceStoreState>(empty);    // updating this will trigger animation\r\n    const previousResources = usePrevious(props.resources);\r\n    const resourcesRef = useRef<HTMLFieldSetElement>(null);\r\n\r\n    useEffect(() => {\r\n        // Calculate delta\r\n        const delta = Object.keys(props.resources).reduce((acc, value) => {\r\n            if (previousResources && previousResources[value]) {\r\n                acc[value] = props.resources[value] - previousResources[value];\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n        setResourcesDelta(delta);\r\n    }, [props.resources, previousResources]);\r\n\r\n    useEffect(() => {\r\n        if (!resourcesRef.current) {\r\n            return;\r\n        }\r\n        const ref = resourcesRef.current as unknown as HTMLFieldSetElement;\r\n        ref.classList.remove(\"animate\");\r\n        setTimeout(() => {\r\n            if (resourcesRef) {\r\n                ref.classList.add(\"animate\");\r\n            }\r\n        }, 200);\r\n    }, [resourcesDelta]);\r\n\r\n    const structureDefinition = getDefinition<StructureDefinition>(Structure.warehouse);\r\n    if (!structureDefinition) {\r\n        throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\r\n    }\r\n    const level: number = props.level;\r\n    const displayName = TextManager.getStructureName(Structure.warehouse);\r\n\r\n    const createUpgradeRow = () => {\r\n        const gold = props.gold;\r\n        const nextLevel = structureDefinition.levels[level + 1];\r\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\r\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\r\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\r\n\r\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\r\n        };\r\n        return (\r\n            <div>\r\n                <label>level:</label>{(level + 1) + \" / \" + structureDefinition.levels.length}\r\n                <button\r\n                    style={{ float: \"right\" }}\r\n                    onClick={handleClick}\r\n                    disabled={!canUpgrade}\r\n                >\r\n                    {upgradeText}\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleDropItemWarehouse = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\r\n            switch (sourceType) {\r\n                case WAREHOUSE:\r\n                    if (props.onMoveItemInWarehouse) {\r\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\r\n                    }\r\n                    break;\r\n                case DragSourceType.adventurerInventory:\r\n                    if (props.onMoveItemFromAdventurer) {\r\n                        const otherItem = props.items[toSlot];\r\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot, otherItem);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n    const handleAdventurerTabSelected = (tabId: string) => {\r\n        setSelectedAdventurer(tabId);\r\n    };\r\n\r\n    const renderAdventurerContent = () => {\r\n        if (selectedAdventurer) {\r\n            return (\r\n                <AdventurerInfo\r\n                    adventurerId={selectedAdventurer}\r\n                />\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const renderAdventurerTab = (adventurer: AdventurerStoreState) => (\r\n        <Tab id={adventurer.id} key={adventurer.id}>\r\n            <AdventurerAvatar adventurer={adventurer} className=\"common-icon-small\"/>\r\n        </Tab>\r\n    );\r\n\r\n    return (\r\n        <details open={true} className=\"warehouse-structureview\">\r\n            <summary>{displayName}</summary>\r\n            {createUpgradeRow()}\r\n            <fieldset className=\"resources\" ref={resourcesRef}>\r\n                <legend>Resources</legend>\r\n                <ResourcesBox\r\n                    resources={props.resources}\r\n                    structures={props.structures}\r\n                    maxResources={props.maxResources}\r\n                    deltaResources={resourcesDelta}\r\n                />\r\n            </fieldset>\r\n            <h3>Stockpile</h3>\r\n            <Inventory\r\n                sourceType={WAREHOUSE}\r\n                items={props.items}\r\n                onDropItem={handleDropItemWarehouse}\r\n            />\r\n            <h3>Adventurers</h3>\r\n            <div>\r\n                <Tabstrip className=\"adventurers-tabstrip\" onTabSelected={handleAdventurerTabSelected} >\r\n                {props.adventurersInTown.map((a) => renderAdventurerTab(a))}\r\n                </Tabstrip>\r\n                <div className=\"adventurer-inventory\">\r\n                    {renderAdventurerContent()}\r\n                </div>\r\n            </div>\r\n        </details>\r\n    );\r\n\r\n};\r\n\r\nexport default WarehouseStructureView;\r\n","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (adventurers: AdventurerStoreState[], quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(adventurers, id)!);\n};\n\nexport const getQuestLeader = (adventurers: AdventurerStoreState[], quest: QuestStoreState): AdventurerStoreState | undefined => {\n    const leaderId = quest.party[0];\n    return findAdventurerById(adventurers, leaderId);\n}\n\nexport const findAdventurerById = (adventurers: AdventurerStoreState[], id: string): AdventurerStoreState | undefined => {\n    return adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { adventurersOnQuest } from 'storeHelpers';\n\n// Store accessors\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\n\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(adventurers,val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\nconst getAdventurersInTown = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n    // Get an array of all adventurer ids on any active quest\n    const adventurersOnQuest = quests.reduce<string[]>((acc, val: QuestStoreState) => {\n        if (val.status === QuestStatus.active) {\n            acc.push(...val.party);\n        }\n        return acc;\n    }, []);\n\n    return adventurers.filter((a) => adventurersOnQuest.indexOf(a.id) === -1);\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n\n/** Returns a selector keyed by active quests whose value is a list of AdventurerStoreState */\nexport const createSelectAdventurersOnQuest = (questName: string) => {\n    const getAdventurersOnQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n        const quest = quests.find(q => q.name === questName)!;\n        return adventurersOnQuest(adventurers, quest);\n    };\n\n    return createSelector([\n        getAdventurers,\n        getQuests],\n        getAdventurersOnQuest,\n    );\n}\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersInTown = createSelector([\n    getAdventurers,\n    getQuests],\n    getAdventurersInTown,\n);\n","import { addItemToInventory, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\r\nimport { subtractGold } from \"actions/gold\";\r\nimport { addItemToWarehouse, moveItemInWarehouse, removeItemFromWarehouse } from \"actions/items\";\r\nimport { addLogEntry } from \"actions/log\";\r\nimport { upgradeStructure } from \"actions/structures\";\r\nimport WarehouseStructureView,\r\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { getDefinition, Structure } from \"definitions/structures\";\r\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction, Dispatch } from \"redux\";\r\nimport { selectAdventurersInTown } from \"selectors/adventurers\";\r\nimport { selectFreeWorkers } from \"selectors/workers\";\r\nimport { StoreState } from \"stores\";\r\nimport { LogChannel } from \"stores/logEntry\";\r\nimport { StructureStoreState } from \"stores/structure\";\r\n\r\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\r\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\r\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\r\n    const level: number = structureStore.level;\r\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\r\n    const adventurersInTown = selectAdventurersInTown(store);   // todo: refreshes too much. fix\r\n\r\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\r\n    return {\r\n        adventurersInTown,\r\n        gold: store.gold,\r\n        items: store.stockpile,\r\n        level,\r\n        maxResources: levelDefinition.maxResources,\r\n        resources: store.resources,\r\n        structures: store.structures,\r\n        workers: structureStore.workers,\r\n        workersFree: selectFreeWorkers(store),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\r\n    return {\r\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number, otherItem: Item|null) {\r\n            const remove = removeItemFromInventory(adventurerId, fromSlot);\r\n            dispatch(remove);\r\n\r\n            const add = addItemToWarehouse(item, toSlot);\r\n            dispatch(add);\r\n\r\n            if (otherItem) {\r\n                const switchItem = addItemToInventory(adventurerId, otherItem, fromSlot);\r\n                dispatch(switchItem);\r\n            }\r\n        },\r\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\r\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\r\n        },\r\n        // Moves item within an adventurers' inventory\r\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\r\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\r\n            dispatch(action);\r\n        },\r\n        // Moves item from warehouse to an adventurer\r\n        onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\r\n            const remove = removeItemFromWarehouse(fromSlot);\r\n            dispatch(remove);\r\n\r\n            const add = addItemToInventory(adventurerId, item, toSlot);\r\n            dispatch(add);\r\n        },\r\n        onUpgrade: (cost: number, level: number) => {\r\n            dispatch(subtractGold(cost));\r\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\r\n\r\n            level++;\r\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\r\n                level,\r\n                structure: Structure.warehouse,\r\n            }, LogChannel.town));\r\n        },\r\n    };\r\n}\r\n\r\n// export default compose(\r\n//     connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\r\n// //    withAppContext,\r\n// )(WarehouseStructureView) as React.ComponentType<Props>;\r\n\r\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(WarehouseStructureView);\r\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import { getDefinition, Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport { StructureStoreState } from 'stores/structure';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from 'stores';\nimport { selectFreeWorkers } from 'selectors/workers';\nimport { subtractGold } from 'actions/gold';\nimport { upgradeStructure, decreaseWorkers, increaseWorkers } from 'actions/structures';\nimport { addLogEntry } from 'actions/log';\nimport { LogChannel } from 'stores/logEntry';\nimport StructureViewHeader from './StructureViewHeader';\n\n\nexport interface Props  {\n    type: Structure;\n}\n\nconst ResourceStructureView = (props: Props) => {\n\n    // Fetch needed values from store\n    const gold = useSelector<StoreState, number>((store) => store.gold);\n    const level = useSelector<StoreState, number>((store) => { \n        const structureStore: StructureStoreState = store.structures[props.type];\n        if (!structureStore) { throw new Error(`No structure '${props.type}' found in the store!`); }\n        return structureStore.level;\n    });\n    const workers = useSelector<StoreState, number>((store) => { \n        const structureStore: StructureStoreState = store.structures[props.type];\n        if (!structureStore) { throw new Error(`No structure '${props.type}' found in the store!`); }\n        return structureStore.workers;\n    });\n    const workersFree = useSelector<StoreState, number>((store) => selectFreeWorkers(store));\n\n    const structureDefinition = getDefinition<ResourceStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n\n    // Reducer dispatch\n    const dispatch = useDispatch();\n    const handleUpgrade = (cost: number, level: number) => {\n        dispatch(subtractGold(cost));\n        dispatch(upgradeStructure(props.type)); // Todo: [07/07/2019] time??\n\n        level++;\n        dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n            level,\n            structure: props.type,\n        }, LogChannel.town));\n    }\n    \n    const handleWorkersDown = () => {\n        dispatch(decreaseWorkers(props.type));\n    }\n\n    const handleWorkersUp = () => {\n        dispatch(increaseWorkers(props.type));\n    };\n    \n\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n\n    const createWorkersRow = () => {\n        const upDisabled = workers === levelDefinition.workerCapacity || (workersFree || 0) < 1;\n        const downDisabled = workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value={workers}\n            max={levelDefinition.workerCapacity}\n            upDisabled={upDisabled}\n            downDisabled={downDisabled}\n            onDown={handleWorkersDown}\n            onUp={handleWorkersUp}\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            handleUpgrade(nextLevelCost, level + 1);\n        };\n\n        return <div>\n            <label>level:</label>{(level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick={handleClick }\n                disabled= {!canUpgrade } >\n                    {upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${workers} = ${generates[value] * (workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            {\"Generates (every minute): \" }\n            <br/>\n            {generatesText }\n        </div>;\n    };\n\n    return (\n        <>\n            <StructureViewHeader structure={props.type} />\n            <details open={true } className = \"structureview\">\n                <section>\n                    {createWorkersRow() }\n                    {createUpgradeRow() }\n                    {createGeneratesRow() }\n                </section>\n            </details>\n        </>\n    );\n};\n\nexport default ResourceStructureView;\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\nimport ResourceStructureView from './structures/ResourceStructureView';\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\n\ntype AllProps = Props & StateProps;\n\n\nconst StructureDetails = (props: AllProps) => {\n\n    const renderContent = () => {\n        const structureState: StructureStoreState = props.structures[props.structure];\n        if (structureState.state === StructureState.Building) {\n            const progress = props.buildTask ? props.buildTask.progress : 1 ;\n            return (\n                <div>\n                    <Progressbar label=\"Building...\" progress={progress} />\n                </div>\n            );\n        } else {\n\n            const structureDefinition: StructureDefinition = getDefinition(props.structure);\n            switch (structureDefinition.type) {\n                case StructureType.production: {\n                    return <ProductionStructureView type = { props.structure }/>;\n                }\n                case StructureType.resource: {\n                    return <ResourceStructureView type = { props.structure }/>;\n                }\n                case StructureType.warehouse: {\n                    return <WarehouseStructureView />;\n                }\n                case StructureType.tavern: {\n                    return <TavernStructureView />;\n                }\n                default: {\n                    return <div> { props.structure } </div>;\n                }\n            }\n        }\n    }\n\n    return (\n        <div className=\"structure-details\">\n            { renderContent() }\n        </div>\n    );\n};\n\nexport default StructureDetails;\n","import StructureDetailsView, { Props, StateProps } from \"components/StructureDetailsView\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\n\nexport default compose(\n    connect<StateProps, null, Props, StoreState>(mapStateToProps),\n    withWindow,\n)(StructureDetailsView) as React.ComponentType<Props & WindowProps>;\n","import { Howl } from \"howler\";\r\nimport * as React from \"react\";\r\nimport Indicator from \"./Indicator\";\r\nimport { useState, useEffect } from 'react';\r\n\r\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\r\nexport interface Props {\r\n    manifest: string[];\r\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\r\n    children: any;\r\n}\r\n\r\nexport enum MediaType {\r\n    image,\r\n    sound,\r\n}\r\n\r\nexport interface MediaItem {\r\n    url: string;\r\n    mediaType: MediaType;\r\n    content?: HTMLImageElement | Howl;\r\n    sound?: Howl;\r\n}\r\n\r\nconst Preloader = (props: Props) => {    \r\n\r\n    const [completed, setCompleted] = useState(false);\r\n    const [itemsLoaded, setItemsLoaded] = useState(0);\r\n\r\n    useEffect(() => {\r\n        loadMedia();\r\n    }, []);\r\n\r\n    const { children, manifest } = props;\r\n\r\n    const indicator = <Indicator\r\n        itemsLoaded = { itemsLoaded }\r\n        itemsTotal = { manifest.length }\r\n    />;\r\n\r\n    const loadMedia = () => {\r\n        // todo: what if props get set at runtime\r\n        setItemsLoaded(0);\r\n\r\n        const promises = props.manifest\r\n            .map((url) => loadItem(url)\r\n            // tslint:disable-next-line:no-console\r\n            .catch((err) => console.error(err)));\r\n\r\n        Promise.all(promises).then((results) => {\r\n            if (props.onLoadComplete) {\r\n                props.onLoadComplete(media);\r\n            }\r\n            setCompleted(true);\r\n        });\r\n    }\r\n\r\n    const loadItem = async (url: string): Promise<MediaItem> => {\r\n        if (media.some((m) => m.url === url)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\r\n        }\r\n        const mediaType = getType(url);\r\n        let item;\r\n        if (mediaType === MediaType.image) {\r\n            const value = await loadImage(url);\r\n            item = {\r\n                content: value,\r\n                mediaType,\r\n                url,\r\n            } ;\r\n        }\r\n        if (mediaType === MediaType.sound) {\r\n            const value = new Howl({\r\n                src: [ `${process.env.PUBLIC_URL}/${url}` ],\r\n            });\r\n            item = {\r\n                content: value,\r\n                mediaType,\r\n                url,\r\n            };\r\n        }\r\n        if (item) {\r\n            media.push(item);\r\n            setItemsLoaded(itemsLoaded + 1);\r\n            return item;\r\n        } else {\r\n            throw new Error(`Unknown error while trying to load ${url}`);\r\n        }\r\n    }\r\n\r\n    return completed ? children : indicator;\r\n}\r\n\r\nconst media: MediaItem[] = [];\r\n\r\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\r\n    const image = new Image();\r\n    image.src = url;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        if (image.naturalWidth) {\r\n            resolve(image);\r\n        } else if (image.complete) {\r\n            reject(null);\r\n        } else {\r\n            image.addEventListener(\"load\", check);\r\n            image.addEventListener(\"error\", check);\r\n        }\r\n        function check() {\r\n            if (image.naturalWidth) {\r\n                resolve(image);\r\n            } else {\r\n                reject(null);\r\n            }\r\n            image.removeEventListener(\"load\", check);\r\n            image.removeEventListener(\"error\", check);\r\n        }\r\n    });\r\n};\r\n\r\nconst getType = (url: string): MediaType => {\r\n    url = url.toLowerCase();\r\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\r\n        return MediaType.image;\r\n    }\r\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\r\n        return MediaType.sound;\r\n    }\r\n    throw Error(`Could not determine type for ${url}`);\r\n};\r\n\r\nexport default Preloader;","export const manifest = [\r\n    \"sound/fx/button-click.ogg\",\r\n    \"sound/fx/error.ogg\",\r\n    \"sound/music/Soliloquy.mp3\",\r\n    \"sound/music/TheLoomingBattle.ogg\",\r\n\r\n];\r\n","import * as React from \"react\";\r\n\r\nexport interface Props {\r\n    itemsLoaded?: number;\r\n    itemsTotal?: number;\r\n}\r\n\r\n/**\r\n * Loading indicator\r\n */\r\nconst Indicator = (props: Props) =>  {\r\n    const { itemsLoaded, itemsTotal } = props;\r\n    return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\r\n}\r\n\r\nexport default Indicator;\r\n","import React from 'react';\nimport { TextManager } from 'global/TextManager';\nimport { ToastConfig } from 'global/ToastManager';\n\ntype Props = ToastConfig;\n\nexport enum Type {\n    questEncounter,\n    questCompleted,\n    achievementUnlocked,\n    cheat\n}\n\nconst Toast = (props: Props) => {\n    const { \n        title,\n        type = Type.achievementUnlocked,\n        icon = \"/img/items/quest-items/dragon-eye.png\"\n    } = props;\n\n    const typeText = TextManager.get(`ui-toast-type-${Type[type]}`)\n    return (\n        <div className=\"toast\">\n            <div className=\"label type\">{typeText}</div>\n            <div className=\"label title app-h2-white\">{title}</div>\n            <div className=\"icon\">\n                <div className=\"background\"></div>\n                <img className=\"image\" width=\"300\" alt=\"dragon eye\" src={`${process.env.PUBLIC_URL}${icon}`} />\n                <div className=\"foreground\"></div>\n            </div>\n            <div className=\"banner\"></div>\n        </div>\n    );\n}\n\nexport default Toast;","import React from \"react\";\nimport { Viewport as PixiViewport, ClickEventData } from \"pixi-viewport\";\nimport { PixiComponent, useApp } from \"@inlet/react-pixi\";\n\ninterface Props {\n  children: React.ReactNode;\n  onClick?(event: ClickEventData): void;\n  screenWidth: number,\n  screenHeight: number,\n  worldWidth: number,\n  worldHeight: number,\n  minScale?: number;\n  maxScale?: number;\n}\n\n/** Viewport leverages pixi-viewport to create a pannable map \n * https://davidfig.github.io/pixi-viewport/jsdoc/\n */\nconst Viewport = React.forwardRef<PixiViewport, any>((props, ref) => {\n  const app = useApp();\n  if (app) {\n      // Perhaps this is better moved somewhere else\n      const cursor = `url('${process.env.PUBLIC_URL}/img/cursors/dwarven_gauntlet_extra_6.png'), auto`;\n      app.renderer.plugins.interaction.cursorStyles.pointer = cursor;\n  }\n  return <PixiComponentViewport app={app} {...props} ref={ref} />;  \n})\n\ninterface PixiComponentProps {\n    app: PIXI.Application;\n}\n\nconst PixiComponentViewport = PixiComponent(\"Viewport\", {\n  create: (props: PixiComponentProps & Props) => {\n    const viewport = new PixiViewport({\n      screenWidth: props.screenWidth,\n      screenHeight: props.screenHeight,\n      worldWidth: props.worldWidth,\n      worldHeight: props.worldHeight,\n      ticker: props.app.ticker,\n      interaction: props.app.renderer.plugins.interaction,\n      // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n    viewport.on(\"clicked\", (event) => { if(props.onClick) props.onClick(event) });\n\n    const { \n      minScale = 1, \n      maxScale = 2 \n    } = props;\n\n    viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .clamp({ direction: 'all' })\n      .clampZoom({ minScale, maxScale })\n      .decelerate();\n\n    return viewport;\n  },\n  // applyProps: (instance, oldProps, newProps) => {\n  //   console.log(\"applyProps\");\n  // },\n  // didMount: () => {\n  //   console.log(\"didMount\");\n  // },\n  // willUnmount: () => {\n  //   console.log(\"willUnmount\");\n  // }\n});\nexport default Viewport;\n","import * as PIXI from 'pixi.js';\n// Adapted from https://github.com/explooosion/hitarea-shapes/blob/master/src/index.js\n\nexport default class HitAreaShapes {\n    public shapes: PIXI.Polygon[];\n\n    constructor(shapes = {}, sprite: string = \"0\") {\n      this.shapes = shapes[sprite].map((definition: { shape: number[]; }) => {\n          const shape: number[] = definition.shape;\n          return new PIXI.Polygon(shape);\n      });\n    }\n  \n    /**\n     * Called by hitArea\n     * @param {number} x\n     * @param {number} y\n     */\n    contains(x = 0, y = 0) {\n      return (!this.shapes || this.shapes.length === 0)\n        ? false\n        : this.shapes.some(shape => shape.contains(x, y));\n    }\n  }","import React, { useState, useEffect } from 'react';\nimport { Structure } from 'definitions/structures';\nimport { Sprite, useApp, useTick } from '@inlet/react-pixi';\nimport HitAreaShapes from 'utils/hitAreaShapes';\nimport polygons from './../hitAreas.json';\nimport * as PIXI from 'pixi.js';\nimport { ITextureDictionary } from 'pixi.js';\nimport { Props } from 'components/town/TownView';\n\n\nconst BLADE_ROTATION_SPEED = 0.01;\n\nconst LumberMill = (props: Props) => {\n    const structure = Structure.lumberMill;\n    const atlas = `${process.env.PUBLIC_URL}/img/town/town-alpha/${structure}.json`;\n    const hitAreaShapes = new HitAreaShapes(polygons, structure);\n    const [textures, setTextures] = useState<ITextureDictionary>();\n\n    const app = useApp();\n\n    useEffect(() => {\n        if (!app.loader.resources[atlas]) {\n            app.loader.add(atlas).load((_, resources) => {\n                console.log(resources[atlas]?.spritesheet)\n                setTextures(resources[atlas]?.textures);    \n            });\n        } else {\n            setTextures(app.loader.resources[atlas]?.textures);\n        }\n    }, [app, app.loader, atlas]);\n\n    const [rotation, setRotation] = useState(0);\n    useTick((delta:number | undefined) => setRotation(r => r + (BLADE_ROTATION_SPEED * delta!)));\n\n\n    if (!textures) return null;\n    return (\n        <Sprite \n            name={structure}\n            x={403}\n            y={320}\n            interactive={true}\n            buttonMode={true}\n            pointertap={() => {\n                props.onStructureClick(structure);\n            }}\n            hitArea={hitAreaShapes}\n            texture={textures[\"structure.png\"]}\n        >\n            <Sprite \n                name=\"blades\"\n                texture={textures[\"blades.png\"]}\n                anchor={new PIXI.Point(0.5, 0.5)}\n                x={15}\n                y={10}\n                rotation={rotation}\n            /> \n        </Sprite>        \n    )\n}\n\nexport default LumberMill;","import { PixiComponent, applyDefaultProps, Container } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport * as particles from 'pixi-particles';\n\n\ninterface Props  {\n    image: string;\n    config: particles.OldEmitterConfig | particles.EmitterConfig;\n};\n\nconst ParticleEmitter = PixiComponent<Props & React.ComponentProps<typeof Container>, PIXI.ParticleContainer>(\"ParticleEmitter\", {\n    create() {\n      return new PIXI.ParticleContainer();\n    },\n\n    applyProps(instance, oldProps: Props, newProps: Props) {\n      const { image, config, ...newP } = newProps;\n  \n      // apply rest props to PIXI.ParticleContainer\n      applyDefaultProps(instance, oldProps, newP);\n      \n      let emitter = (this as any)._emitter;\n      if (!emitter) {\n        emitter = new particles.Emitter(\n          instance,\n          [PIXI.Texture.from(image)],\n          config\n        );\n  \n        let elapsed = performance.now();\n  \n        const tick = () => {\n          emitter.raf = requestAnimationFrame(tick);\n          const now = performance.now();\n          //const amp = Math.random() * 5 + 15;\n          // const amp = 15;\n          // const freq = 0.0015;\n          // emitter.acceleration.x = (Math.sin((elapsed * freq)) * amp) + 15;\n\n          emitter.update((now - elapsed) * 0.0003);\n  \n          elapsed = now;\n        };  \n        emitter.emit = true;\n        // emitter.update(00.2);\n\n        tick();\n      }\n      (this as any)._emitter = emitter;\n    },\n\n    willUnmount() {\n      if ((this as any)._emitter) {\n        (this as any)._emitter.emit = false;\n        cancelAnimationFrame((this as any)._emitter.raf);\n      }\n    }\n});\n\nexport default ParticleEmitter;","import React from \"react\";\nimport { Props } from 'components/town/TownView';\nimport { Sprite } from '@inlet/react-pixi';\nimport { Structure } from 'definitions/structures';\nimport HitAreaShapes from 'utils/hitAreaShapes';\nimport polygons from './../hitAreas.json';\nimport smoke from './smoke.json';\nimport ParticleEmitter from 'components/pixi/ParticleEmitter';\n\nconst Tavern = (props: Props) => {\n    const structure = Structure.tavern;\n    const hitAreaShapes = new HitAreaShapes(polygons, structure);\n\n    return (\n        <Sprite \n            name={structure}\n            x ={500}\n            y ={469}\n            interactive={true}\n            buttonMode={true}\n            pointertap={() => {\n                props.onStructureClick(structure);\n            }}\n            hitArea={hitAreaShapes}\n            image={`${process.env.PUBLIC_URL}/img/town/town-alpha/${structure}.png`}\n        >\n            <ParticleEmitter\n                name=\"smoke\"\n                x={107}\n                y={-2}\n                image={`${process.env.PUBLIC_URL}/img/town/effects/smokeparticle.png`} \n                config={smoke} \n            />\n        </Sprite>\n    )\n}\nexport default Tavern;","import React, { useRef, useEffect } from \"react\";\r\nimport { Stage, Sprite } from '@inlet/react-pixi';\r\nimport { Structure } from 'definitions/structures';\r\nimport { StructuresStoreState } from 'stores/structures';\r\nimport { SoundManager, MusicTrack } from 'global/SoundManager';\r\nimport { Viewport as PixiViewport} from \"pixi-viewport\";\r\nimport Viewport from '../pixi/Viewport';\r\nimport { StructureState, StructureStoreState } from 'stores/structure';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from 'stores';\r\nimport \"./css/townView.css\"\r\nimport { MAX_WIDTH } from 'components/App';\r\nimport HitAreaShapes from 'utils/hitAreaShapes';\r\nimport polygons from './hitAreas.json';\r\nimport LumberMill from './structures/LumberMill';\r\nimport Tavern from './structures/Tavern';\r\n\r\nconst HEIGHT = 1079;\r\nconst WORLD_WIDTH = 1024;\r\nconst WORLD_HEIGHT = 1600;\r\n\r\n// This might be the town view\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface DispatchProps {\r\n\r\n}\r\n\r\nexport interface Props {\r\n    onStructureClick: (structure: Structure | null) => void;\r\n}\r\n\r\n\r\ntype AllProps = Props & DispatchProps;\r\n\r\nconst TownView = (props: AllProps) => {\r\n\r\n    // let match = useRouteMatch();\r\n\r\n    React.useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\r\n        SoundManager.playMusicTrack(MusicTrack.town);\r\n    }, []);\r\n\r\n    const handleStructureClick = (structure: Structure | null) => {\r\n        if (!dragging.current && props.onStructureClick) { \r\n            props.onStructureClick(structure); \r\n        }\r\n    }\r\n\r\n    //console.log('rendering town');\r\n\r\n    const structures = useSelector<StoreState, StructuresStoreState>((state: StoreState) => {\r\n        return state.structures;\r\n    });\r\n\r\n    const renderStructures = () => {\r\n        const orderedStructures = [\r\n            Structure.workshop,\r\n            Structure.quarry,\r\n            Structure.tavern,\r\n            Structure.tannery,\r\n            Structure.alchemist,\r\n            Structure.garden,\r\n            Structure.weaponsmith,\r\n            Structure.armoursmith,\r\n            Structure.warehouse,\r\n            Structure.mine,\r\n            Structure.lumberMill,\r\n            Structure.weaver,\r\n        ]\r\n        return orderedStructures.reverse().map((structure) => {\r\n            const structureStore: StructureStoreState = structures[structure];\r\n            if (structureStore.state === StructureState.NotBuilt) {\r\n                return null;\r\n            }\r\n            // todo: refactor into seperate components\r\n               \r\n            let x, y;              \r\n            switch (structure) {\r\n                case Structure.workshop:\r\n                    x = 373;\r\n                    y = 610;\r\n                    break;\r\n                case Structure.quarry:\r\n                    x = 632;\r\n                    y = 633;\r\n                    break;\r\n\r\n                case Structure.tannery:\r\n                    x = 372;\r\n                    y = 460;\r\n                    break;\r\n                case Structure.alchemist:\r\n                    x = 411;\r\n                    y = 371;\r\n                    break;\r\n                case Structure.garden:\r\n                    x = 822;\r\n                    y = 689;\r\n                    break;\r\n                case Structure.weaponsmith:\r\n                    x = 449;\r\n                    y = 460;\r\n                    break;\r\n                case Structure.armoursmith:\r\n                    x = 473;\r\n                    y = 442;\r\n                    break;\r\n                case Structure.warehouse:\r\n                    x = 471;\r\n                    y = 130;\r\n                    break;\r\n                case Structure.mine:\r\n                    x = 183;\r\n                    y = 527;\r\n                    break;\r\n                case Structure.weaver:\r\n                    x = 484;\r\n                    y = 333;\r\n                    break;\r\n            }              \r\n            \r\n            switch (structure) {\r\n                case Structure.lumberMill: {\r\n                    return <LumberMill onStructureClick={handleStructureClick} key={structure} />;\r\n                }\r\n                case Structure.tavern: {\r\n                    return <Tavern onStructureClick={handleStructureClick} key={structure} />;\r\n                }\r\n                default: {\r\n                    const hitAreaShapes = new HitAreaShapes(polygons, structure);\r\n                    return <Sprite \r\n                        key={structure}\r\n                        name={structure}\r\n                        x={x}\r\n                        y={y}\r\n                        interactive={true}\r\n                        buttonMode={true}\r\n                        pointertap={() => {\r\n                            handleStructureClick(structure);\r\n                        }}\r\n                        hitArea={hitAreaShapes}\r\n                        image={`${process.env.PUBLIC_URL}/img/town/town-alpha/${structure}.png`}          \r\n                    >\r\n                        {/* <Graphics\r\n                            name=\"hitarea\"\r\n                            draw={graphics => {\r\n                                graphics.beginFill(0xffffff);\r\n                                hitAreaShapes.shapes.map(shape => graphics.drawPolygon(shape))\r\n                                graphics.endFill();\r\n                            }}\r\n                        /> */}\r\n                    </Sprite>\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    let dragging = useRef(false);\r\n    const ref = useRef<PixiViewport>(null);\r\n    useEffect(() => {\r\n        if(ref.current) {\r\n            const viewport = ref.current;\r\n            viewport.on(\"drag-start\", () => { dragging.current = true; });\r\n            viewport.on(\"drag-end\", () => { dragging.current = false; });\r\n        }\r\n\r\n        const onScroll = (e: WheelEvent) => {\r\n            // Scrolling the mouse is just used for zoom, not for actual scrolling\r\n            e.preventDefault();\r\n        }\r\n        window.addEventListener(\"wheel\", onScroll, {passive: false} );\r\n        return () => {\r\n            window.removeEventListener(\"wheel\", onScroll);\r\n        };\r\n    }, []);\r\n\r\n    const options = {\r\n        sharedLoader: true\r\n    }\r\n    return (\r\n        <div className=\"town-view\">\r\n            <Stage width={MAX_WIDTH} height={HEIGHT} options={options} >\r\n                <Viewport screenWidth={MAX_WIDTH} screenHeight={HEIGHT} worldWidth={WORLD_WIDTH} worldHeight={WORLD_HEIGHT} ref={ref}>\r\n                    <Sprite \r\n                        name=\"background\"\r\n                        image={`${process.env.PUBLIC_URL}/img/town/town-alpha/background.png`}          \r\n                    >\r\n                        {renderStructures()}\r\n\r\n                    </Sprite>\r\n                </Viewport>\r\n            </Stage>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TownView;\r\n","import { now } from 'moment';\nimport { Type } from '../components/ui/toasts/Toast';\nimport EventEmitter from './EventEmitter';\n\nexport interface ToastConfig {\n    time: number;\n    title: string;\n    type?: Type;\n    icon?: string;\n}\n\nexport abstract class ToastManager extends EventEmitter<ToastConfig[]>() {\n    \n    private static stack: ToastConfig[] = [];\n    private static lifeTime = 5000; // Time each toast lives\n\n    static EVENT_TOASTS_UPDATED = \"toast\";\n\n    static addToast(title: string, type?: Type, icon?: string) {\n\n        this.stack = [...this.stack, {\n            time: now(),\n            title,\n            type,\n            icon\n        }];\n\n        this.emit(this.EVENT_TOASTS_UPDATED, this.stack);\n\n        setTimeout(() => {\n            // Remove all popups that have expired\n            this.stack = this.stack.filter((toast) => {\n                return now() - toast.time < this.lifeTime\n            });\n            this.emit(this.EVENT_TOASTS_UPDATED, this.stack);\n\n        }, this.lifeTime);\n    }\n}","import React, { useEffect, useState } from 'react';\nimport './toasts.css';\nimport Toast from './Toast';\nimport { ToastManager, ToastConfig } from '../../../global/ToastManager';\n\n// Toasts can be added by calling ToastManager.addToast\n// ToastManager will inform whenever the something is added to the list of toasts via EVENT_TOASTS_UPDATED\n// The toasts themselves will fade out via css transition\nconst Toasts = () => {\n\n    const [activeToasts, setActiveToasts] = useState<ToastConfig[]>([]);\n\n    const toastsUpdated = (stack: ToastConfig[]) => {\n        setActiveToasts(stack);\n    }\n\n    useEffect(() => {\n        ToastManager.addEventListener(ToastManager.EVENT_TOASTS_UPDATED, toastsUpdated);\n        return () => {\n            ToastManager.removeEventListener(ToastManager.EVENT_TOASTS_UPDATED, toastsUpdated);\n        }\n    }, []);\n\n    return (\n        <div className=\"toasts\" > \n            { activeToasts.map((toastConfig) => (\n                <Toast key={toastConfig.time} {...toastConfig}/>\n            ))}\n        </div>\n    )\n}\n\nexport default Toasts;","import { Action } from \"redux\";\n\n// todo this should go somewhere else\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface ModifyWorkersAction extends Action<ActionType> {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","import { getDefinition } from \"definitions/items\";\r\nimport { Item, ItemType } from \"definitions/items/types\";\r\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\r\nimport * as React from \"react\";\r\nimport { StructureState, StructureStoreState } from \"stores/structure\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/cheatbox.css\";\r\nimport { useRef, useState } from 'react';\r\nimport { ToastManager } from 'global/ToastManager';\r\nimport { Type } from 'components/ui/toasts/Toast';\r\n\r\nexport interface DispatchProps {\r\n    onCheatGold?: (amount: number) => void;\r\n    onCheatWorkers?: (amount: number) => void;\r\n    onCheatResources?: (amount: number) => void;\r\n    onCheatItem?: (item: Item) => void;\r\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    structures: StructuresStoreState;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\nconst CheatWindow = (props: AllProps) => {\r\n\r\n    const itemSelectRef = useRef<HTMLSelectElement>(null);\r\n    const [cheats, setCheats] = useState({\r\n        gold: 50,\r\n        resources: 50,\r\n        workers: 10,\r\n    });\r\n\r\n    const getStructureRow = (structure: Structure) => {\r\n        const structureDef = getStructureDefinition(structure);\r\n        const structureStore: StructureStoreState = props.structures[structure];\r\n        const levelDef = structureDef.levels[structureStore.level];\r\n\r\n        const displayName = TextManager.get(levelDef.displayName);\r\n\r\n        return <div\r\n            className=\"label-dropdown\"\r\n            key={structure}\r\n        >\r\n            <label title={structure}>\r\n                { `${displayName}` }\r\n            </label>\r\n            <input\r\n                key={structure}\r\n                type=\"checkbox\"\r\n                checked={props.structures[structure].state === StructureState.Built }\r\n                onChange={() => handleChangeStructureState(structure, props.structures[structure].state !== StructureState.Built)}\r\n            />\r\n        </div>;\r\n    };\r\n\r\n    const structures = Object.keys(props.structures)\r\n        .map((structure) => getStructureRow(structure as Structure));\r\n\r\n    const getItemTypeOptions = (type: ItemType) => {\r\n        return Object.keys(Item)\r\n            // tslint:disable-next-line: triple-equals\r\n            // eslint-disable-next-line eqeqeq\r\n            .filter((item: string) => getDefinition(item as Item).itemType == type)\r\n            .map((item: string) => getItemOption(item as Item));\r\n    };\r\n\r\n    const getItemOption = (item: Item) => {\r\n        return <option value ={item } key ={item }>\r\n            { TextManager.getItemName(item) }\r\n        </option>;\r\n    };\r\n\r\n    const items = Object.keys(ItemType)\r\n        .filter((val: any) => !isNaN(val))\r\n        .map((type: string) => {\r\n        return <optgroup label ={ItemType[type] } key ={type }>\r\n            { getItemTypeOptions(type as unknown as ItemType) }\r\n        </optgroup>;\r\n    });\r\n\r\n    \r\n    const handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = cheats.gold;\r\n        if (props.onCheatGold) { props.onCheatGold(amount); }\r\n\r\n        const text = TextManager.get(\"common-cheat-gold-added\", { amount });\r\n        const icon = \"/img/resources/gold.png\";\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = cheats.workers;\r\n        if (props.onCheatWorkers) { props.onCheatWorkers(amount); }\r\n        const text = TextManager.get(\"common-cheat-workers-added\", { amount });\r\n        const icon = \"/img/resources/worker.png\";\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (props.onCheatResources) { props.onCheatResources(cheats.resources); }\r\n        const text = TextManager.get(\"common-cheat-resources-added\", { amount: cheats.resources });\r\n        ToastManager.addToast(text, Type.cheat);\r\n    }\r\n\r\n    const handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const item = itemSelectRef.current!.value as Item;\r\n        if (props.onCheatItem) { props.onCheatItem(item); }\r\n\r\n        const text = TextManager.get(\"common-cheat-item-added\", { item });\r\n        const icon = getDefinition(item).iconImg;\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleChangeStructureState = (structure: Structure, checked: boolean) => {\r\n        if (props.onCheatStructureState) {\r\n            props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\r\n        }\r\n        if (checked) {\r\n            ToastManager.addToast(`The ${TextManager.getStructureName(structure)} is constructed`, Type.cheat);\r\n        } else {\r\n            ToastManager.addToast(`The ${TextManager.getStructureName(structure)} is not constructed`, Type.cheat);\r\n        }\r\n    }\r\n \r\n    const handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            gold: amount,\r\n        });\r\n    }\r\n\r\n    const handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            workers: amount,\r\n        });\r\n    }\r\n\r\n    const handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            resources: amount,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"cheat-box\">\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Gold</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.gold}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeGold}>\r\n                </input>\r\n                <button onClick={handleCheatGold}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Workers</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.workers}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeWorkers}>\r\n                </input>\r\n                <button onClick={handleCheatWorkers}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Resources</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.resources}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeResources}>\r\n                </input>\r\n                <button onClick={handleCheatResources}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Items</label>\r\n                <select style={{width: \"150px\"}} ref={itemSelectRef}>\r\n                    { items }\r\n                </select>\r\n                <button onClick={handleCheatItem}>Add</button>\r\n            </div>\r\n            { structures }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheatWindow;\r\n","import { Resource } from \"definitions/resources\";\n\nexport const resourceOrder = [\n    Resource.food,\n    Resource.wood,\n    Resource.stone,\n    Resource.fabric,\n    Resource.leather,\n];\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/CheatWindow\";\nimport { resourceOrder } from \"constants/resources\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => {\n            dispatch(addGold(amount));\n            dispatch(addLogEntry(\"common-cheat-gold-added\", { amount }, LogChannel.common));\n        },\n        onCheatItem: (item: Item) => {\n            dispatch(addItemToWarehouse(item));\n            dispatch(addLogEntry(\"common-cheat-item-added\", { item }, LogChannel.common));\n        },\n        onCheatResources: (amount: number) => {\n            // Create ResourceStoreState where value of each resource is `amount`\n            const resources = resourceOrder.reduce((acc: ResourceStoreState, resource) => {\n                acc[resource] = amount;\n                return acc;\n            }, {});\n\n            dispatch(addResources(resources));\n            dispatch(addLogEntry(\"common-cheat-resources-added\", { amount }, LogChannel.common));\n        },\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => {\n            dispatch(addWorkers(amount));\n            dispatch(addLogEntry(\"common-cheat-workers-added\", { amount }, LogChannel.common));\n        },\n    };\n};\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(CheatWindow) as React.ComponentType<Props & WindowProps>;\n","import { Props as WindowProps } from \"components/ui/window/Window\";\r\nimport CheatWindow from \"containers/windows/CheatWindow\";\r\nimport { withWindow } from \"hoc/withWindow\";\r\nimport * as React from \"react\";\r\nimport { compose } from \"redux\";\r\nimport \"./css/settingswindow.css\";\r\nimport { ChangeEvent } from 'react';\r\nimport { SoundManager } from 'global/SoundManager';\r\n\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\r\nconst SettingsWindow = (props: AllProps) => {\r\n\r\n    const handleMusicChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const linear = parseFloat(e.target.value);\r\n        const log = Math.pow(linear, 2);\r\n        SoundManager.musicVolume = log;\r\n    };\r\n    return (\r\n        <div className=\"settings-window\">\r\n            <details open = { true } >\r\n                <summary>Sound</summary>\r\n                <section>\r\n                    <p>\r\n                        <label>Music</label>\r\n                        <input type=\"range\" min=\"0\" max=\"1\" step=\"0.05\" onChange={handleMusicChange} defaultValue={`${Math.sqrt(SoundManager.musicVolume)}`} />\r\n                    </p>\r\n                    <p>\r\n                        <label>Sound</label>\r\n                        <input type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" />\r\n                    </p>\r\n                </section>\r\n            </details>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withWindow,\r\n)(SettingsWindow) as React.ComponentType<AllProps>;\r\n","import { Props as WindowProps } from \"components/ui/window/Window\";\r\nimport CheatWindow from \"containers/windows/CheatWindow\";\r\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\r\nimport { withWindow } from \"hoc/withWindow\";\r\nimport * as React from \"react\";\r\nimport { compose } from \"redux\";\r\nimport \"./css/cheatbox.css\";\r\nimport SettingsWindow from './SettingsWindow';\r\n\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\r\nconst Menu = (props: AllProps & AppContextProps) => {\r\n\r\n    const handleClickCheats = () => {\r\n        const window = <CheatWindow title = \"Cheats\" />;\r\n        props.onOpenWindow(window);\r\n    };\r\n\r\n    const handleClickSettings = () => {\r\n        const window = <SettingsWindow title = \"Settings\" />;\r\n        props.onOpenWindow(window);\r\n    };\r\n    return (\r\n        <div className=\"menu\">\r\n            <p>\r\n                <button onClick={handleClickCheats}>Cheats!</button>\r\n            </p>\r\n            <p>\r\n                <button onClick={handleClickSettings}>Settings</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withWindow,\r\n    withAppContext,\r\n)(Menu) as React.ComponentType<AllProps>;\r\n","import { AppContext } from \"components/App\";\nimport { MediaItem } from \"components/preloading/Preloader\";\nimport * as React from \"react\";\n\n// Sharing context within the entire App\nexport interface AppContextProps {  \n    onOpenWindow: (window: React.ReactElement) => void;\n    media: MediaItem[] | null;\n}\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends React.Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n};\n","import \"components/ui/css/common/icon.css\";\nimport { resourceOrder } from \"constants/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"global/TextManager\";\nimport { useSelector } from 'react-redux';\nimport \"./css/resourcebar.css\";\nimport { StoreState } from 'stores';\nimport { selectFreeWorkers } from 'selectors/workers';\nimport { formatNumber } from 'utils/number';\n\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n    resources: ResourceStoreState;\n}\n\n/** Shown on top in the UI */\nconst Resourcebar = () => {\n    //console.log('rendering resourcebar')\n\n    // todo: seperate useSelectors for better performance\n    const storeProps = useSelector<StoreState, StateProps>((store: StoreState) => {\n        return {\n            gold: store.gold,\n            resources: store.resources,\n            workers: store.workers,\n            workersFree: selectFreeWorkers(store),\n        };\n    });\n\n    const createItem = (icon: string, amount: number, title: string) => {\n        return <li title = { title } key = { title }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${process.env.PUBLIC_URL}${icon})`,\n            }}></div>\n            <div className = \"amount\">\n                { formatNumber(amount) }\n            </div>\n        </li>;\n    };\n\n    const resources = resourceOrder.map((resource) => {\n        const resourceDescription = resourceDescriptions[resource];\n        return createItem(resourceDescription.iconImg, storeProps.resources[resource as string], TextManager.getResourceName(resource));\n    });\n\n    resources.push(\n        createItem(\"/img/resources/worker.png\", storeProps.workersFree, \"workers\"),\n        createItem(\"/img/resources/gold.png\", storeProps.gold, \"gold\"),\n    );\n\n// <span>\n//     workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n// </span>\n// <span>\n//     gold: <b>{ props.gold }</b>\n// </span>\n\n    return (\n        <ul className=\"resourcebar\">\n            { resources }\n        </ul>\n    );\n};\nexport default Resourcebar;\n","export const formatNumber = (number: number, digits: number = 1): string => {\n    const SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n   \n    // what tier? (determines SI symbol)\n    const tier = Math.log10(number) / 3 | 0;\n\n    // if zero, we don't need a suffix\n    if(tier === 0) return \"0\";\n\n    // get suffix and determine scale\n    const suffix = SI_SYMBOL[tier];\n    const scale = Math.pow(10, tier * 3);\n\n    // scale the number\n    const scaled = number / scale;\n\n    // format number and add suffix\n    return scaled.toFixed(digits) + suffix;\n}","import Menu from \"components/ui/window/windows/MenuWindow\";\nimport * as React from \"react\";\nimport \"./css/topbar.css\";\nimport Resourcebar from './Resourcebar';\nimport { useContext } from 'react';\nimport { AppContext } from 'components/App';\n\n\n\n\nconst Topbar = () => {\n    const context = useContext(AppContext)!;\n\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const window = <Menu title = \"Menu\" />;\n        context.onOpenWindow(window);\n    };\n\n    return (\n        <div className = \"topbar\">\n            <div className = \"topbar-left\">\n                <Resourcebar />\n            </div>\n            <div className = \"topbar-right\">\n                <div className = \"hamburger\" onClick = { handleClick }>☰</div>\n            </div>\n        </div>\n    );\n}\nexport default Topbar;","\ninterface Location {\n    x: number;\n    y: number;\n}\n\nexport const lerpLocation = (point1: Location, point2: Location, alpha: number): Location => {\n    const x = lerp(point1.x, point2.x, alpha);\n    const y = lerp(point1.y, point2.y, alpha);\n    return { x, y };\n}\n\nconst lerp = (n1: number,  n2: number,  alpha: number) =>  {\n    return n1 + alpha * (n2 - n1);\n}\n","import React, { useRef, useEffect } from 'react';\nimport { Sprite } from '@inlet/react-pixi';\nimport { QuestStoreState } from 'stores/quest';\nimport * as PIXI from 'pixi.js';\nimport { AdventurerStoreState } from 'stores/adventurer';\nwindow.PIXI = PIXI;\n\ninterface Props {\n    quest: QuestStoreState;\n    position: PIXI.Point;\n    selected?: boolean;\n    encounterActive?: boolean;\n    onClick?: (quest: QuestStoreState) => void;\n    leader: AdventurerStoreState;\n}\nconst CIRCLE_DIAMETER = 256; // = avatar size / 2\n\nconst QuestMarker = (props: Props) => {\n    const { quest, leader, encounterActive, position, onClick, selected } = props;\n    const image = selected ? '/img/world/map-marker-selected.png' : '/img/world/map-marker.png';\n\n    const avatar = useRef<Sprite>(null);\n    // Mask has to be a child of the avatar in order to move with it\n    useEffect(() => {\n        const sprite = avatar.current as any as PIXI.Sprite;\n\n        const maskGraphics = new PIXI.Graphics();\n        maskGraphics.beginFill(0xBADA55);\n        maskGraphics.drawCircle(0, 0, CIRCLE_DIAMETER * 1);\n        maskGraphics.endFill(); \n\n        sprite.mask = maskGraphics;\n        sprite.addChild(maskGraphics);\n    }, [avatar]);\n\n    return (\n        <Sprite\n            image={`${process.env.PUBLIC_URL}${image}`} \n            name={quest.name}\n            x={position.x}\n            y={position.y}\n            interactive={true}\n            buttonMode\n            scale={new PIXI.Point(0.1, 0.1)}\n            anchor={new PIXI.Point(0.5, 1)}\n            pointerdown={() => {\n                if(onClick) {\n                    onClick(quest);\n                }\n            }}\n        >\n            { leader && (\n            <Sprite \n                image={`${process.env.PUBLIC_URL}${leader.avatarImg}`} \n                name=\"avatar\"\n                anchor={new PIXI.Point(0.5, 0.5)}\n                x={0}\n                y={-396}\n                scale={new PIXI.Point(0.66, 0.66)}\n                ref={avatar}\n            />)}\n            {encounterActive && (\n            <Sprite \n                image={`${process.env.PUBLIC_URL}/img/world/quest-alert.png`} \n                name=\"quest-alert\"\n                anchor={new PIXI.Point(0.5, 1)}\n                x={180}\n                y={-396}\n                scale={new PIXI.Point(2, 2)}\n            />\n            )}\n        </Sprite>\n    )\n}\n\nexport default QuestMarker;","import React from \"react\";\nimport { Graphics } from '@inlet/react-pixi';\n\ninterface Props {\n    positions: PIXI.Point[];\n}\n\nconst QuestLine = (props: Props) => {\n    const { positions } = props;\n    if (props.positions.length > 2) {\n        return <Graphics\n            name=\"questline\"\n            x={0}\n            y={0}\n            draw={graphics => {\n                graphics.lineStyle(3, 0xFF3300);\n                graphics.moveTo(positions[0].x, positions[0].y);\n\n                let i = 0;\n                for (i = 1; i < positions.length - 2; i ++)\n                {\n                    var xc = (positions[i].x + positions[i + 1].x) / 2;\n                    var yc = (positions[i].y + positions[i + 1].y) / 2;\n                    graphics.quadraticCurveTo(positions[i].x, positions[i].y, xc, yc);\n                }\n                graphics.quadraticCurveTo(positions[i].x, positions[i].y, positions[i+1].x, positions[i+1].y);\n                graphics.endFill(); \n            }}\n        />;\n    }\n    return null;\n}\n\nexport default QuestLine;\n// tx.moveTo(positions[0].x, positions[0].y);\n\n\n//    for (i = 1; i < positions.length - 2; i ++)\n//    {\n//       var xc = (positions[i].x + positions[i + 1].x) / 2;\n//       var yc = (positions[i].y + positions[i + 1].y) / 2;\n//       ctx.quadraticCurveTo(positions[i].x, positions[i].y, xc, yc);\n//    }\n//  // curve through the last two positions\n//  ctx.quadraticCurveTo(positions[i].x, positions[i].y, positions[i+1].x,positions[i+1].y);","import { TextEntry } from \"constants/text\";\nimport { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getQuests = (state: StoreState) => state.quests;\nconst getLog = (state: StoreState) => state.log;\n\nconst activeQuests = (quests: QuestStoreState[]) => {\n    // returns the names of the active quests\n    return quests.filter((q) => q.status === QuestStatus.active).map((q) => q);\n};\n\nexport const selectActiveQuests = createSelector([\n    getQuests],\n    activeQuests,\n);\n\n/**\n * Returns the most recent log entry for a given quest\n */\nexport const selectLastQuestLogEntry = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry | undefined => {\n        const questLog = log.find((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n        return questLog;\n    },\n)(state);\n\n/**\n * Returns all log entries for given quest\n */\nexport const selectQuestLogEntries = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry[] | undefined => {\n        return log.filter((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n    },\n)(state);\n","import * as PIXI from 'pixi.js';\r\nimport { Stage, Sprite } from '@inlet/react-pixi';\r\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport React, { useEffect, useRef, useCallback, useState } from \"react\";\r\nimport { QuestStoreState } from \"stores/quest\";\r\nimport { lerpLocation } from 'utils/pixiJs';\r\nimport { QuestDefinition, QuestNodeType, QuestNode } from \"definitions/quests\";\r\nimport Viewport from '../../pixi/Viewport';\r\nimport MapGrid from './MapGrid';\r\nimport QuestMarker from './QuestMarker';\r\nimport { StoreState } from 'stores';\r\nimport { getQuestLeader } from 'storeHelpers';\r\nimport { AdventurerStoreState } from 'stores/adventurer';\r\nimport QuestLine from './QuestLine';\r\nimport { MAX_WIDTH as WIDTH } from 'components/App';\r\nimport { selectActiveQuests } from 'selectors/quests';\r\nimport { getDefinition } from 'definitions/quests';\r\nwindow.PIXI = PIXI; // workaround for pixi-tilemap\r\n\r\nconst FULL_HEIGHT = 1024;\r\nconst SMALL_HEIGHT = 128;   // Used when QuestPanel is open\r\nconst WORLD_WIDTH = 1500;\r\nconst WORLD_HEIGHT = 1061;\r\nconst GRID_WIDTH = 10;      // width or height of each node location in pixels\r\n\r\n// // This stuff is needed for the pixi-js browser plugin\r\nif (process.env.NODE_ENV === \"development\") {\r\n    // @ts-ignore\r\n    window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI: PIXI });\r\n}\r\n\r\nexport interface Props {\r\n    selectedQuestName?: string;\r\n    smallMap: boolean;\r\n    onPartyClick: (questName: string) => void;\r\n    retrieveWorldViewRef: () => React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst WorldMap = (props: Props) => {\r\n    const { retrieveWorldViewRef, smallMap } = props;\r\n    const questSelector = useCallback(\r\n        (state: StoreState) => state.quests.find((q) => q.name === props.selectedQuestName), \r\n        [props.selectedQuestName]\r\n    );\r\n    const selectedQuest = useSelector<StoreState, QuestStoreState | undefined>(questSelector);\r\n    const adventurers = useSelector<StoreState, AdventurerStoreState[]>((store) => store.adventurers);\r\n    const activeQuests = useSelector<StoreState, QuestStoreState[]>((store) => selectActiveQuests(store));\r\n\r\n    const handlePartyClick = (name: string) => {\r\n        props.onPartyClick(name);\r\n    };\r\n\r\n    // useEffect(() => {        \r\n    //     const onScroll = (e: WheelEvent) => {\r\n    //         // When the map is big, scrolling the mouse is just used for zoom, not for actual scrolling\r\n    //         if (!smallMap) {\r\n    //             e.preventDefault();\r\n    //         }\r\n    //     }\r\n    //     window.addEventListener(\"wheel\", onScroll, {passive: false} );\r\n    //     return () => {\r\n    //         window.removeEventListener(\"wheel\", onScroll);\r\n    //     };\r\n    // }, [smallMap]);\r\n\r\n\r\n    const [canvasWidth, setCanvasWidth] = useState(WIDTH);\r\n    const [canvasHeight, setCanvasHeight] = useState(FULL_HEIGHT);\r\n\r\n    useEffect(() => {\r\n        // This will set the dimensions of the canvas tot that of the parent (worldview)\r\n        const resize = () => {\r\n            const worldView = retrieveWorldViewRef();\r\n            const worldViewWidth = worldView.current?.clientWidth || WIDTH;\r\n            const worldViewHeight = worldView.current?.clientHeight || FULL_HEIGHT;\r\n\r\n            setCanvasWidth(worldViewWidth);\r\n            if (smallMap) {\r\n                if (worldViewWidth < 576) {\r\n                    // Small screens\r\n                    setCanvasHeight(SMALL_HEIGHT / 2); \r\n                } else {\r\n                    setCanvasHeight(SMALL_HEIGHT); \r\n                }\r\n            }\r\n            else {\r\n                setCanvasHeight(worldViewHeight); \r\n            }\r\n        }\r\n        resize();\r\n        window.addEventListener(\"resize\", resize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resize);\r\n        };\r\n    }, [retrieveWorldViewRef, smallMap]);\r\n\r\n    useEffect(() => {\r\n        if (selectedQuest) {\r\n            focusOnQuestingParty(selectedQuest);\r\n        }\r\n    }, [selectedQuest, canvasHeight])\r\n\r\n    const viewportRef = useRef<PixiViewport>(null);\r\n    useEffect(() => {\r\n        // focus on center of the map\r\n            if (viewportRef.current) {\r\n                const viewport = viewportRef.current;\r\n                const point = nodeLocationToPoint({ x: 0, y: 0 });\r\n                viewport.moveCenter(point.x, point.y);\r\n            }\r\n    }, [canvasWidth]);\r\n\r\n    const renderQuestlines = () => {\r\n        return activeQuests.map((quest) => {\r\n            const previousPositions = getPreviousPositions(quest);\r\n            return (\r\n                <QuestLine positions={previousPositions} key={quest.name} />\r\n            );\r\n        });\r\n    };\r\n\r\n    const renderMarkers = () => {\r\n        return activeQuests.map((quest) => {\r\n            const location = getQuestWorldLocation(quest);\r\n            const currentPosition = nodeLocationToPoint(location);\r\n            const leader = getQuestLeader(adventurers, quest)!;\r\n            const questDefinition: QuestDefinition = getDefinition(quest.name);\r\n            const progress: number = Math.floor(quest.progress);\r\n            const questNode: QuestNode = questDefinition.nodes[progress];\r\n            \r\n            return (\r\n                <QuestMarker \r\n                    quest={quest} \r\n                    leader={leader} \r\n                    position={currentPosition} \r\n                    key={quest.name} \r\n                    selected={quest === selectedQuest}\r\n                    encounterActive={questNode.type === QuestNodeType.encounter}\r\n                    onClick={(quest) => handlePartyClick(quest.name)} \r\n                />\r\n            );\r\n        });\r\n    };\r\n\r\n\r\n    // puts the given party in the center of the map\r\n    const focusOnQuestingParty = (quest: QuestStoreState) => {\r\n        const viewport = viewportRef.current;\r\n        if (viewport) {\r\n            const partyLocation = getQuestWorldLocation(quest);\r\n            const point = nodeLocationToPoint(partyLocation);\r\n            viewport.moveCenter(point.x, point.y);\r\n        }\r\n    }\r\n\r\n    const handleMapClick = () => {\r\n        /// todo: close map\r\n        // if(smallMap === true && selectedQuest) {\r\n        //     props.onPartyClick(selectedQuest.name);\r\n        // }\r\n    }\r\n\r\n// console.log(canvasWidth);\r\n    return (\r\n        <Stage width={canvasWidth} height={canvasHeight} >\r\n            <Viewport screenWidth={canvasWidth} screenHeight={canvasHeight} worldWidth={WORLD_WIDTH} worldHeight={WORLD_HEIGHT} ref={viewportRef} >\r\n                <Sprite \r\n                    image={`${process.env.PUBLIC_URL}/img/world/francesca-baerald-fbaerald-angeloumap-lowres.jpg`} \r\n                    interactive \r\n                    pointerdown={handleMapClick}\r\n                >\r\n                    {renderQuestlines()}\r\n                    {renderMarkers()}\r\n                </Sprite>\r\n                {/* <MapGrid width={WORLD_WIDTH} height={WORLD_HEIGHT} gridWidth={GRID_WIDTH} /> */}\r\n            </Viewport>\r\n        </Stage>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default WorldMap;\r\n\r\nconst getQuestWorldLocation = (quest: QuestStoreState): { x: number; y: number; } => {\r\n    const questDefinition = getDefinition(quest.name);\r\n    const roundedProgress = Math.floor(quest.progress);\r\n    const lastNode = questDefinition.nodes[roundedProgress];\r\n\r\n    const nextNode = questDefinition.nodes[roundedProgress + 1];\r\n    if (!nextNode) {\r\n        // We've reached the last node\r\n        return lastNode;\r\n    }\r\n    return lerpLocation(lastNode, nextNode, quest.progress - roundedProgress);\r\n};\r\n\r\n// Node locations work on a centered coordinate system\r\nconst nodeLocationToPoint = (location: { x: number; y: number; }) => {\r\n    const x = location.x * GRID_WIDTH + WORLD_WIDTH / 2;\r\n    const y = location.y * GRID_WIDTH + WORLD_HEIGHT / 2;\r\n    return new PIXI.Point(x, y);\r\n}\r\n\r\nconst getPreviousPositions = (quest: QuestStoreState) => {\r\n    const positions: PIXI.Point[] = [];\r\n    const questDefinition = getDefinition(quest.name);\r\n\r\n    for (let i = 0; i < quest.progress; i++) {\r\n        positions.push(nodeLocationToPoint(questDefinition.nodes[i]))\r\n    }\r\n    const lastPosition = nodeLocationToPoint(getQuestWorldLocation(quest));\r\n    positions.push(lastPosition);\r\n    return positions;\r\n}","import React from \"react\";\nimport Tabstrip from 'components/ui/tabs/Tabstrip';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport Tab from 'components/ui/tabs/Tab';\nimport AdventurerAvatar from 'components/ui/AdventurerAvatar';\n\ninterface Props {\n    adventurers: AdventurerStoreState[];\n    onAdventurerTabSelected: (adventurer: AdventurerStoreState) => void;\n}\n\n// Shows adventurer portraits in a tabstrip\nconst AdventurerTabstrip = (props: Props) => {\n    const {adventurers, onAdventurerTabSelected} = props;\n\n    const handleAdventurerTabSelected = (adventurerId: string) => {\n        const adventurer = props.adventurers.find(a => a.id === adventurerId)!;\n        onAdventurerTabSelected(adventurer);\n    }\n\n    const renderAdventurerTab = (adventurer: AdventurerStoreState) => (\n        <Tab id={adventurer.id} key={adventurer.id}>\n            <AdventurerAvatar adventurer={adventurer} className=\"common-icon-small\"/>\n        </Tab>\n    );\n    return (\n        <Tabstrip className=\"adventurers-tabstrip\" onTabSelected={handleAdventurerTabSelected} >\n            {adventurers.map((a) => renderAdventurerTab(a))}\n        </Tabstrip>\n    )\n}\n\nexport default AdventurerTabstrip;","import React from \"react\";\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport EquipmentSlot, { EquipmentSlotType } from 'components/ui/EquipmentSlot';\nimport { Item } from 'definitions/items/types';\nimport DraggableItemIcon, { InventoryItemDragInfo } from 'components/ui/DraggableItemIcon';\nimport { DragSourceType } from 'constants/dragging';\nimport { IconSize } from 'constants/icons';\nimport { TextManager } from 'global/TextManager';\n\nexport interface Props {\n    adventurer: AdventurerStoreState\n    onDropItemEquipment: (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => void;\n}\n\nconst AdventurerEquipment = (props: Props) => {\n    const { adventurer, onDropItemEquipment } = props;\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n\n            contents = (\n                <DraggableItemIcon\n                    index={slotType}\n                    sourceId={adventurer.id}\n                    sourceType={DragSourceType.adventurerEquipment}\n                    item={item}\n                    ref={itemRef}\n                    size={IconSize.medium}\n                />\n            );\n        }\n\n        return (\n            <>\n                <EquipmentSlot\n                    onDrop={(dragInfo: InventoryItemDragInfo) => onDropItemEquipment(dragInfo, slotType)}\n                    type={slotType}\n                >\n                    {contents}\n                </EquipmentSlot>\n                <span className=\"info\">{TextManager.get(`ui-equipmentslot-${EquipmentSlotType[slotType]}`)}</span>\n            </>\n        );\n    };\n    return (\n        <ul>\n            <li>{getEquipmentSlot(EquipmentSlotType.head)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.shoulders)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.chest)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.hands)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.legs)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.feet)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.mainHand)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.offHand)}</li>\n        </ul>\n    )\n}\n\nexport default AdventurerEquipment;","import React from \"react\";\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport { EquipmentSlotType } from 'components/ui/EquipmentSlot';\nimport { Item } from 'definitions/items/types';\nimport { InventoryItemDragInfo } from 'components/ui/DraggableItemIcon';\nimport { DragSourceType } from 'constants/dragging';\nimport AdventurerEquipment from './AdventurerEquipment';\nimport Inventory from 'components/ui/inventory/Inventory';\nimport { useDispatch } from 'react-redux';\nimport { Action } from \"redux\";\n\nimport { removeItemFromInventory, assignEquipment, addItemToInventory, removeEquipment, moveItemInInventory } from 'actions/adventurers';\nimport { removeItemFromWarehouse, addItemToWarehouse } from 'actions/items';\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n}\n\n/** Vertical panel showing adventurer info */\nconst AdventurerPanel = (props: Props) => {\n    const { adventurer } = props;\n    const dispatch = useDispatch();\n\n    const renderAttributes = () => Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key={`${adventurer.id}-${stat}`} > <b>{stat}</b>: {value.toFixed(1)} </div>;\n    });    \n\n    // When an item gets dropped on equipment slot\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        const item = dragInfo.item;\n        const actions: Action[] = [];\n\n        switch (dragInfo.sourceType) {\n            // Dragged from inventory\n            case DragSourceType.adventurerInventory: {\n                actions.push(\n                    // Item gets removed from inventory\n                    removeItemFromInventory(adventurer.id, dragInfo.inventorySlot!),\n                    // Item gets assigned to an equipment slot\n                    assignEquipment(adventurer.id, slotType, item),\n                );\n                \n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    // There is already an item in this slot. Place in inventory\n                    actions.push(addItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!));\n                }\n                break;\n            }\n            // Dragged from warehouse. I dont think this can happen in this AdventurerPanel\n            case DragSourceType.warehouse: {\n                actions.push(\n                    removeItemFromWarehouse(dragInfo.inventorySlot!),\n                    assignEquipment(adventurer.id, slotType, item),\n                );            \n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    // There is already an item in this slot. Place in warehouse\n                    actions.push(addItemToWarehouse(existingEquipment, dragInfo.inventorySlot!));\n                }\n                break;\n            }\n\n            // Dragged from equipment slot (only applicable to weapons)\n            case DragSourceType.adventurerEquipment: {\n                actions.push(\n                    assignEquipment(adventurer.id, slotType, item)\n                );\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    actions.push(assignEquipment(adventurer.id, fromSlot, existingEquipment),)\n                } else {\n                    // Clear the slot where it came from\n                    actions.push(removeEquipment(adventurer.id, fromSlot));\n                }\n                break;\n            }\n        }\n        actions.forEach(a => dispatch(a));\n    };\n\n    // When an item gets dropped on the inventory\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        const actions: Action[] = [];        \n        switch (sourceType) {\n            // Drag from one inventory slot to another\n            case DragSourceType.adventurerInventory:\n                actions.push(moveItemInInventory(adventurer.id, fromSlot, toSlot))\n                break;\n\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                actions.push(\n                    removeItemFromWarehouse(fromSlot),\n                    addItemToInventory(adventurer.id, item, toSlot),\n                )\n                const otherItem = adventurer.inventory[toSlot];\n                if (otherItem) {\n                    actions.push(\n                        addItemToWarehouse(otherItem, fromSlot)\n                    )\n                }\n                break;\n            }\n\n            // Drag from equipment slot\n            case DragSourceType.adventurerEquipment: {\n                actions.push(\n                    addItemToInventory(adventurer.id, item, toSlot)\n                );\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    actions.push(assignEquipment(adventurer.id, fromSlot, existingEquipment));\n                } else {\n                    // Clear the slot where it came from\n                    actions.push(removeEquipment(adventurer.id, fromSlot));\n                }\n                break;\n            }\n        }\n        actions.forEach(a => dispatch(a));\n    };\n\n    return (\n        <div className=\"adventurer-panel\">\n            <div className=\"info\">\n                <div className=\"name\">\n                    <b>{adventurer.name}</b>\n                </div>\n                <div className=\"renderAttributes\">\n                    {renderAttributes()}\n                </div>\n            </div>\n                <div className=\"equipment\">\n                    <AdventurerEquipment adventurer={adventurer} onDropItemEquipment={handleDropItemEquipment} />\n                </div>\n            <div className=\"right\">\n                <Inventory\n                    sourceType={DragSourceType.adventurerInventory}\n                    sourceId={adventurer.id}\n                    items={adventurer.inventory}\n                    // className=\"inventory-medium\" //todo!\n                    onDropItem={handleDropItemInventory}\n                /> \n            </div>\n        </div>\n    )\n}\n\nexport default AdventurerPanel;","import { PixiComponent } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport { TiledLayerData, TiledTilesetData } from 'constants/tiledMapData';\n\nwindow.PIXI = PIXI;\n// eslint-disable-next-line import/first\nimport 'pixi-tilemap';\n\n\ninterface Props  {\n    texture: PIXI.Texture;\n    horizontalTiles: number;\n    layer: TiledLayerData;\n    tileset: TiledTilesetData;\n    spritesheet: PIXI.Spritesheet;\n};\n\nconst RectTileLayer = PixiComponent<Props, any>(\"RectTileLayer\", {\n    create(props: Props) {\n        var tileLayer = new window.PIXI.tilemap.CompositeRectTileLayer(0, [props.texture]);\n        return tileLayer;\n    },\n\n    applyProps(instance, oldProps: Props, props: Props) {\n        const {layer, tileset, horizontalTiles,spritesheet} = props;\n        if (!layer.data) {\n            return;\n        }\n        for (let i = 0; i < layer.data.length; i++) {\n            const w = tileset.tilewidth;\n            const h = tileset.tileheight;\n            const x = (i % horizontalTiles) * w;\n            const y = Math.floor(i / horizontalTiles) * h;\n        \n            const spriteId = layer.data[i];\n        \n            if (spriteId > 0) {\n                instance.addFrame(spritesheet.textures[spriteId], x, y);\n            }\n        }\n    }\n});\n\nexport default RectTileLayer;\n\n","import React, { useState } from 'react';\nimport { TiledMapData, TiledLayerData, TiledTilesetData } from 'constants/tiledMapData';\nimport { Container } from '@inlet/react-pixi';\nimport { useEffect } from 'react';\nimport { SpritesheetData, SpriteData } from 'constants/spritesheetData';\nimport RectTileLayer from 'components/pixi/RectTileLayer';\nimport * as PIXI from 'pixi.js';\n\ninterface Props {\n    basePath: string;\n    data: TiledMapData;\n}\n\nconst Tilemap = (props: Props) => {\n    const {basePath, data} = props;\n    const [layers, setLayers] = useState<JSX.Element[]>();\n\n    useEffect(() => {\n        const spritesheetData = parseSpritesheetData(data);\n        const tileset = getTileset(data);\n\n        const texture = PIXI.Texture.from(`${basePath}/${tileset.image}`);\n        const baseTexture = PIXI.BaseTexture.from(`${basePath}/${tileset.image}`);\n        const spritesheet = new PIXI.Spritesheet(baseTexture, spritesheetData);\n        spritesheet.parse(() => {\n            const layers = data.layers.filter(layer => layer.visible).map(layer => {\n                return createTileLayer(layer, texture, data.width, tileset, spritesheet)\n            });\n            setLayers(layers);\n        });\n\n    }, [basePath, data]);\n    return (\n        <Container >\n            {layers}\n        </Container>\n    );\n}\n\nexport default Tilemap;\n\n\nconst getTileset = (mapData: TiledMapData) => {\n    if (!mapData.tilesets.length) {\n        throw new Error(\"No tilesets found! Can't continue\");\n    }\n    if (mapData.tilesets.length > 1) {\n        console.warn(\"Found more than one tileset. But we currently only support one.\");\n    }\n    if (mapData.tilesets[0].source) {\n        throw new Error(\"Please embed tilemaps in Tiled! Can't continue\");\n    }\n    return mapData.tilesets[0];\n}\n\nconst createTileLayer = (layer: TiledLayerData, texture: PIXI.Texture, horizontalTiles: number, tileset: TiledTilesetData, spritesheet: PIXI.Spritesheet) => {\n    return (\n        <RectTileLayer\n            key={layer.name}\n            texture={texture} \n            layer={layer} \n            horizontalTiles={horizontalTiles}\n            tileset={tileset}\n            spritesheet={spritesheet}\n        />\n    );\n    //var tileLayer = new window.PIXI.tilemap.CompositeRectTileLayer(0, [texture]);\n    //const debugContainer = new PIXI.Container();\n        /* Debug\n        var style = {\n            font : 'bold italic 36px Arial',\n            fill : '#F7EDCA',\n            stroke : '#4a1850',\n            strokeThickness : 5,\n            wordWrap : true,\n            wordWrapWidth : 440\n        };\n        var richText = new PIXI.Text(`${i}`, style);\n        richText.x = x;\n        richText.y = y;\n        \n        debugContainer.addChild(richText); */\n    //app.stage.addChild(debugContainer);\n}\n\nconst parseSpritesheetData = (mapData: TiledMapData): SpritesheetData => {\n    const tileset = getTileset(mapData);\n    const columns = tileset.columns;\n\n    const frames: { [name: string]: SpriteData } = {};\n    for (let i = 0; i < tileset.tilecount; i++) {\n        const w = tileset.tilewidth;\n        const h = tileset.tileheight;\n        const x = (i % columns) * w;\n        const y = Math.floor(i / columns) * h;\n\n        frames[`${i + 1}`] = { \n            frame: {x, y, w, h},\n            spriteSourceSize: {x, y, w, h},\n            rotated: false,\n            trimmed: false,\n            sourceSize: { w, h}\n        };\n    }\n    const image = tileset.image;\n    const size = { w: tileset.imagewidth, h: tileset.imageheight };\n    return {\n        frames,\n        meta: {\n            image,\n            size,\n            scale: 1\n        }\n    };\n}","\nimport { PixiComponent, Sprite, applyDefaultProps, Container } from '@inlet/react-pixi';\nimport * as PIXI from 'pixi.js';\nimport React, { useMemo } from 'react';\n\ninterface Props  {\n  tileWidth: number;\n  tileHeight: number;\n  scenePosition?: number[];\n  children: React.ReactNode;\n};\n\nconst SceneObject = (props: Props) => {\n    const { \n        scenePosition = [0, 0],\n        tileWidth = 0, \n        tileHeight = 0,\n        children\n    } = props;\n\n    const { x, y} = useMemo(() => {\n        return { \n            x: scenePosition[0] * tileWidth,\n            y: scenePosition[1] * tileHeight,\n        };\n    }, [scenePosition, tileWidth, tileHeight]);\n\n    return (\n        <Container x={x} y={y}>\n            {children}\n        </Container>\n    )\n}\n\nexport default SceneObject;\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Stage, Graphics, Sprite } from '@inlet/react-pixi';\nimport { TiledMapData } from 'constants/tiledMapData';\nimport Tilemap from './Tilemap';\nimport SceneObject from './SceneObject';\n\nimport * as PIXI from 'pixi.js';\nwindow.PIXI = PIXI;\n// eslint-disable-next-line import/first\nimport 'pixi-tilemap';\n\n\ninterface Props {\n    jsonPath: string;\n}\n\ninterface SceneProps {\n    loaded: boolean;\n    width: number;\n    height: number;\n    tileWidth?: number;\n    tileHeight?: number;\n}\n\nconst DEFAULT_WIDTH = 800;\nconst DEFAULT_HEIGHT = 1000;\n\nconst Scene = (props: Props) => {\n    const [mapData, setMapData] = useState<TiledMapData>();\n    const [actorPosition, setActorPosition] = useState([0, 0]);\n    const { jsonPath } = props;\n\n    useEffect(() => {\n\n        new PIXI.Loader().add(jsonPath).load((loader)=>{            \n            const mapData: TiledMapData = loader.resources[jsonPath].data;\n            setMapData(mapData);\n        });\n    }, [jsonPath]);\n\n    const basePath = jsonPath.substr(0, jsonPath.lastIndexOf('/'));\n\n    const handleClick = (event: PIXI.interaction.InteractionEvent) => {\n        const scenePosition = pointToScenePosition(event.data.global);\n        setActorPosition(scenePosition);\n    }\n\n    const sceneWidth = (mapData?.width || 0) * (mapData?.tilewidth || 0) || DEFAULT_WIDTH;\n    const sceneHeight = (mapData?.height || 0) * (mapData?.tileheight || 0) || DEFAULT_HEIGHT;\n\n\n    const pointToScenePosition = (point: PIXI.Point) => {\n        if (!mapData?.tilewidth || !mapData.tileheight) {\n            return [0, 0];\n        }\n        return [Math.floor(point.x / mapData?.tilewidth ), Math.floor(point.y / mapData?.tilewidth)];\n    }\n\n    return (\n        <Stage width={sceneWidth} height={sceneHeight} >\n            <Container \n                pointertap={handleClick} \n                interactive={true} \n                hitArea={new PIXI.RoundedRectangle(0, 0, sceneWidth, sceneHeight, 0)}\n            >\n                { mapData && (\n                    <Tilemap basePath={basePath} data={mapData} />\n                )}\n\n                { mapData && (\n                    <SceneObject\n                        tileWidth={mapData.tilewidth}\n                        tileHeight={mapData.tilewidth}\n                        scenePosition={actorPosition}\n                    >\n                        <Graphics\n                            name=\"hitarea\"\n                            draw={graphics => {\n                                const line = 3;\n                                graphics.lineStyle(line, 0xFF0000);\n                                graphics.drawRect(line / 2, line / 2, mapData.tilewidth - line / 2, mapData.tileheight - line / 2);\n                                graphics.endFill();\n                            }}\n                        />\n                        <Sprite                     \n                            // x={30}\n                            y={-80}\n                            image={`${process.env.PUBLIC_URL}/img/scene/actors/wizard.png`} \n                        />\n\n                    </SceneObject>\n                )}\n            </Container>\n        </Stage>\n    );\n}\n\nexport default Scene;\n","import React, { useState, useMemo } from \"react\";\nimport \"./css/questPanel.css\";\nimport AdventurerTabstrip from './AdventurerTabstrip';\nimport { createSelectAdventurersOnQuest } from 'selectors/adventurers';\nimport { useSelector } from 'react-redux';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport AdventurerPanel from './AdventurerPanel';\nimport QuestDetails from './QuestDetails';\n\nenum Layout {\n    auto,       // horizontal on large screens, vertical on small screens\n    vertical,   \n    horizontal\n}\n\ninterface Props {\n    questName: string;\n    layout?: Layout;\n}\n\nconst QuestPanel = (props: Props) => {\n    const {layout = Layout.auto} = props;\n    const adventurers = useSelector(createSelectAdventurersOnQuest(props.questName));   \n    const leader = adventurers[0];\n    const [selectedAdventurerID, setSelectedAdventurerID] = useState<string>(leader.id);\n\n    const selectedAdventurer = useMemo(() => {\n        return adventurers.find(a => a.id === selectedAdventurerID);\n    }, [adventurers, selectedAdventurerID]);\n\n    const handleAdventurerSelected = (adventurer: AdventurerStoreState) => {\n        setSelectedAdventurerID(adventurer.id);\n    }\n    \n    //console.log('rendering questpanel' + JSON.stringify(selectedAdventurer?.equipment))\n    \n    return (\n        <div className={`quest-panel quest-panel-${Layout[layout]}`}>\n            <div className=\"quest-area\">\n                <QuestDetails questName={props.questName} />\n            </div>\n            <div className=\"party-area\">\n                <AdventurerTabstrip adventurers={adventurers} onAdventurerTabSelected={handleAdventurerSelected} />\n                <div className=\"adventurer-details\">\n                    { selectedAdventurer && (\n                        <AdventurerPanel adventurer={selectedAdventurer} />\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default QuestPanel;\n","import React from 'react';\nimport Scene from 'components/pixi/Scene';\n\ninterface Props {\n    questName: string;\n}\n\nconst QuestDetails = (props: Props) => {\n    // todo: see QuestDetails.old on how to access quest data\n\n    \n       //     {/* <h1 className=\"app-h2\">{TextManager.getQuestTitle(quest.name)}</h1> */}\n    return (\n        <Scene jsonPath={`${process.env.PUBLIC_URL}/scenes/ork-dungeon-level1.json`} />\n    )\n}\n\nexport default QuestDetails;\n","import SquareIconButton from \"components/ui/buttons/SquareIconButton\";\r\nimport Tab from \"components/ui/tabs/Tab\";\r\nimport Tabstrip from \"components/ui/tabs/Tabstrip\";\r\nimport * as React from \"react\";\r\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/simplelog.css\";\r\nimport { useState } from 'react';\r\nimport { StoreState } from 'stores';\r\nimport { useSelector } from 'react-redux';\r\nimport { QuestStoreState } from 'stores/quest';\r\nimport { selectActiveQuests } from 'selectors/quests';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\nenum ChannelType {\r\n    all,\r\n    town,\r\n    quest,\r\n}\r\n\r\ninterface ChannelDefinition {\r\n    label: string;\r\n    tabType: ChannelType;\r\n    tabId: string;\r\n    channelContext?: string;\r\n}\r\n\r\nconst SimpleLog = (props: Props) => {\r\n\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [selectedTabId, setSelectedTabId] = useState(\"all\");\r\n\r\n    const logEntries = useSelector<StoreState, LogEntry[]>((store) => store.log);\r\n    const activeQuests = useSelector<StoreState, QuestStoreState[]>((store) => selectActiveQuests(store));\r\n\r\n\r\n    const channels: ChannelDefinition[] = [{\r\n        label: TextManager.get(\"common-log-tab-all\"),\r\n        tabId: \"all\",\r\n        tabType: ChannelType.all,\r\n    }, {\r\n        label: TextManager.get(\"common-log-tab-town\"),\r\n        tabId: \"town\",\r\n        tabType: ChannelType.town,\r\n    }];\r\n\r\n    const handleTabSelected = (tabId: string) => {\r\n        setSelectedTabId(tabId);\r\n    }\r\n    \r\n    const handleToggleExpand = () => {\r\n        setExpanded(!expanded);\r\n    }\r\n\r\n    activeQuests.forEach((quest) => {\r\n        const questName = quest.name;\r\n        channels.push({\r\n            channelContext: questName,\r\n            label: TextManager.getQuestTitle(questName),\r\n            tabId: `quest-${questName}`,\r\n            tabType: ChannelType.quest,\r\n        });\r\n    });\r\n\r\n    let displayEntries: LogEntry[] = [];\r\n    const currentTab = channels.find((t) => t.tabId === selectedTabId)!;\r\n    switch (currentTab.tabType) {\r\n        case ChannelType.all:\r\n            // All the things\r\n            displayEntries = logEntries;\r\n            break;\r\n\r\n        case ChannelType.town:\r\n            // Only town\r\n            displayEntries = logEntries.filter((lE) => lE.channel === LogChannel.town);\r\n            break;\r\n\r\n        case ChannelType.quest:\r\n            // Only the selected quest\r\n            displayEntries = logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.channelContext === currentTab.channelContext);\r\n            break;\r\n    }\r\n\r\n    const getLogEntryRow = (logEntry: LogEntry) => {\r\n        const text = TextManager.get(logEntry.key, logEntry.context);\r\n        return <div className = \"entry\" key={ logEntry.time }>\r\n            { text }\r\n        </div>;\r\n    };\r\n\r\n    const Tabs = channels.map((tab) => {\r\n        return <Tab id = { tab.tabId } key = { tab.tabId } >{ tab.label }</Tab>;\r\n    });\r\n\r\n    return <div className = { `log ${expanded ? \"expanded\" : \"\"}` }>\r\n        <div className = \"tab-bar\">\r\n            <Tabstrip className = \"tabs\"  onTabSelected = { (tabId: string) => handleTabSelected(tabId) } >\r\n                { Tabs }\r\n            </Tabstrip>\r\n            <SquareIconButton className = \"expand-button\" onClick = { () => handleToggleExpand() } text = { expanded ? \"▼\" : \"▲\" }/>\r\n        </div>\r\n        <div className = \"log-entries\">\r\n            { displayEntries.map((entry) => getLogEntryRow(entry))}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default SimpleLog;\r\n","import WorldMap from \"components/world/WorldMap\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { MusicTrack, SoundManager, Sound } from \"global/SoundManager\";\r\nimport \"./css/worldView.css\";\r\nimport QuestPanel from './QuestPanel';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\n\r\n/**\r\n * WorldView shows the map and QuestPanel\r\n * @param props\r\n */\r\nconst RealWorldView = () => {\r\n    const worldMapRef = useRef<HTMLDivElement>(null);\r\n    const [selectedQuestName, setSelectedQuestName] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\r\n        SoundManager.playMusicTrack(MusicTrack.world);\r\n    }, []);\r\n\r\n    // const handleMapMove = (distance: number, angle: number) => {\r\n    //     const compassEl = compassRef!.current!;\r\n    //     const compassTextEl = compassEl.firstElementChild! as HTMLElement;\r\n\r\n    //     // Rotate the compass\r\n    //     compassEl.style.transform = `rotate(${angle - (Math.PI / 2)}rad)`;\r\n    //     compassEl.style.opacity = distance > 10 ? \"1\" : \"0\";\r\n    //     compassTextEl.style.transform = `rotate(${-angle + (Math.PI / 2)}rad)`;\r\n    //     compassTextEl.innerHTML = `${distance.toFixed(0)}`;\r\n    // };\r\n\r\n    // const handleCompassClick = () => {\r\n    //     //setScrollToPosition(new Vector2(1, 1));\r\n    // };\r\n\r\n    const handlePartyClick = (questName: string) => {\r\n        if (questName === selectedQuestName) {\r\n            setSelectedQuestName(undefined);\r\n        } else {\r\n            setSelectedQuestName(questName);\r\n        }\r\n        SoundManager.playSound(Sound.buttonClick);\r\n    };\r\n\r\n    const handleRetrieveWorldViewRef = () => {\r\n        return worldMapRef;\r\n    }\r\n\r\n    return (\r\n        <div className=\"world-view\" ref={worldMapRef}>\r\n            {/* <div className=\"compass\" ref={compassRef} onClick={handleCompassClick}>\r\n                <div className=\"distance\"/>\r\n            </div> */}\r\n            <WorldMap\r\n                selectedQuestName={selectedQuestName}\r\n                // onMapMove={handleMapMove}\r\n                smallMap={selectedQuestName != null}\r\n                onPartyClick={handlePartyClick}\r\n                retrieveWorldViewRef={handleRetrieveWorldViewRef}\r\n            />\r\n            { selectedQuestName && (\r\n                <QuestPanel questName={selectedQuestName} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RealWorldView;\r\n","\nimport { subtractGold } from \"actions/gold\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/tooltip/context/ItemContext\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            const structureDefinition = getDefinition(structure);\n\n            dispatch(subtractGold(structureDefinition.cost.gold || 0));\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","import React, { useEffect, useRef, useState } from 'react';\nimport './css/tooltip.css';\nimport { TooltipManager } from 'global/TooltipManager';\n\nconst ARROW_SIZE = 8; // warning: sync to tooltip.css var\nconst PADDING = 8;\n\nexport interface Props {\n    referenceRect: ClientRect;  // place tooltip in reference to this rect\n    placement?: Placement;\n    children?: any;\n}\n\nexport enum Placement {\n    bottom,\n    top,\n    left,\n    right,\n}\n\nexport const Tooltip = (props: Props) => {\n    const {children, referenceRect} = props;\n    const ref = useRef<HTMLDivElement>(null);\n    const [placement, setPlacement] = useState<Placement>(props.placement || Placement.bottom);\n \n    const [containerRect, setContainerRect] = useState<ClientRect>(); // This is the \n\n    useEffect(() => {\n        // Reposition if needed\n        const tooltipElement = ref.current;\n        if (!tooltipElement) return;\n        if (!containerRect) return;\n        const tooltipRect = tooltipElement.getBoundingClientRect();\n\n        // Flip vertically\n        switch (placement) {\n            case Placement.top:\n                if (tooltipRect.top - tooltipRect.height - ARROW_SIZE - PADDING < containerRect!.top) {\n                    // Too high, place underneath\n                    setPlacement(Placement.bottom);\n                    return;\n                }\n                break;\n            case Placement.bottom:\n                if (tooltipRect.top + tooltipRect.height + ARROW_SIZE + PADDING > containerRect!.height ) {\n                    // Too low, place top\n                    setPlacement(Placement.top);\n                    return;\n                }\n                break;\n        }\n        tooltipElement.style.opacity = \"1\"; // animated through css\n\n        const contentElement = tooltipElement.querySelector(\".tooltip-content\") as HTMLElement;\n        if (tooltipRect.left < containerRect!.left + PADDING) {\n            // Check left bounding edge\n            const offset = containerRect!.left - tooltipRect.left + PADDING;\n            contentElement.style.transform = `translateX(${offset}px)`;\n        } else if (tooltipRect.right > containerRect!.right - PADDING) {\n            // Check right bounding edge\n            const offset = tooltipRect.right - containerRect!.right + PADDING;\n            contentElement.style.transform = `translateX(${-offset}px)`;\n        } else {\n            contentElement.style.transform = '';\n        }\n\n    }, [setPlacement, containerRect, placement, referenceRect]);\n\n    const resize = () => {\n        TooltipManager.clear();\n    }\n\n    useEffect(() => {\n        setContainerRect(ref.current?.closest('.app')?.getBoundingClientRect());\n\n        window.addEventListener(\"resize\", resize);\n        return () => {\n            window.removeEventListener(\"resize\", resize);\n        };\n    }, []);\n\n\n    let x: number = 0;\n    let y: number = 0;\n    let className: string = \"\";\n\n    if (containerRect) {\n        switch (placement) {\n            case Placement.bottom:\n                x = referenceRect.left - containerRect!.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect!.top + referenceRect.height;\n                className = \"tooltip-bottom\";\n                break;\n            case Placement.top:\n                x = referenceRect.left - containerRect!.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect!.top;\n                className = \"tooltip-top\";\n                break;\n        }    \n    }\n\n    return (\n        <div className = { `tooltip ${className}` }\n            style = {{\n                left: x,\n                opacity: 0,\n                top: y,\n            }}\n            ref = { ref }\n        >\n            <div className = \"tooltip-arrow\"></div>\n            <div className = \"tooltip-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\n\nexport default Tooltip;\n","\nimport { getDefinition as getApparelDefinition } from \"definitions/items/apparel\";\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport { DamageType, getDefinition as getWeaponDefinition } from \"definitions/items/weapons\";\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = getStructureDefinition(deedInfo.structure);\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n\n        case ItemType.weapon:\n            const weaponDefinition = getWeaponDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    <p> damage: { weaponDefinition.damage[DamageType.kinetic] } </p>\n                </>\n            );\n\n        case ItemType.apparel:\n            const apparelDefinition = getApparelDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    { apparelDefinition.armourRating && <p> armour: { apparelDefinition.armourRating } </p> }\n                </>\n            );\n\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","// tslint:disable: object-literal-sort-keys\r\nimport { ContextInfo, ContextType} from \"constants/context\";\r\nimport CombatView from \"containers/combat/CombatView\";\r\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\r\nimport { AppContextProps} from \"hoc/withAppContext\";\r\nimport { manifest} from \"manifest/app\";\r\nimport * as React from \"react\";\r\nimport { useRef, useState, createContext } from \"react\";\r\nimport { DndProvider} from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { BrowserRouter as Router, Link, Redirect, Route, Switch, HashRouter} from \"react-router-dom\";\r\nimport { Persistor} from \"redux-persist\";\r\nimport { Sound, SoundManager} from \"global/SoundManager\";\r\nimport { TextManager} from \"global/TextManager\";\r\nimport { Structure} from \"../definitions/structures\";\r\nimport \"./css/app.css\";\r\nimport Preloader, { MediaItem, MediaType} from \"./preloading/Preloader\";\r\nimport TownView from './town/TownView';\r\nimport Toasts from './ui/toasts/Toasts';\r\nimport Topbar from './ui/topbar/Topbar';\r\nimport WorldView from './world/WorldView';\r\nimport SimpleLog from './log/SimpleLog';\r\nimport ContextTooltip from './ui/tooltip/ContextTooltip';\r\nimport { TooltipManager } from 'global/TooltipManager';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport enum View {\r\n    Town,\r\n    World,\r\n}\r\n\r\nexport interface Props {\r\n    persistor: Persistor;\r\n}\r\n\r\ninterface SelectedContext {\r\n    contextType: ContextType ;\r\n    contextInfo: ContextInfo;\r\n    contextRect: ClientRect;\r\n}\r\n\r\nconst resolution = {\r\n    height: 860, // 972,\r\n    width: 480,\r\n};\r\n\r\nexport const MAX_WIDTH = 960;\r\n\r\nexport const AppContext = createContext<AppContextProps | null>(null);\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\n\r\nconst App = (props: AllProps) => {\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [media, setMedia] = useState<MediaItem[]>([]);\r\n    const [activeWindows, setActiveWindows] = useState<React.ReactElement[]>([]);\r\n\r\n    const handleViewButtonClick = () => {\r\n        SoundManager.playSound(Sound.buttonClick);\r\n    };\r\n\r\n    const handleResetClick = () => {\r\n        props.persistor.purge();\r\n        (window as any).location.reload();\r\n    };\r\n\r\n    const selectStructure = (structure: Structure | null) => {\r\n        if (structure) {\r\n            const displayName = TextManager.getStructureName(structure);\r\n\r\n            const window = <StructureDetailsView structure={structure} title={displayName}/>;\r\n            handleWindowOpened(window);\r\n\r\n            SoundManager.playSound(Sound.buttonClick);\r\n       }\r\n   };\r\n\r\n    const renderTownView = () => <TownView onStructureClick={selectStructure} />;\r\n    const renderWorldView = () => <WorldView/>;\r\n\r\n    const handleWindowOpened = (window: React.ReactElement) => {\r\n        setActiveWindows([\r\n            ...activeWindows || [],\r\n            window,\r\n        ]);\r\n    };   \r\n\r\n    /**\r\n     * Closes all windows\r\n     */\r\n    const handleWindowClose = () => {\r\n        setActiveWindows([]);\r\n    };\r\n\r\n    /**\r\n     * Closes the top window of the stack\r\n     */\r\n    const handleWindowBack = () => {\r\n        if (activeWindows && activeWindows.length) {\r\n            setActiveWindows(activeWindows.slice(0, -1));\r\n        }\r\n    };\r\n\r\n    const renderWindow = (): React.ReactElement | null => {\r\n        if (!activeWindows.length) {\r\n            return null;\r\n        }\r\n\r\n        const topWindow = activeWindows[activeWindows.length - 1];\r\n        const commonWindowProps = {\r\n            onClose: handleWindowClose,\r\n            onBack: handleWindowBack,\r\n            backEnabled: activeWindows.length > 1,\r\n            closeEnabled: true,\r\n        };\r\n\r\n        const element = React.cloneElement(topWindow, commonWindowProps);\r\n        return element;\r\n    };\r\n\r\n    const handleMediaLoadComplete = (mediaItems: MediaItem[]) => {\r\n        const sounds = mediaItems.filter((m) => m.mediaType === MediaType.sound);\r\n        SoundManager.loadMedia(sounds);\r\n\r\n        SoundManager.addSounds({\r\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\r\n            [Sound.error]: \"sound/fx/error.ogg\",\r\n            // add more sounds here\r\n        });\r\n\r\n        setMedia(mediaItems);\r\n\r\n        // todo: temporary!\r\n        //const window = <CombatView/>;\r\n        //handleWindowOpened(window);\r\n    };\r\n\r\n    const handleAppClick = () => {\r\n        TooltipManager.clear();\r\n    };\r\n\r\n    // const handleResize = () => {\r\n    //     if (containerRef.current) {\r\n    //         if (window.innerHeight < resolution.height) {\r\n    //            // containerRef.current.style.transform = `scale(${Math.min(window.innerWidth / resolution.width, 1)}) translateX(-50%)`;\r\n    //         } else {\r\n    //             //containerRef.current.style.transform = `scale(1) translateX(-50%)`;\r\n    //         }\r\n    //         //const parentBox = containerRef.current.getBoundingClientRect();\r\n    //         //setContainerRect(parentBox);\r\n    //    }\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     // todo: see if we can disable this;\r\n    //     window.addEventListener(\"resize\", handleResize);\r\n    //     handleResize();\r\n    //     return () => {\r\n    //         window.removeEventListener(\"resize\", handleResize);\r\n    //     };\r\n    // }, []);\r\n\r\n    return (\r\n        <AppContext.Provider value={{ \r\n            media, \r\n            onOpenWindow: handleWindowOpened,\r\n        }} >\r\n            <div\r\n                className=\"app\"\r\n                ref={containerRef}\r\n                style={{\r\n                    maxWidth: MAX_WIDTH\r\n                }}\r\n                onClick={handleAppClick}\r\n            >\r\n                <DndProvider backend={HTML5Backend}>\r\n                <HashRouter>\r\n                    <Preloader\r\n                        manifest={manifest}\r\n                        onLoadComplete={handleMediaLoadComplete}\r\n                    >\r\n                        <Topbar/>\r\n                        <div>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact>\r\n                                    <Redirect from=\"/\" to=\"world\" />\r\n                                </Route>\r\n                                <Route path=\"/world\">\r\n                                    <Link to=\"/town\">\r\n                                        <button onClick={() => handleViewButtonClick()}> {TextManager.get(`common-view-button-town`)} </button>\r\n                                    </Link>\r\n                                </Route>\r\n                                <Route path=\"/town\">\r\n                                    <Link to=\"/world\">\r\n                                        <button onClick={() => handleViewButtonClick()}> {TextManager.get(`common-view-button-world`)} </button>\r\n                                    </Link>\r\n                                </Route>\r\n                            </Switch>\r\n                            {` | `}\r\n                            <button data-for=\"global2\" data-tip2 onClick={() => handleResetClick()} style={{ color: \"red\"}}> Restart! </button>\r\n                        </div>\r\n                        <Switch>\r\n                            <Route path=\"/town\" component={renderTownView} />\r\n                            <Route path=\"/world\" component={renderWorldView} />\r\n                        </Switch>\r\n                        <SimpleLog/>\r\n                        {renderWindow()}\r\n                        <ContextTooltip />    \r\n                        <Toasts />\r\n                    </Preloader>\r\n                </HashRouter>\r\n                </DndProvider>\r\n            </div>\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React, { useEffect, useState } from 'react';\nimport { ContextType } from 'constants/context';\nimport { TooltipManager, Context } from 'global/TooltipManager';\nimport { TextManager } from 'global/TextManager';\nimport ItemContext from 'containers/ui/context/ItemContext';\nimport Tooltip from './Tooltip';\nimport './css/contextTooltip.css';\n\nexport interface Props {\n}\n\n// A contextual popup showing what you just clicked. Can be an Item\nconst ContextTooltip = (props: Props) => {\n\n    const [selectedContext, setSelectedContext] = useState<Context | undefined>();\n\n    const tooltipUpdated = (context: Context | undefined) => {\n        setSelectedContext(context);\n    }\n\n    useEffect(() => {\n        TooltipManager.addEventListener(TooltipManager.EVENT_CONTEXT_UPDATED, tooltipUpdated);\n        return () => {\n            TooltipManager.removeEventListener(TooltipManager.EVENT_CONTEXT_UPDATED, tooltipUpdated);\n        }\n    }, []);\n    if (!selectedContext) { return null; }\n\n    const { info, type } = selectedContext;\n    let content;\n\n    switch (type) {\n        case ContextType.item:\n        default:\n            content = <ItemContext info={info} />;\n    }\n\n    const name = TextManager.getItemName(info.item);\n\n    return (\n        <Tooltip referenceRect={selectedContext.referenceRect}>\n            <div className = \"context-tooltip\">\n                <div>{name}</div>\n                {content}\n            </div>\n        </Tooltip>\n    )\n}\nexport default ContextTooltip;\n","import App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import { getDefinition, Structure } from \"definitions/structures\";\r\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\r\nimport { StoreState } from \"stores\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\n\r\n//const RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\r\nconst RESOURCE_INTERVAL = 20000; // every thirty seconds constitutes a resource tick. todo: move to some other shared place\r\n\r\n /*\r\n  * Calculates how many resources are generated by the in the town.\r\n  * Will return a ResourceStoreState with the amount of each resource to add  */\r\nconst getProducedResources = (lastProducedUpdate: number, store: StoreState): ResourceStoreState|null => {\r\n    const structures: StructuresStoreState = store.structures;\r\n    const result: ResourceStoreState = {};\r\n    const factor = ((Date.now() - lastProducedUpdate) / RESOURCE_INTERVAL);\r\n\r\n    // this function can run at different intervals\r\n    // faster or slower than once a minute\r\n    // we will multiply the resource amount by the factor to normalize\r\n    const maxResources = getMaxResources(store);\r\n\r\n    const handleStructure = (structure: string) => {\r\n        const structureDefinition = getDefinition(structure);\r\n\r\n        if (structureDefinition.type === StructureType.resource) {\r\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\r\n            const level: number = structures[structure].level;\r\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\r\n\r\n            // Store all the resources that this structure will generate this tick into `result`\r\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\r\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\r\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\r\n                return accumulator;\r\n            }, result);\r\n        }\r\n    };\r\n\r\n    if (factor < 1) {\r\n        return null;\r\n    }\r\n    // Calculate what each structure generates. Stores in `result`.\r\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\r\n\r\n    // Check if the warehouse can actually hold it\r\n    Object.keys(result).forEach((resource: string) => {\r\n        if (result[resource]) {\r\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\r\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\r\n            }\r\n        }\r\n        //console.log(`Adding: ${resource} ${result[resource]} factor ${factor}`);\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\r\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\r\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\r\n    const level: number = store.structures[Structure.warehouse].level;\r\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\r\n    return levelDefinition.maxResources;\r\n};\r\n\r\nexport default getProducedResources;\r\n","import { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { randomInt } from \"utils/random\";\n\n/**\n * The Oracle is a helper class for retrieving relevant data during encounters\n */\nexport class Oracle {\n    public readonly questName: string;\n    public readonly store: StoreState;\n\n    constructor(questName: string, store: StoreState) {\n        this.questName = questName;\n        this.store = store;\n    }\n\n    /**\n     * Returns the questVars of the quest that this encounter is part of\n     */\n    public get questVars(): any {\n        return this.quest.questVars;\n    }\n\n    /**\n     * Returns the quest that this encounter is part of\n     */\n    public get quest(): QuestStoreState {\n        return this.store.quests.find((q) => q.name === this.questName)!;\n    }\n\n    /**\n     * Returns all adventurers on this quest\n     */\n    public get adventurers(): AdventurerStoreState[] {\n        return adventurersOnQuest(this.store.adventurers, this.quest);\n    }\n\n    /**\n     * Returns the adventurer in the encounter with highest given stat\n     * @param stat\n     */\n    public getAdventurerWithHighest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store.adventurers, this.quest)\n            .concat().sort((a, b) => (b.stats[stat] - a.stats[stat]))[0];\n    }\n\n    /**\n     * Returns the adventurer in the encounter with lowest given stat\n     * @param stat\n     */\n    public getAdventurerWithLowest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store.adventurers, this.quest)\n            .concat().sort((a, b) => (a.stats[stat] - b.stats[stat]))[0];\n    }\n\n    /**\n     * Returns a random adventurer in the party\n     */\n    public getRandomAdventurer(): AdventurerStoreState {\n        return this.adventurers[randomInt(0, this.adventurers.length)];\n    }\n}\n\nexport const oracles: any = {\n    // This will be the global store to hold all oracles, keyed by quest\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addItemToInventory } from \"actions/adventurers\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Item } from \"../items/types\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const backstabbed: EncounterDefinition = {\n    name: Encounter.backstabbed,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-backstabbed-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            fight: \"Fight the brigands\",\n            flight: \"Run away!\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        switch (option) {\n            case \"flight\":\n                return \"You run away like a pussy\";\n            case \"fight\":\n                const finder = oracle.getRandomAdventurer();\n                dispatch(addItemToInventory(finder.id, Item.deedForWeaponsmith));\n                return `The party fights off the rogues. One of them drops a document. ${finder.name} picks it up`;\n            default:\n                throw new Error(`Unhandled option '${option}`);\n        }\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { startEncounter, advanceQuest } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const goblinHouseOutside: EncounterDefinition = {\n    name: Encounter.goblinHouseOutside,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseOutside-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Investigate\",\n            leave: \"Keep walking\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { quest } = oracle;\n        switch (option) {\n            case \"investigate\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            case \"leave\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\nexport const goblinHouseHallway: EncounterDefinition = {\n    name: Encounter.goblinHouseHallway,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseHallway-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Go inside the house\",\n            leave: \"Leave the premise\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"leave\":\n                // const nextEncounter = startEncounter(quest.name, goblinhouseInside)\n                const action = advanceQuest(oracle.questName);\n                dispatch(action);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party escapes the house unscathed`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\n// todo: other goblinHouse encounters\n","import { backstabbed } from \"./backstabbed\";\nimport { goblinHouseHallway, goblinHouseOutside } from \"./goblinHouse\";\nimport { theBigTree } from \"./theBigTree\";\nimport { EncounterDefinition } from \"./types\";\n\nconst all = {\n    backstabbed,\n    goblinHouseHallway,\n    goblinHouseOutside,\n    theBigTree,\n};\n\nexport default all;\n\nexport function getDefinition(encounter: string): EncounterDefinition {\n    return all[encounter];\n}\n","// tslint:disable:object-literal-sort-keys\nimport { addGold } from \"actions/gold\";\nimport { updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { randomInt } from \"utils/random\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\nexport interface QuestVars {\n    treeState: string;\n}\n\nexport const theBigTree: EncounterDefinition = {\n    name: Encounter.theBigTree,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     return `A huge tree blocks the way. ${pyromancer.name} offers to burn it`;\n        // }\n        return { key: \"encounter-thebigtree-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        //const store = oracle.store;\n        const strongest = oracle.getAdventurerWithHighest(\"strength\");\n        //        const strongest = { name: \"<<NAME>>\" };\n        const options: Record<string, string> = {\n            walkAround: \"Walk around the tree\",\n            lift: `Lift the tree (${strongest.name})`,\n        };\n        // todo: should be 'type' or 'class'\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     options.burn = \"Burn it down (${pyromancer.name}\";\n        // }\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"lift\":\n                const strongest = oracle.getAdventurerWithHighest(\"strength\");\n                questVars.treeState = \"lifted\";\n\n                const action = updateQuestVars(quest.name, questVars);\n                dispatch(action);\n\n                const goldAmount = randomInt(2, 5);\n                const goldAction = addGold(goldAmount);\n                dispatch(goldAction);\n\n                // tslint:disable-next-line:max-line-length\n                return `${strongest.name} heaves and lifts the heavy tree, moving it aside. Underneath your party finds ${goldAmount} gold coins`;\n\n                // if(random() < strongest.stats.strenth) {\n                //     questState.bigTreeState = \"lifted\";\n                //     giveGold(3);\n                //     return \"${strongest.name} heaves and lifts the heavy tree,\n                // moving it aside. Underneath your party finds 3 gold coins\";\n                // }\n                // else {\n                //     strongest.loseHealth(20);\n                //     if(strongest.isDead){\n                //         return \"${strongest.name} attempted to lift the\n                // tree but it is too heavy, causing him to die\".\n                //     }\n                //     return \"%{strongest.name} attempted to lift the tree but it is too heavy, losing 20 hp\";\n                // }\n            // case \"burn\":\n            //     const pyrommancer = store.adventurers.find(a => a.type == \"pyromancer\")\n            //     questState.bigTreeState = \"burned\";\n            //     return \"${pyromancer.name} cackles as you sets the tree ablaze.\n            // The party steps over the smouldering ashes and continues\"\n            // }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n","import { TextEntry } from \"constants/text\";\nimport encounterDefintions from \"definitions/encounters\";\nimport { Encounter } from \"definitions/encounters/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { oracles } from \"oracle\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { ToastManager } from 'global/ToastManager';\nimport { TextManager } from 'global/TextManager';\nimport { Type } from 'components/ui/toasts/Toast';\nimport { getQuestLeader } from 'storeHelpers';\n\nexport interface QuestUpdate {\n    name: string;\n    currentEncounter: Encounter | null;\n    progress: number;\n}\n\nexport interface LogUpdate extends TextEntry {\n    key: string;\n    channel: LogChannel;\n    channelContext?: any;\n}\n\ninterface QuestGameTickResponse {\n    questUpdates: QuestUpdate[];\n    logUpdates: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: StoreState): QuestGameTickResponse => {\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the user has to do something to move the quest along\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n\n    store.quests.forEach((quest: QuestStoreState) => {\n        if (quest.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[quest.name];\n        const currentProgress = quest.progress;\n        const currentNodeIndex =  Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            let currentEncounter = quest.currentEncounter;\n\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n                    const encounter = encounterDefintions[nextNode.encounter!];\n                    const oracle = oracles[quest.name];\n                    nextProgress = currentNodeIndex + i;\n                    currentEncounter = nextNode.encounter!;\n                    // Start encounter(encounter)\n                    const questTitle = TextManager.getQuestTitle(quest.name);\n                    const leader = getQuestLeader(store.adventurers, quest);\n                    ToastManager.addToast(questTitle, Type.questEncounter, leader?.avatarImg);\n\n                    // Add quest to log\n                    log.push({\n                        channel: LogChannel.quest,\n                        channelContext: quest.name,\n                        ...encounter.getDescription(oracle),\n                    });\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    currentEncounter = null;\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: quest.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                currentEncounter,\n                name: quest.name,\n                progress: nextProgress,\n            });\n        }\n    });\n\n    return {\n        logUpdates: log,\n        questUpdates: quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ActionType,\n    AssignEquipmentAction,\n    InventoryAction,\n    MoveItemInInventoryAction,\n    MoveItemToOtherAdventurerAction, RemoveEquipmentAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { AdventurerStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\nconst avatarImgBasePath = \"/img/avatars\";\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: {\n        chest: Item.chest,\n        head: Item.cowl,\n    },\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `${avatarImgBasePath}/female/f_14.png`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `${avatarImgBasePath}/male/m_05.png`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, Item.boots1, Item.chainmailHood, Item.nomadHelmet, Item.plateChest4, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null, Item.plateHelmet, Item.cowl],\n}, {\n    id: \"ec6f1050\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `${avatarImgBasePath}/male/m_09.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `${avatarImgBasePath}/male/m_19.png`,\n    inventory: [ null, null, null, null, Item.khopesh, Item.hornedHelmet ],\n}, {\n    id: \"96c686c3\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `${avatarImgBasePath}/male/m_08.png`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Alexis Ortiz \",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `${avatarImgBasePath}/female/f_10.png`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `${avatarImgBasePath}/female/f_16.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `${avatarImgBasePath}/male/m_09.png`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `${avatarImgBasePath}/male/m_26.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null, Item.shoulders1, Item.fedora, Item.greaves2 ],\n}, {\n    id: \"12c613d4\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `${avatarImgBasePath}/male/m_33.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], AnyAction> = (\n    state: AdventurerStoreState[] = testState, action: AnyAction) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null) {\n                        toSlot = inventory.findIndex((val) => val === null || val === undefined);\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.assignEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot, item } = action as AssignEquipmentAction;            \n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: item,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.removeEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot } = action as RemoveEquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: null,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\r\n\r\nexport interface EngineStoreState {\r\n    lastTick: number;\r\n    lastProducedUpdate: number;\r\n}\r\n\r\nexport const initialState: EngineStoreState = {\r\n    lastTick: Date.now(),\r\n    lastProducedUpdate: Date.now()\r\n};\r\n","\r\nimport {  ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\n\r\nconst testState = [\r\n    null,\r\n    null,\r\n    null,\r\n    Item.dagger,\r\n    Item.deedForWeaponsmith,\r\n    null,\r\n    Item.sandwich,\r\n    Item.sandwich,\r\n    null,\r\n    null,\r\n    Item.torch,\r\n    Item.torch,\r\n    null,\r\n    Item.torch\r\n];\r\n\r\n// Items in warehouse\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\r\n                                                 action: AnyAction) => {\r\n    switch (action.type) {\r\n        case ActionType.addItem: {\r\n            // toSlot is optional\r\n            const { item } = (action as AddAction);\r\n            let { toSlot } = (action as AddAction);\r\n            if (toSlot === undefined) {\r\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\r\n                if (toSlot === -1) {\r\n                    // Still not found. Add at end\r\n                    // todo: [07/07/2019] GAME DESIGN\r\n                    return [ ...state, item ];\r\n                }\r\n            }\r\n            return state.map((element, index) => index === toSlot ? item : element);\r\n        }\r\n\r\n        case ActionType.moveItemInWarehouse: {\r\n            const {\r\n                fromSlot,\r\n                toSlot,\r\n            } = (action as MoveItemInWarehouseAction);\r\n\r\n            return state.map((element, index) => {\r\n                // todo: items switch places\r\n                if (index === fromSlot) { return null; }\r\n                if (index === toSlot) { return state[fromSlot]; }\r\n                return element;\r\n            });\r\n        }\r\n        case ActionType.removeItem: {\r\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\r\n\r\n            return state.map((element, index) => index !== fromSlot ? element : null);\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const { key, channel, channelContext, context } = (action as AddLogEntryAction);\n            const time = Date.now();\n            return [{\n                    channel,\n                    channelContext,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, StartEncounterAction, UpdateEncounterResultAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil1.png\",\n    currentEncounter: null,\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil2.png\",\n    currentEncounter: null,\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState,\n                                                   action: AnyAction | GameTickAction) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.advanceQuest:\n            return advanceQuest(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        case ActionType.startEncounter:\n            return startEncounter(state, action as StartEncounterAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (state: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n            };\n        }\n        return qss;\n    });\n};\n\nconst advanceQuest = (state: QuestStoreState[], action: QuestAction) => {\n    // deprecated\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            //const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            // const nextNode = questDefinition.nodes[Math.floor(progress)];\n\n            return {\n                ...qss,\n                progress,\n            };\n        }\n        return qss;\n    });\n};\n\nconst startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                currentEncounter: action.encounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n    if (!questsToUpdate.length) {\n        return state;\n    }\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState, initialState as structureInitialState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n    [Structure.workshop]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: structureInitialState,\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: structureInitialState,\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: structureInitialState,\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: structureInitialState,\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: structureInitialState,\n    [Structure.workshop]: structureInitialState,\n};\n","import { ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, AnyAction> = (state: StructuresStoreState = initialState,\n                                                                     action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","\nimport { ActionType as GameActionType } from \"actions/game\";\nimport {  ActionType, AddAction} from \"actions/tasks\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\n\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { combat } from \"./combat\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    combat,\n    engine,\n    gold,\n    stockpile: items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType, AddCombatActionAction, MoveActorAction } from \"actions/combat\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { barBrawl, CombatStoreState } from \"stores/combat\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const combat: Reducer<CombatStoreState> = (state: CombatStoreState = barBrawl, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startCombatAction:\n            const addAction = action as AddCombatActionAction;\n\n            return {\n                ...state,\n                action: {\n                    actor: addAction.actor,\n                    endsAt: addAction.endsAt,\n                    target: addAction.target,\n                    type: addAction.combatType,\n                },\n            };\n\n        case ActionType.moveActor:\n            const moveAction = action as MoveActorAction;\n\n            // Moves an actor to another position\n            const actors = state.actors.map((a) => {\n                if (a.name === moveAction.actor) {\n                    return {\n                        ...a,\n                        location: moveAction.location,\n                    };\n                }\n                return a;\n            });\n\n            return {\n                ...state,\n                actors,\n            };\n\n            case ActionType.clearCombatAction:\n            // Clears current combat action\n            return {\n                ...state,\n                action: undefined,\n            };\n    }\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\nimport { EngineStoreState, initialState } from \"stores/engine\";\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case GameActionType.gameTick:\r\n\r\n            // Keep track of the last time resources were produced\r\n            const resourcesToAdd = (action as GameTickAction).resources;\r\n            const lastProducedUpdate = resourcesToAdd === null ? state.lastProducedUpdate : Date.now();\r\n            return {\r\n                ...state,\r\n                lastProducedUpdate,\r\n                lastTick: Date.now(),\r\n            };\r\n    }\r\n    return state;\r\n};\r\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n    }\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\nimport { ActionType, AddResources } from \"../actions/resources\";\r\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\r\n                                                       action: AnyAction | GameTickAction) => {\r\n\r\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\r\n        // todo: Check if warehouse can hold it\r\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\r\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\r\n            return accumulator;\r\n        }, {});\r\n    };\r\n\r\n    switch (action.type) {\r\n        case ActionType.addResources: {\r\n            const resourcesToAdd = (action as AddResources).resources;\r\n            return addResources(resourcesToAdd);\r\n        }\r\n        case ActionType.removeResources: {\r\n            const resourcesToRemove = (action as AddResources).resources;\r\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\r\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\r\n                return accumulator;\r\n            }, {});\r\n        }\r\n\r\n        case GameActionType.gameTick: {\r\n            const resourcesToAdd = (action as GameTickAction).resources;\r\n            if (resourcesToAdd === null) {\r\n                return state;\r\n            }\r\n            return addResources(resourcesToAdd);\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","import { ActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, AnyAction> = (state: seedrandomStateType = initialState,\n                                                                  action: AnyAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { ActionType, ModifyWorkersAction } from \"actions\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import axios from \"axios\";\r\nimport updateCombat from \"mechanics/gameTick/combat\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Persistor } from \"redux-persist\";\r\nimport { gameTick } from \"./actions/game\";\r\nimport { addLogEntry } from \"./actions/log\";\r\nimport version from \"./constants/version\";\r\nimport App from \"./containers/App\";\r\nimport \"./index.css\";\r\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\r\nimport getQuestUpdates, { LogUpdate } from \"./mechanics/gameTick/quests\";\r\nimport getRngState from \"./mechanics/gameTick/rngState\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { StoreState } from \"./stores\";\r\nimport { TaskStoreState } from \"./stores/task\";\r\nimport { TasksStoreState } from \"./stores/tasks\";\r\nimport configureStore from \"./utils/configureStore\";\r\nimport * as Random from \"./utils/random\";\r\nimport { TextManager } from \"./global/TextManager\";\r\n\r\nconst TICK_INTERVAL = 2500;\r\n\r\nconst initGame = async () => {\r\n    const axiosResult = await axios.get(`${process.env.PUBLIC_URL}/lang/en-US.json`);\r\n    const texts = axiosResult.data as Record<string, string>;\r\n    TextManager.init(texts);\r\n    Random.init(\"GILLESROX2\");\r\n\r\n    const { store, persistor, isHydrated } = await configureStore();\r\n    if (!isHydrated) {\r\n        startNewGame(store);\r\n    } else {\r\n        continueGame(store);\r\n    }\r\n    runGame(store, persistor);\r\n};\r\n\r\n/**\r\n * Gets called when a player\r\n * @param store\r\n */\r\nconst startNewGame = (store: any) => {\r\n\r\n    store.dispatch(addLogEntry(\"test-game-welcome\"));\r\n    // todo: here is a good place to launch a tutorial or something\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\nconst continueGame = (store: any) => {\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\n// const stopGame = () => {\r\n//     clearTimeout(interval);\r\n// };\r\n\r\nconst runGame = (store: any, persistor: Persistor) => {\r\n    ReactDOM.render((\r\n        <Provider store={store}>\r\n            <App persistor={persistor} />\r\n        </Provider>\r\n    ),\r\n        document.getElementById(\"root\") as HTMLElement,\r\n    );\r\n    registerServiceWorker();\r\n\r\n    const processCompletedTasks = (tasks: TasksStoreState) => {\r\n        const handleCompletedTask = (task: TaskStoreState) => {\r\n            // Fire all callbacks\r\n            task.callbacks.forEach((action) => store.dispatch(action));\r\n        };\r\n\r\n        tasks.completed.forEach((task) => handleCompletedTask(task));\r\n    };\r\n\r\n    // store.dispatch(addGold(400));\r\n\r\n    // TODO: find something less ugly and hacky than this\r\n    //    oracles.kill10b = theBigTree.getOracle(\"kill_10_boars\", store);\r\n    //  oracles[\"retrieve_magic_amulet\"] = backstabbed.getOracle(\"retrieve_magic_amulet\", store);\r\n    const gameLoop = () => {\r\n        const state: StoreState = store.getState();\r\n        const delta = Date.now() - state.engine.lastTick;\r\n\r\n        const logs: LogUpdate[] = [];\r\n        const resourcesUpdates = getProducedResources(state.engine.lastProducedUpdate, state);\r\n        const rngState = getRngState();\r\n        updateCombat(delta, store);\r\n        const { questUpdates, logUpdates } = getQuestUpdates(delta, state);\r\n        logs.push(...logUpdates);\r\n\r\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, questUpdates, logs));\r\n\r\n        processCompletedTasks(state.tasks);\r\n\r\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", LogChannel.common, { item: Item.teeth }));\r\n    };\r\n\r\n    setInterval(gameLoop, TICK_INTERVAL);\r\n};\r\n\r\ninitGame();\r\n"],"sourceRoot":""}