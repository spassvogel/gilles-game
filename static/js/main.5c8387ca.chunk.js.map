{"version":3,"sources":["actions/combat.ts","stores/combat.ts","actions/game.ts","stores/logEntry.ts","actions/log.ts","mechanics/gameTick/combat.ts","utils/version.ts","definitions/items/types.ts","constants/version.tsx","definitions/items/apparel.ts","definitions/structures/types.tsx","definitions/structures/alchemist.tsx","definitions/structures/index.tsx","utils/time.tsx","definitions/production/armour.tsx","definitions/structures/armoursmith.tsx","definitions/structures/garden.tsx","definitions/structures/lumberMill.tsx","definitions/structures/mine.tsx","definitions/structures/quarry.tsx","definitions/structures/tannery.tsx","definitions/structures/tavern.tsx","definitions/structures/warehouse.tsx","definitions/production/weapons.tsx","definitions/structures/weaponsmith.tsx","definitions/structures/weaver.tsx","definitions/production/questItems.tsx","definitions/structures/workshop.tsx","definitions/items/deeds.ts","definitions/items/weapons.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","global/TextManager.ts","definitions/resources.tsx","components/ui/items/ItemsBox.tsx","containers/ui/context/items/ItemsCostBox.tsx","constants/context.ts","constants/icons.ts","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","global/EventEmitter.ts","global/TooltipManager.ts","components/ui/ItemIcon.tsx","components/ui/Progressbar.tsx","actions/gold.ts","actions/items.ts","actions/resources.ts","actions/structures.ts","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/StructureViewHeader.tsx","components/structures/ProductionStructureView.tsx","stores/task.ts","selectors/workers.tsx","containers/structures/ProductionStructureView.tsx","actions/quests.ts","constants/dragging.ts","components/ui/AdventurerAvatar.tsx","components/ui/DraggableAdventurerAvatar.tsx","definitions/encounters/types.ts","definitions/quests/index.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","containers/structures/tavern/QuestBoard.tsx","stores/quest.ts","components/ui/DraggableItemIcon.tsx","components/ui/EquipmentSlot.tsx","actions/adventurers.ts","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/ui/AdventurerInfo.tsx","containers/ui/AdventurerInfo.ts","components/ui/buttons/SquareIconButton.tsx","components/ui/window/Window.tsx","hoc/withWindow.tsx","components/ui/window/windows/AdventurerInfoWindow.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","components/ui/resources/ResourcesBox.tsx","components/ui/tabs/Tab.tsx","components/ui/tabs/Tabstrip.tsx","hooks/usePrevious.ts","stores/resources.ts","components/structures/warehouse/WarehouseStructureView.tsx","storeHelpers/index.tsx","selectors/adventurers.tsx","containers/structures/warehouse/WarehouseStructureView.tsx","stores/structure.ts","components/structures/ResourceStructureView.tsx","components/StructureDetailsView.tsx","containers/structures/StructureDetailsView.tsx","global/SoundManager.ts","manifest/app.tsx","components/preloading/Preloader.tsx","components/preloading/Indicator.tsx","components/ui/toasts/Toast.tsx","components/pixi/Viewport.tsx","utils/hitAreaShapes.ts","components/town/structures/LumberMill/index.tsx","components/pixi/ParticleEmitter.ts","components/town/structures/Tavern/index.tsx","components/town/TownView.tsx","global/ToastManager.tsx","components/ui/toasts/Toasts.tsx","actions/index.ts","components/ui/window/windows/CheatWindow.tsx","constants/resources.ts","containers/windows/CheatWindow.tsx","components/ui/window/windows/MenuWindow.tsx","hoc/withAppContext.tsx","components/ui/topbar/Resourcebar.tsx","utils/number.ts","components/ui/topbar/Topbar.tsx","utils/pixiJs.ts","components/world/WorldMap/MapGrid.tsx","components/world/WorldMap/QuestMarker.tsx","components/world/WorldMap/QuestLine.tsx","selectors/quests.tsx","components/world/WorldMap/index.tsx","utils/random.ts","components/world/QuestPanel/AdventurerTabstrip.tsx","components/world/QuestPanel/AdventurerEquipment.tsx","components/world/QuestPanel/AdventurerPanel.tsx","oracle/index.tsx","definitions/encounters/backstabbed.ts","definitions/encounters/goblinHouse.ts","definitions/encounters/index.ts","definitions/encounters/theBigTree.ts","components/pixi/TileMap.tsx","components/log/SimpleLog.tsx","components/world/QuestPanel/QuestDetails.tsx","components/world/QuestPanel/index.tsx","components/world/WorldView.tsx","containers/ui/context/ItemContext.tsx","components/ui/tooltip/Tooltip.tsx","components/ui/tooltip/context/ItemContext.tsx","components/App.tsx","components/ui/tooltip/ContextTooltip.tsx","containers/App.tsx","mechanics/gameTick/producedResources.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","stores/engine.ts","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/structures.ts","reducers/structures.ts","stores/tasks.ts","reducers/tasks.ts","reducers/index.ts","reducers/combat.ts","reducers/engine.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","index.tsx"],"names":["ActionType","Allegiance","CombatActionType","LogChannel","barBrawl","actors","allegiance","player","health","location","name","remainingAP","turn","updateCombat","delta","store","actor","combat","getState","action","endsAt","Date","now","enemy","type","move","dispatch","target","moveActor","clearCombatAction","addLogEntry","key","context","channel","common","channelContext","ItemType","Item","asInt","semVer","parts","split","map","part","Number","length","Error","forEach","numericVersion","i","convertSemVerToInt","ApparelType","itemType","apparel","basePath","StructureType","all","boots1","item","equipmentType","feet","subText","iconImg","boots2","boots3","chainmailHood","head","armourRating","chest","clothGloves","hands","cowl","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","Structure","alchemist","production","cost","gold","time","levels","displayName","workerCapacity","produces","formatDuration","unit","moment","format","trim","resources","wood","iron","ONE_MINUTE","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","stone","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","torch","sandwich","workshop","getDefinition","structure","WeaponType","DamageType","deed","deedForLumbermill","deedForWeaponsmith","material","arrowheads","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","gunpowder","scales","spring","thread","questItem","questItemDefinitions","blueprints","crate","dynamite","dragonEye","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","tusk","vase","vial","weeds","trinket","trinketDefinitions","magicAmulet","ring","weapon","weaponDefinitions","battleAxe","weaponType","axe","damage","kinetic","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","deeds","questItems","trinkets","weapons","TextManager","texts","precompile","this","templates","compileAll","initialized","template","getTemplate","console","error","textEntry","get","compile","Object","keys","value","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","Resource","itemArticleUndefined","getItemName","articleTemplate","noun","ItemsBox","props","itemsInInventory","className","aggregate","items","reduce","accumulator","current","listItems","amount","listItemClass","filter","itemDescription","itemsDescription","style","backgroundImage","process","connect","ownProps","tmpWarehouse","stockpile","found","findIndex","splice","removed","push","ContextType","IconSize","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","workers","getClassName","size","smallest","small","medium","big","biggest","EventEmitter","eventName","listener","events","event","fn","TooltipManager","info","originRect","referenceRect","deepEquals","lastContext","clear","emit","EVENT_CONTEXT_UPDATED","undefined","ItemIcon","itemDefinition","warn","onClick","showContext","currentTarget","getBoundingClientRect","showContextTooltip","stopPropagation","Progressbar","val","min","max","progress","label","width","UpDownValue","displayValue","upDisabled","e","onUp","downDisabled","onDown","StructureViewHeader","ProductionStructureView","useState","selectedItem","setSelectedItem","workersAssigned","setWorkersAssigned","structureDefinition","level","levelDefinition","getStructureName","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","find","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","indexOf","costItemsContent","display","workersFree","craftingTime","formatted","makeTimeString","onCraft","createCraftingDetails","tasks","t","startTime","timeRemaining","addGold","subtractGold","addItemToWarehouse","toSlot","addItem","removeItemFromWarehouse","fromSlot","removeItem","addResources","finishBuildingStructure","upgradeStructure","increaseWorkers","decreaseWorkers","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","createSelector","state","structures","acc","structureStore","running","productionDefinition","removeResources","craftItem","town","advanceQuest","quest","questName","startEncounter","encounter","DragSourceType","DragType","AdventurerAvatar","adventurer","avatarImg","id","spec","beginDrag","sourceId","sourceType","adventurerInventory","Encounter","QuestNodeType","DragSource","monitor","connectDragSource","dragSource","isDragging","kill10Boars","nodes","x","y","nothing","log","goblinHouseOutside","backstabbed","boss","retrieveMagicAmulet","requiredItems","theBigTree","DropTarget","drop","onDrop","getItem","canDrop","connectDropTarget","dropTarget","isOver","AssignAdventurers","slots","content","assignedAventurers","onRemoveAdventurer","onAddEventurer","availableSlots","slotsContent","QuestBoard","questListContent","availableQuests","q","iconImgPath","icon","selectedQuestName","onQuestClick","getQuestTitle","checkEnoughItems","questDefinition","every","amountRequired","fullParty","a","enoughItems","canLaunch","getQuestDescription","onAddAdventurer","ItemsCostBox","onLaunchQuest","getQuestDetails","QuestStatus","EquipmentSlotType","inventorySlot","index","itemAndEquipmentSlotMatch","equipmentSlotType","checkEquipment","mainHand","offHand","borderColor","title","children","dragInfo","adventurerEquipment","isActive","classNames","join","Inventory","contents","slot","iconSize","onDropItem","AdventurerInfo","attributes","stats","stat","toFixed","getEquipmentSlot","slotType","equipment","itemRef","React","ref","onRemoveItemFromInventory","onAssignEquipment","existingEquipment","onAddItemToInventory","onAssignEquipmentFromWarehouse","onAddItemToWarehouse","onRemoveEquipment","handleDropItemEquipment","equipmentList","inventory","onMoveItemInInventory","otherItem","onMoveItemFromWarehouseToInventory","moveItemInInventory","adventurerId","addItemToInventory","removeItemFromInventory","assignEquipment","equipmentSlot","removeEquipment","mapDispatchToProps","add","remove","assign","switchItem","adventurers","SquareIconButton","text","Window","BackButton","backEnabled","onBack","CloseButton","closeEnabled","onClose","withWindow","WrappedComponent","compose","TavernStructureView","setAassignedAdventurers","selectedQuest","setSelectedQuest","AppContext","roomCount","getAvailableQuests","quests","status","available","getQuestByAdventurer","values","party","handleAdventurerNameClick","window","AdventurerInfoWindow","onOpenWindow","roomContent","room","assigned","createRooms","handleQuestClick","copy","handleAddAdventurer","handleRemoveAdventurer","launchQuest","deltaResources","getStructure","Tab","active","Tabstrip","initialSelectedTab","activeTab","setActiveTab","Children","child","cloneElement","handleTabClick","tabId","onTabSelected","usePrevious","useRef","useEffect","initialState","empty","WAREHOUSE","WarehouseStructureView","selectedAdventurer","setSelectedAdventurer","resourcesDelta","setResourcesDelta","previousResources","resourcesRef","classList","setTimeout","onMoveItemInWarehouse","onMoveItemFromAdventurer","adventurersInTown","adventurersOnQuest","findAdventurerById","getQuestLeader","leaderId","storeIsRehydrated","rngState","getAdventurers","getQuests","selectAdventurersInTown","foundInParty","groupedAdventurers","foundAdventurers","StructureState","moveItemInWarehouse","onMoveItemToAdventurer","NotBuilt","ResourceStructureView","useSelector","useDispatch","handleWorkersDown","handleWorkersUp","createWorkersRow","handleUpgrade","generatesText","createGeneratesRow","StructureDetails","Building","buildTask","renderContent","MusicTrack","Sound","media","StructureDetailsView","manifest","MediaType","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","url","sound","play","track","hasOwnProperty","fade","nextMusic","playing","loop","Indicator","itemsLoaded","itemsTotal","Math","floor","Type","loadImage","image","Image","src","Promise","resolve","reject","check","naturalWidth","removeEventListener","complete","addEventListener","getType","toLowerCase","endsWith","Preloader","completed","setCompleted","setItemsLoaded","loadMedia","indicator","promises","loadItem","catch","err","then","results","onLoadComplete","mediaType","Howl","Viewport","forwardRef","app","useApp","cursor","renderer","plugins","interaction","cursorStyles","pointer","PixiComponentViewport","PixiComponent","create","viewport","PixiViewport","screenWidth","screenHeight","worldWidth","worldHeight","ticker","on","drag","pinch","wheel","clamp","direction","clampZoom","minScale","maxScale","decelerate","HitAreaShapes","shapes","sprite","definition","shape","PIXI","contains","LumberMill","atlas","hitAreaShapes","polygons","textures","setTextures","loader","load","_","rotation","setRotation","useTick","r","interactive","buttonMode","pointertap","onStructureClick","hitArea","texture","anchor","ParticleEmitter","applyProps","instance","oldProps","newProps","config","newP","applyDefaultProps","emitter","_emitter","particles","from","elapsed","performance","tick","raf","requestAnimationFrame","update","willUnmount","cancelAnimationFrame","Tavern","smoke","TownView","addMusicTrack","playMusicTrack","handleStructureClick","dragging","onScroll","preventDefault","passive","MAX_WIDTH","height","options","sharedLoader","reverse","Toast","achievementUnlocked","typeText","alt","ToastManager","stack","EVENT_TOASTS_UPDATED","toast","lifeTime","Toasts","activeToasts","setActiveToasts","toastsUpdated","toastConfig","CheatWindow","itemSelectRef","cheats","setCheats","structureDef","getStructureDefinition","levelDef","checked","Built","onChange","handleChangeStructureState","getStructureRow","getItemOption","isNaN","getItemTypeOptions","onCheatStructureState","addToast","cheat","evt","onCheatGold","onCheatWorkers","onCheatResources","onCheatItem","resourceOrder","setStructureState","addWorkers","Consumer","Resourcebar","storeProps","createItem","number","digits","SI_SYMBOL","tier","log10","suffix","scale","pow","scaled","formatNumber","Topbar","useContext","lerp","n1","n2","alpha","MapGrid","Graphics","gridWidth","lineStyle","moveTo","lineTo","endFill","didMount","parent","point","beginFill","drawCircle","addChild","addListener","nearestX","round","world","nearestY","nodeLocation","toNodeLocation","QuestMarker","leader","encounterActive","position","selected","avatar","maskGraphics","CIRCLE_DIAMETER","mask","pointerdown","QuestLine","positions","draw","graphics","xc","yc","quadraticCurveTo","getLog","selectActiveQuests","generator","WorldMap","retrieveWorldViewRef","smallMap","questSelector","useCallback","activeQuests","WIDTH","canvasWidth","setCanvasWidth","canvasHeight","setCanvasHeight","resize","worldView","worldViewWidth","clientWidth","worldViewHeight","clientHeight","SMALL_HEIGHT","focusOnQuestingParty","viewportRef","nodeLocationToPoint","moveCenter","partyLocation","getQuestWorldLocation","previousPositions","getPreviousPositions","currentPosition","questNode","onPartyClick","point1","point2","roundedProgress","lastNode","nextNode","WORLD_WIDTH","WORLD_HEIGHT","lastPosition","AdventurerTabstrip","onAdventurerTabSelected","AdventurerEquipment","onDropItemEquipment","createRef","AdventurerPanel","actions","random","dirty","randomInt","ceil","Oracle","concat","sort","b","questVars","oracles","getOracle","getDescription","oracle","getOptions","fight","flight","answer","option","finder","getRandomAdventurer","investigate","leave","goblinHouseHallway","strongest","getAdventurerWithHighest","walkAround","lift","treeState","vars","updateQuestVars","goldAmount","Orientation","RenderOrder","tiledPath","ChannelType","TileMap","getTileCoordsByGid","cell","layerData","mapData","data","path","dirname","replace","baseUrl","mapWidth","mapHeight","tileset","tilesets","getTileset","tileSize","imagewidth","tilewidth","imageheight","tileheight","layer","layers","mapSize","fromBuffer","Uint8Array","parseLayer","baseTexture","scaleMode","NEAREST","mipmap","OFF","shader","view","geometry","addAttribute","tileMesh","QuestDetails","l","getQuestDefinition","message","handleEncounterOptionClick","result","nodeIndex","updateEncounterResult","getTextEntry","getEncounterDefinition","currentEncounter","descriptionTextEntry","descriptionText","o","data-tip","data-for","drawRect","QuestPanel","horizontal","selectedAdventurerID","setSelectedAdventurerID","useMemo","RealWorldView","worldMapRef","setSelectedQuestName","SimpleLog","expanded","setExpanded","selectedTabId","setSelectedTabId","logEntries","channels","tabType","displayEntries","currentTab","lE","Tabs","tab","handleTabSelected","entry","logEntry","getLogEntryRow","Placement","handleStartConstruction","startBuildingStructure","buildStructure","deedInfo","enoughGold","weaponDefinition","apparelDefinition","getApparelDefinition","View","Tooltip","placement","bottom","setPlacement","containerRect","setContainerRect","tooltipElement","tooltipRect","top","opacity","contentElement","querySelector","left","offset","transform","right","closest","ContextTooltip","selectedContext","setSelectedContext","tooltipUpdated","createContext","App","containerRef","setMedia","activeWindows","setActiveWindows","handleViewButtonClick","playSound","buttonClick","selectStructure","handleWindowOpened","handleWindowClose","handleWindowBack","slice","Provider","maxWidth","DndProvider","backend","HTML5Backend","basename","mediaItems","addSounds","exact","to","data-tip2","persistor","purge","reload","color","component","WorldView","topWindow","commonWindowProps","renderWindow","getMaxResources","getProducedResources","lastProducedUpdate","factor","resourceStructureDefinition","handleStructure","getQuestUpdates","questDefinitions","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","encounterDefintions","questTitle","questEncounter","logUpdates","questUpdates","getRngState","Random","isLocalhost","Boolean","hostname","match","register","navigator","URL","toString","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","generateRandomStats","strength","perception","endurance","charisma","intelligenge","agility","luck","testState","lastTick","gameTick","lU","encounterResults","reward","qss","questsToUpdate","questToUpdate","structureInitialState","updateStructureState","structureState","createTask","combineReducers","element","moveItemToOtherAdventurer","fromAdventurerId","toAdventurerId","fromAdventurer","startCombatAction","addAction","combatType","moveAction","engine","GameActionType","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","initial","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","initGame","axios","axiosResult","init","seed","seedrandom","configureStore","continueGame","startNewGame","runGame","ReactDOM","document","getElementById","registerServiceWorker","processCompletedTasks","handleCompletedTask","setInterval","logs","resourcesUpdates"],"mappings":"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","file":"static/js/main.5c8387ca.chunk.js","sourcesContent":["// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { CombatActionType } from \"stores/combat\";\n\nexport enum ActionType {\n    clearCombatAction = \"clearCombatAction\",\n    startCombatAction = \"startCombatAction\",\n    moveActor = \"moveActor\",\n}\n\nexport interface AddCombatActionAction extends Action<ActionType> {\n    combatType: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport interface MoveActorAction extends Action<ActionType> {\n    actor: string;\n    location: number[];\n}\n\nexport function startCombatAction(type: CombatActionType, actor: string, target: number[], endsAt: number): AddCombatActionAction {\n    return {\n        type: ActionType.startCombatAction,\n        combatType: type,\n        actor,\n        target,\n        endsAt,\n    };\n}\n\nexport function moveActor(actor: string, location: number[]): MoveActorAction {\n    return {\n        type: ActionType.moveActor,\n        actor,\n        location,\n    };\n}\n\nexport function clearCombatAction(): Action<ActionType> {\n    // currently there is only one combat possible. so only one needs to be cleared\n    return {\n        type: ActionType.clearCombatAction,\n    };\n}\n","export interface CombatStoreState {\n    actors: Actor[];\n    turn: Allegiance;\n    action?: CombatAction;\n}\n\nexport interface Actor {\n    name: string;\n    allegiance: Allegiance;\n    location: number[];\n    health: number;\n    remainingAP: number;\n}\n\nexport enum Allegiance {\n    player,\n    enemy,\n}\n\nexport interface CombatAction {\n    type: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport enum CombatActionType {\n    move = \"move\",\n    slash = \"slash\",\n    shoot = \"shoot\",\n}\n\nexport const barBrawl: CombatStoreState = {\n    actors: [{\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [3, 5],\n        name: \"c4a5d270\",\n        remainingAP: 5,\n    }, {\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [4, 6],\n        name: \"2e655832\",\n        remainingAP: 4,\n    }],\n    turn: Allegiance.player,\n};\n","import { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\r\nimport { Action } from \"redux\";\r\nimport { State as seedrandomStateType } from \"seedrandom\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\n\r\nexport enum ActionType {\r\n    gameTick = \"gameTick\",\r\n}\r\nexport interface GameTickAction extends Action<ActionType> {\r\n    delta: number;\r\n    rngState: seedrandomStateType | null;\r\n    resources: ResourceStoreState | null;\r\n    quests: QuestUpdate[];\r\n    log: LogUpdate[];\r\n}\r\n\r\n// export type IncrementResource = IncrementResource // | others\r\n\r\n// tslint:disable: align\r\nexport function gameTick(delta: number,\r\n    rngState: seedrandomStateType | null,\r\n    resources: ResourceStoreState | null,\r\n    quests: QuestUpdate[],\r\n    log: LogUpdate[],\r\n): GameTickAction {\r\n    return {\r\n        type: ActionType.gameTick,\r\n        delta,\r\n        rngState,\r\n        resources,\r\n        quests,\r\n        log,\r\n    };\r\n}\r\n","import { TextEntry } from \"constants/text\";\n\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry extends TextEntry {\n    time: number;\n    channel: LogChannel;\n    channelContext?: string;\n}\n","// tslint:disable: object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { LogChannel } from \"stores/logEntry\";\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface AddLogEntryAction extends Action<ActionType> {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n    channelContext?: string;\n}\n\nexport function addLogEntry(key: string, context?: any, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        key,\n        channel,\n        channelContext,\n        context,\n    };\n}\n","import { clearCombatAction, moveActor } from \"actions/combat\";\nimport { Store } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Allegiance, CombatAction, CombatActionType } from \"stores/combat\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface CombatUpdate  {\n    // todo: maybe this is not needed\n    action: CombatAction | null;\n}\n\nconst updateCombat = (delta: number, store: Store<StoreState>): CombatUpdate | null => {\n    const state = store.getState();\n    const combat = state.combat;\n    if (combat.action) {\n        const action = combat.action;\n        if (action.endsAt < Date.now()) {\n            if (combat.turn === Allegiance.enemy) {\n                /* if (apLeft(enemy))\n                determine next action\n                else\n                players turn now\n                */\n            } else if (combat.turn === Allegiance.player) {\n                switch (combat.action.type) {\n                    case CombatActionType.move:\n                        store.dispatch(moveActor(combat.action.actor, combat.action.target));\n                        store.dispatch(clearCombatAction());\n                        break;\n                    default:\n                        break;\n                }\n                return {\n                    action: null,\n                };\n            }\n        }\n    }\n    return null;\n};\n\nexport default updateCombat;\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    // eslint-disable-next-line no-mixed-operators\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","\nexport enum ItemType {\n    deed,\n    apparel,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    arrowheads = \"arrowheads\",\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    gunpowder = \"gunpowder\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dragonEye = \"dragonEye\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    sandwich = \"sandwich\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.4\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","// tslint:disable:object-literal-sort-keys\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.apparel;\nconst basePath = \"/img/items/apparel/\";\n\nexport enum ApparelType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface ApparelDefinition extends ItemDefinition {\n    equipmentType: ApparelType;\n    armourRating?: number;\n}\n\nconst all: Record<string, ApparelDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n        armourRating: 3,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n        armourRating: 2,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n        armourRating: 20,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n        armourRating: 10,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n        armourRating: 10,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default all;\n\nexport function getDefinition<T extends ApparelDefinition>(apparel: string): T {\n    return all[apparel] as T;\n}\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n                                  // todo: REMOVE\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { StructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport weaver from \"./weaver\";\nimport workshop from \"./workshop\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n    workshop = \"workshop\",\n}\n\nconst all = {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n    workshop,\n};\n\nexport default all;\n\nexport function getDefinition<T extends StructureDefinition>(structure: string): T {\n    return all[structure] as T;\n}\n","import * as moment from \"moment\";\nimport \"moment-duration-format\";\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\n\nexport const formatDuration = (time: number, unit: moment.DurationInputArg2 = \"milliseconds\" ): string => {\n    return moment.duration(time, unit)\n        .format(\"d [days] h [hours] m [min] s [sec]\", {\n        trim: \"both\",\n    });\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { stone: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { stone: 4 },\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { stone: 6 },\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n\nexport default weaver;\n","// tslint:disable:object-literal-sort-keys\n// todo: maybe 'quest items' is not the right name\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const torch: ProductionDefinition = {\n    item: Item.torch,\n    cost: {\n        resources: { wood: 2, fabric: 1 },\n        time: time.ONE_MINUTE,\n    },\n};\n\nexport const sandwich: ProductionDefinition = {\n    item: Item.sandwich,\n    cost: {\n        resources: { food: 1 },\n        time: time.ONE_MINUTE / 2,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { sandwich, torch } from \"definitions/production/questItems\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst workshop: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ torch, sandwich ],\n    }, {\n        // level 2:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }, {\n        // level 4:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\nexport default workshop;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\nexport enum DamageType {\n    kinetic = \"kinetic\",\n}\n\nexport interface DamageDefinition {\n    [DamageType.kinetic]: number | undefined;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n    damage: DamageDefinition;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n        damage: { [DamageType.kinetic]: 20 },\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \" Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n        damage: { [DamageType.kinetic]: 3 },\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n        damage: { [DamageType.kinetic]: 5 },\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n        damage: { [DamageType.kinetic]: 25 },\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n        damage: { [DamageType.kinetic]: 2 },\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n        damage: { [DamageType.kinetic]: 12 },\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 14 },\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n        damage: { [DamageType.kinetic]: 16 },\n    },\n};\nexport default weaponDefinitions;\n\nexport function getDefinition<T extends WeaponDefinition>(weapon: string): T {\n    return weaponDefinitions[weapon] as T;\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.arrowheads]: {\n        item: Item.arrowheads,\n        itemType,\n        iconImg: `${basePath}arrowheads.png`,\n    },\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.gunpowder]: {\n        item: Item.gunpowder,\n        itemType,\n        iconImg: `${basePath}gunpowder.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.dragonEye]: {\n        item: Item.dragonEye,\n        itemType,\n        iconImg: `${basePath}dragon-eye.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.sandwich]: {\n        item: Item.sandwich,\n        itemType,\n        iconImg: `${basePath}sandwich.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import apparel from \"./apparel\";\nimport deeds from \"./deeds\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...apparel,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import { TextEntry } from \"constants/text\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\nimport { Structure } from \"definitions/structures\";\nimport * as Handlebars from \"handlebars\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTextEntry(textEntry: TextEntry): string {\n        return this.get(textEntry.key, textEntry.context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    public static getStructureName(structure: Structure): string {\n        return this.get(`structure-${structure}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: Item, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: Item) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n};\n","import \"components/ui/css/common/icon.css\";\nimport itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items, to be used as requirements for something\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const aggregate = props.items.reduce((accumulator: object, current: Item) => {\n        if (!accumulator[current]) {\n            accumulator[current] = 0;\n        }\n        accumulator[current]++;\n        return accumulator;\n    }, {});\n\n    const listItems = Object.keys(aggregate).map((key: string) => {\n        const item = key as Item;\n        const amount = aggregate[key] as number;\n        let listItemClass = \"item\";\n\n        // Check if we have enough\n        const amountInInventory = itemsInInventory ? itemsInInventory.filter((i) => i === item).length : 0;\n        if (amount > amountInInventory) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className = { listItemClass } key = { item }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage: `url(${process.env.PUBLIC_URL}${itemDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { `${TextManager.getItemName(item)} (${ amount })` }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    const tmpWarehouse = [ ...store.stockpile];\n    ownProps.items.forEach((item: Item) => {\n        const found = tmpWarehouse.findIndex((i) => i === item);\n        if (found > -1) {\n            // Remove the item from tmpWarehouse and add to itemsInInventory\n            const [ removed ] = tmpWarehouse.splice(found, 1);\n            if (removed) {\n                itemsInInventory.push(removed);\n            }\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextPopup\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","export enum IconSize {\r\n    smallest,\r\n    small,\r\n    medium,\r\n    big,\r\n    biggest,\r\n}\r\n\r\nexport const getClassName = (size?: IconSize): string => {\r\n    switch (size) {\r\n        case IconSize.smallest:\r\n            return \"common-icon-smallest\";\r\n        case IconSize.small:\r\n            return \"common-icon-small\";\r\n        case IconSize.medium:\r\n            return \"common-icon-medium\";\r\n        case IconSize.big:\r\n            return \"common-icon-big\";\r\n        case IconSize.biggest:\r\n            return \"common-icon-biggest\";\r\n    }\r\n    return getClassName(IconSize.medium);\r\n};\r\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${process.env.PUBLIC_URL}${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    // Each additional worker shaves off 10% of the production time\n    return time - (.1 * time * (workers - 1));\n};\n","function EventEmitter<TEventType>() {\n    abstract class EventEmitter {\n        static events = {};\n        \n        static addEventListener (eventName: string, listener: (event: TEventType) => void) {\n            this.events[eventName] = this.events[eventName] || [];\n            this.events[eventName].push(listener);\n        }\n\n        static removeEventListener (eventName: string, listener: (event: TEventType) => void) {\n            if (this.events[eventName]) {\n                for (var i = 0; i < this.events[eventName].length; i++) {\n                    if (this.events[eventName][i] === listener) {\n                        this.events[eventName].splice(i, 1);\n                        break;\n                    }\n                };\n            }\n        }\n\n        protected static emit (eventName: string, event: TEventType | undefined) {\n            if (this.events[eventName]) {\n                this.events[eventName].forEach((fn: (event: TEventType | undefined) => any) => fn(event));\n            }\n        }\n    }\n    return EventEmitter;\n}\n\nexport default EventEmitter;","import { ContextInfo, ContextType } from 'constants/context';\nimport deepEquals from 'deep-equal';\nimport EventEmitter from './EventEmitter';\n\nexport interface Context {\n    type: ContextType;\n    info: ContextInfo;\n    referenceRect: ClientRect;\n}\n\nexport abstract class TooltipManager extends EventEmitter<Context>() {\n\n    static EVENT_CONTEXT_UPDATED = \"tooltipContextUpdated\";\n    private static lastContext: Context | undefined; \n\n    static showContextTooltip (type: ContextType, info: ContextInfo, originRect: ClientRect) {\n        const context = { type, info, referenceRect: originRect};\n\n        if(deepEquals(context, this.lastContext)) {\n            this.clear();\n        } else {\n            this.emit(this.EVENT_CONTEXT_UPDATED, context);\n            this.lastContext = context;  \n        }\n    }\n    \n    static clear() {\n        this.emit(this.EVENT_CONTEXT_UPDATED, undefined);   \n        this.lastContext = undefined;    \n    }\n}","import \"components/ui/css/common/icon.css\";\nimport { ContextType } from \"constants/context\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\nimport { TooltipManager } from 'global/TooltipManager';\n\nexport interface Props {\n    item: Item;\n    onClick?: (event: React.MouseEvent) => void;\n    size?: IconSize;\n    showContext?: boolean;\n}\n\nconst ItemIcon: React.FC<Props> = (props) => {\n    const { item } = props;\n    const itemDefinition = getDefinition(item);\n\n    if (!itemDefinition) {\n        // tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    const handleClick = (event: React.MouseEvent) => {\n        if (props.showContext !== false) {\n            const origin = (event.currentTarget as HTMLElement);\n            const originRect = origin.getBoundingClientRect();\n            TooltipManager.showContextTooltip(ContextType.item, getDefinition(item), originRect);\n            event.stopPropagation();\n        }\n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    };\n\n    const className = `item-icon ${getClassName(props.size)}`;\n\n    return (\n        <div className={className}\n            onClick = {handleClick}\n            style = {{\n                backgroundImage: `url(${process.env.PUBLIC_URL}${itemDefinition.iconImg})`,\n            }}>\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps { }\nexport interface Props extends DispatchProps {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nconst Progressbar = (props: Props) => {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{ props.label }</div>\n            <div className=\"progressbar-info\" style= {{ width: `${progress * 100}%`}}>  </div>\n        </div>\n    );\n};\n\nexport default Progressbar;\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","import { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface ModifyGoldAction extends Action<ActionType> {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","import { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface MoveItemInWarehouseAction extends Action<ActionType> {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface AddResources extends Action<ActionType> {\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { Action } from \"redux\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface StructureAction extends Action<ActionType> {\n    structure: Structure;\n}\nexport interface StructureStateAction extends StructureAction {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends StructureAction {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action, AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface AddAction extends Action<ActionType> {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: (e: React.MouseEvent) => void;\n    onDown?: (e: React.MouseEvent) => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = (e: React.MouseEvent) => {\n        if (props.onUp && !props.upDisabled) { props.onUp(e); }\n    };\n\n    const handleDown = (e: React.MouseEvent) => {\n        if (props.onDown && !props.downDisabled) { props.onDown(e); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import React from \"react\";\nimport { Structure } from 'definitions/structures';\nimport \"./css/structureviewheader.css\";\n\ninterface Props {\n    structure: Structure;\n}\n\nconst StructureViewHeader = (props: Props) => {\n    //const displayName = TextManager.getStructureName(props.structure);\n    return (\n        <div className={`structureview-header structureview-header-${props.structure}`}>\n            {/* <h1 className=\"app-h1-white\">{displayName}</h1> */}\n        </div>\n    );\n}\n\nexport default StructureViewHeader;","import MaterialsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"global/TextManager\";\nimport { formatDuration } from \"utils/time\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport \"./css/productionstructureview.css\";\nimport { useState } from 'react';\nimport StructureViewHeader from './StructureViewHeader';\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Array<Item | null>;  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ProductionStructureView = (props: AllProps) => {\n\n    const [selectedItem, setSelectedItem] = useState<Item>();\n    const [workersAssigned, setWorkersAssigned] = useState<number>(0);\n\n\n    const structureDefinition = getDefinition<ProductionStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type}\n            with type ProductionStructureDefinition.`);\n    }\n    const level: number =   props.level || 0;\n    const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(props.type);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick = { handleClick }\n                disabled= { !canUpgrade } >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createCraftTabs = () => {\n\n        return levelDefinition.produces.map((produces) => {\n            const handleSelectCraftingItem = (e: React.MouseEvent) => {\n                e.stopPropagation();\n\n                setSelectedItem(produces.item);\n            };\n\n            return <li\n                key = { `craft${produces.item}`}\n                onClick = { handleSelectCraftingItem }\n                className = { selectedItem === produces.item ? \"selected\" : \"\" }\n            >\n                <ItemIcon item= { produces.item }  />\n                { TextManager.getItemName(produces.item) }\n            </li>;\n        });\n    };\n\n    const createCraftingDetails = () => {\n        const item = selectedItem;\n        if (!item) { return null; }\n\n        const produces = levelDefinition.produces.find((p) => p.item === item)!;\n        const playerResources = props.resources || {};\n        const costResources = produces.cost.resources!;\n        const missingAtLeastOneResource = Object.keys(costResources)\n            .some((resource) => costResources[resource] > playerResources[resource]);\n\n        let missingAtLeastOneItem = false;\n        const costMaterials = produces.cost.materials;\n        if (costMaterials) {\n            missingAtLeastOneItem = costMaterials\n                .some((i: Item) => props.items.indexOf(i) === -1);\n        }\n\n        const disabled = missingAtLeastOneResource || missingAtLeastOneItem || workersAssigned < 1;\n        // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n        const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n        const makeTimeString = (time: number): string => {\n            if (workersAssigned === 0) {\n                return \"\";\n            }\n            const craftingTime = calculateProductionTime(time, workersAssigned);\n            const formatted = formatDuration(craftingTime);\n            return ` Crafting time: ${formatted}`;\n        };\n\n        const handleClick = (e: React.MouseEvent) => {\n            e.stopPropagation();\n\n            if (props.onCraft) {\n                props.onCraft(produces, workersAssigned);\n                setWorkersAssigned(0);\n            }\n        };\n\n        const handleUp = (e: React.MouseEvent) => {\n            e.stopPropagation();\n            setWorkersAssigned(workersAssigned + 1);\n        };\n\n        const handleDown = (e: React.MouseEvent) => {\n            e.stopPropagation();\n            setWorkersAssigned(workersAssigned - 1);\n        };\n\n        let costItemsContent = null;\n        if (costMaterials) {\n            costItemsContent = <MaterialsCostBox items = { costMaterials } />;\n        }\n        return (\n            <div className = \"crafting-details\">\n                Craft a { TextManager.getItemName(itemDefinition.item) }\n                <div className = \"crafting-costs\">\n                    <fieldset>\n                        <ResourcesCostBox resources = { costResources } />\n                    </fieldset>\n                    <fieldset>\n                        { costItemsContent }\n                    </fieldset>\n                </div>\n                <div style={ { display: \"flex \"}}>\n                    <UpDownValue\n                        value = { workersAssigned }\n                        label ={ \"Workers: \" }\n                        onUp = { handleUp }\n                        onDown = { handleDown }\n                        upDisabled={\n                            workersAssigned >= props.workersFree ||\n                            workersAssigned >= MAX_WORKERS_CRAFTING\n                        }\n                        downDisabled={ workersAssigned < 1 }\n                    />\n                    &nbsp;\n                    { makeTimeString(produces.cost.time || 0) }\n                </div>\n                <div>\n                    <button\n                        disabled = { disabled }\n                        onClick = { handleClick }>\n                        Craft\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    const createProgressbars = () => {\n        const tasks = props.tasks || [];\n        return tasks.map((t) => <Progressbar\n            key = { `${t.name}${t.startTime}` }\n            label = { `${t.name} (${formatDuration(t.timeRemaining)})` }\n            progress = { t.progress }/>,\n        );\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <>\n            <StructureViewHeader structure={props.type} />\n\n            <details open = { true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            { createCraftTabs() }\n                        </ul>\n                        { createCraftingDetails() }\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        { createProgressbars() }\n                    </fieldset>\n                </section>\n            </details>\n        </>\n    );\n}\n\nexport default ProductionStructureView;\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    return {\n        gold: store.gold,\n        items: store.stockpile,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ProductionStructureView);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Action } from \"redux\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",\n    advanceQuest = \"advanceQuest\",\n    updateQuestVars = \"updateQuestVars\",\n    updateEncounterResult = \"updateEncounterResult\",\n    startEncounter = \"startEncounter\",\n    updateQuests = \"updateQuests\",\n}\n\nexport interface QuestAction extends Action<ActionType> {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface StartEncounterAction extends QuestAction {\n    encounter: Encounter;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Move to the next node */\nexport function advanceQuest(quest: string): QuestAction {\n    return {\n        type: ActionType.advanceQuest,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\nexport function startEncounter(quest: string, encounter: Encounter): StartEncounterAction {\n    return {\n        type: ActionType.startEncounter,\n        questName: quest,\n        encounter,\n    };\n}\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurerInventory,\n    warehouse,\n    tavern,\n    adventurerEquipment,\n}\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${process.env.PUBLIC_URL}${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport * as React from \"react\";\r\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\r\nimport \"./css/draggableadventureravatar.css\";\r\n\r\nexport interface Props {\r\n    sourceId?: string;\r\n    onClick?: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface CollectedProps {\r\n    isDragging: boolean;\r\n    connectDragSource: ConnectDragSource;\r\n}\r\n\r\nexport interface AdventurerAvatarDragInfo {\r\n    adventurer: AdventurerStoreState;\r\n    sourceId?: string;\r\n}\r\n\r\n/**\r\n * Specifies the drag source contract.\r\n * Only `beginDrag` function is required.\r\n */\r\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\r\n    beginDrag(props: Props & AdventurerAvatarProps) {\r\n        // Return the data describing the dragged item\r\n        return {\r\n            adventurer: props.adventurer,\r\n            sourceId: props.sourceId,\r\n            sourceType: DragSourceType.adventurerInventory,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging(),\r\n    };\r\n}\r\n\r\nconst DraggableAdventurerAvatar = (props: Props & CollectedProps & AdventurerAvatarProps) => {\r\n\r\n    const { isDragging, connectDragSource, disabled } = props;\r\n    let className = \"draggable-adventurer-avatar\";\r\n    if (disabled) {\r\n        className += \" disabled\";\r\n    }\r\n    if (isDragging) {\r\n        className += \" dragging\";\r\n    }\r\n\r\n    /*if (isDragging) {\r\n        // TODO: can show some sort of empty state?\r\n        return null;\r\n    }*/\r\n    return connectDragSource(\r\n        <div className = { className }>\r\n            <AdventurerAvatar\r\n                // Copy all props down to AdventurerAvatar\r\n                { ...props }\r\n            />\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\r\n","import { TextEntry } from \"constants/text\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nexport interface EncounterDefinition {\n    name: Encounter;\n    getOracle: (questName: string, store: StoreState) => Oracle;\n    chance?: number;    // number from 0 to 1, undefined means: 1\n    getDescription: (oracle: Oracle) => TextEntry;\n    getOptions: (oracle: Oracle) => Record<string, string>;\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => string;\n}\n\nexport enum Encounter {\n    backstabbed = \"backstabbed\",\n    goblinHouseHallway = \"goblinHouseHallway\",\n    goblinHouseOutside = \"goblinHouseOutside\",\n    theBigTree = \"theBigTree\",\n}\n","import { Item } from \"definitions/items/types\";\r\nimport { Encounter } from \"../encounters/types\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\n\r\nexport enum QuestNodeType {\r\n    nothing = 0,    // Nothing much going on here\r\n    encounter = 1,\r\n    combat = 2,     // Not implemented\r\n    boss = 3,\r\n}\r\n\r\nexport interface QuestDefinition {\r\n    nodes: QuestNode[];\r\n    requiredItems?: Item[];\r\n}\r\n\r\nexport interface QuestNode {\r\n    x: number;\r\n    y: number;\r\n    type: QuestNodeType;\r\n    encounter?: Encounter; // TODO: or array of encounters\r\n    log?: string;      // this text will appear in the log upon entering the node. only at 'nothing' nodes\r\n}\r\n\r\nconst kill10Boars: QuestDefinition = {\r\n    nodes: [{\r\n        x: 0,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n        log: \"quest-kill10Boars-node0\",\r\n    }, {\r\n        x: 0,\r\n        y: 2,\r\n        type: QuestNodeType.nothing,\r\n        log: \"quest-kill10Boars-node1\",\r\n    // }, {\r\n    //     x: 0,\r\n    //     y: 3,\r\n    //     type: QuestNodeType.nothing,\r\n    //     log: \"In the distance, a forest looms\",\r\n    }, {\r\n        x: 0,\r\n        y: 3,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.goblinHouseOutside,\r\n    }, {\r\n        x: 1,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n        log: \"quest-kill10Boars-node4\",\r\n    }, {\r\n        x: 1,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 2,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 3,\r\n        y: 3,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.backstabbed,\r\n    }, {\r\n        x: 4,\r\n        y: 4,\r\n        type: QuestNodeType.nothing,\r\n        log: \"The party spots a boss\",\r\n    }, {\r\n        x: 5,\r\n        y: 4,\r\n        type: QuestNodeType.boss,\r\n    }],\r\n};\r\n\r\nconst retrieveMagicAmulet: QuestDefinition = {\r\n    requiredItems: [\r\n        Item.torch,\r\n        Item.torch,\r\n        Item.torch,\r\n        Item.sandwich,\r\n        Item.sandwich,\r\n    ],\r\n    nodes: [{\r\n        x: 0,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 2,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 3,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 4,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 5,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 7,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 8,\r\n        y: 2,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 8,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 9,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 2,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 3,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 4,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 11,\r\n        y: 5,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 6,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 7,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 13,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 12,\r\n        y: 9,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 11,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 10,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 9,\r\n        y: 8,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 8,\r\n        y: 9,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 7,\r\n        y: 8,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.theBigTree,\r\n    }, {\r\n        x: 8,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 1,\r\n        y: 1,\r\n        type: QuestNodeType.nothing,\r\n    }, {\r\n        x: 2,\r\n        y: 1,\r\n        type: QuestNodeType.encounter,\r\n        encounter: Encounter.backstabbed,\r\n    }, {\r\n        x: 3,\r\n        y: 1,\r\n        type: QuestNodeType.boss,\r\n    }],\r\n};\r\n\r\n// const fulruhmRaid: QuestDefinition = {\r\n//     nodes: [{\r\n//         x: -4,\r\n//         y: -1,\r\n//         type: QuestNodeType.nothing,\r\n//     }, {\r\n//         x: -4,\r\n//         y: -1,\r\n//         type: QuestNodeType.nothing,\r\n\r\nconst all = {\r\n    kill10Boars,\r\n    retrieveMagicAmulet,\r\n};\r\n\r\nexport default all;\r\n\r\nexport function getDefinition(quest: string): QuestDefinition {\r\n    return all[quest];\r\n}\r\n","import { DragType } from \"constants/dragging\";\r\nimport * as React from \"react\";\r\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\r\nimport \"./css/droppableadventurerslot.css\";\r\n\r\nconst dropTarget: DropTargetSpec<Props> = {\r\n    drop(props: Props, monitor: DropTargetMonitor) {\r\n        props.onDrop(monitor.getItem());\r\n    },\r\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\r\n        return true; // todo: can't drop on yourself\r\n    },\r\n};\r\n\r\nexport interface Props {\r\n    onDrop: (item: any) => void;\r\n}\r\n\r\nexport interface DropSourceProps {\r\n    canDrop: boolean;\r\n    isOver: boolean;\r\n    connectDropTarget: ConnectDropTarget;\r\n}\r\n\r\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\r\n    canDrop: monitor.canDrop(),\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver(),\r\n});\r\n\r\n/*\r\n * Can drop adventurers on this */\r\nconst DroppableAdventurerSlot = (props: Props & DropSourceProps) => {\r\n    const {\r\n        isOver,\r\n        canDrop,\r\n        connectDropTarget,\r\n    } = props;\r\n    // const isActive = isOver && canDrop;\r\n    let className = \"droppable-adventurer-slot\";\r\n\r\n    if (isOver) {\r\n        className += \" active-drop\";\r\n    } else if (canDrop) {\r\n        className += \" can-drop\";\r\n    }\r\n\r\n    return connectDropTarget(\r\n        <div className = { className }>\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DropTarget<Props, DropSourceProps>(\r\n    DragType.ADVENTURER,\r\n    dropTarget,\r\n    collect,\r\n)(DroppableAdventurerSlot);\r\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAddEventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (index: number) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = <AdventurerAvatar adventurer = { adventurer } displayName = { false } onClick = { () => props.onRemoveAdventurer(i) }/> ;\n                className = \"has-adventurer\";\n            } else {\n                content = <DroppableAdventurerSlot onDrop = { (item: AdventurerAvatarDragInfo) => { props.onAddEventurer(item, i); }} />;\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return <ul className = \"assign-adventurers\">\n        { slotsContent() }\n    </ul>;\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport ItemsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, QuestDefinition } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"global/TextManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\n\nconst availableSlots = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface StateProps {\n    items: Array<Item | null>;  // items in inventory\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {}\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName: string | null;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n\n    onQuestClick: (questName: string) => void;\n    onRemoveAdventurer: (index: number) => void;\n    onAddAdventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onLaunchQuest: () => void;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\nconst QuestBoard = (props: AllProps) => {\n\n    const questListContent: JSX.Element[] = props.availableQuests.map((q) => {\n        const iconImgPath = `${process.env.PUBLIC_URL}img/sigils/${q.icon }`;\n        const className = \"quest\" + ((q.name === props.selectedQuestName) ? \" selected\" : \"\");\n        return <li key={ q.name } className = { className } onClick = { () => { props.onQuestClick(q.name); } }>\n            <div\n                className = \"icon\"\n                style={{backgroundImage: `url(${process.env.PUBLIC_URL}${iconImgPath})`}}\n            ></div>\n            <div className = \"title\">{ TextManager.getQuestTitle(q.name) } </div>\n        </li>;\n    });\n\n    const getQuestDetails = () => {\n        if (!props.selectedQuestName) {\n            return null;\n        }\n        const quest = props.availableQuests.find((q) => q.name === props.selectedQuestName);\n        if (!quest) {\n            return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n        }\n        const questDefinition = getDefinition(quest.name);\n\n        // Need a full party to launch\n        const fullParty = props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n        // Check if we have the required items\n        const enoughItems = checkEnoughItems(questDefinition);\n\n        const canLaunch = fullParty && enoughItems;\n\n        return <div className=\"quest-details\">\n            { TextManager.getQuestDescription(props.selectedQuestName) }\n            <AssignAdventurers\n                availableSlots = { availableSlots }\n                assignedAventurers = { props.assignedAventurers }\n                onRemoveAdventurer = { props.onRemoveAdventurer }\n                onAddEventurer = { props.onAddAdventurer } />\n            <ItemsCostBox items = { questDefinition.requiredItems || [] }/>\n            <button disabled = { !canLaunch } onClick = { () => props.onLaunchQuest() }>\n                { TextManager.get(\"structure-tavern-button-launch-quest\") }\n            </button>\n        </div>;\n    };\n\n    /**\n     * Returns true if all the items required by the quest are in the inventory */\n    const checkEnoughItems = (questDefinition: QuestDefinition): boolean => {\n        if (!questDefinition.requiredItems) {\n            return true;\n        }\n        return questDefinition.requiredItems.every((item: Item) => {\n            const amountRequired = (questDefinition.requiredItems)!.filter((i) => i === item).length;\n            return props.items.filter((i) => i === item).length >= amountRequired;\n        });\n    }\n\n    // quest board, expanded quest info + assign adventurers + launch button\n    return (\n        <div className = \"quest-board\">\n            <h2> { TextManager.get(\"structure-tavern-title-quest-board\") }</h2>\n            <ul className = \"quest-list\">\n                { questListContent }\n            </ul>\n            { getQuestDetails() }\n        </div>\n    );\n}\n\nexport default QuestBoard;\n","import QuestBoard, { Props, StateProps } from \"components/structures/tavern/QuestBoard\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        items: store.stockpile,\n    };\n}\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(QuestBoard);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];        // list of adventurer ids\n    progress: number;       // Which questnode the party is at currently\n    questVars: any;\n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    icon: string;\n\n    currentEncounter: Encounter | null;\n    reward?: QuestReward;\n}\n","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport { IconSize } from \"constants/icons\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\r\nimport ItemIcon from \"./ItemIcon\";\r\n\r\nexport interface Props {\r\n    index: number;\r\n    item: Item;\r\n    sourceType: DragSourceType;\r\n    sourceId?: string;\r\n    size?: IconSize;\r\n    onClick?: (event: React.MouseEvent) => void;\r\n}\r\n\r\ninterface CollectedProps {\r\n    isDragging: boolean;\r\n    connectDragSource: ConnectDragSource;\r\n}\r\n\r\nexport interface InventoryItemDragInfo {\r\n    item: Item;\r\n    inventorySlot?: number;\r\n    sourceId?: string;\r\n    sourceType: DragSourceType;\r\n}\r\n\r\n/**\r\n * Specifies the drag source contract.\r\n * Only `beginDrag` function is required.\r\n */\r\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\r\n    beginDrag(props: Props) {\r\n        // Return the data describing the dragged item\r\n        return {\r\n            inventorySlot: props.index,\r\n            item: props.item,\r\n            sourceId: props.sourceId,\r\n            sourceType: props.sourceType,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging(),\r\n    };\r\n}\r\n\r\nconst DraggableItemIcon = (props: Props & CollectedProps) => {   \r\n\r\n    const { item, onClick, isDragging, connectDragSource, size } = props;\r\n    const handleClick = (event: React.MouseEvent) => {\r\n        if (onClick) {\r\n            onClick(event);\r\n        }\r\n    };\r\n    if (isDragging) {\r\n        // TODO: can show some sort of empty state?\r\n        return null;\r\n    }\r\n    return connectDragSource((\r\n        <div>\r\n            <ItemIcon\r\n                item={item}\r\n                onClick={handleClick}\r\n                size={size}\r\n            />\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\r\n","// todo: hooks!\n// https://github.com/react-dnd/react-dnd/pull/1244\nimport { DragType } from \"constants/dragging\";\nimport { getDefinition } from \"definitions/items\";\nimport { ApparelDefinition, ApparelType } from \"definitions/items/apparel\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/equipmentslot.css\";\nimport { InventoryItemDragInfo } from \"./DraggableItemIcon\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        const item = monitor.getItem().item;\n\n        return itemAndEquipmentSlotMatch(item, props.type);\n    },\n};\n\nexport enum EquipmentSlotType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n    mainHand,\n    offHand,\n}\n\n// Returns true if item can be slotted in equipmentSlotType\nexport const itemAndEquipmentSlotMatch = (item: Item, equipmentSlotType: EquipmentSlotType) => {\n    switch (equipmentSlotType) {\n        case EquipmentSlotType.chest:\n            return checkEquipment(item, ApparelType.chest);\n         case EquipmentSlotType.feet:\n            return checkEquipment(item, ApparelType.feet);\n        case EquipmentSlotType.hands:\n            return checkEquipment(item, ApparelType.hands);\n        case EquipmentSlotType.head:\n            return checkEquipment(item, ApparelType.head);\n        case EquipmentSlotType.legs:\n            return checkEquipment(item, ApparelType.legs);\n        case EquipmentSlotType.mainHand:\n        case EquipmentSlotType.offHand:\n            const itemDefinition = getDefinition(item);\n            if (itemDefinition.itemType !== ItemType.weapon) {\n                return false;\n            }\n\n            // todo: prevent shields to be equipped in main hand\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport interface Props {\n    type: EquipmentSlotType;\n    onDrop: (item: InventoryItemDragInfo) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The EquipmentSlot displays a slot in which an item can be placed.\n */\nconst EquipmentSlot = (props: React.PropsWithChildren<Props & DropSourceProps>) => {\n    const {\n        isOver,\n        canDrop,\n        connectDropTarget,\n    } = props;\n    const isActive = isOver && canDrop;\n    let borderColor = \"grey\";\n    if (isActive) {\n        borderColor = \"green\";\n    } else if (canDrop) {\n        borderColor = \"orange\";\n    }\n\n    return connectDropTarget(\n        <div className = \"equipment-slot\" style = { { borderColor }} title={EquipmentSlotType[props.type]}>\n            { props.children }\n        </div>,\n    );\n};\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(EquipmentSlot);\n\nconst checkEquipment = (item: Item, equipmentType: ApparelType) => {\n    const itemDefinition = getDefinition(item);\n    if (itemDefinition.itemType !== ItemType.apparel) {\n        return false;\n    }\n    return (itemDefinition as ApparelDefinition).equipmentType === equipmentType;\n};\n","import { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n    assignEquipment = \"assignEquipment\",\n    removeEquipment = \"removeEquipment\",\n}\n\nexport interface AdventurerAction extends Action<ActionType> {\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends AdventurerAction {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends AdventurerAction {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends AdventurerAction {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends AdventurerAction {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport interface AssignEquipmentAction extends AdventurerAction {\n    item: Item;\n    equipmentSlot: EquipmentSlotType;\n}\nexport interface RemoveEquipmentAction extends AdventurerAction {\n    equipmentSlot: EquipmentSlotType;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n\nexport function assignEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item): AssignEquipmentAction {\n    return {\n        type: ActionType.assignEquipment,\n        adventurerId,\n        item,\n        equipmentSlot,\n    };\n}\n\nexport function removeEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType): RemoveEquipmentAction {\n    return {\n        type: ActionType.removeEquipment,\n        adventurerId,\n        equipmentSlot,\n    };\n}\n","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport { getClassName, IconSize } from \"constants/icons\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\r\nimport { InventoryItemDragInfo } from \"../DraggableItemIcon\";\r\nimport { itemAndEquipmentSlotMatch } from \"../EquipmentSlot\";\r\n\r\nconst dropTarget: DropTargetSpec<Props> = {\r\n    drop(props: Props, monitor: DropTargetMonitor) {\r\n        props.onDrop(monitor.getItem());\r\n    },\r\n    canDrop(props: Props, monitor: DropTargetMonitor) {\r\n        const dragInfo: InventoryItemDragInfo = monitor.getItem();\r\n        if (dragInfo.sourceType === DragSourceType.adventurerEquipment) {\r\n            return props.item == null || itemAndEquipmentSlotMatch(props.item, dragInfo.inventorySlot!);\r\n        }\r\n        return true;\r\n    },\r\n};\r\n\r\nexport interface Props {\r\n    item: Item | null;\r\n    onDrop: (item: any) => void;\r\n    size?: IconSize;\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport interface DropSourceProps {\r\n    canDrop: boolean;\r\n    isOver: boolean;\r\n    connectDropTarget: ConnectDropTarget;\r\n}\r\n\r\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\r\n    canDrop: monitor.canDrop(),\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver(),\r\n});\r\n\r\n/**\r\n * The InventorySlot displays a slot in which an item can be placed.\r\n */\r\nconst InventorySlot = (props: Props & DropSourceProps) => {\r\n    const {\r\n        isOver,\r\n        canDrop,\r\n        connectDropTarget,\r\n    } = props;\r\n    const isActive = isOver && canDrop;\r\n\r\n    const classNames = [\r\n        \"inventory-item\",\r\n        getClassName(props.size),\r\n    ];\r\n\r\n    if (isActive) {\r\n        classNames.push(\"drop-active\");\r\n    } else if (canDrop) {\r\n        classNames.push(\"drop-possible\");\r\n    }\r\n\r\n    return connectDropTarget(\r\n        <div className = { classNames.join(\" \") }>\r\n            { props.children }\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DropTarget<Props, DropSourceProps>(\r\n    DragType.ITEM,\r\n    dropTarget,\r\n    collect,\r\n)(InventorySlot);\r\n","import DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport {Item} from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    iconSize?: IconSize;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n    className?: string;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n        };\n\n        if (item) {\n            contents = (\n                <DraggableItemIcon\n                    index={i}\n                    sourceId={props.sourceId}\n                    sourceType={props.sourceType}\n                    item={item}\n                />\n            );\n       }\n\n        const slot = (\n            <InventorySlot\n                key={`inventory-slot-${i}`}\n                item={item}\n                size={props.iconSize}\n                onDrop={handleDrop}\n            >\n                {contents}\n            </InventorySlot>\n        );\n        slots.push(slot);\n   }\n    return (\n        <div className={`inventory ${props.className}`}>\n            {slots}\n        </div>\n    );\n};\nexport default Inventory;\n","import { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/adventurerinfo.css\";\nimport DraggableItemIcon, { InventoryItemDragInfo } from \"./DraggableItemIcon\";\nimport EquipmentSlot, { EquipmentSlotType } from \"./EquipmentSlot\";\nimport Inventory from \"./inventory/Inventory\";\nimport { TooltipManager } from 'global/TooltipManager';\n\nexport interface Props {\n    adventurerId: string;\n}\n\nexport interface DispatchProps {\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => void;\n    onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => void;\n    onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => void;\n    onMoveItemFromWarehouseToInventory: (adventurerId: string, fromSlot: number, toSlot: number, item: Item, otherItem: Item|null) => void;\n    onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => void;\n    onAddItemToWarehouse: (item: Item, toSlot: number) => void;\n    onAssignEquipmentFromWarehouse: (adventurerId: string, fromSlot: number, item: Item, equipmentSlot: EquipmentSlotType) => void;\n}\n\nexport interface StateProps {\n    adventurer: AdventurerStoreState;\n    warehouse: Array<Item|null>;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\nconst AdventurerInfo = (props: AllProps) => {\n\n    const adventurer = props.adventurer;\n    const attributes = Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key={`${adventurer.id}-${stat}`} > <b>{stat}</b>: {value.toFixed(1)} </div>;\n    });\n    // const equipmentList = Object.keys(getEquipment(.map((equipment) =) {\n    //     return <div key = { `${adventurer.id}-${equipment}` } ><b>{ equipment }</b>: { getEquipment(equipment] }  </di)>;\n    // });\n\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        // When an item gets dropped on equipment slot\n        const item = dragInfo.item;\n        switch (dragInfo.sourceType) {\n            case DragSourceType.adventurerInventory: {\n                // Dragged from inventory\n                props.onRemoveItemFromInventory(adventurer.id, dragInfo.inventorySlot!);\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                props.onAssignEquipmentFromWarehouse(adventurer.id, dragInfo.inventorySlot!, item, slotType);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToWarehouse(existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.adventurerEquipment: {\n                // Dragged from equipment slot (only applicable to weapons)\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n            }\n        }\n    };\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n            const handleClick = (event: React.MouseEvent) => {\n                const origin = (event.currentTarget as HTMLElement);\n                const originRect = origin.getBoundingClientRect();\n                TooltipManager.showContextTooltip(ContextType.item, getDefinition(item), originRect);\n                event.stopPropagation();\n            };\n\n            contents = (\n                <DraggableItemIcon\n                    index={slotType}\n                    sourceId={adventurer.id}\n                    sourceType={DragSourceType.adventurerEquipment}\n                    item={item}\n                    onClick={handleClick}\n                    ref={itemRef}\n                    size={IconSize.medium}\n                />\n            );\n        }\n\n        return (\n            <>\n                <EquipmentSlot\n                    onDrop={(dragInfo: InventoryItemDragInfo) => handleDropItemEquipment(dragInfo, slotType)}\n                    type={slotType}\n                >\n                    {contents}\n                </EquipmentSlot>\n                <span className=\"info\">{TextManager.get(`ui-equipmentslot-${EquipmentSlotType[slotType]}`)}</span>\n            </>\n        );\n    };\n\n    const equipmentList = (\n        <ul>\n            <li>{getEquipmentSlot(EquipmentSlotType.head)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.shoulders)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.chest)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.hands)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.legs)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.feet)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.mainHand)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.offHand)}</li>\n        </ul>\n    );\n\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        switch (sourceType) {\n            case DragSourceType.adventurerInventory:\n                // Drag from one inventory slot to another\n                if (props.onMoveItemInInventory) {\n                    props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\n                }\n                break;\n\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                const otherItem = adventurer.inventory[toSlot];\n                props.onMoveItemFromWarehouseToInventory(adventurer.id, fromSlot, toSlot, item, otherItem);\n                break;\n            }\n\n            case DragSourceType.adventurerEquipment:\n                // Drag from equipment slot\n                if (props.onAddItemToInventory && props.onRemoveEquipment) {\n                    props.onAddItemToInventory(adventurer.id, item, toSlot);\n                }\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n        }\n    };\n    return (\n        <div className=\"adventurer-info\">\n            <div className=\"left\">\n                <div className=\"name\">\n                    <b>{adventurer.name}</b>\n                </div>\n                <div className=\"attributes\">\n                    {attributes}\n                </div>\n                <div className=\"equipment\">\n                    {equipmentList}\n                </div>\n            </div>\n            <div className=\"right\">\n                <Inventory\n                    sourceType={DragSourceType.adventurerInventory}\n                    sourceId={adventurer.id}\n                    items={adventurer.inventory}\n                    onDropItem={handleDropItemInventory}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AdventurerInfo;\n","import { addItemToInventory, assignEquipment, moveItemInInventory, removeEquipment, removeItemFromInventory } from \"actions/adventurers\";\nimport { addItemToWarehouse, removeItemFromWarehouse } from \"actions/items\";\nimport AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n        warehouse: store.stockpile,\n    };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        // Adds item to inventory of adventurer\n        onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => {\n            const action = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action);\n        },\n        // Adds item to warehouse\n        onAddItemToWarehouse: (item: Item, toSlot: number) => {\n            const add = addItemToWarehouse(item, toSlot);\n            dispatch(add);\n        },\n        // Equipment gets assigned to a slot\n        onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => {\n            const action = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(action);\n        },\n        // Assigns an equipment from the warehouse directly to an adventurer equipment slot\n        onAssignEquipmentFromWarehouse: (adventurerId: string, fromSlot: number, item: Item, equipmentSlot: EquipmentSlotType) => {\n            const remove = removeItemFromWarehouse(fromSlot);\n            dispatch(remove);\n\n            const assign = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(assign);\n        },\n        // Item gets removed from warehouse\n        onMoveItemFromWarehouseToInventory: (adventurerId: string, fromSlot: number, toSlot: number, item: Item, otherItem: Item|null) => {\n            const remove = removeItemFromWarehouse(fromSlot);\n            dispatch(remove);\n\n            const add = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(add);\n\n            if (otherItem) {\n                const switchItem = addItemToWarehouse(otherItem, fromSlot);\n                dispatch(switchItem);\n            }\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => {\n            const action = removeEquipment(adventurerId, equipmentSlot);\n            dispatch(action);\n        },\n        // Removes an item from an adventurers' inventory\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => {\n            const action = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurerInfo);\n","import * as React from \"react\";\nimport \"./css/squareiconbutton.css\";\n\nexport interface Props {\n    text: string; /* temp */\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n}\n\ntype AllProps = Props;\n\nconst SquareIconButton = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = props.className || \"\";\n    return <div className = { `ui-button widgets-squareiconbutton ${className}` } onClick = { handleClick }>\n        { props.text }\n    </div>;\n};\n\nexport default SquareIconButton;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport SquareIconButton from \"components/ui/buttons/SquareIconButton\";\nimport * as React from \"react\";\n\n// todo: refactor using WindowManager [30/03/2020]\nexport interface Props {\n    title: string;\n    backEnabled?: boolean;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n}\n\ntype AllProps = Props;\n\n/**\n *\n */\nconst Window: React.FunctionComponent<AllProps> = (props) => {\n\n    const handleClose = (e: React.MouseEvent) => {\n        if (props.onClose) {\n            props.onClose();\n        }\n    };\n    const handleBack = (e: React.MouseEvent) => {\n        if (props.onBack) {\n            props.onBack();\n        }\n    };\n\n    let BackButton = null;\n    if (props.backEnabled !== false) {\n         BackButton = <SquareIconButton className = \"back-button\" onClick = { handleBack } text = \"<\"/>;\n\n    }\n\n    let CloseButton = null;\n    if (props.closeEnabled !== false) {\n        CloseButton = <SquareIconButton className = \"close-button\" onClick = { handleClose } text = \"x\"/>;\n    }\n\n    return <div className = \"window\">\n        <div className = \"header\">\n            { BackButton }\n            <h3>{ props.title }</h3>\n            { CloseButton }\n        </div>\n        { props.children }\n    </div>;\n};\n\nexport default Window;\n","import \"components/ui/window/css/window.css\";\nimport Window, { Props } from \"components/ui/window/Window\";\nimport * as React from \"react\";\n\nexport const withWindow = <TWrappedComponentProps extends Props>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    return class WithWindow extends React.Component<TWrappedComponentProps> {\n\n        public render() {\n            return <Window { ...this.props } >\n                <WrappedComponent { ...this.props } />\n            </Window>;\n        }\n    };\n};\n","import AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { mapDispatchToProps } from \"containers/ui/AdventurerInfo\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"stores\";\n\ntype AllProps = Props & WindowProps;\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n        warehouse: store.stockpile,\n    };\n};\n\nexport default compose(\n    withWindow,\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n)(AdventurerInfo) as React.ComponentType<AllProps>;\n","import DraggableAdventurerAvatar, { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport QuestBoard from \"containers/structures/tavern/QuestBoard\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/tavernstructureview.css\";\nimport { AppContext } from \"components/App\";\nimport AdventurerInfoWindow from \"components/ui/window/windows/AdventurerInfoWindow\";\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n    selectedQuestName: string | null;\n    assignedAventurers: AdventurerStoreState[];\n}\n\nconst SOURCE_ID = \"tavern\";\n\nconst TavernStructureView = (props: AllProps) => {\n    const [assignedAventurers, setAassignedAdventurers] = React.useState<AdventurerStoreState[]>([]);\n    const [selectedQuest, setSelectedQuest] = React.useState<string | null>(null);\n    const context = React.useContext(AppContext)!;\n\n    const structureDefinition = getDefinition<TavernStructureDefinition>(Structure.tavern);\n    const level: number = props.level || 0;\n    const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(Structure.tavern);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style = {{ float: \"right\" }}\n                onClick = { handleClick }\n                disabled= { !canUpgrade }\n            >\n                { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const roomCount = levelDefinition.rooms;\n    const createRooms = () => {\n\n        const roomContent: JSX.Element[] = [];\n        for (let i = 0; i < roomCount; i++) {\n            const adventurer = props.adventurers.find((a) => a.room === i);\n            let content = null;\n            if (adventurer) {\n                let name = adventurer.name;\n\n                const assigned = assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n                const party = getQuestByAdventurer(adventurer.id);\n                if (party) {\n                    name += \" (on a quest)\";\n                }\n                content = [<DraggableAdventurerAvatar\n                    disabled = { assigned || party != null }\n                    adventurer = { adventurer }\n                    className = \"adventurer-icon\"\n                    sourceId = { SOURCE_ID }\n                    key = { `avatar:${adventurer.id}` }\n                />,\n                <a key = { adventurer.id } onClick = { () => handleAdventurerNameClick(adventurer) }> { name }</a>,\n                /*\n                <button\n                    className = \"boot\"\n                    key = { `boot:${adventurer.id}` }\n                >\n                    Boot\n                </button>,*/\n            ];\n            } else {\n                content = \"(empty room)\";\n            }\n\n            roomContent.push(<div key = { `room${i}` } className = \"room\">\n                { content }\n            </div>);\n        }\n\n        return <div className = \"rooms\">\n            <h2>Rooms</h2>\n            { roomContent }\n        </div>;\n    };\n\n    const getAvailableQuests = props.quests.filter((q) => q.status === QuestStatus.available );\n\n    const getQuestByAdventurer = (adventurerId: string): QuestStoreState | undefined => {\n        return Object.values(props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    };\n\n    const handleQuestClick = (name: string) => {\n        if (selectedQuest === name) {\n            setSelectedQuest(null);\n        } else {\n            setSelectedQuest(name);\n        }\n\n        // Unassign all adventurers\n        setAassignedAdventurers([]);\n    };\n\n    const handleAddAdventurer = (item: AdventurerAvatarDragInfo, index: number) => {\n        if (item.sourceId === SOURCE_ID) {\n            const copy = [ ...assignedAventurers];\n            copy[index] = item.adventurer;\n            setAassignedAdventurers(copy);\n        }\n    };\n\n    const handleRemoveAdventurer = (index: number): void => {\n        const copy = [ ...assignedAventurers];\n        delete copy[index];\n        setAassignedAdventurers(copy);\n    };\n\n    const handleLaunchQuest = (): void => {\n        props.onLaunchQuest(selectedQuest!, assignedAventurers);\n    };\n\n    const handleAdventurerNameClick = (adventurer: AdventurerStoreState) => {\n        const window = <AdventurerInfoWindow adventurerId = { adventurer.id } title = { adventurer.name } />;\n        context.onOpenWindow(window);\n    };\n\n    return (\n        <details open = { true } className = \"tavernstructureview\">\n            <summary>{ displayName }</summary>\n            { createUpgradeRow() }\n            <section>\n                { createRooms() }\n                <QuestBoard\n                    availableQuests = { getAvailableQuests }\n                    selectedQuestName = { selectedQuest }\n                    assignedAventurers = { assignedAventurers }\n                    onQuestClick = { (name: string) => handleQuestClick(name) }\n                    onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => handleAddAdventurer(item, index) }\n                    onRemoveAdventurer = { (index: number) => handleRemoveAdventurer(index) }\n                    onLaunchQuest = { () => handleLaunchQuest() }\n                />\n            </section>\n        </details>\n    );\n};\n\nexport default TavernStructureView;\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.tavern,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(TavernStructureView);\n","import \"components/ui/css/common/icon.css\";\r\nimport \"components/ui/resources/css/resourcesbox.css\";\r\nimport { Resource } from \"definitions/resources\";\r\nimport resourceDescriptions from \"definitions/resources\";\r\nimport * as React from \"react\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport { StructuresStoreState } from 'stores/structures';\r\nimport { Structure } from 'definitions/structures';\r\n\r\nexport interface Props {\r\n    className?: string;\r\n    resources: ResourceStoreState;\r\n    structures: StructuresStoreState;\r\n    maxResources: ResourceStoreState;\r\n    deltaResources: ResourceStoreState;\r\n}\r\n\r\nexport interface StateProps {\r\n    sufficientResources?: Record<Resource, boolean>;\r\n}\r\n\r\ntype AllProps = Props & StateProps;\r\n\r\n/**\r\n * The ResourcesBox is used in the Warehouse to show a list of resources\r\n */\r\nconst ResourcesBox = (props: AllProps) => {\r\n    const {\r\n        sufficientResources,\r\n        resources,\r\n        deltaResources,\r\n    } = props;\r\n\r\n    const className = (props.className || \"\") + \" resourcesbox\";\r\n    const listItems = Object.keys(resources).map((resource: string) => {\r\n        let listItemClass = \"resource\";\r\n        if (sufficientResources && !sufficientResources[resource]) {\r\n             listItemClass += \" insufficient\";\r\n        }\r\n        const resourceDescription = resourceDescriptions[resource];\r\n        const amount = props.resources[resource]!;\r\n        if (!resourceDescription) {\r\n            throw new Error(`No resource description found for ${resource}`);\r\n        }\r\n\r\n        let delta;\r\n        if (deltaResources[resource]) {\r\n            delta = <span className = \"animate-up\">\r\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\r\n            </span>;\r\n        }\r\n\r\n        const structure = getStructure(resource);\r\n\r\n        return <li className = { listItemClass } key = { resource }>\r\n            <div className = \"icon common-icon-smallest\" style = {{\r\n                backgroundImage:  `url(${process.env.PUBLIC_URL}${resourceDescription.iconImg})`,\r\n            }}></div>\r\n            <div className = \"name\">\r\n                { TextManager.getResourceName(resource as Resource) }\r\n            </div>\r\n            <div className = \"amount\" >\r\n                { amount.toFixed(1) }\r\n            </div>\r\n            <div className = \"max\" >\r\n                { ` / ${props.maxResources[resource]}` }\r\n            </div>\r\n            <div className = \"delta\">\r\n                { delta }\r\n            </div>\r\n            <div className = \"structure\"> \r\n                source: { TextManager.getStructureName(structure) }\r\n            </div>\r\n        </li>;\r\n    });\r\n\r\n    return (\r\n        <ul className = { className } >\r\n            { listItems }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ResourcesBox;\r\n\r\nconst getStructure = (resource: string) : Structure => {\r\n    switch (resource) {\r\n        case Resource.fabric:\r\n            return Structure.weaver;\r\n        case Resource.food:\r\n            return Structure.garden;\r\n        case Resource.iron:\r\n            return Structure.mine;\r\n        case Resource.leather:\r\n            return Structure.tannery;\r\n        case Resource.stone:\r\n            return Structure.quarry;\r\n        case Resource.wood:\r\n            return Structure.lumberMill;\r\n    }\r\n    throw new Error(`Unknown structure for resource ${resource}`);\r\n}\r\n","import * as React from \"react\";\nimport \"./css/tabstrip.css\";\n\nexport interface Props {\n    id: string;\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    active?: boolean;\n    children?: any;\n}\n\ntype AllProps = Props;\n\nconst Tab = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = ((props.active) ? \"active\" : \"\") + (props.className || \"\");\n    return <li className = { `tabstrip-tab ${className}` } onClick = { handleClick } >\n        { props.children }\n    </li>;\n};\n\nexport default Tab;\n","import React, { useState } from \"react\";\nimport \"./css/tabstrip.css\";\nimport { Props as TabProps } from \"./Tab\";\n\nexport interface Props {\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    onTabSelected?: (tabId: string) => void;\n    children?: any;\n}\n\ntype AllProps = Props;\nconst Tabstrip = (props: AllProps) => {\n    let initialSelectedTab = null;\n    if (props.children && props.children.length) {\n        initialSelectedTab = props.children[0].props.id;\n    }\n    const [activeTab, setActiveTab] = useState<string|null>(initialSelectedTab);\n    const className = props.className || \"\";\n\n    const children = React.Children.map(props.children, (child: React.ReactElement<TabProps>) => {\n        const clone: React.ReactElement<TabProps> = React.cloneElement(child, {\n            active: child.props.id === activeTab,\n            onClick: () => { handleTabClick(child.props.id); },\n        });\n        return clone;\n    });\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n        if (props.onTabSelected) {\n            props.onTabSelected(tabId);\n        }\n    };\n\n    const handleClick = (e: React.MouseEvent<Element>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n\n    return <ul className = { `tabstrip ${className}` } onClick = { handleClick } >\n        { children }\n    </ul>;\n};\n\nexport default Tabstrip;\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst usePrevious = <T extends {}>(value: T) => {\r\n    const ref = useRef<T>();\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    });\r\n    return ref.current;\r\n};\r\nexport default usePrevious;\r\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n\nexport const empty: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 0,\n    leather: 0,\n    stone: 0,\n    wood: 0,\n};\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\r\nimport Inventory from \"components/ui/inventory/Inventory\";\r\nimport ResourcesBox from \"components/ui/resources/ResourcesBox\";\r\nimport Tab from \"components/ui/tabs/Tab\";\r\nimport Tabstrip from \"components/ui/tabs/Tabstrip\";\r\nimport { DragSourceType } from \"constants/dragging\";\r\nimport AdventurerInfo from \"containers/ui/AdventurerInfo\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { getDefinition, Structure  } from \"definitions/structures\";\r\nimport { StructureDefinition } from \"definitions/structures/types\";\r\nimport usePrevious from \"hooks/usePrevious\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport { empty, ResourceStoreState } from \"stores/resources\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/warehousestructureview.css\";\r\n\r\nexport interface DispatchProps {\r\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\r\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number, otherItem: Item|null) => void;\r\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\r\n    onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\r\n    onUpgrade?: (cost: number, level: number) => void;\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface Props  {\r\n}\r\n\r\nexport interface StateProps  {\r\n    level: number;\r\n    workers: number;\r\n    workersFree: number;\r\n    gold: number;\r\n    items: Array<Item|null>;\r\n    adventurersInTown: AdventurerStoreState[];\r\n    structures: StructuresStoreState;\r\n    resources: ResourceStoreState;\r\n    maxResources: ResourceStoreState;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\nconst WAREHOUSE = DragSourceType.warehouse;\r\n\r\n// todo 20191202: Resource update should happen at a set interval\r\nconst WarehouseStructureView = (props: AllProps) => {\r\n\r\n    const [selectedAdventurer, setSelectedAdventurer] = useState<string>();\r\n\r\n    const [resourcesDelta, setResourcesDelta] = useState<ResourceStoreState>(empty);    // updating this will trigger animation\r\n    const previousResources = usePrevious(props.resources);\r\n    const resourcesRef = useRef<HTMLFieldSetElement>(null);\r\n\r\n    useEffect(() => {\r\n        // Calculate delta\r\n        const delta = Object.keys(props.resources).reduce((acc, value) => {\r\n            if (previousResources && previousResources[value]) {\r\n                acc[value] = props.resources[value] - previousResources[value];\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n        setResourcesDelta(delta);\r\n    }, [props.resources, previousResources]);\r\n\r\n    useEffect(() => {\r\n        if (!resourcesRef.current) {\r\n            return;\r\n        }\r\n        const ref = resourcesRef.current as unknown as HTMLFieldSetElement;\r\n        ref.classList.remove(\"animate\");\r\n        setTimeout(() => {\r\n            if (resourcesRef) {\r\n                ref.classList.add(\"animate\");\r\n            }\r\n        }, 200);\r\n    }, [resourcesDelta]);\r\n\r\n    const structureDefinition = getDefinition<StructureDefinition>(Structure.warehouse);\r\n    if (!structureDefinition) {\r\n        throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\r\n    }\r\n    const level: number = props.level;\r\n    const displayName = TextManager.getStructureName(Structure.warehouse);\r\n\r\n    const createUpgradeRow = () => {\r\n        const gold = props.gold;\r\n        const nextLevel = structureDefinition.levels[level + 1];\r\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\r\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\r\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\r\n\r\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\r\n        };\r\n        return (\r\n            <div>\r\n                <label>level:</label>{(level + 1) + \" / \" + structureDefinition.levels.length}\r\n                <button\r\n                    style={{ float: \"right\" }}\r\n                    onClick={handleClick}\r\n                    disabled={!canUpgrade}\r\n                >\r\n                    {upgradeText}\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleDropItemWarehouse = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\r\n            switch (sourceType) {\r\n                case WAREHOUSE:\r\n                    if (props.onMoveItemInWarehouse) {\r\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\r\n                    }\r\n                    break;\r\n                case DragSourceType.adventurerInventory:\r\n                    if (props.onMoveItemFromAdventurer) {\r\n                        const otherItem = props.items[toSlot];\r\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot, otherItem);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n    const handleAdventurerTabSelected = (tabId: string) => {\r\n        setSelectedAdventurer(tabId);\r\n    };\r\n\r\n    const renderAdventurerContent = () => {\r\n        if (selectedAdventurer) {\r\n            return (\r\n                <AdventurerInfo\r\n                    adventurerId={selectedAdventurer}\r\n                />\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const renderAdventurerTab = (adventurer: AdventurerStoreState) => (\r\n        <Tab id={adventurer.id} key={adventurer.id}>\r\n            <AdventurerAvatar adventurer={adventurer} className=\"common-icon-small\"/>\r\n        </Tab>\r\n    );\r\n\r\n    return (\r\n        <details open={true} className=\"warehouse-structureview\">\r\n            <summary>{displayName}</summary>\r\n            {createUpgradeRow()}\r\n            <fieldset className=\"resources\" ref={resourcesRef}>\r\n                <legend>Resources</legend>\r\n                <ResourcesBox\r\n                    resources={props.resources}\r\n                    structures={props.structures}\r\n                    maxResources={props.maxResources}\r\n                    deltaResources={resourcesDelta}\r\n                />\r\n            </fieldset>\r\n            <h3>Stockpile</h3>\r\n            <Inventory\r\n                sourceType={WAREHOUSE}\r\n                items={props.items}\r\n                onDropItem={handleDropItemWarehouse}\r\n            />\r\n            <h3>Adventurers</h3>\r\n            <div>\r\n                <Tabstrip className=\"adventurers-tabstrip\" onTabSelected={handleAdventurerTabSelected} >\r\n                {props.adventurersInTown.map((a) => renderAdventurerTab(a))}\r\n                </Tabstrip>\r\n                <div className=\"adventurer-inventory\">\r\n                    {renderAdventurerContent()}\r\n                </div>\r\n            </div>\r\n        </details>\r\n    );\r\n\r\n};\r\n\r\nexport default WarehouseStructureView;\r\n","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (adventurers: AdventurerStoreState[], quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(adventurers, id)!);\n};\n\nexport const getQuestLeader = (adventurers: AdventurerStoreState[], quest: QuestStoreState): AdventurerStoreState | undefined => {\n    const leaderId = quest.party[0];\n    return findAdventurerById(adventurers, leaderId);\n}\n\nexport const findAdventurerById = (adventurers: AdventurerStoreState[], id: string): AdventurerStoreState | undefined => {\n    return adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { adventurersOnQuest } from 'storeHelpers';\n\n// Store accessors\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\n\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(adventurers,val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\nconst getAdventurersInTown = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n    // Get an array of all adventurer ids on any active quest\n    const adventurersOnQuest = quests.reduce<string[]>((acc, val: QuestStoreState) => {\n        if (val.status === QuestStatus.active) {\n            acc.push(...val.party);\n        }\n        return acc;\n    }, []);\n\n    return adventurers.filter((a) => adventurersOnQuest.indexOf(a.id) === -1);\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n\n/** Returns a selector keyed by active quests whose value is a list of AdventurerStoreState */\nexport const createSelectAdventurersOnQuest = (questName: string) => {\n    const getAdventurersOnQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n        const quest = quests.find(q => q.name === questName)!;\n        return adventurersOnQuest(adventurers, quest);\n    };\n\n    return createSelector([\n        getAdventurers,\n        getQuests],\n        getAdventurersOnQuest,\n    );\n}\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersInTown = createSelector([\n    getAdventurers,\n    getQuests],\n    getAdventurersInTown,\n);\n","import { addItemToInventory, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\r\nimport { subtractGold } from \"actions/gold\";\r\nimport { addItemToWarehouse, moveItemInWarehouse, removeItemFromWarehouse } from \"actions/items\";\r\nimport { addLogEntry } from \"actions/log\";\r\nimport { upgradeStructure } from \"actions/structures\";\r\nimport WarehouseStructureView,\r\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { getDefinition, Structure } from \"definitions/structures\";\r\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction, Dispatch } from \"redux\";\r\nimport { selectAdventurersInTown } from \"selectors/adventurers\";\r\nimport { selectFreeWorkers } from \"selectors/workers\";\r\nimport { StoreState } from \"stores\";\r\nimport { LogChannel } from \"stores/logEntry\";\r\nimport { StructureStoreState } from \"stores/structure\";\r\n\r\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\r\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\r\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\r\n    const level: number = structureStore.level;\r\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\r\n    const adventurersInTown = selectAdventurersInTown(store);   // todo: refreshes too much. fix\r\n\r\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\r\n    return {\r\n        adventurersInTown,\r\n        gold: store.gold,\r\n        items: store.stockpile,\r\n        level,\r\n        maxResources: levelDefinition.maxResources,\r\n        resources: store.resources,\r\n        structures: store.structures,\r\n        workers: structureStore.workers,\r\n        workersFree: selectFreeWorkers(store),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\r\n    return {\r\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number, otherItem: Item|null) {\r\n            const remove = removeItemFromInventory(adventurerId, fromSlot);\r\n            dispatch(remove);\r\n\r\n            const add = addItemToWarehouse(item, toSlot);\r\n            dispatch(add);\r\n\r\n            if (otherItem) {\r\n                const switchItem = addItemToInventory(adventurerId, otherItem, fromSlot);\r\n                dispatch(switchItem);\r\n            }\r\n        },\r\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\r\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\r\n        },\r\n        // Moves item within an adventurers' inventory\r\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\r\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\r\n            dispatch(action);\r\n        },\r\n        // Moves item from warehouse to an adventurer\r\n        onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\r\n            const remove = removeItemFromWarehouse(fromSlot);\r\n            dispatch(remove);\r\n\r\n            const add = addItemToInventory(adventurerId, item, toSlot);\r\n            dispatch(add);\r\n        },\r\n        onUpgrade: (cost: number, level: number) => {\r\n            dispatch(subtractGold(cost));\r\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\r\n\r\n            level++;\r\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\r\n                level,\r\n                structure: Structure.warehouse,\r\n            }, LogChannel.town));\r\n        },\r\n    };\r\n}\r\n\r\n// export default compose(\r\n//     connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\r\n// //    withAppContext,\r\n// )(WarehouseStructureView) as React.ComponentType<Props>;\r\n\r\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(WarehouseStructureView);\r\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import { getDefinition, Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport { StructureStoreState } from 'stores/structure';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from 'stores';\nimport { selectFreeWorkers } from 'selectors/workers';\nimport { subtractGold } from 'actions/gold';\nimport { upgradeStructure, decreaseWorkers, increaseWorkers } from 'actions/structures';\nimport { addLogEntry } from 'actions/log';\nimport { LogChannel } from 'stores/logEntry';\nimport StructureViewHeader from './StructureViewHeader';\n\n\nexport interface Props  {\n    type: Structure;\n}\n\nconst ResourceStructureView = (props: Props) => {\n\n    // Fetch needed values from store\n    const gold = useSelector<StoreState, number>((store) => store.gold);\n    const level = useSelector<StoreState, number>((store) => { \n        const structureStore: StructureStoreState = store.structures[props.type];\n        if (!structureStore) { throw new Error(`No structure '${props.type}' found in the store!`); }\n        return structureStore.level;\n    });\n    const workers = useSelector<StoreState, number>((store) => { \n        const structureStore: StructureStoreState = store.structures[props.type];\n        if (!structureStore) { throw new Error(`No structure '${props.type}' found in the store!`); }\n        return structureStore.workers;\n    });\n    const workersFree = useSelector<StoreState, number>((store) => selectFreeWorkers(store));\n\n    const structureDefinition = getDefinition<ResourceStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n\n    // Reducer dispatch\n    const dispatch = useDispatch();\n    const handleUpgrade = (cost: number, level: number) => {\n        dispatch(subtractGold(cost));\n        dispatch(upgradeStructure(props.type)); // Todo: [07/07/2019] time??\n\n        level++;\n        dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n            level,\n            structure: props.type,\n        }, LogChannel.town));\n    }\n    \n    const handleWorkersDown = () => {\n        dispatch(decreaseWorkers(props.type));\n    }\n\n    const handleWorkersUp = () => {\n        dispatch(increaseWorkers(props.type));\n    };\n    \n\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n\n    const createWorkersRow = () => {\n        const upDisabled = workers === levelDefinition.workerCapacity || (workersFree || 0) < 1;\n        const downDisabled = workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value={workers}\n            max={levelDefinition.workerCapacity}\n            upDisabled={upDisabled}\n            downDisabled={downDisabled}\n            onDown={handleWorkersDown}\n            onUp={handleWorkersUp}\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            handleUpgrade(nextLevelCost, level + 1);\n        };\n\n        return <div>\n            <label>level:</label>{(level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick={handleClick }\n                disabled= {!canUpgrade } >\n                    {upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${workers} = ${generates[value] * (workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            {\"Generates (every minute): \" }\n            <br/>\n            {generatesText }\n        </div>;\n    };\n\n    return (\n        <>\n            <StructureViewHeader structure={props.type} />\n            <details open={true } className = \"structureview\">\n                <section>\n                    {createWorkersRow() }\n                    {createUpgradeRow() }\n                    {createGeneratesRow() }\n                </section>\n            </details>\n        </>\n    );\n};\n\nexport default ResourceStructureView;\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\nimport ResourceStructureView from './structures/ResourceStructureView';\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\n\ntype AllProps = Props & StateProps;\n\n\nconst StructureDetails = (props: AllProps) => {\n\n    const renderContent = () => {\n        const structureState: StructureStoreState = props.structures[props.structure];\n        if (structureState.state === StructureState.Building) {\n            const progress = props.buildTask ? props.buildTask.progress : 1 ;\n            return (\n                <div>\n                    <Progressbar label=\"Building...\" progress={progress} />\n                </div>\n            );\n        } else {\n\n            const structureDefinition: StructureDefinition = getDefinition(props.structure);\n            switch (structureDefinition.type) {\n                case StructureType.production: {\n                    return <ProductionStructureView type = { props.structure }/>;\n                }\n                case StructureType.resource: {\n                    return <ResourceStructureView type = { props.structure }/>;\n                }\n                case StructureType.warehouse: {\n                    return <WarehouseStructureView />;\n                }\n                case StructureType.tavern: {\n                    return <TavernStructureView />;\n                }\n                default: {\n                    return <div> { props.structure } </div>;\n                }\n            }\n        }\n    }\n\n    return (\n        <div className=\"structure-details\">\n            { renderContent() }\n        </div>\n    );\n};\n\nexport default StructureDetails;\n","import StructureDetailsView, { Props, StateProps } from \"components/StructureDetailsView\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\n\nexport default compose(\n    connect<StateProps, null, Props, StoreState>(mapStateToProps),\n    withWindow,\n)(StructureDetailsView) as React.ComponentType<Props & WindowProps>;\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n    error,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\n\nexport class SoundManager {\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            // todo: assert [10/07/2019 ASSERTS]\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        if (!media) { return; }\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (!media) { return; }\n\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(1, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, 1, 500);\n\n        currentMusicTrack = track;\n    }\n}\n","export const manifest = [\r\n    \"sound/fx/button-click.ogg\",\r\n    \"sound/fx/error.ogg\",\r\n    \"sound/music/Soliloquy.mp3\",\r\n    \"sound/music/TheLoomingBattle.ogg\",\r\n\r\n];\r\n","import { Howl } from \"howler\";\r\nimport * as React from \"react\";\r\nimport Indicator from \"./Indicator\";\r\nimport { useState, useEffect } from 'react';\r\n\r\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\r\nexport interface Props {\r\n    manifest: string[];\r\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\r\n    children: any;\r\n}\r\n\r\nexport enum MediaType {\r\n    image,\r\n    sound,\r\n}\r\n\r\nexport interface MediaItem {\r\n    url: string;\r\n    mediaType: MediaType;\r\n    content?: HTMLImageElement | Howl;\r\n    sound?: Howl;\r\n}\r\n\r\nconst Preloader = (props: Props) => {    \r\n\r\n    const [completed, setCompleted] = useState(false);\r\n    const [itemsLoaded, setItemsLoaded] = useState(0);\r\n\r\n    useEffect(() => {\r\n        loadMedia();\r\n    }, []);\r\n\r\n    const { children, manifest } = props;\r\n\r\n    const indicator = <Indicator\r\n        itemsLoaded = { itemsLoaded }\r\n        itemsTotal = { manifest.length }\r\n    />;\r\n\r\n    const loadMedia = () => {\r\n        // todo: what if props get set at runtime\r\n        setItemsLoaded(0);\r\n\r\n        const promises = props.manifest\r\n            .map((url) => loadItem(url)\r\n            // tslint:disable-next-line:no-console\r\n            .catch((err) => console.error(err)));\r\n\r\n        Promise.all(promises).then((results) => {\r\n            if (props.onLoadComplete) {\r\n                props.onLoadComplete(media);\r\n            }\r\n            setCompleted(true);\r\n        });\r\n    }\r\n\r\n    const loadItem = async (url: string): Promise<MediaItem> => {\r\n        if (media.some((m) => m.url === url)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\r\n        }\r\n        const mediaType = getType(url);\r\n        let item;\r\n        if (mediaType === MediaType.image) {\r\n            const value = await loadImage(url);\r\n            item = {\r\n                content: value,\r\n                mediaType,\r\n                url,\r\n            } ;\r\n        }\r\n        if (mediaType === MediaType.sound) {\r\n            const value = new Howl({\r\n                src: [ url ],\r\n            });\r\n            item = {\r\n                content: value,\r\n                mediaType,\r\n                url,\r\n            };\r\n        }\r\n        if (item) {\r\n            media.push(item);\r\n            setItemsLoaded(itemsLoaded + 1);\r\n            return item;\r\n        } else {\r\n            throw new Error(`Unknown error while trying to load ${url}`);\r\n        }\r\n    }\r\n\r\n    return completed ? children : indicator;\r\n}\r\n\r\nconst media: MediaItem[] = [];\r\n\r\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\r\n    const image = new Image();\r\n    image.src = url;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        if (image.naturalWidth) {\r\n            resolve(image);\r\n        } else if (image.complete) {\r\n            reject(null);\r\n        } else {\r\n            image.addEventListener(\"load\", check);\r\n            image.addEventListener(\"error\", check);\r\n        }\r\n        function check() {\r\n            if (image.naturalWidth) {\r\n                resolve(image);\r\n            } else {\r\n                reject(null);\r\n            }\r\n            image.removeEventListener(\"load\", check);\r\n            image.removeEventListener(\"error\", check);\r\n        }\r\n    });\r\n};\r\n\r\nconst getType = (url: string): MediaType => {\r\n    url = url.toLowerCase();\r\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\r\n        return MediaType.image;\r\n    }\r\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\r\n        return MediaType.sound;\r\n    }\r\n    throw Error(`Could not determine type for ${url}`);\r\n};\r\n\r\nexport default Preloader;","import * as React from \"react\";\r\n\r\nexport interface Props {\r\n    itemsLoaded?: number;\r\n    itemsTotal?: number;\r\n}\r\n\r\n/**\r\n * Loading indicator\r\n */\r\nconst Indicator = (props: Props) =>  {\r\n    const { itemsLoaded, itemsTotal } = props;\r\n    return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\r\n}\r\n\r\nexport default Indicator;\r\n","import React from 'react';\nimport { TextManager } from 'global/TextManager';\nimport { ToastConfig } from 'global/ToastManager';\n\ntype Props = ToastConfig;\n\nexport enum Type {\n    questEncounter,\n    questCompleted,\n    achievementUnlocked,\n    cheat\n}\n\nconst Toast = (props: Props) => {\n    const { \n        title,\n        type = Type.achievementUnlocked,\n        icon = \"/img/items/quest-items/dragon-eye.png\"\n    } = props;\n\n    const typeText = TextManager.get(`ui-toast-type-${Type[type]}`)\n    return (\n        <div className=\"toast\">\n            <div className=\"label type\">{typeText}</div>\n            <div className=\"label title app-h2-white\">{title}</div>\n            <div className=\"icon\">\n                <div className=\"background\"></div>\n                <img className=\"image\" width=\"300\" alt=\"dragon eye\" src={`${process.env.PUBLIC_URL}${icon}`} />\n                <div className=\"foreground\"></div>\n            </div>\n            <div className=\"banner\"></div>\n        </div>\n    );\n}\n\nexport default Toast;","import React from \"react\";\nimport { Viewport as PixiViewport, ClickEventData } from \"pixi-viewport\";\nimport { PixiComponent, useApp } from \"@inlet/react-pixi\";\n\ninterface Props {\n  children: React.ReactNode;\n  onClick?(event: ClickEventData): void;\n  screenWidth: number,\n  screenHeight: number,\n  worldWidth: number,\n  worldHeight: number,\n}\n\n/** Viewport leverages pixi-viewport to create a pannable map \n * https://davidfig.github.io/pixi-viewport/jsdoc/\n */\nconst Viewport = React.forwardRef<PixiViewport, any>((props, ref) => {\n  const app = useApp();\n  if (app) {\n      // Perhaps this is better moved somewhere else\n      const cursor = `url('${process.env.PUBLIC_URL}/img/cursors/dwarven_gauntlet_extra_6.png'), auto`;\n      app.renderer.plugins.interaction.cursorStyles.pointer = cursor;\n  }\n  return <PixiComponentViewport app={app} {...props} ref={ref} />;  \n})\n\ninterface PixiComponentProps {\n    app: PIXI.Application;\n}\n\nconst PixiComponentViewport = PixiComponent(\"Viewport\", {\n  create: (props: PixiComponentProps & Props) => {\n    const viewport = new PixiViewport({\n      screenWidth: props.screenWidth,\n      screenHeight: props.screenHeight,\n      worldWidth: props.worldWidth,\n      worldHeight: props.worldHeight,\n      ticker: props.app.ticker,\n      interaction: props.app.renderer.plugins.interaction,\n      // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n    viewport.on(\"clicked\", (event) => { if(props.onClick) props.onClick(event) });\n    //viewport.on(\"drag-start\", () => console.log(\"drag-start\"));\n    //viewport.on(\"drag-end\", () => console.log(\"drag-end\"));\n\n    viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .clamp({ direction: 'all' })\n      .clampZoom({ minScale: 1, maxScale: 2 })\n      .decelerate();\n\n    return viewport;\n  },\n  // applyProps: (instance, oldProps, newProps) => {\n  //   console.log(\"applyProps\");\n  // },\n  // didMount: () => {\n  //   console.log(\"didMount\");\n  // },\n  // willUnmount: () => {\n  //   console.log(\"willUnmount\");\n  // }\n});\nexport default Viewport;\n","import * as PIXI from 'pixi.js';\n// Adapted from https://github.com/explooosion/hitarea-shapes/blob/master/src/index.js\n\nexport default class HitAreaShapes {\n    public shapes: PIXI.Polygon[];\n\n    constructor(shapes = {}, sprite: string = \"0\") {\n  //     console.log(shapes, sprite)\n  //     const keys = Object.keys(shapes)[sprite];      \n  // console.log(keys)\n      this.shapes = shapes[sprite].map((definition: { shape: number[]; }) => {\n          const shape: number[] = definition.shape;\n          return new PIXI.Polygon(shape);\n      });\n    }\n  \n    /**\n     * Called by hitArea\n     * @param {number} x\n     * @param {number} y\n     */\n    contains(x = 0, y = 0) {\n      return (!this.shapes || this.shapes.length === 0)\n        ? false\n        : this.shapes.some(shape => shape.contains(x, y));\n    }\n  }","import React, { useState, useEffect } from 'react';\nimport { Structure } from 'definitions/structures';\nimport { Sprite, useApp, useTick } from '@inlet/react-pixi';\nimport HitAreaShapes from 'utils/hitAreaShapes';\nimport polygons from './../hitAreas.json';\nimport * as PIXI from 'pixi.js';\nimport { ITextureDictionary } from 'pixi.js';\nimport { Props } from 'components/town/TownView';\n\n\nconst BLADE_ROTATION_SPEED = 0.01;\n\nconst LumberMill = (props: Props) => {\n    const structure = Structure.lumberMill;\n    const atlas = `/img/town/town-alpha/${structure}.json`;\n    const hitAreaShapes = new HitAreaShapes(polygons, structure);\n    const [textures, setTextures] = useState<ITextureDictionary>();\n\n    const app = useApp();\n\n    useEffect(() => {\n        if (!app.loader.resources[atlas]) {\n            app.loader.add(atlas).load((_, resources) => {\n                setTextures(resources[atlas]?.textures);    \n            });\n        } else {\n            setTextures(app.loader.resources[atlas]?.textures);\n        }\n    }, [app, app.loader, atlas]);\n\n    const [rotation, setRotation] = useState(0);\n    useTick((delta:number | undefined) => setRotation(r => r + (BLADE_ROTATION_SPEED * delta!)));\n\n\n    if (!textures) return null;\n    return (\n        <Sprite \n            name={structure}\n            x={403}\n            y={320}\n            interactive={true}\n            buttonMode={true}\n            pointertap={() => {\n                props.onStructureClick(structure);\n            }}\n            hitArea={hitAreaShapes}\n            texture={textures[\"structure.png\"]}\n        >\n            <Sprite \n                name=\"blades\"\n                texture={textures[\"blades.png\"]}\n                anchor={new PIXI.Point(0.5, 0.5)}\n                x={15}\n                y={10}\n                rotation={rotation}\n            /> \n        </Sprite>        \n    )\n}\n\nexport default LumberMill;","import { PixiComponent, applyDefaultProps, Container } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport * as particles from 'pixi-particles';\n\n\ninterface Props  {\n    image: string;\n    config: particles.OldEmitterConfig | particles.EmitterConfig;\n};\n\nconst ParticleEmitter = PixiComponent<Props & React.ComponentProps<typeof Container>, PIXI.ParticleContainer>(\"ParticleEmitter\", {\n    create() {\n      return new PIXI.ParticleContainer();\n    },\n\n    applyProps(instance, oldProps: Props, newProps: Props) {\n      const { image, config, ...newP } = newProps;\n  \n      // apply rest props to PIXI.ParticleContainer\n      applyDefaultProps(instance, oldProps, newP);\n      \n      let emitter = (this as any)._emitter;\n      if (!emitter) {\n        emitter = new particles.Emitter(\n          instance,\n          [PIXI.Texture.from(image)],\n          config\n        );\n  \n        let elapsed = performance.now();\n  \n        const tick = () => {\n          emitter.raf = requestAnimationFrame(tick);\n          const now = performance.now();\n          //const amp = Math.random() * 5 + 15;\n          // const amp = 15;\n          // const freq = 0.0015;\n          // emitter.acceleration.x = (Math.sin((elapsed * freq)) * amp) + 15;\n\n          emitter.update((now - elapsed) * 0.0003);\n  \n          elapsed = now;\n        };  \n        emitter.emit = true;\n        // emitter.update(00.2);\n\n        tick();\n      }\n      (this as any)._emitter = emitter;\n    },\n\n    willUnmount() {\n      if ((this as any)._emitter) {\n        (this as any)._emitter.emit = false;\n        cancelAnimationFrame((this as any)._emitter.raf);\n      }\n    }\n});\n\nexport default ParticleEmitter;","import React from \"react\";\nimport { Props } from 'components/town/TownView';\nimport { Sprite } from '@inlet/react-pixi';\nimport { Structure } from 'definitions/structures';\nimport HitAreaShapes from 'utils/hitAreaShapes';\nimport polygons from './../hitAreas.json';\nimport smoke from './smoke.json';\nimport ParticleEmitter from 'components/pixi/ParticleEmitter';\n\nconst Tavern = (props: Props) => {\n    const structure = Structure.tavern;\n    const hitAreaShapes = new HitAreaShapes(polygons, structure);\n\n    return (\n        <Sprite \n            name={structure}\n            x ={500}\n            y ={469}\n            interactive={true}\n            buttonMode={true}\n            pointertap={() => {\n                props.onStructureClick(structure);\n            }}\n            hitArea={hitAreaShapes}\n            image={`/img/town/town-alpha/${structure}.png`}\n        >\n            <ParticleEmitter\n                name=\"smoke\"\n                x={107}\n                y={-2}\n                image={`/img/town/effects/smokeparticle.png`} \n                config={smoke} \n            />\n        </Sprite>\n    )\n}\nexport default Tavern;","import React, { useRef, useEffect } from \"react\";\r\nimport { Stage, Sprite } from '@inlet/react-pixi';\r\nimport { Structure } from 'definitions/structures';\r\nimport { StructuresStoreState } from 'stores/structures';\r\nimport { SoundManager, MusicTrack } from 'global/SoundManager';\r\nimport { Viewport as PixiViewport} from \"pixi-viewport\";\r\nimport Viewport from '../pixi/Viewport';\r\nimport { StructureState, StructureStoreState } from 'stores/structure';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from 'stores';\r\nimport \"./css/townView.css\"\r\nimport { MAX_WIDTH } from 'components/App';\r\nimport HitAreaShapes from 'utils/hitAreaShapes';\r\nimport polygons from './hitAreas.json';\r\nimport LumberMill from './structures/LumberMill';\r\nimport Tavern from './structures/Tavern';\r\n\r\nconst HEIGHT = 1079;\r\nconst WORLD_WIDTH = 1024;\r\nconst WORLD_HEIGHT = 1600;\r\n\r\n// This might be the town view\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface DispatchProps {\r\n\r\n}\r\n\r\nexport interface Props {\r\n    onStructureClick: (structure: Structure | null) => void;\r\n}\r\n\r\n\r\ntype AllProps = Props & DispatchProps;\r\n\r\nconst TownView = (props: AllProps) => {\r\n\r\n    // let match = useRouteMatch();\r\n\r\n    React.useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\r\n        SoundManager.playMusicTrack(MusicTrack.town);\r\n    }, []);\r\n\r\n    const handleStructureClick = (structure: Structure | null) => {\r\n        if (!dragging.current && props.onStructureClick) { \r\n            props.onStructureClick(structure); \r\n        }\r\n    }\r\n\r\n    //console.log('rendering town');\r\n\r\n    const structures = useSelector<StoreState, StructuresStoreState>((state: StoreState) => {\r\n        return state.structures;\r\n    });\r\n\r\n    const renderStructures = () => {\r\n        const orderedStructures = [\r\n            Structure.workshop,\r\n            Structure.quarry,\r\n            Structure.tavern,\r\n            Structure.tannery,\r\n            Structure.alchemist,\r\n            Structure.garden,\r\n            Structure.weaponsmith,\r\n            Structure.armoursmith,\r\n            Structure.warehouse,\r\n            Structure.mine,\r\n            Structure.lumberMill,\r\n            Structure.weaver,\r\n        ]\r\n        return orderedStructures.reverse().map((structure) => {\r\n            const structureStore: StructureStoreState = structures[structure];\r\n            if (structureStore.state === StructureState.NotBuilt) {\r\n                return null;\r\n            }\r\n            // todo: refactor into seperate components\r\n               \r\n            let x, y;              \r\n            switch (structure) {\r\n                case Structure.workshop:\r\n                    x = 373;\r\n                    y = 610;\r\n                    break;\r\n                case Structure.quarry:\r\n                    x = 632;\r\n                    y = 633;\r\n                    break;\r\n\r\n                case Structure.tannery:\r\n                    x = 372;\r\n                    y = 460;\r\n                    break;\r\n                case Structure.alchemist:\r\n                    x = 411;\r\n                    y = 371;\r\n                    break;\r\n                case Structure.garden:\r\n                    x = 822;\r\n                    y = 689;\r\n                    break;\r\n                case Structure.weaponsmith:\r\n                    x = 449;\r\n                    y = 460;\r\n                    break;\r\n                case Structure.armoursmith:\r\n                    x = 473;\r\n                    y = 442;\r\n                    break;\r\n                case Structure.warehouse:\r\n                    x = 471;\r\n                    y = 130;\r\n                    break;\r\n                case Structure.mine:\r\n                    x = 183;\r\n                    y = 527;\r\n                    break;\r\n                case Structure.weaver:\r\n                    x = 484;\r\n                    y = 333;\r\n                    break;\r\n            }              \r\n            \r\n            switch (structure) {\r\n                case Structure.lumberMill: {\r\n                    return <LumberMill onStructureClick={handleStructureClick} key={structure} />;\r\n                }\r\n                case Structure.tavern: {\r\n                    return <Tavern onStructureClick={handleStructureClick} key={structure} />;\r\n                }\r\n                default: {\r\n                    const hitAreaShapes = new HitAreaShapes(polygons, structure);\r\n                    return <Sprite \r\n                        key={structure}\r\n                        name={structure}\r\n                        x={x}\r\n                        y={y}\r\n                        interactive={true}\r\n                        buttonMode={true}\r\n                        pointertap={() => {\r\n                            handleStructureClick(structure);\r\n                        }}\r\n                        hitArea={hitAreaShapes}\r\n                        image={`${process.env.PUBLIC_URL}/img/town/town-alpha/${structure}.png`}          \r\n                    >\r\n                        {/* <Graphics\r\n                            name=\"hitarea\"\r\n                            draw={graphics => {\r\n                                graphics.beginFill(0xffffff);\r\n                                hitAreaShapes.shapes.map(shape => graphics.drawPolygon(shape))\r\n                                graphics.endFill();\r\n                            }}\r\n                        /> */}\r\n                    </Sprite>\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    let dragging = useRef(false);\r\n    const ref = useRef<PixiViewport>(null);\r\n    useEffect(() => {\r\n        if(ref.current) {\r\n            const viewport = ref.current;\r\n            viewport.on(\"drag-start\", () => { dragging.current = true; });\r\n            viewport.on(\"drag-end\", () => { dragging.current = false; });\r\n        }\r\n\r\n        const onScroll = (e: WheelEvent) => {\r\n            // Scrolling the mouse is just used for zoom, not for actual scrolling\r\n            e.preventDefault();\r\n        }\r\n        window.addEventListener(\"wheel\", onScroll, {passive: false} );\r\n        return () => {\r\n            window.removeEventListener(\"wheel\", onScroll);\r\n        };\r\n    }, []);\r\n\r\n    const options = {\r\n        sharedLoader: true\r\n    }\r\n    return (\r\n        <div className=\"town-view\">\r\n            <Stage width={MAX_WIDTH} height={HEIGHT} options={options} >\r\n                <Viewport screenWidth={MAX_WIDTH} screenHeight={HEIGHT} worldWidth={WORLD_WIDTH} worldHeight={WORLD_HEIGHT} ref={ref}>\r\n                    <Sprite \r\n                        name=\"background\"\r\n                        image={`${process.env.PUBLIC_URL}/img/town/town-alpha/background.png`}          \r\n                    >\r\n                        {renderStructures()}\r\n\r\n                    </Sprite>\r\n                </Viewport>\r\n            </Stage>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TownView;\r\n","import { now } from 'moment';\nimport { Type } from '../components/ui/toasts/Toast';\nimport EventEmitter from './EventEmitter';\n\nexport interface ToastConfig {\n    time: number;\n    title: string;\n    type?: Type;\n    icon?: string;\n}\n\nexport abstract class ToastManager extends EventEmitter<ToastConfig[]>() {\n    \n    private static stack: ToastConfig[] = [];\n    private static lifeTime = 5000; // Time each toast lives\n\n    static EVENT_TOASTS_UPDATED = \"toast\";\n\n    static addToast(title: string, type?: Type, icon?: string) {\n\n        this.stack = [...this.stack, {\n            time: now(),\n            title,\n            type,\n            icon\n        }];\n\n        this.emit(this.EVENT_TOASTS_UPDATED, this.stack);\n\n        setTimeout(() => {\n            // Remove all popups that have expired\n            this.stack = this.stack.filter((toast) => {\n                return now() - toast.time < this.lifeTime\n            });\n            this.emit(this.EVENT_TOASTS_UPDATED, this.stack);\n\n        }, this.lifeTime);\n    }\n}","import React, { useEffect, useState } from 'react';\nimport './toasts.css';\nimport Toast from './Toast';\nimport { ToastManager, ToastConfig } from '../../../global/ToastManager';\n\n// Toasts can be added by calling ToastManager.addToast\n// ToastManager will inform whenever the something is added to the list of toasts via EVENT_TOASTS_UPDATED\n// The toasts themselves will fade out via css transition\nconst Toasts = () => {\n\n    const [activeToasts, setActiveToasts] = useState<ToastConfig[]>([]);\n\n    const toastsUpdated = (stack: ToastConfig[]) => {\n        setActiveToasts(stack);\n    }\n\n    useEffect(() => {\n        ToastManager.addEventListener(ToastManager.EVENT_TOASTS_UPDATED, toastsUpdated);\n        return () => {\n            ToastManager.removeEventListener(ToastManager.EVENT_TOASTS_UPDATED, toastsUpdated);\n        }\n    }, []);\n\n    return (\n        <div className=\"toasts\" > \n            { activeToasts.map((toastConfig) => (\n                <Toast key={toastConfig.time} {...toastConfig}/>\n            ))}\n        </div>\n    )\n}\n\nexport default Toasts;","import { Action } from \"redux\";\n\n// todo this should go somewhere else\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface ModifyWorkersAction extends Action<ActionType> {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","import { getDefinition } from \"definitions/items\";\r\nimport { Item, ItemType } from \"definitions/items/types\";\r\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\r\nimport * as React from \"react\";\r\nimport { StructureState, StructureStoreState } from \"stores/structure\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/cheatbox.css\";\r\nimport { useRef, useState } from 'react';\r\nimport { ToastManager } from 'global/ToastManager';\r\nimport { Type } from 'components/ui/toasts/Toast';\r\n\r\nexport interface DispatchProps {\r\n    onCheatGold?: (amount: number) => void;\r\n    onCheatWorkers?: (amount: number) => void;\r\n    onCheatResources?: (amount: number) => void;\r\n    onCheatItem?: (item: Item) => void;\r\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    structures: StructuresStoreState;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\nconst CheatWindow = (props: AllProps) => {\r\n\r\n    const itemSelectRef = useRef<HTMLSelectElement>(null);\r\n    const [cheats, setCheats] = useState({\r\n        gold: 50,\r\n        resources: 50,\r\n        workers: 10,\r\n    });\r\n\r\n    const getStructureRow = (structure: Structure) => {\r\n        const structureDef = getStructureDefinition(structure);\r\n        const structureStore: StructureStoreState = props.structures[structure];\r\n        const levelDef = structureDef.levels[structureStore.level];\r\n\r\n        const displayName = TextManager.get(levelDef.displayName);\r\n\r\n        return <div\r\n            className=\"label-dropdown\"\r\n            key={structure}\r\n        >\r\n            <label title={structure}>\r\n                { `${displayName}` }\r\n            </label>\r\n            <input\r\n                key={structure}\r\n                type=\"checkbox\"\r\n                checked={props.structures[structure].state === StructureState.Built }\r\n                onChange={() => handleChangeStructureState(structure, props.structures[structure].state !== StructureState.Built)}\r\n            />\r\n        </div>;\r\n    };\r\n\r\n    const structures = Object.keys(props.structures)\r\n        .map((structure) => getStructureRow(structure as Structure));\r\n\r\n    const getItemTypeOptions = (type: ItemType) => {\r\n        return Object.keys(Item)\r\n            // tslint:disable-next-line: triple-equals\r\n            // eslint-disable-next-line eqeqeq\r\n            .filter((item: string) => getDefinition(item as Item).itemType == type)\r\n            .map((item: string) => getItemOption(item as Item));\r\n    };\r\n\r\n    const getItemOption = (item: Item) => {\r\n        return <option value ={item } key ={item }>\r\n            { TextManager.getItemName(item) }\r\n        </option>;\r\n    };\r\n\r\n    const items = Object.keys(ItemType)\r\n        .filter((val: any) => !isNaN(val))\r\n        .map((type: string) => {\r\n        return <optgroup label ={ItemType[type] } key ={type }>\r\n            { getItemTypeOptions(type as unknown as ItemType) }\r\n        </optgroup>;\r\n    });\r\n\r\n    \r\n    const handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = cheats.gold;\r\n        if (props.onCheatGold) { props.onCheatGold(amount); }\r\n\r\n        const text = TextManager.get(\"common-cheat-gold-added\", { amount });\r\n        const icon = \"/img/resources/gold.png\";\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = cheats.workers;\r\n        if (props.onCheatWorkers) { props.onCheatWorkers(amount); }\r\n        const text = TextManager.get(\"common-cheat-workers-added\", { amount });\r\n        const icon = \"/img/resources/worker.png\";\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (props.onCheatResources) { props.onCheatResources(cheats.resources); }\r\n        const text = TextManager.get(\"common-cheat-resources-added\", { amount: cheats.resources });\r\n        ToastManager.addToast(text, Type.cheat);\r\n    }\r\n\r\n    const handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const item = itemSelectRef.current!.value as Item;\r\n        if (props.onCheatItem) { props.onCheatItem(item); }\r\n\r\n        const text = TextManager.get(\"common-cheat-item-added\", { item });\r\n        const icon = getDefinition(item).iconImg;\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleChangeStructureState = (structure: Structure, checked: boolean) => {\r\n        if (props.onCheatStructureState) {\r\n            props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\r\n        }\r\n        if (checked) {\r\n            ToastManager.addToast(`The ${TextManager.getStructureName(structure)} is constructed`, Type.cheat);\r\n        } else {\r\n            ToastManager.addToast(`The ${TextManager.getStructureName(structure)} is not constructed`, Type.cheat);\r\n        }\r\n    }\r\n \r\n    const handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            gold: amount,\r\n        });\r\n    }\r\n\r\n    const handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            workers: amount,\r\n        });\r\n    }\r\n\r\n    const handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            resources: amount,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"cheat-box\">\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Gold</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.gold}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeGold}>\r\n                </input>\r\n                <button onClick={handleCheatGold}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Workers</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.workers}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeWorkers}>\r\n                </input>\r\n                <button onClick={handleCheatWorkers}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Resources</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.resources}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeResources}>\r\n                </input>\r\n                <button onClick={handleCheatResources}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Items</label>\r\n                <select style={{width: \"150px\"}} ref={itemSelectRef}>\r\n                    { items }\r\n                </select>\r\n                <button onClick={handleCheatItem}>Add</button>\r\n            </div>\r\n            { structures }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheatWindow;\r\n","import { Resource } from \"definitions/resources\";\n\nexport const resourceOrder = [\n    Resource.food,\n    Resource.wood,\n    Resource.stone,\n    Resource.fabric,\n    Resource.leather,\n];\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/CheatWindow\";\nimport { resourceOrder } from \"constants/resources\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => {\n            dispatch(addGold(amount));\n            dispatch(addLogEntry(\"common-cheat-gold-added\", { amount }, LogChannel.common));\n        },\n        onCheatItem: (item: Item) => {\n            dispatch(addItemToWarehouse(item));\n            dispatch(addLogEntry(\"common-cheat-item-added\", { item }, LogChannel.common));\n        },\n        onCheatResources: (amount: number) => {\n            // Create ResourceStoreState where value of each resource is `amount`\n            const resources = resourceOrder.reduce((acc: ResourceStoreState, resource) => {\n                acc[resource] = amount;\n                return acc;\n            }, {});\n\n            dispatch(addResources(resources));\n            dispatch(addLogEntry(\"common-cheat-resources-added\", { amount }, LogChannel.common));\n        },\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => {\n            dispatch(addWorkers(amount));\n            dispatch(addLogEntry(\"common-cheat-workers-added\", { amount }, LogChannel.common));\n        },\n    };\n};\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(CheatWindow) as React.ComponentType<Props & WindowProps>;\n","import { Props as WindowProps } from \"components/ui/window/Window\";\r\nimport CheatWindow from \"containers/windows/CheatWindow\";\r\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\r\nimport { withWindow } from \"hoc/withWindow\";\r\nimport * as React from \"react\";\r\nimport { compose } from \"redux\";\r\nimport \"./css/cheatbox.css\";\r\n\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\r\nconst Menu = (props: AllProps & AppContextProps) => {\r\n\r\n    const handleClickCheats = () => {\r\n        const window = <CheatWindow title = \"Cheats\" />;\r\n        props.onOpenWindow(window);\r\n    };\r\n    return (\r\n        <div className=\"menu\">\r\n            <p>\r\n                <button onClick = { handleClickCheats }>Cheats!</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withWindow,\r\n    withAppContext,\r\n)(Menu) as React.ComponentType<AllProps>;\r\n","import { AppContext } from \"components/App\";\nimport { MediaItem } from \"components/preloading/Preloader\";\nimport * as React from \"react\";\n\n// Sharing context within the entire App\nexport interface AppContextProps {  \n    onOpenWindow: (window: React.ReactElement) => void;\n    media: MediaItem[] | null;\n}\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends React.Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n};\n","import \"components/ui/css/common/icon.css\";\nimport { resourceOrder } from \"constants/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"global/TextManager\";\nimport { useSelector } from 'react-redux';\nimport \"./css/resourcebar.css\";\nimport { StoreState } from 'stores';\nimport { selectFreeWorkers } from 'selectors/workers';\nimport { formatNumber } from 'utils/number';\n\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n    resources: ResourceStoreState;\n}\n\n/** Shown on top in the UI */\nconst Resourcebar = () => {\n    //console.log('rendering resourcebar')\n\n    // todo: seperate useSelectors for better performance\n    const storeProps = useSelector<StoreState, StateProps>((store: StoreState) => {\n        return {\n            gold: store.gold,\n            resources: store.resources,\n            workers: store.workers,\n            workersFree: selectFreeWorkers(store),\n        };\n    });\n\n    const createItem = (icon: string, amount: number, title: string) => {\n        return <li title = { title } key = { title }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${process.env.PUBLIC_URL}${icon})`,\n            }}></div>\n            <div className = \"amount\">\n                { formatNumber(amount) }\n            </div>\n        </li>;\n    };\n\n    const resources = resourceOrder.map((resource) => {\n        const resourceDescription = resourceDescriptions[resource];\n        return createItem(resourceDescription.iconImg, storeProps.resources[resource as string], TextManager.getResourceName(resource));\n    });\n\n    resources.push(\n        createItem(\"/img/resources/worker.png\", storeProps.workersFree, \"workers\"),\n        createItem(\"/img/resources/gold.png\", storeProps.gold, \"gold\"),\n    );\n\n// <span>\n//     workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n// </span>\n// <span>\n//     gold: <b>{ props.gold }</b>\n// </span>\n\n    return (\n        <ul className=\"resourcebar\">\n            { resources }\n        </ul>\n    );\n};\nexport default Resourcebar;\n","export const formatNumber = (number: number, digits: number = 1): string => {\n    const SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n   \n    // what tier? (determines SI symbol)\n    const tier = Math.log10(number) / 3 | 0;\n\n    // if zero, we don't need a suffix\n    if(tier === 0) return \"0\";\n\n    // get suffix and determine scale\n    const suffix = SI_SYMBOL[tier];\n    const scale = Math.pow(10, tier * 3);\n\n    // scale the number\n    const scaled = number / scale;\n\n    // format number and add suffix\n    return scaled.toFixed(digits) + suffix;\n}","import Menu from \"components/ui/window/windows/MenuWindow\";\nimport * as React from \"react\";\nimport \"./css/topbar.css\";\nimport Resourcebar from './Resourcebar';\nimport { useContext } from 'react';\nimport { AppContext } from 'components/App';\n\n\n\n\nconst Topbar = () => {\n    const context = useContext(AppContext)!;\n\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const window = <Menu title = \"Menu\" />;\n        context.onOpenWindow(window);\n    };\n\n    return (\n        <div className = \"topbar\">\n            <div className = \"topbar-left\">\n                <Resourcebar />\n            </div>\n            <div className = \"topbar-right\">\n                <div className = \"hamburger\" onClick = { handleClick }>☰</div>\n            </div>\n        </div>\n    );\n}\nexport default Topbar;","\ninterface Location {\n    x: number;\n    y: number;\n}\n\nexport const lerpLocation = (point1: Location, point2: Location, alpha: number): Location => {\n    const x = lerp(point1.x, point2.x, alpha);\n    const y = lerp(point1.y, point2.y, alpha);\n    return { x, y };\n}\n\nconst lerp = (n1: number,  n2: number,  alpha: number) =>  {\n    return n1 + alpha * (n2 - n1);\n}\n","import { Graphics, Point } from 'pixi.js';\nimport { PixiComponent } from '@inlet/react-pixi';\n\ninterface Props {\n    width: number;\n    height: number;\n    gridWidth: number;\n}\n\nconst gridColor = 0xadadad; // grey\nconst dotColor = 0x5203fc;  // purple\n\n// For debugging. Displays a grid\nconst MapGrid = PixiComponent('Rectangle', {\n    create: (props: Props) => new Graphics(),\n    applyProps: (instance: Graphics, oldProps, props) => {\n        const { width, height, gridWidth } = props;\n\n        instance.clear();\n        instance.lineStyle(1, gridColor, 0.5);\n        for(let y = 0; y < height; y++) {\n            instance.moveTo(0, y * gridWidth);\n            instance.lineTo(width, y * gridWidth);\n        }\n\n        for(let x = 0; x < width; x++) {\n            instance.moveTo(x * gridWidth, 0);\n            instance.lineTo(x * gridWidth, height);        \n        }\n        instance.endFill();\n\n        // Store props to access them in didMount\n        // todo: figure out a nicer way to access props in didmount\n        Object.assign(instance as any, {\n            gridWidth,\n            worldWidth: width,\n            worldHeight: height\n        });\n    },\n\n    didMount: (instance: Graphics, parent) => {\n\n        var point = new Graphics();\n        point.beginFill(dotColor); \n        point.drawCircle(0, 0, 3); \n        point.endFill();\n        point.x = -999; // offscreen\n        instance.addChild(point);\n\n        const { gridWidth, worldWidth, worldHeight } = instance as any;\n        parent.addListener(\"clicked\", (event: { world: PIXI.Point }) => {\n            const nearestX = Math.round(event.world.x / gridWidth) * gridWidth;\n            const nearestY = Math.round(event.world.y / gridWidth) * gridWidth;\n\n            // Move the purple dot\n            point.x = nearestX;\n            point.y = nearestY;\n\n            const nodeLocation = toNodeLocation(nearestX, nearestY);\n            console.log(`Node [${nodeLocation.x}, ${nodeLocation.y}]`);\n        });\n\n        // Node locations work on a centered coordinate system\n        const toNodeLocation = (x: number, y: number) => {\n            return {\n                x: (x - Math.floor(worldWidth / 2)) / gridWidth,\n                y: (y - Math.floor(worldHeight / 2)) / gridWidth,\n            }\n        }\n    },\n});\n\n\n\nexport default MapGrid;","import React, { useRef, useEffect } from 'react';\nimport { Sprite } from '@inlet/react-pixi';\nimport { QuestStoreState } from 'stores/quest';\nimport * as PIXI from 'pixi.js';\nimport { AdventurerStoreState } from 'stores/adventurer';\n\ninterface Props {\n    quest: QuestStoreState;\n    position: PIXI.Point;\n    selected?: boolean;\n    encounterActive?: boolean;\n    onClick?: (quest: QuestStoreState) => void;\n    leader: AdventurerStoreState;\n}\nconst CIRCLE_DIAMETER = 256; // = avatar size / 2\n\nconst QuestMarker = (props: Props) => {\n    const { quest, leader, encounterActive, position, onClick, selected } = props;\n    const image = selected ? '/img/world/map-marker-selected.png' : '/img/world/map-marker.png';\n\n    const avatar = useRef<Sprite>(null);\n    // Mask has to be a child of the avatar in order to move with it\n    useEffect(() => {\n        const sprite = avatar.current as any as PIXI.Sprite;\n\n        const maskGraphics = new PIXI.Graphics();\n        maskGraphics.beginFill(0xBADA55);\n        maskGraphics.drawCircle(0, 0, CIRCLE_DIAMETER * 1);\n        maskGraphics.endFill(); \n\n        sprite.mask = maskGraphics;\n        sprite.addChild(maskGraphics);\n    }, [avatar]);\n\n    return (\n        <Sprite\n            image={image} \n            name={quest.name}\n            x={position.x}\n            y={position.y}\n            interactive={true}\n            buttonMode\n            scale={new PIXI.Point(0.1, 0.1)}\n            anchor={new PIXI.Point(0.5, 1)}\n            pointerdown={() => {\n                if(onClick) {\n                    onClick(quest);\n                }\n            }}\n        >\n            { leader && (\n            <Sprite \n                image={leader.avatarImg} \n                name=\"avatar\"\n                anchor={new PIXI.Point(0.5, 0.5)}\n                x={0}\n                y={-396}\n                scale={new PIXI.Point(0.66, 0.66)}\n                ref={avatar}\n            />)}\n            {encounterActive && (\n            <Sprite \n                image='/img/world/quest-alert.png'\n                name=\"quest-alert\"\n                anchor={new PIXI.Point(0.5, 1)}\n                x={180}\n                y={-396}\n                scale={new PIXI.Point(2, 2)}\n            />\n            )}\n        </Sprite>\n    )\n}\n\nexport default QuestMarker;","import React from \"react\";\nimport { Graphics } from '@inlet/react-pixi';\n\ninterface Props {\n    positions: PIXI.Point[];\n}\n\nconst QuestLine = (props: Props) => {\n    const { positions } = props;\n    if (props.positions.length > 2) {\n        return <Graphics\n            name=\"questline\"\n            x={0}\n            y={0}\n            draw={graphics => {\n                graphics.lineStyle(3, 0xFF3300);\n                graphics.moveTo(positions[0].x, positions[0].y);\n\n                let i = 0;\n                for (i = 1; i < positions.length - 2; i ++)\n                {\n                    var xc = (positions[i].x + positions[i + 1].x) / 2;\n                    var yc = (positions[i].y + positions[i + 1].y) / 2;\n                    graphics.quadraticCurveTo(positions[i].x, positions[i].y, xc, yc);\n                }\n                graphics.quadraticCurveTo(positions[i].x, positions[i].y, positions[i+1].x, positions[i+1].y);\n                graphics.endFill(); \n            }}\n        />;\n    }\n    return null;\n}\n\nexport default QuestLine;\n// tx.moveTo(positions[0].x, positions[0].y);\n\n\n//    for (i = 1; i < positions.length - 2; i ++)\n//    {\n//       var xc = (positions[i].x + positions[i + 1].x) / 2;\n//       var yc = (positions[i].y + positions[i + 1].y) / 2;\n//       ctx.quadraticCurveTo(positions[i].x, positions[i].y, xc, yc);\n//    }\n//  // curve through the last two positions\n//  ctx.quadraticCurveTo(positions[i].x, positions[i].y, positions[i+1].x,positions[i+1].y);","import { TextEntry } from \"constants/text\";\nimport { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getQuests = (state: StoreState) => state.quests;\nconst getLog = (state: StoreState) => state.log;\n\nconst activeQuests = (quests: QuestStoreState[]) => {\n    // returns the names of the active quests\n    return quests.filter((q) => q.status === QuestStatus.active).map((q) => q);\n};\n\nexport const selectActiveQuests = createSelector([\n    getQuests],\n    activeQuests,\n);\n\n/**\n * Returns the most recent log entry for a given quest\n */\nexport const selectLastQuestLogEntry = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry | undefined => {\n        const questLog = log.find((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n        return questLog;\n    },\n)(state);\n\n/**\n * Returns all log entries for given quest\n */\nexport const selectQuestLogEntries = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry[] | undefined => {\n        return log.filter((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n    },\n)(state);\n","import * as PIXI from 'pixi.js';\r\nimport { Stage, Sprite } from '@inlet/react-pixi';\r\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport React, { useEffect, useRef, useCallback, useState } from \"react\";\r\nimport { QuestStoreState } from \"stores/quest\";\r\nimport { lerpLocation } from 'utils/pixiJs';\r\nimport { QuestDefinition, QuestNodeType, QuestNode } from \"definitions/quests\";\r\nimport Viewport from '../../pixi/Viewport';\r\nimport MapGrid from './MapGrid';\r\nimport QuestMarker from './QuestMarker';\r\nimport { StoreState } from 'stores';\r\nimport { getQuestLeader } from 'storeHelpers';\r\nimport { AdventurerStoreState } from 'stores/adventurer';\r\nimport QuestLine from './QuestLine';\r\nimport { MAX_WIDTH as WIDTH } from 'components/App';\r\nimport { selectActiveQuests } from 'selectors/quests';\r\nimport { getDefinition } from 'definitions/quests';\r\n\r\nconst FULL_HEIGHT = 1024;\r\nconst SMALL_HEIGHT = 128;   // Used when QuestPanel is open\r\nconst WORLD_WIDTH = 1500;\r\nconst WORLD_HEIGHT = 1061;\r\nconst GRID_WIDTH = 10;      // width or height of each node location in pixels\r\n\r\n// // This stuff is needed for the pixi-js browser plugin\r\nif (process.env.NODE_ENV === \"development\") {\r\n    // @ts-ignore\r\n    window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI: PIXI });\r\n}\r\n\r\nexport interface Props {\r\n    selectedQuestName?: string;\r\n    smallMap: boolean;\r\n    onPartyClick: (questName: string) => void;\r\n    retrieveWorldViewRef: () => React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst WorldMap = (props: Props) => {\r\n    const { retrieveWorldViewRef, smallMap } = props;\r\n    const questSelector = useCallback(\r\n        (state: StoreState) => state.quests.find((q) => q.name === props.selectedQuestName), \r\n        [props.selectedQuestName]\r\n    );\r\n    const selectedQuest = useSelector<StoreState, QuestStoreState | undefined>(questSelector);\r\n    const adventurers = useSelector<StoreState, AdventurerStoreState[]>((store) => store.adventurers);\r\n    const activeQuests = useSelector<StoreState, QuestStoreState[]>((store) => selectActiveQuests(store));\r\n\r\n    const handlePartyClick = (name: string) => {\r\n        props.onPartyClick(name);\r\n    };\r\n\r\n    // useEffect(() => {        \r\n    //     const onScroll = (e: WheelEvent) => {\r\n    //         // When the map is big, scrolling the mouse is just used for zoom, not for actual scrolling\r\n    //         if (!smallMap) {\r\n    //             e.preventDefault();\r\n    //         }\r\n    //     }\r\n    //     window.addEventListener(\"wheel\", onScroll, {passive: false} );\r\n    //     return () => {\r\n    //         window.removeEventListener(\"wheel\", onScroll);\r\n    //     };\r\n    // }, [smallMap]);\r\n\r\n\r\n    const [canvasWidth, setCanvasWidth] = useState(WIDTH);\r\n    const [canvasHeight, setCanvasHeight] = useState(FULL_HEIGHT);\r\n\r\n    useEffect(() => {\r\n        // This will set the dimensions of the canvas tot that of the parent (worldview)\r\n        const resize = () => {\r\n            const worldView = retrieveWorldViewRef();\r\n            const worldViewWidth = worldView.current?.clientWidth || WIDTH;\r\n            const worldViewHeight = worldView.current?.clientHeight || FULL_HEIGHT;\r\n\r\n            setCanvasWidth(worldViewWidth);\r\n            if (smallMap) {\r\n                if (worldViewWidth < 576) {\r\n                    // Small screens\r\n                    setCanvasHeight(SMALL_HEIGHT / 2); \r\n                } else {\r\n                    setCanvasHeight(SMALL_HEIGHT); \r\n                }\r\n            }\r\n            else {\r\n                setCanvasHeight(worldViewHeight); \r\n            }\r\n        }\r\n        resize();\r\n        window.addEventListener(\"resize\", resize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resize);\r\n        };\r\n    }, [retrieveWorldViewRef, smallMap]);\r\n\r\n    useEffect(() => {\r\n        if (selectedQuest) {\r\n            focusOnQuestingParty(selectedQuest);\r\n        }\r\n    }, [selectedQuest, canvasHeight])\r\n\r\n    const viewportRef = useRef<PixiViewport>(null);\r\n    useEffect(() => {\r\n        // focus on center of the map\r\n        if (viewportRef.current) {\r\n            const viewport = viewportRef.current;\r\n            const point = nodeLocationToPoint({ x: 0, y: 0 });\r\n            viewport.moveCenter(point.x, point.y);\r\n        }\r\n    }, [canvasWidth]);\r\n\r\n    const renderQuestlines = () => {\r\n        return activeQuests.map((quest) => {\r\n            const previousPositions = getPreviousPositions(quest);\r\n            return (\r\n                <QuestLine positions={previousPositions} key={quest.name} />\r\n            );\r\n        });\r\n    };\r\n\r\n    const renderMarkers = () => {\r\n        return activeQuests.map((quest) => {\r\n            const location = getQuestWorldLocation(quest);\r\n            const currentPosition = nodeLocationToPoint(location);\r\n            const leader = getQuestLeader(adventurers, quest)!;\r\n            const questDefinition: QuestDefinition = getDefinition(quest.name);\r\n            const progress: number = Math.floor(quest.progress);\r\n            const questNode: QuestNode = questDefinition.nodes[progress];\r\n            \r\n            return (\r\n                <QuestMarker \r\n                    quest={quest} \r\n                    leader={leader} \r\n                    position={currentPosition} \r\n                    key={quest.name} \r\n                    selected={quest === selectedQuest}\r\n                    encounterActive={questNode.type === QuestNodeType.encounter}\r\n                    onClick={(quest) => handlePartyClick(quest.name)} \r\n                />\r\n            );\r\n        });\r\n    };\r\n\r\n\r\n    // puts the given party in the center of the map\r\n    const focusOnQuestingParty = (quest: QuestStoreState) => {\r\n        const viewport = viewportRef.current;\r\n        if (viewport) {\r\n            const partyLocation = getQuestWorldLocation(quest);\r\n            const point = nodeLocationToPoint(partyLocation);\r\n            viewport.moveCenter(point.x, point.y);\r\n        }\r\n    }\r\n\r\n    const handleMapClick = () => {\r\n        /// todo: close map\r\n        // if(smallMap === true && selectedQuest) {\r\n        //     props.onPartyClick(selectedQuest.name);\r\n        // }\r\n    }\r\n\r\n// console.log(canvasWidth);\r\n    return (\r\n        <Stage width={canvasWidth} height={canvasHeight} >\r\n            <Viewport screenWidth={canvasWidth} screenHeight={canvasHeight} worldWidth={WORLD_WIDTH} worldHeight={WORLD_HEIGHT} ref={viewportRef} >\r\n                <Sprite \r\n                    image={`${process.env.PUBLIC_URL}/img/world/francesca-baerald-fbaerald-angeloumap-lowres.jpg`} \r\n                    interactive \r\n                    pointerdown={handleMapClick}\r\n                >\r\n                    {renderQuestlines()}\r\n                    {renderMarkers()}\r\n                </Sprite>\r\n                <MapGrid width={WORLD_WIDTH} height={WORLD_HEIGHT} gridWidth={GRID_WIDTH} />\r\n            </Viewport>\r\n        </Stage>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default WorldMap;\r\n\r\nconst getQuestWorldLocation = (quest: QuestStoreState): { x: number; y: number; } => {\r\n    const questDefinition = getDefinition(quest.name);\r\n    const roundedProgress = Math.floor(quest.progress);\r\n    const lastNode = questDefinition.nodes[roundedProgress];\r\n\r\n    const nextNode = questDefinition.nodes[roundedProgress + 1];\r\n    if (!nextNode) {\r\n        // We've reached the last node\r\n        return lastNode;\r\n    }\r\n    return lerpLocation(lastNode, nextNode, quest.progress - roundedProgress);\r\n};\r\n\r\n// Node locations work on a centered coordinate system\r\nconst nodeLocationToPoint = (location: { x: number; y: number; }) => {\r\n    const x = location.x * GRID_WIDTH + WORLD_WIDTH / 2;\r\n    const y = location.y * GRID_WIDTH + WORLD_HEIGHT / 2;\r\n    return new PIXI.Point(x, y);\r\n}\r\n\r\nconst getPreviousPositions = (quest: QuestStoreState) => {\r\n    const positions: PIXI.Point[] = [];\r\n    const questDefinition = getDefinition(quest.name);\r\n\r\n    for (let i = 0; i < quest.progress; i++) {\r\n        positions.push(nodeLocationToPoint(questDefinition.nodes[i]))\r\n    }\r\n    const lastPosition = nodeLocationToPoint(getQuestWorldLocation(quest));\r\n    positions.push(lastPosition);\r\n    return positions;\r\n}","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import React from \"react\";\nimport Tabstrip from 'components/ui/tabs/Tabstrip';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport Tab from 'components/ui/tabs/Tab';\nimport AdventurerAvatar from 'components/ui/AdventurerAvatar';\n\ninterface Props {\n    adventurers: AdventurerStoreState[];\n    onAdventurerTabSelected: (adventurer: AdventurerStoreState) => void;\n}\n\n// Shows adventurer portraits in a tabstrip\nconst AdventurerTabstrip = (props: Props) => {\n    const {adventurers, onAdventurerTabSelected} = props;\n\n    const handleAdventurerTabSelected = (adventurerId: string) => {\n        const adventurer = props.adventurers.find(a => a.id === adventurerId)!;\n        onAdventurerTabSelected(adventurer);\n    }\n\n    const renderAdventurerTab = (adventurer: AdventurerStoreState) => (\n        <Tab id={adventurer.id} key={adventurer.id}>\n            <AdventurerAvatar adventurer={adventurer} className=\"common-icon-small\"/>\n        </Tab>\n    );\n    return (\n        <Tabstrip className=\"adventurers-tabstrip\" onTabSelected={handleAdventurerTabSelected} >\n            {adventurers.map((a) => renderAdventurerTab(a))}\n        </Tabstrip>\n    )\n}\n\nexport default AdventurerTabstrip;","import React from \"react\";\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport EquipmentSlot, { EquipmentSlotType } from 'components/ui/EquipmentSlot';\nimport { Item } from 'definitions/items/types';\nimport DraggableItemIcon, { InventoryItemDragInfo } from 'components/ui/DraggableItemIcon';\nimport { DragSourceType } from 'constants/dragging';\nimport { IconSize } from 'constants/icons';\nimport { TextManager } from 'global/TextManager';\n\nexport interface Props {\n    adventurer: AdventurerStoreState\n    onDropItemEquipment: (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => void;\n}\n\nconst AdventurerEquipment = (props: Props) => {\n    const { adventurer, onDropItemEquipment } = props;\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n\n            contents = (\n                <DraggableItemIcon\n                    index={slotType}\n                    sourceId={adventurer.id}\n                    sourceType={DragSourceType.adventurerEquipment}\n                    item={item}\n                    ref={itemRef}\n                    size={IconSize.medium}\n                />\n            );\n        }\n\n        return (\n            <>\n                <EquipmentSlot\n                    onDrop={(dragInfo: InventoryItemDragInfo) => onDropItemEquipment(dragInfo, slotType)}\n                    type={slotType}\n                >\n                    {contents}\n                </EquipmentSlot>\n                <span className=\"info\">{TextManager.get(`ui-equipmentslot-${EquipmentSlotType[slotType]}`)}</span>\n            </>\n        );\n    };\n    return (\n        <ul>\n            <li>{getEquipmentSlot(EquipmentSlotType.head)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.shoulders)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.chest)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.hands)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.legs)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.feet)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.mainHand)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.offHand)}</li>\n        </ul>\n    )\n}\n\nexport default AdventurerEquipment;","import React from \"react\";\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport { EquipmentSlotType } from 'components/ui/EquipmentSlot';\nimport { Item } from 'definitions/items/types';\nimport { InventoryItemDragInfo } from 'components/ui/DraggableItemIcon';\nimport { DragSourceType } from 'constants/dragging';\nimport AdventurerEquipment from './AdventurerEquipment';\nimport Inventory from 'components/ui/inventory/Inventory';\nimport { useDispatch } from 'react-redux';\nimport { Action } from \"redux\";\n\nimport { removeItemFromInventory, assignEquipment, addItemToInventory, removeEquipment, moveItemInInventory } from 'actions/adventurers';\nimport { removeItemFromWarehouse, addItemToWarehouse } from 'actions/items';\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n}\n\n/** Vertical panel showing adventurer info */\nconst AdventurerPanel = (props: Props) => {\n    const { adventurer } = props;\n    const dispatch = useDispatch();\n\n    const renderAttributes = () => Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key={`${adventurer.id}-${stat}`} > <b>{stat}</b>: {value.toFixed(1)} </div>;\n    });    \n\n    // When an item gets dropped on equipment slot\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        const item = dragInfo.item;\n        const actions: Action[] = [];\n\n        switch (dragInfo.sourceType) {\n            // Dragged from inventory\n            case DragSourceType.adventurerInventory: {\n                actions.push(\n                    // Item gets removed from inventory\n                    removeItemFromInventory(adventurer.id, dragInfo.inventorySlot!),\n                    // Item gets assigned to an equipment slot\n                    assignEquipment(adventurer.id, slotType, item),\n                );\n                \n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    // There is already an item in this slot. Place in inventory\n                    actions.push(addItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!));\n                }\n                break;\n            }\n            // Dragged from warehouse. I dont think this can happen in this AdventurerPanel\n            case DragSourceType.warehouse: {\n                actions.push(\n                    removeItemFromWarehouse(dragInfo.inventorySlot!),\n                    assignEquipment(adventurer.id, slotType, item),\n                );            \n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    // There is already an item in this slot. Place in warehouse\n                    actions.push(addItemToWarehouse(existingEquipment, dragInfo.inventorySlot!));\n                }\n                break;\n            }\n\n            // Dragged from equipment slot (only applicable to weapons)\n            case DragSourceType.adventurerEquipment: {\n                actions.push(\n                    assignEquipment(adventurer.id, slotType, item)\n                );\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    actions.push(assignEquipment(adventurer.id, fromSlot, existingEquipment),)\n                } else {\n                    // Clear the slot where it came from\n                    actions.push(removeEquipment(adventurer.id, fromSlot));\n                }\n                break;\n            }\n        }\n        actions.forEach(a => dispatch(a));\n    };\n\n    // When an item gets dropped on the inventory\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        const actions: Action[] = [];        \n        switch (sourceType) {\n            // Drag from one inventory slot to another\n            case DragSourceType.adventurerInventory:\n                actions.push(moveItemInInventory(adventurer.id, fromSlot, toSlot))\n                break;\n\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                actions.push(\n                    removeItemFromWarehouse(fromSlot),\n                    addItemToInventory(adventurer.id, item, toSlot),\n                )\n                const otherItem = adventurer.inventory[toSlot];\n                if (otherItem) {\n                    actions.push(\n                        addItemToWarehouse(otherItem, fromSlot)\n                    )\n                }\n                break;\n            }\n\n            // Drag from equipment slot\n            case DragSourceType.adventurerEquipment: {\n                actions.push(\n                    addItemToInventory(adventurer.id, item, toSlot)\n                );\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    actions.push(assignEquipment(adventurer.id, fromSlot, existingEquipment));\n                } else {\n                    // Clear the slot where it came from\n                    actions.push(removeEquipment(adventurer.id, fromSlot));\n                }\n                break;\n            }\n        }\n        actions.forEach(a => dispatch(a));\n    };\n\n    return (\n        <div className=\"adventurer-panel\">\n            <div className=\"info\">\n                <div className=\"name\">\n                    <b>{adventurer.name}</b>\n                </div>\n                <div className=\"renderAttributes\">\n                    {renderAttributes()}\n                </div>\n            </div>\n                <div className=\"equipment\">\n                    <AdventurerEquipment adventurer={adventurer} onDropItemEquipment={handleDropItemEquipment} />\n                </div>\n            <div className=\"right\">\n                <Inventory\n                    sourceType={DragSourceType.adventurerInventory}\n                    sourceId={adventurer.id}\n                    items={adventurer.inventory}\n                    className=\"inventory-medium\"\n                    onDropItem={handleDropItemInventory}\n                /> \n            </div>\n        </div>\n    )\n}\n\nexport default AdventurerPanel;","import { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { randomInt } from \"utils/random\";\n\n/**\n * The Oracle is a helper class for retrieving relevant data during encounters\n */\nexport class Oracle {\n    public readonly questName: string;\n    public readonly store: StoreState;\n\n    constructor(questName: string, store: StoreState) {\n        this.questName = questName;\n        this.store = store;\n    }\n\n    /**\n     * Returns the questVars of the quest that this encounter is part of\n     */\n    public get questVars(): any {\n        return this.quest.questVars;\n    }\n\n    /**\n     * Returns the quest that this encounter is part of\n     */\n    public get quest(): QuestStoreState {\n        return this.store.quests.find((q) => q.name === this.questName)!;\n    }\n\n    /**\n     * Returns all adventurers on this quest\n     */\n    public get adventurers(): AdventurerStoreState[] {\n        return adventurersOnQuest(this.store.adventurers, this.quest);\n    }\n\n    /**\n     * Returns the adventurer in the encounter with highest given stat\n     * @param stat\n     */\n    public getAdventurerWithHighest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store.adventurers, this.quest)\n            .concat().sort((a, b) => (b.stats[stat] - a.stats[stat]))[0];\n    }\n\n    /**\n     * Returns the adventurer in the encounter with lowest given stat\n     * @param stat\n     */\n    public getAdventurerWithLowest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store.adventurers, this.quest)\n            .concat().sort((a, b) => (a.stats[stat] - b.stats[stat]))[0];\n    }\n\n    /**\n     * Returns a random adventurer in the party\n     */\n    public getRandomAdventurer(): AdventurerStoreState {\n        return this.adventurers[randomInt(0, this.adventurers.length)];\n    }\n}\n\nexport const oracles: any = {\n    // This will be the global store to hold all oracles, keyed by quest\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addItemToInventory } from \"actions/adventurers\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Item } from \"../items/types\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const backstabbed: EncounterDefinition = {\n    name: Encounter.backstabbed,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-backstabbed-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            fight: \"Fight the brigands\",\n            flight: \"Run away!\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        switch (option) {\n            case \"flight\":\n                return \"You run away like a pussy\";\n            case \"fight\":\n                const finder = oracle.getRandomAdventurer();\n                dispatch(addItemToInventory(finder.id, Item.deedForWeaponsmith));\n                return `The party fights off the rogues. One of them drops a document. ${finder.name} picks it up`;\n            default:\n                throw new Error(`Unhandled option '${option}`);\n        }\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { startEncounter, advanceQuest } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const goblinHouseOutside: EncounterDefinition = {\n    name: Encounter.goblinHouseOutside,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseOutside-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Investigate\",\n            leave: \"Keep walking\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { quest } = oracle;\n        switch (option) {\n            case \"investigate\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            case \"leave\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\nexport const goblinHouseHallway: EncounterDefinition = {\n    name: Encounter.goblinHouseHallway,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseHallway-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Go inside the house\",\n            leave: \"Leave the premise\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"leave\":\n                // const nextEncounter = startEncounter(quest.name, goblinhouseInside)\n                const action = advanceQuest(oracle.questName);\n                dispatch(action);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party escapes the house unscathed`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\n// todo: other goblinHouse encounters\n","import { backstabbed } from \"./backstabbed\";\nimport { goblinHouseHallway, goblinHouseOutside } from \"./goblinHouse\";\nimport { theBigTree } from \"./theBigTree\";\nimport { EncounterDefinition } from \"./types\";\n\nconst all = {\n    backstabbed,\n    goblinHouseHallway,\n    goblinHouseOutside,\n    theBigTree,\n};\n\nexport default all;\n\nexport function getDefinition(encounter: string): EncounterDefinition {\n    return all[encounter];\n}\n","// tslint:disable:object-literal-sort-keys\nimport { addGold } from \"actions/gold\";\nimport { updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { randomInt } from \"utils/random\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\nexport interface QuestVars {\n    treeState: string;\n}\n\nexport const theBigTree: EncounterDefinition = {\n    name: Encounter.theBigTree,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     return `A huge tree blocks the way. ${pyromancer.name} offers to burn it`;\n        // }\n        return { key: \"encounter-thebigtree-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        //const store = oracle.store;\n        const strongest = oracle.getAdventurerWithHighest(\"strength\");\n        //        const strongest = { name: \"<<NAME>>\" };\n        const options: Record<string, string> = {\n            walkAround: \"Walk around the tree\",\n            lift: `Lift the tree (${strongest.name})`,\n        };\n        // todo: should be 'type' or 'class'\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     options.burn = \"Burn it down (${pyromancer.name}\";\n        // }\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"lift\":\n                const strongest = oracle.getAdventurerWithHighest(\"strength\");\n                questVars.treeState = \"lifted\";\n\n                const action = updateQuestVars(quest.name, questVars);\n                dispatch(action);\n\n                const goldAmount = randomInt(2, 5);\n                const goldAction = addGold(goldAmount);\n                dispatch(goldAction);\n\n                // tslint:disable-next-line:max-line-length\n                return `${strongest.name} heaves and lifts the heavy tree, moving it aside. Underneath your party finds ${goldAmount} gold coins`;\n\n                // if(random() < strongest.stats.strenth) {\n                //     questState.bigTreeState = \"lifted\";\n                //     giveGold(3);\n                //     return \"${strongest.name} heaves and lifts the heavy tree,\n                // moving it aside. Underneath your party finds 3 gold coins\";\n                // }\n                // else {\n                //     strongest.loseHealth(20);\n                //     if(strongest.isDead){\n                //         return \"${strongest.name} attempted to lift the\n                // tree but it is too heavy, causing him to die\".\n                //     }\n                //     return \"%{strongest.name} attempted to lift the tree but it is too heavy, losing 20 hp\";\n                // }\n            // case \"burn\":\n            //     const pyrommancer = store.adventurers.find(a => a.type == \"pyromancer\")\n            //     questState.bigTreeState = \"burned\";\n            //     return \"${pyromancer.name} cackles as you sets the tree ablaze.\n            // The party steps over the smouldering ashes and continues\"\n            // }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n","import React, { useRef, useEffect } from \"react\";\nimport TiledMapContainer from 'components/tiled';\nimport { Stage, useApp, Container, useTick } from '@inlet/react-pixi';\nimport * as PIXI from 'pixi.js';\nimport path from 'path';\n\n// todo: multiple layers \n\n// const Viewport = React.forwardRef<PixiViewport, any>((props, ref) => {\n\n// const tiledPath = `${process.env.PUBLIC_URL}scenes/ork-dungeon-level1.tmx`;\nconst tiledPath = `${process.env.PUBLIC_URL}/scenes/ork-dungeon-level1.json`;\n\nenum Orientation {\n    orthagonal = \"orthagonal\",\n    isometric = \"isometric\",\n    staggered = \"staggered\",\n    hexagonal = \"hexagonal\"\n}\n\nenum RenderOrder {\n    rightUp = \"right-up\",\n    rightDown = \"right-down\",\n    leftUp = \"left-up\",\n    leftDown = \"left-down\"\n}\n\ninterface TilesetData {\n    columns: number;\n    image: string;\n    imagewidth: number;\n    imageheight: number;\n    tilewidth: number;\n    tileheight: number;\n    name: string;\n}\n\ninterface LayerData {\n    data: Array<number>;\n    height: number;\n    id: number;\n    name: string;\n    opacity: number; // not supported atm\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;    \n}\n\ninterface MapData {\n    width: number;\n    height: number;\n    infinite: boolean;\n    backgroundcolor: string | null;\n    orientation: Orientation;\n    renderorder: RenderOrder;\n    tilesets: TilesetData[];\n    layers: LayerData[];\n}\n\nconst TileMap = () => {\n    const app = useApp();\n    const ref = useRef<Container>(null);\n\n    const parseMap = (map: any) => {\n        var data = [];\n        let count = 0;\n\n        for (var i = 0; i < map.length; i++)\n        {\n            for (var j = 0; j < map[i].length; j++)\n            {\n                data[count++] = map[i][j][0];   // x\n                data[count++] = 0\n                data[count++] = 0;\n                data[count++] = map[i][j][1];   // y\n            }\n        }\n        return new Uint8Array( data );\n    }\n    const parseLayer = (layer: LayerData): Uint8Array => {\n        const data = layer.data.reduce((acc: Array<number>, cell, index) => {\n            const { x, y } = getTileCoordsByGid(cell, layer);\n            acc[index * 4] = x;         // tile x on tilemap\n            acc[index * 4 + 1] = 0;\n            acc[index * 4 + 2] = 0;\n            acc[index * 4 + 3] = y;     // tile y on tilemap \n            return acc;\n        }, []);\n        return new Uint8Array(data);\n    }\n\n    const getTileCoordsByGid = (cell: number, layerData: LayerData) => {\n        if (cell === 0) { \n            return { x: -1, y: -1 };\n        }\n        const x =  (cell -1) % layerData.width;\n        const y = Math.floor((cell - x) / layerData.height);\n\n        return { x, y };\n    }\n\n    const getTileset = (map: MapData) => {\n        if (!map.tilesets.length) {\n            throw new Error(\"No tilesets found! Can't continue\");\n        }\n        if (map.tilesets.length > 1) {\n            console.warn(\"Found more than one tileset. But we currently only support one.\");\n        }\n        return map.tilesets[0];\n    }\n\n//const tiledPath = 'https://regl-project.github.io/regl/www/gallery/assets/map.json'\nconst tilePath = 'https://regl-project.github.io/regl/www/gallery/assets/tiles.png'\n\n    useEffect(() => {\n        const frag = `\n            precision mediump float;\n            uniform sampler2D map, image;\n            uniform vec2 mapSize, tileSize;\n            varying vec2 uv;\n            void main() {\n                vec2 tileCoord = floor(255.0 * texture2D(map, floor(uv) / mapSize).ra);\n                gl_FragColor = texture2D(image, (tileCoord + fract(uv)) / tileSize);\n            }`;\n\n        const vert = `\n            precision mediump float;\n            attribute vec2 position;\n            uniform vec4 view;\n            varying vec2 uv;\n            void main() {\n                uv = mix(view.xw, view.zy, 0.5 * (1.0 + position));\n                gl_Position = vec4(position, 1, 1);\n            }`;\n\n        new PIXI.Loader().add([tiledPath]).load((loader)=>{\n            \n          const mapData: MapData = loader.resources[tiledPath].data;\n          const basePath = path.dirname(tiledPath.replace(loader.baseUrl, ''));\n          const mapWidth = mapData.width;\n          const mapHeight =  mapData.height;\n        \n          // We only support one tileset at the moment. Have to figure out how to handle//]\n          // multiple tiles\n\n          const tileset = getTileset(mapData);\n          const tileSize: Array<number> = [\n              tileset.imagewidth / tileset.tilewidth,\n              tileset.imageheight / tileset.tileheight,\n          ];\n          // All below is per layer!\n          // note, the layers array order is depth sorting. first element in the array is lowest. last is highest\n          const layer = mapData.layers[1];\n          const mapSize = [mapWidth, mapHeight];\n        //   console.log(parseLayer(layer));\n          const map = PIXI.BaseTexture.fromBuffer(parseLayer(layer), mapWidth, mapHeight );\n          const image = PIXI.Texture.from(`${basePath}/${tileset.image}`);\n        //   console.log(map);\n          image.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\n          image.baseTexture.mipmap = PIXI.MIPMAP_MODES.OFF;// MipMapModes. SCALE_MODESfalse;\n        \n          // make a shader..\n          const shader = PIXI.Shader.from(vert, frag, {\n              map,\n              image,\n              tileSize,                 // [nr_of_tiles_wide, nr_of_tiles_high] \n              mapSize,                  // [tiles_width, tiles_height]\n              view: [0, 0, mapWidth, mapHeight]      // in tiles\n          })\n\n          // make a geometry..\n          const geometry = new PIXI.Geometry()\n          .addAttribute('position', [ -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1 ]);\n        \n\n          const tileMesh = new PIXI.Mesh(geometry, shader); // todo: PixiComponent\n          if(ref.current){ \n            (ref.current! as any).addChild(tileMesh);\n          }\n\n          \n        \n        // const sprite = new PIXI.Sprite(image);\n        //   (ref.current! as any).addChild(sprite);\n          \n        });\n    }, []);\n\n    useTick((delta) => {\n        // const boxX = mapWidth * x / app.screen.width\n        // const boxY = mapHeight * y / app.screen.height\n        // const boxH = 10\n        // const boxW = app.screen.width / app.screen.height * boxH\n\n        // shader.uniforms.view = [boxX - 0.5 * boxW,\n        //     boxY - 0.5 * boxH,\n        //     boxX + 0.5 * boxW,\n        //     boxY + 0.5 * boxH]\n    });\n//   app.stage.interactive = true;\n\n//   app.stage.mousemove = e => {\n//       x = e.data.global.x * 0.5;\n//       y = e.data.global.y * 0.6;\n//   }\n\n  // update tick..\n//   app.ticker.add(()=>{\n\n//       const boxX = mapWidth * x / app.screen.width\n//       const boxY = mapHeight * y / app.screen.height\n//       const boxH = 10\n//       const boxW = app.screen.width / app.screen.height * boxH\n\n//       shader.uniforms.view = [boxX - 0.5 * boxW,\n//                               boxY - 0.5 * boxH,\n//                               boxX + 0.5 * boxW,\n//                               boxY + 0.5 * boxH]\n\n//   })\n\n//   app.renderer.resize(window.innerWidth, window.innerHeight);\n\n\n// // resize with logo..\n// window.addEventListener('resize', ()=>{\n\n// //  app.renderer.resize(window.innerWidth, window.innerHeight);\n// });\n\n//const app = new PIXI.Application(window.innerWidth, window.innerHeight, {resolution:1, clearBeforeRender:false, autoResize:true, backgroundColor:0x333333})\n\n//budo index.js --live -- -t babelify\n\n    // const ref = useRef();\n    // var loader = new PIXI.Loader();\n    // loader.add('atlas', 'basic/atlas.json');\n    // loader.load(function(loader, resources) {\n    //     var tilemap = new PIXI.tilemap.CompositeRectTileLayer(0, [resources['atlas_image']!.texture]);\n    //     var size = 32;\n    //     // bah, im too lazy, i just want to specify filenames from atlas\n    //     for (var i=0;i<7;i++)\n    //         for (var j=0;j<7;j++) {\n    //             tilemap.addFrame(\"grass.png\", i*size, j*size);\n    //             if (i%2==1 && j%2==1)\n    //                 tilemap.addFrame(\"tough.png\", i*size, j*size);\n    //         }\n\n    //     // if you are lawful citizen, please use textures from the loader\n    //     var textures = resources.atlas.textures;\n    //     tilemap.addFrame(textures[\"brick.png\"], 2*size, 2*size);\n    //     tilemap.addFrame(textures[\"brick_wall.png\"], 2*size, 3*size);\n\n    //     //renderer.render(tilemap);\n    // });\n\n    return (\n            <Container\n                ref={ref}\n            >\n\n            </Container>\n    );\n}\n\nexport default TileMap;","import SquareIconButton from \"components/ui/buttons/SquareIconButton\";\r\nimport Tab from \"components/ui/tabs/Tab\";\r\nimport Tabstrip from \"components/ui/tabs/Tabstrip\";\r\nimport * as React from \"react\";\r\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/simplelog.css\";\r\nimport { useState } from 'react';\r\nimport { StoreState } from 'stores';\r\nimport { useSelector } from 'react-redux';\r\nimport { QuestStoreState } from 'stores/quest';\r\nimport { selectActiveQuests } from 'selectors/quests';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\nenum ChannelType {\r\n    all,\r\n    town,\r\n    quest,\r\n}\r\n\r\ninterface ChannelDefinition {\r\n    label: string;\r\n    tabType: ChannelType;\r\n    tabId: string;\r\n    channelContext?: string;\r\n}\r\n\r\nconst SimpleLog = (props: Props) => {\r\n\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [selectedTabId, setSelectedTabId] = useState(\"all\");\r\n\r\n    const logEntries = useSelector<StoreState, LogEntry[]>((store) => store.log);\r\n    const activeQuests = useSelector<StoreState, QuestStoreState[]>((store) => selectActiveQuests(store));\r\n\r\n\r\n    const channels: ChannelDefinition[] = [{\r\n        label: TextManager.get(\"common-log-tab-all\"),\r\n        tabId: \"all\",\r\n        tabType: ChannelType.all,\r\n    }, {\r\n        label: TextManager.get(\"common-log-tab-town\"),\r\n        tabId: \"town\",\r\n        tabType: ChannelType.town,\r\n    }];\r\n\r\n    const handleTabSelected = (tabId: string) => {\r\n        setSelectedTabId(tabId);\r\n    }\r\n    \r\n    const handleToggleExpand = () => {\r\n        setExpanded(!expanded);\r\n    }\r\n\r\n    activeQuests.forEach((quest) => {\r\n        const questName = quest.name;\r\n        channels.push({\r\n            channelContext: questName,\r\n            label: TextManager.getQuestTitle(questName),\r\n            tabId: `quest-${questName}`,\r\n            tabType: ChannelType.quest,\r\n        });\r\n    });\r\n\r\n    let displayEntries: LogEntry[] = [];\r\n    const currentTab = channels.find((t) => t.tabId === selectedTabId)!;\r\n    switch (currentTab.tabType) {\r\n        case ChannelType.all:\r\n            // All the things\r\n            displayEntries = logEntries;\r\n            break;\r\n\r\n        case ChannelType.town:\r\n            // Only town\r\n            displayEntries = logEntries.filter((lE) => lE.channel === LogChannel.town);\r\n            break;\r\n\r\n        case ChannelType.quest:\r\n            // Only the selected quest\r\n            displayEntries = logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.channelContext === currentTab.channelContext);\r\n            break;\r\n    }\r\n\r\n    const getLogEntryRow = (logEntry: LogEntry) => {\r\n        const text = TextManager.get(logEntry.key, logEntry.context);\r\n        return <div className = \"entry\" key={ logEntry.time }>\r\n            { text }\r\n        </div>;\r\n    };\r\n\r\n    const Tabs = channels.map((tab) => {\r\n        return <Tab id = { tab.tabId } key = { tab.tabId } >{ tab.label }</Tab>;\r\n    });\r\n\r\n    return <div className = { `log ${expanded ? \"expanded\" : \"\"}` }>\r\n        <div className = \"tab-bar\">\r\n            <Tabstrip className = \"tabs\"  onTabSelected = { (tabId: string) => handleTabSelected(tabId) } >\r\n                { Tabs }\r\n            </Tabstrip>\r\n            <SquareIconButton className = \"expand-button\" onClick = { () => handleToggleExpand() } text = { expanded ? \"▼\" : \"▲\" }/>\r\n        </div>\r\n        <div className = \"log-entries\">\r\n            { displayEntries.map((entry) => getLogEntryRow(entry))}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default SimpleLog;\r\n","import React, { useCallback } from 'react';\nimport { QuestStoreState } from 'stores/quest';\nimport { TextManager } from 'global/TextManager';\nimport { getDefinition as getEncounterDefinition } from \"definitions/encounters\";\nimport { getDefinition as getQuestDefinition, QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport { EncounterDefinition } from 'definitions/encounters/types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from 'stores';\nimport { selectQuestLogEntries } from 'selectors/quests';\nimport { TextEntry } from 'constants/text';\nimport { updateEncounterResult, advanceQuest } from 'actions/quests';\nimport TileMap from 'components/pixi/TileMap';\nimport { Stage, Graphics } from '@inlet/react-pixi';\n\ninterface Props {\n    questName: string;\n}\n\nconst QuestDetails = (props: Props) => {\n    const questSelector = useCallback(\n        (state: StoreState) => state.quests.find((q) => q.name === props.questName)!, \n        [props.questName]\n    );\n    const quest = useSelector<StoreState, QuestStoreState>(questSelector);\n    //console.log(\"rendering questdetails \", JSON.stringify(quest));\n\n    const dispatch = useDispatch();\n    const log = useSelector<StoreState, TextEntry[] | undefined>((store: StoreState) => {\n        return selectQuestLogEntries(store, quest.name);\n    });\n    const questDefinition: QuestDefinition = getQuestDefinition(quest.name);\n    const progress: number = Math.floor(quest.progress);\n    const questNode: QuestNode = questDefinition.nodes[progress];\n\n    let message = <p></p>;\n    let actions = <p></p>;\n\n    const handleEncounterOptionClick = (encounter: EncounterDefinition, option: string, oracle: any): any => {\n        const result = encounter.answer(option, oracle, dispatch);\n\n        /*if (!isEqual(questVars, props.quest.questVars)){\n            props.onUpdateQuestVars(questVars);\n        }*/\n        const action = updateEncounterResult(quest.name, quest.progress, result);\n        dispatch(action);\n        dispatch(advanceQuest(quest.name));\n\n       // props.onAdvanceQuest(props.quest.name);\n    }\n\n    // Todo: not happy about this, maybe refactor the whole oracle thing?\n    const store = useSelector<StoreState, StoreState>((store) => store);\n\n\n    switch (questNode.type) {\n        case QuestNodeType.nothing: {\n            message = <div> {\n                log && log.map(textEntry => (<p key={textEntry.key}>{TextManager.getTextEntry(textEntry)}</p>))\n            } </div>;\n            break;\n        }\n        case QuestNodeType.encounter: {\n            // if (quest.encounterResults[quest.progress]) {\n            //     message = <p> { quest.encounterResults[quest.progress] } </p>;\n            //     break;\n            // }\n            const encounter = getEncounterDefinition(quest.currentEncounter!);\n            const oracle = encounter.getOracle(quest.name, store);\n            const descriptionTextEntry = encounter.getDescription(oracle);\n            const descriptionText = TextManager.getTextEntry(descriptionTextEntry);\n\n            message = <div><p> { descriptionText } </p></div>;\n\n            const options = encounter.getOptions(oracle);\n\n            actions = <ul>\n                { Object.keys(options).map((o) => <li key={ o }>\n                    <button onClick= { () => handleEncounterOptionClick(encounter, o, oracle) } data-tip data-for=\"global\">\n                        { o }\n                    </button>\n                    <p>\n                        { options[o]}\n                    </p>\n                </li>)}\n            </ul>;\n\n            break;\n        }\n        case QuestNodeType.boss: {\n            message = <p> { \"Boss fight!\" } </p>;\n            break;\n        }\n    }\n    return (\n        <div>\n            <h1 className=\"app-h2\">{TextManager.getQuestTitle(quest.name)}</h1>\n            <div className=\"questlog\">\n                <Stage width={1000/2} height={1000/2} >\n                    <Graphics\n                            name=\"hitarea\"\n                            draw={graphics => {\n                                graphics.beginFill(0xBADA55);\n                                graphics.drawRect(0, 0, 1000, 1000)\n                                graphics.endFill();\n                            }}\n                        /> \n                    <TileMap />\n                </Stage>\n                { message }\n                <div className=\"actions\">\n                    { actions}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default QuestDetails;\n","import React, { useState, useMemo } from \"react\";\nimport \"./css/questPanel.css\";\nimport AdventurerTabstrip from './AdventurerTabstrip';\nimport { createSelectAdventurersOnQuest } from 'selectors/adventurers';\nimport { useSelector } from 'react-redux';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport AdventurerPanel from './AdventurerPanel';\nimport QuestDetails from './QuestDetails';\n\ninterface Props {\n    questName: string;\n    horizontal?: boolean;   // default is vertical layout\n}\n\nconst QuestPanel = (props: Props) => {\n    const {horizontal} = props;\n    const adventurers = useSelector(createSelectAdventurersOnQuest(props.questName));   \n    const leader = adventurers[0];\n    const [selectedAdventurerID, setSelectedAdventurerID] = useState<string>(leader.id);\n\n    const selectedAdventurer = useMemo(() => {\n        return adventurers.find(a => a.id === selectedAdventurerID);\n    }, [adventurers, selectedAdventurerID]);\n\n    const handleAdventurerSelected = (adventurer: AdventurerStoreState) => {\n        setSelectedAdventurerID(adventurer.id);\n    }\n    \n    //console.log('rendering questpanel' + JSON.stringify(selectedAdventurer?.equipment))\n    return (\n        <div className={`quest-panel ${(horizontal ? \"quest-panel-horizontal\" : \"quest-panel-vertical\")}`}>\n            <div className=\"quest-area\">\n                <QuestDetails questName={props.questName} />\n            </div>\n            <div className=\"party-area\">\n                <AdventurerTabstrip adventurers={adventurers} onAdventurerTabSelected={handleAdventurerSelected} />\n                <div className=\"adventurer-details\">\n                    { selectedAdventurer && (\n                        <AdventurerPanel adventurer={selectedAdventurer} />\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default QuestPanel;","import WorldMap from \"components/world/WorldMap\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { MusicTrack, SoundManager } from \"global/SoundManager\";\r\nimport \"./css/worldView.css\";\r\nimport QuestPanel from './QuestPanel';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\n\r\n/**\r\n * WorldView shows the map and QuestPanel\r\n * @param props\r\n */\r\nconst RealWorldView = () => {\r\n    const worldMapRef = useRef<HTMLDivElement>(null);\r\n    const [selectedQuestName, setSelectedQuestName] = useState<string>();\r\n\r\n\r\n \r\n\r\n    useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\r\n        SoundManager.playMusicTrack(MusicTrack.world);\r\n    }, []);\r\n\r\n    // const handleMapMove = (distance: number, angle: number) => {\r\n    //     const compassEl = compassRef!.current!;\r\n    //     const compassTextEl = compassEl.firstElementChild! as HTMLElement;\r\n\r\n    //     // Rotate the compass\r\n    //     compassEl.style.transform = `rotate(${angle - (Math.PI / 2)}rad)`;\r\n    //     compassEl.style.opacity = distance > 10 ? \"1\" : \"0\";\r\n    //     compassTextEl.style.transform = `rotate(${-angle + (Math.PI / 2)}rad)`;\r\n    //     compassTextEl.innerHTML = `${distance.toFixed(0)}`;\r\n    // };\r\n\r\n    // const handleCompassClick = () => {\r\n    //     //setScrollToPosition(new Vector2(1, 1));\r\n    // };\r\n\r\n    const handlePartyClick = (questName: string) => {\r\n        if (questName === selectedQuestName) {\r\n            setSelectedQuestName(undefined);\r\n        } else {\r\n            setSelectedQuestName(questName);\r\n        }\r\n    };\r\n\r\n    const handleRetrieveWorldViewRef = () => {\r\n        return worldMapRef;\r\n    }\r\n\r\n    return (\r\n        <div className=\"world-view\" ref={worldMapRef}>\r\n            {/* <div className=\"compass\" ref={compassRef} onClick={handleCompassClick}>\r\n                <div className=\"distance\"/>\r\n            </div> */}\r\n            <WorldMap\r\n                selectedQuestName={selectedQuestName}\r\n                // onMapMove={handleMapMove}\r\n                smallMap={selectedQuestName != null}\r\n                onPartyClick={handlePartyClick}\r\n                retrieveWorldViewRef={handleRetrieveWorldViewRef}\r\n            />\r\n            { selectedQuestName && (\r\n                <QuestPanel questName={selectedQuestName} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RealWorldView;\r\n","\nimport { subtractGold } from \"actions/gold\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/tooltip/context/ItemContext\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            const structureDefinition = getDefinition(structure);\n\n            dispatch(subtractGold(structureDefinition.cost.gold || 0));\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","import React, { useEffect, useRef, useState } from 'react';\nimport './css/tooltip.css';\nimport { TooltipManager } from 'global/TooltipManager';\n\nconst ARROW_SIZE = 8; // warning: sync to tooltip.css var\nconst PADDING = 8;\n\nexport interface Props {\n    referenceRect: ClientRect;  // place tooltip in reference to this rect\n    placement?: Placement;\n    children?: any;\n}\n\nexport enum Placement {\n    bottom,\n    top,\n    left,\n    right,\n}\n\nexport const Tooltip = (props: Props) => {\n    const {children, referenceRect} = props;\n    const ref = useRef<HTMLDivElement>(null);\n    const [placement, setPlacement] = useState<Placement>(props.placement || Placement.bottom);\n \n    const [containerRect, setContainerRect] = useState<ClientRect>(); // This is the \n\n    useEffect(() => {\n        // Reposition if needed\n        const tooltipElement = ref.current;\n        if (!tooltipElement) return;\n        if (!containerRect) return;\n        const tooltipRect = tooltipElement.getBoundingClientRect();\n\n        // Flip vertically\n        switch (placement) {\n            case Placement.top:\n                if (tooltipRect.top - tooltipRect.height - ARROW_SIZE - PADDING < containerRect!.top) {\n                    // Too high, place underneath\n                    setPlacement(Placement.bottom);\n                    return;\n                }\n                break;\n            case Placement.bottom:\n                if (tooltipRect.top + tooltipRect.height + ARROW_SIZE + PADDING > containerRect!.height ) {\n                    // Too low, place top\n                    setPlacement(Placement.top);\n                    return;\n                }\n                break;\n        }\n        tooltipElement.style.opacity = \"1\"; // animated through css\n\n        const contentElement = tooltipElement.querySelector(\".tooltip-content\") as HTMLElement;\n        if (tooltipRect.left < containerRect!.left + PADDING) {\n            // Check left bounding edge\n            const offset = containerRect!.left - tooltipRect.left + PADDING;\n            contentElement.style.transform = `translateX(${offset}px)`;\n        } else if (tooltipRect.right > containerRect!.right - PADDING) {\n            // Check right bounding edge\n            const offset = tooltipRect.right - containerRect!.right + PADDING;\n            contentElement.style.transform = `translateX(${-offset}px)`;\n        } else {\n            contentElement.style.transform = '';\n        }\n\n    }, [setPlacement, containerRect, placement, referenceRect]);\n\n    const resize = () => {\n        TooltipManager.clear();\n    }\n\n    useEffect(() => {\n        setContainerRect(ref.current?.closest('.app')?.getBoundingClientRect());\n\n        window.addEventListener(\"resize\", resize);\n        return () => {\n            window.removeEventListener(\"resize\", resize);\n        };\n    }, []);\n\n\n    let x: number = 0;\n    let y: number = 0;\n    let className: string = \"\";\n\n    if (containerRect) {\n        switch (placement) {\n            case Placement.bottom:\n                x = referenceRect.left - containerRect!.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect!.top + referenceRect.height;\n                className = \"tooltip-bottom\";\n                break;\n            case Placement.top:\n                x = referenceRect.left - containerRect!.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect!.top;\n                className = \"tooltip-top\";\n                break;\n        }    \n    }\n\n    return (\n        <div className = { `tooltip ${className}` }\n            style = {{\n                left: x,\n                opacity: 0,\n                top: y,\n            }}\n            ref = { ref }\n        >\n            <div className = \"tooltip-arrow\"></div>\n            <div className = \"tooltip-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\n\nexport default Tooltip;\n","\nimport { getDefinition as getApparelDefinition } from \"definitions/items/apparel\";\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport { DamageType, getDefinition as getWeaponDefinition } from \"definitions/items/weapons\";\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = getStructureDefinition(deedInfo.structure);\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n\n        case ItemType.weapon:\n            const weaponDefinition = getWeaponDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    <p> damage: { weaponDefinition.damage[DamageType.kinetic] } </p>\n                </>\n            );\n\n        case ItemType.apparel:\n            const apparelDefinition = getApparelDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    { apparelDefinition.armourRating && <p> armour: { apparelDefinition.armourRating } </p> }\n                </>\n            );\n\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","// tslint:disable: object-literal-sort-keys\r\nimport { ContextInfo, ContextType} from \"constants/context\";\r\nimport CombatView from \"containers/combat/CombatView\";\r\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\r\nimport { AppContextProps} from \"hoc/withAppContext\";\r\nimport { manifest} from \"manifest/app\";\r\nimport * as React from \"react\";\r\nimport { useRef, useState, createContext } from \"react\";\r\nimport { DndProvider} from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { BrowserRouter as Router, Link, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport { Persistor} from \"redux-persist\";\r\nimport { Sound, SoundManager} from \"global/SoundManager\";\r\nimport { TextManager} from \"global/TextManager\";\r\nimport { Structure} from \"../definitions/structures\";\r\nimport \"./css/app.css\";\r\nimport Preloader, { MediaItem, MediaType} from \"./preloading/Preloader\";\r\nimport TownView from './town/TownView';\r\nimport Toasts from './ui/toasts/Toasts';\r\nimport Topbar from './ui/topbar/Topbar';\r\nimport WorldView from './world/WorldView';\r\nimport SimpleLog from './log/SimpleLog';\r\nimport ContextTooltip from './ui/tooltip/ContextTooltip';\r\nimport { TooltipManager } from 'global/TooltipManager';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport enum View {\r\n    Town,\r\n    World,\r\n}\r\n\r\nexport interface Props {\r\n    persistor: Persistor;\r\n}\r\n\r\ninterface SelectedContext {\r\n    contextType: ContextType ;\r\n    contextInfo: ContextInfo;\r\n    contextRect: ClientRect;\r\n}\r\n\r\nconst resolution = {\r\n    height: 860, // 972,\r\n    width: 480,\r\n};\r\n\r\nexport const MAX_WIDTH = 960;\r\n\r\nexport const AppContext = createContext<AppContextProps | null>(null);\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\n\r\nconst App = (props: AllProps) => {\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [media, setMedia] = useState<MediaItem[]>([]);\r\n    const [activeWindows, setActiveWindows] = useState<React.ReactElement[]>([]);\r\n\r\n    const handleViewButtonClick = () => {\r\n        SoundManager.playSound(Sound.buttonClick);\r\n    };\r\n\r\n    const handleResetClick = () => {\r\n        props.persistor.purge();\r\n        (window as any).location.reload();\r\n    };\r\n\r\n    const selectStructure = (structure: Structure | null) => {\r\n        if (structure) {\r\n            const displayName = TextManager.getStructureName(structure);\r\n\r\n            const window = <StructureDetailsView structure={structure} title={displayName}/>;\r\n            handleWindowOpened(window);\r\n       }\r\n   };\r\n\r\n    const renderTownView = () => <TownView onStructureClick={selectStructure} />;\r\n    const renderWorldView = () => <WorldView/>;\r\n\r\n    const handleWindowOpened = (window: React.ReactElement) => {\r\n        setActiveWindows([\r\n            ...activeWindows || [],\r\n            window,\r\n        ]);\r\n    };   \r\n\r\n    /**\r\n     * Closes all windows\r\n     */\r\n    const handleWindowClose = () => {\r\n        setActiveWindows([]);\r\n    };\r\n\r\n    /**\r\n     * Closes the top window of the stack\r\n     */\r\n    const handleWindowBack = () => {\r\n        if (activeWindows && activeWindows.length) {\r\n            setActiveWindows(activeWindows.slice(0, -1));\r\n        }\r\n    };\r\n\r\n    const renderWindow = (): React.ReactElement | null => {\r\n        if (!activeWindows.length) {\r\n            return null;\r\n        }\r\n\r\n        const topWindow = activeWindows[activeWindows.length - 1];\r\n        const commonWindowProps = {\r\n            onClose: handleWindowClose,\r\n            onBack: handleWindowBack,\r\n            backEnabled: activeWindows.length > 1,\r\n            closeEnabled: true,\r\n        };\r\n\r\n        const element = React.cloneElement(topWindow, commonWindowProps);\r\n        return element;\r\n    };\r\n\r\n    const handleMediaLoadComplete = (mediaItems: MediaItem[]) => {\r\n        const sounds = mediaItems.filter((m) => m.mediaType === MediaType.sound);\r\n        SoundManager.loadMedia(sounds);\r\n\r\n        SoundManager.addSounds({\r\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\r\n            [Sound.error]: \"sound/fx/error.ogg\",\r\n            // add more sounds here\r\n        });\r\n\r\n        setMedia(mediaItems);\r\n\r\n        // todo: temporary!\r\n        //const window = <CombatView/>;\r\n        //handleWindowOpened(window);\r\n    };\r\n\r\n    const handleAppClick = () => {\r\n        TooltipManager.clear();\r\n    };\r\n\r\n    // const handleResize = () => {\r\n    //     if (containerRef.current) {\r\n    //         if (window.innerHeight < resolution.height) {\r\n    //            // containerRef.current.style.transform = `scale(${Math.min(window.innerWidth / resolution.width, 1)}) translateX(-50%)`;\r\n    //         } else {\r\n    //             //containerRef.current.style.transform = `scale(1) translateX(-50%)`;\r\n    //         }\r\n    //         //const parentBox = containerRef.current.getBoundingClientRect();\r\n    //         //setContainerRect(parentBox);\r\n    //    }\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     // todo: see if we can disable this;\r\n    //     window.addEventListener(\"resize\", handleResize);\r\n    //     handleResize();\r\n    //     return () => {\r\n    //         window.removeEventListener(\"resize\", handleResize);\r\n    //     };\r\n    // }, []);\r\n\r\n    return (\r\n        <AppContext.Provider value={{ \r\n            media, \r\n            onOpenWindow: handleWindowOpened,\r\n        }} >\r\n            <div\r\n                className=\"app\"\r\n                ref={containerRef}\r\n                style={{\r\n                    maxWidth: MAX_WIDTH\r\n                }}\r\n                onClick={handleAppClick}\r\n            >\r\n                <DndProvider backend={HTML5Backend}>\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <Preloader\r\n                        manifest={manifest}\r\n                        onLoadComplete={handleMediaLoadComplete}\r\n                    >\r\n                        <Topbar/>\r\n                        <div>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact>\r\n                                    <Redirect from=\"/\" to=\"world\" />\r\n                                </Route>\r\n                                <Route path=\"/world\">\r\n                                    <Link to=\"/town\">\r\n                                        <button onClick={() => handleViewButtonClick()}> {TextManager.get(`common-view-button-town`)} </button>\r\n                                    </Link>\r\n                                </Route>\r\n                                <Route path=\"/town\">\r\n                                    <Link to=\"/world\">\r\n                                        <button onClick={() => handleViewButtonClick()}> {TextManager.get(`common-view-button-world`)} </button>\r\n                                    </Link>\r\n                                </Route>\r\n                            </Switch>\r\n                            {` | `}\r\n                            <button data-for=\"global2\" data-tip2 onClick={() => handleResetClick()} style={{ color: \"red\"}}> Restart! </button>\r\n                        </div>\r\n                        <Switch>\r\n                            <Route path=\"/town\" component={renderTownView} />\r\n                            <Route path=\"/world\" component={renderWorldView} />\r\n                        </Switch>\r\n                        <SimpleLog/>\r\n                        {renderWindow()}\r\n                        <ContextTooltip />    \r\n                        <Toasts />\r\n                    </Preloader>\r\n                </Router>\r\n                </DndProvider>\r\n            </div>\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React, { useEffect, useState } from 'react';\nimport { ContextType } from 'constants/context';\nimport { TooltipManager, Context } from 'global/TooltipManager';\nimport { TextManager } from 'global/TextManager';\nimport ItemContext from 'containers/ui/context/ItemContext';\nimport Tooltip from './Tooltip';\nimport './css/contextTooltip.css';\n\nexport interface Props {\n}\n\n// A contextual popup showing what you just clicked. Can be an Item\nconst ContextTooltip = (props: Props) => {\n\n    const [selectedContext, setSelectedContext] = useState<Context | undefined>();\n\n    const tooltipUpdated = (context: Context | undefined) => {\n        setSelectedContext(context);\n    }\n\n    useEffect(() => {\n        TooltipManager.addEventListener(TooltipManager.EVENT_CONTEXT_UPDATED, tooltipUpdated);\n        return () => {\n            TooltipManager.removeEventListener(TooltipManager.EVENT_CONTEXT_UPDATED, tooltipUpdated);\n        }\n    }, []);\n    if (!selectedContext) { return null; }\n\n    const { info, type } = selectedContext;\n    let content;\n\n    switch (type) {\n        case ContextType.item:\n        default:\n            content = <ItemContext info={info} />;\n    }\n\n    const name = TextManager.getItemName(info.item);\n\n    return (\n        <Tooltip referenceRect={selectedContext.referenceRect}>\n            <div className = \"context-tooltip\">\n                <div>{name}</div>\n                {content}\n            </div>\n        </Tooltip>\n    )\n}\nexport default ContextTooltip;\n","import App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import { getDefinition, Structure } from \"definitions/structures\";\r\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\r\nimport { StoreState } from \"stores\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\n\r\n//const RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\r\nconst RESOURCE_INTERVAL = 20000; // every thirty seconds constitutes a resource tick. todo: move to some other shared place\r\n\r\n /*\r\n  * Calculates how many resources are generated by the in the town.\r\n  * Will return a ResourceStoreState with the amount of each resource to add  */\r\nconst getProducedResources = (lastProducedUpdate: number, store: StoreState): ResourceStoreState|null => {\r\n    const structures: StructuresStoreState = store.structures;\r\n    const result: ResourceStoreState = {};\r\n    const factor = ((Date.now() - lastProducedUpdate) / RESOURCE_INTERVAL);\r\n\r\n    // this function can run at different intervals\r\n    // faster or slower than once a minute\r\n    // we will multiply the resource amount by the factor to normalize\r\n    const maxResources = getMaxResources(store);\r\n\r\n    const handleStructure = (structure: string) => {\r\n        const structureDefinition = getDefinition(structure);\r\n\r\n        if (structureDefinition.type === StructureType.resource) {\r\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\r\n            const level: number = structures[structure].level;\r\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\r\n\r\n            // Store all the resources that this structure will generate this tick into `result`\r\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\r\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\r\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\r\n                return accumulator;\r\n            }, result);\r\n        }\r\n    };\r\n\r\n    if (factor < 1) {\r\n        return null;\r\n    }\r\n    // Calculate what each structure generates. Stores in `result`.\r\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\r\n\r\n    // Check if the warehouse can actually hold it\r\n    Object.keys(result).forEach((resource: string) => {\r\n        if (result[resource]) {\r\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\r\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\r\n            }\r\n        }\r\n        //console.log(`Adding: ${resource} ${result[resource]} factor ${factor}`);\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\r\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\r\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\r\n    const level: number = store.structures[Structure.warehouse].level;\r\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\r\n    return levelDefinition.maxResources;\r\n};\r\n\r\nexport default getProducedResources;\r\n","import { TextEntry } from \"constants/text\";\nimport encounterDefintions from \"definitions/encounters\";\nimport { Encounter } from \"definitions/encounters/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { oracles } from \"oracle\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { ToastManager } from 'global/ToastManager';\nimport { TextManager } from 'global/TextManager';\nimport { Type } from 'components/ui/toasts/Toast';\nimport { getQuestLeader } from 'storeHelpers';\n\nexport interface QuestUpdate {\n    name: string;\n    currentEncounter: Encounter | null;\n    progress: number;\n}\n\nexport interface LogUpdate extends TextEntry {\n    key: string;\n    channel: LogChannel;\n    channelContext?: any;\n}\n\ninterface QuestGameTickResponse {\n    questUpdates: QuestUpdate[];\n    logUpdates: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: StoreState): QuestGameTickResponse => {\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the user has to do something to move the quest along\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n\n    store.quests.forEach((quest: QuestStoreState) => {\n        if (quest.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[quest.name];\n        const currentProgress = quest.progress;\n        const currentNodeIndex =  Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            let currentEncounter = quest.currentEncounter;\n\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n                    const encounter = encounterDefintions[nextNode.encounter!];\n                    const oracle = oracles[quest.name];\n                    nextProgress = currentNodeIndex + i;\n                    currentEncounter = nextNode.encounter!;\n                    // Start encounter(encounter)\n                    const questTitle = TextManager.getQuestTitle(quest.name);\n                    const leader = getQuestLeader(store.adventurers, quest);\n                    ToastManager.addToast(questTitle, Type.questEncounter, leader?.avatarImg);\n\n                    // Add quest to log\n                    log.push({\n                        channel: LogChannel.quest,\n                        channelContext: quest.name,\n                        ...encounter.getDescription(oracle),\n                    });\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    currentEncounter = null;\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: quest.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                currentEncounter,\n                name: quest.name,\n                progress: nextProgress,\n            });\n        }\n    });\n\n    return {\n        logUpdates: log,\n        questUpdates: quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ActionType,\n    AssignEquipmentAction,\n    InventoryAction,\n    MoveItemInInventoryAction,\n    MoveItemToOtherAdventurerAction, RemoveEquipmentAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { AdventurerStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\nconst avatarImgBasePath = \"/img/avatars\";\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: {\n        chest: Item.chest,\n        head: Item.cowl,\n    },\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `${avatarImgBasePath}/female/f_14.png`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `${avatarImgBasePath}/male/m_05.png`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, Item.boots1, Item.chainmailHood, Item.nomadHelmet, Item.plateChest4, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null, Item.plateHelmet, Item.cowl],\n}, {\n    id: \"ec6f1050\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `${avatarImgBasePath}/male/m_09.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `${avatarImgBasePath}/male/m_19.png`,\n    inventory: [ null, null, null, null, Item.khopesh, Item.hornedHelmet ],\n}, {\n    id: \"96c686c3\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `${avatarImgBasePath}/male/m_08.png`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Alexis Ortiz \",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `${avatarImgBasePath}/female/f_10.png`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `${avatarImgBasePath}/female/f_16.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `${avatarImgBasePath}/male/m_09.png`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `${avatarImgBasePath}/male/m_26.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null, Item.shoulders1, Item.fedora, Item.greaves2 ],\n}, {\n    id: \"12c613d4\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `${avatarImgBasePath}/male/m_33.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], AnyAction> = (\n    state: AdventurerStoreState[] = testState, action: AnyAction) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null) {\n                        toSlot = inventory.findIndex((val) => val === null || val === undefined);\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.assignEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot, item } = action as AssignEquipmentAction;            \n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: item,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.removeEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot } = action as RemoveEquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: null,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\r\n\r\nexport interface EngineStoreState {\r\n    lastTick: number;\r\n    lastProducedUpdate: number;\r\n}\r\n\r\nexport const initialState: EngineStoreState = {\r\n    lastTick: Date.now(),\r\n    lastProducedUpdate: Date.now()\r\n};\r\n","\r\nimport {  ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\n\r\nconst testState = [\r\n    null,\r\n    null,\r\n    null,\r\n    Item.dagger,\r\n    Item.deedForWeaponsmith,\r\n    null,\r\n    Item.sandwich,\r\n    Item.sandwich,\r\n    null,\r\n    null,\r\n    Item.torch,\r\n    Item.torch,\r\n    null,\r\n    Item.torch\r\n];\r\n\r\n// Items in warehouse\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\r\n                                                 action: AnyAction) => {\r\n    switch (action.type) {\r\n        case ActionType.addItem: {\r\n            // toSlot is optional\r\n            const { item } = (action as AddAction);\r\n            let { toSlot } = (action as AddAction);\r\n            if (toSlot === undefined) {\r\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\r\n                if (toSlot === -1) {\r\n                    // Still not found. Add at end\r\n                    // todo: [07/07/2019] GAME DESIGN\r\n                    return [ ...state, item ];\r\n                }\r\n            }\r\n            return state.map((element, index) => index === toSlot ? item : element);\r\n        }\r\n\r\n        case ActionType.moveItemInWarehouse: {\r\n            const {\r\n                fromSlot,\r\n                toSlot,\r\n            } = (action as MoveItemInWarehouseAction);\r\n\r\n            return state.map((element, index) => {\r\n                // todo: items switch places\r\n                if (index === fromSlot) { return null; }\r\n                if (index === toSlot) { return state[fromSlot]; }\r\n                return element;\r\n            });\r\n        }\r\n        case ActionType.removeItem: {\r\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\r\n\r\n            return state.map((element, index) => index !== fromSlot ? element : null);\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const { key, channel, channelContext, context } = (action as AddLogEntryAction);\n            const time = Date.now();\n            return [{\n                    channel,\n                    channelContext,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, StartEncounterAction, UpdateEncounterResultAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil1.png\",\n    currentEncounter: null,\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil2.png\",\n    currentEncounter: null,\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState,\n                                                   action: AnyAction | GameTickAction) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.advanceQuest:\n            return advanceQuest(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        case ActionType.startEncounter:\n            return startEncounter(state, action as StartEncounterAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (state: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n            };\n        }\n        return qss;\n    });\n};\n\nconst advanceQuest = (state: QuestStoreState[], action: QuestAction) => {\n    // deprecated\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            //const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            // const nextNode = questDefinition.nodes[Math.floor(progress)];\n\n            return {\n                ...qss,\n                progress,\n            };\n        }\n        return qss;\n    });\n};\n\nconst startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                currentEncounter: action.encounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n    if (!questsToUpdate.length) {\n        return state;\n    }\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState, initialState as structureInitialState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n    [Structure.workshop]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: structureInitialState,\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: structureInitialState,\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: structureInitialState,\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: structureInitialState,\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: structureInitialState,\n    [Structure.workshop]: structureInitialState,\n};\n","import { ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, AnyAction> = (state: StructuresStoreState = initialState,\n                                                                     action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","\nimport { ActionType as GameActionType } from \"actions/game\";\nimport {  ActionType, AddAction} from \"actions/tasks\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\n\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { combat } from \"./combat\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    combat,\n    engine,\n    gold,\n    stockpile: items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType, AddCombatActionAction, MoveActorAction } from \"actions/combat\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { barBrawl, CombatStoreState } from \"stores/combat\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const combat: Reducer<CombatStoreState> = (state: CombatStoreState = barBrawl, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startCombatAction:\n            const addAction = action as AddCombatActionAction;\n\n            return {\n                ...state,\n                action: {\n                    actor: addAction.actor,\n                    endsAt: addAction.endsAt,\n                    target: addAction.target,\n                    type: addAction.combatType,\n                },\n            };\n\n        case ActionType.moveActor:\n            const moveAction = action as MoveActorAction;\n\n            // Moves an actor to another position\n            const actors = state.actors.map((a) => {\n                if (a.name === moveAction.actor) {\n                    return {\n                        ...a,\n                        location: moveAction.location,\n                    };\n                }\n                return a;\n            });\n\n            return {\n                ...state,\n                actors,\n            };\n\n            case ActionType.clearCombatAction:\n            // Clears current combat action\n            return {\n                ...state,\n                action: undefined,\n            };\n    }\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\nimport { EngineStoreState, initialState } from \"stores/engine\";\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case GameActionType.gameTick:\r\n\r\n            // Keep track of the last time resources were produced\r\n            const resourcesToAdd = (action as GameTickAction).resources;\r\n            const lastProducedUpdate = resourcesToAdd === null ? state.lastProducedUpdate : Date.now();\r\n            return {\r\n                ...state,\r\n                lastProducedUpdate,\r\n                lastTick: Date.now(),\r\n            };\r\n    }\r\n    return state;\r\n};\r\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n    }\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\nimport { ActionType, AddResources } from \"../actions/resources\";\r\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\r\n                                                       action: AnyAction | GameTickAction) => {\r\n\r\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\r\n        // todo: Check if warehouse can hold it\r\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\r\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\r\n            return accumulator;\r\n        }, {});\r\n    };\r\n\r\n    switch (action.type) {\r\n        case ActionType.addResources: {\r\n            const resourcesToAdd = (action as AddResources).resources;\r\n            return addResources(resourcesToAdd);\r\n        }\r\n        case ActionType.removeResources: {\r\n            const resourcesToRemove = (action as AddResources).resources;\r\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\r\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\r\n                return accumulator;\r\n            }, {});\r\n        }\r\n\r\n        case GameActionType.gameTick: {\r\n            const resourcesToAdd = (action as GameTickAction).resources;\r\n            if (resourcesToAdd === null) {\r\n                return state;\r\n            }\r\n            return addResources(resourcesToAdd);\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","import { ActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, AnyAction> = (state: seedrandomStateType = initialState,\n                                                                  action: AnyAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { ActionType, ModifyWorkersAction } from \"actions\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import axios from \"axios\";\r\nimport updateCombat from \"mechanics/gameTick/combat\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Persistor } from \"redux-persist\";\r\nimport { gameTick } from \"./actions/game\";\r\nimport { addLogEntry } from \"./actions/log\";\r\nimport version from \"./constants/version\";\r\nimport App from \"./containers/App\";\r\nimport \"./index.css\";\r\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\r\nimport getQuestUpdates, { LogUpdate } from \"./mechanics/gameTick/quests\";\r\nimport getRngState from \"./mechanics/gameTick/rngState\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { StoreState } from \"./stores\";\r\nimport { TaskStoreState } from \"./stores/task\";\r\nimport { TasksStoreState } from \"./stores/tasks\";\r\nimport configureStore from \"./utils/configureStore\";\r\nimport * as Random from \"./utils/random\";\r\nimport { TextManager } from \"./global/TextManager\";\r\n\r\nconst TICK_INTERVAL = 2500;\r\n\r\nconst initGame = async () => {\r\n    const axiosResult = await axios.get(`${process.env.PUBLIC_URL}/lang/en-US.json`);\r\n    const texts = axiosResult.data as Record<string, string>;\r\n    TextManager.init(texts);\r\n    Random.init(\"GILLESROX2\");\r\n\r\n    const { store, persistor, isHydrated } = await configureStore();\r\n    if (!isHydrated) {\r\n        startNewGame(store);\r\n    } else {\r\n        continueGame(store);\r\n    }\r\n    runGame(store, persistor);\r\n};\r\n\r\n/**\r\n * Gets called when a player\r\n * @param store\r\n */\r\nconst startNewGame = (store: any) => {\r\n\r\n    store.dispatch(addLogEntry(\"test-game-welcome\"));\r\n    // todo: here is a good place to launch a tutorial or something\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\nconst continueGame = (store: any) => {\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\n// const stopGame = () => {\r\n//     clearTimeout(interval);\r\n// };\r\n\r\nconst runGame = (store: any, persistor: Persistor) => {\r\n    ReactDOM.render((\r\n        <Provider store={store}>\r\n            <App persistor={persistor} />\r\n        </Provider>\r\n    ),\r\n        document.getElementById(\"root\") as HTMLElement,\r\n    );\r\n    registerServiceWorker();\r\n\r\n    const processCompletedTasks = (tasks: TasksStoreState) => {\r\n        const handleCompletedTask = (task: TaskStoreState) => {\r\n            // Fire all callbacks\r\n            task.callbacks.forEach((action) => store.dispatch(action));\r\n        };\r\n\r\n        tasks.completed.forEach((task) => handleCompletedTask(task));\r\n    };\r\n\r\n    // store.dispatch(addGold(400));\r\n\r\n    // TODO: find something less ugly and hacky than this\r\n    //    oracles.kill10b = theBigTree.getOracle(\"kill_10_boars\", store);\r\n    //  oracles[\"retrieve_magic_amulet\"] = backstabbed.getOracle(\"retrieve_magic_amulet\", store);\r\n    const gameLoop = () => {\r\n        const state: StoreState = store.getState();\r\n        const delta = Date.now() - state.engine.lastTick;\r\n\r\n        const logs: LogUpdate[] = [];\r\n        const resourcesUpdates = getProducedResources(state.engine.lastProducedUpdate, state);\r\n        const rngState = getRngState();\r\n        updateCombat(delta, store);\r\n        const { questUpdates, logUpdates } = getQuestUpdates(delta, state);\r\n        logs.push(...logUpdates);\r\n\r\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, questUpdates, logs));\r\n\r\n        processCompletedTasks(state.tasks);\r\n\r\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", LogChannel.common, { item: Item.teeth }));\r\n    };\r\n\r\n    setInterval(gameLoop, TICK_INTERVAL);\r\n};\r\n\r\ninitGame();\r\n"],"sourceRoot":""}