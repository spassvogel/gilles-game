{"version":3,"sources":["definitions/items/types.ts","definitions/structures/index.ts","definitions/structures/alchemist.ts","definitions/production/armour.ts","definitions/structures/armoursmith.ts","definitions/structures/garden.ts","definitions/structures/lumberMill.ts","definitions/structures/mine.ts","definitions/structures/quarry.ts","definitions/structures/tannery.ts","definitions/structures/tavern.ts","definitions/structures/warehouse.ts","definitions/production/weapons.ts","definitions/structures/weaponsmith.ts","definitions/structures/weaver.ts","definitions/production/questItems.ts","definitions/structures/workshop.ts","global/TextManager.ts","definitions/quests/types.ts","definitions/structures/types.ts","stores/logEntry.ts","utils/routing.ts","actions/quests.ts","definitions/items/deeds.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","actions/log.ts","global/ToastManager.tsx","components/ui/toasts/Toast.tsx","utils/time.ts","definitions/quests/kill10Boars/index.ts","definitions/quests/index.ts","definitions/quests/retrieveMagicAmulet/index.ts","storeHelpers/index.ts","utils/pixiJs.ts","definitions/items/apparel.ts","definitions/items/weapons.ts","global/SceneControllerManager.ts","global/EventEmitter.ts","constants/tiledMapData.ts","actions/combat.ts","stores/combat.ts","actions/game.ts","mechanics/gameTick/combat.ts","definitions/resources.ts","constants/version.tsx","utils/version.ts","components/ui/items/ItemsBox.tsx","containers/ui/context/items/ItemsCostBox.tsx","constants/context.ts","constants/icons.ts","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","global/TooltipManager.ts","components/ui/ItemIcon.tsx","components/ui/Progressbar/index.tsx","actions/gold.ts","actions/items.ts","actions/resources.ts","actions/structures.ts","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/StructureViewHeader.tsx","components/structures/ProductionStructureView.tsx","stores/task.ts","selectors/workers.ts","containers/structures/ProductionStructureView.tsx","constants/dragging.ts","components/ui/AdventurerAvatar.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","containers/structures/tavern/QuestBoard.tsx","stores/quest.ts","components/ui/DraggableAdventurerAvatar.tsx","components/ui/EquipmentSlot.tsx","components/ui/DraggableItemIcon.tsx","actions/adventurers.ts","components/world/QuestPanel/AdventurerEquipment.tsx","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/world/QuestPanel/AdventurerPanel.tsx","components/structures/tavern/AdventurerButton.tsx","components/structures/tavern/RoomWithAdventurer.tsx","components/structures/tavern/RoomEmpty.tsx","components/structures/tavern/RoomList.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","hoc/withAppContext.tsx","components/ui/resources/ResourcesBox.tsx","components/ui/tabs/Tab.tsx","components/ui/AdventurerInfo.tsx","containers/ui/AdventurerInfo.ts","hooks/usePrevious.ts","stores/resources.ts","components/ui/tabs/Tabstrip.tsx","components/world/QuestPanel/AdventurerTabstrip.tsx","components/structures/warehouse/WarehouseStructureView.tsx","selectors/adventurers.ts","containers/structures/warehouse/WarehouseStructureView.tsx","stores/structure.ts","global/SoundManager.ts","components/structures/ResourceStructureView.tsx","components/StructureDetailsView.tsx","components/ui/buttons/SquareIconButton.tsx","components/ui/window/Window.tsx","hoc/withWindow.tsx","containers/structures/StructureDetailsView.tsx","components/preloading/Preloader.tsx","manifest/app.tsx","components/preloading/Indicator.tsx","actions/index.ts","components/pixi/Viewport.tsx","utils/hitAreaShapes.ts","components/town/structures/LumberMill/index.tsx","components/pixi/ParticleEmitter.ts","components/town/structures/Tavern/index.tsx","components/town/structures/Generic/index.tsx","components/town/Legenda/index.tsx","components/town/TownView.tsx","components/ui/toasts/Toasts.tsx","components/ui/window/windows/CheatWindow.tsx","constants/resources.ts","containers/windows/CheatWindow.tsx","components/ui/window/windows/SettingsWindow.tsx","components/ui/window/windows/MenuWindow.tsx","components/ui/topbar/Resourcebar.tsx","utils/number.ts","components/ui/topbar/Topbar.tsx","components/world/WorldMap/QuestMarker.tsx","components/world/WorldMap/QuestLine.tsx","selectors/quests.ts","components/world/WorldMap/index.tsx","components/pixi/tile/RectTileLayer.tsx","components/pixi/tile/ObjectTileLayer.tsx","stores/scene.ts","components/world/QuestPanel/QuestDetails/Tilemap.tsx","components/world/QuestPanel/QuestDetails/ActionPath.tsx","components/pixi/util/BridgedStage.tsx","components/world/QuestPanel/QuestDetails/SceneActor.tsx","hooks/useQuest.ts","components/world/QuestPanel/QuestDetails/Scene.tsx","components/world/QuestPanel/index.tsx","components/world/QuestPanel/QuestDetails/index.tsx","hooks/useSceneController.ts","components/ui/items/DraggableItemsList/index.tsx","hooks/useAdventurer.ts","components/world/QuestPanel/modals/LootCache/index.tsx","components/log/SimpleLog.tsx","components/world/WorldView.tsx","containers/ui/context/ItemContext.tsx","components/ui/tooltip/Tooltip.tsx","components/ui/tooltip/context/ItemContext.tsx","components/App.tsx","components/ui/tooltip/ContextTooltip.tsx","containers/App.tsx","utils/random.ts","mechanics/gameTick/producedResources.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","stores/engine.ts","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/structures.ts","reducers/structures.ts","stores/tasks.ts","reducers/tasks.ts","reducers/index.ts","reducers/combat.ts","reducers/engine.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","mechanics/gameTick/tasks.ts","index.tsx","utils/tilemap.ts","mechanics/scenes/BaseSceneController.ts","definitions/quests/kill10Boars/encounters/dungeon.ts"],"names":["ItemType","Item","Structure","alchemist","type","StructureType","production","cost","gold","time","levels","displayName","workerCapacity","produces","boots1","item","resources","wood","iron","chest","cowl","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","stone","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","torch","sandwich","workshop","all","getDefinition","structure","TextManager","texts","precompile","this","templates","compileAll","initialized","key","context","Error","template","getTemplate","console","error","textEntry","get","compile","name","itemType","Object","keys","forEach","value","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","itemArticleUndefined","getItemName","articleTemplate","noun","QuestNodeType","LogChannel","getWorldLink","getQuestLink","questName","getTownLink","getStructureLink","ActionType","launchQuest","assignedAventurers","exitEncounter","quest","setSceneName","sceneName","setScene","scene","enqueueSceneAction","sceneAction","completeSceneAction","updateSceneObjectAction","id","object","takeGoldFromCache","cacheName","deed","deedForLumbermill","subText","iconImg","deedForWeaponsmith","material","basePath","arrowheads","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","gunpowder","scales","spring","thread","questItem","questItemDefinitions","blueprints","crate","dynamite","dragonEye","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","tusk","vase","vial","weeds","trinket","trinketDefinitions","magicAmulet","ring","deeds","apparel","questItems","trinkets","weapons","addLogText","channel","common","channelContext","entry","addLogEntry","ToastManager","title","icon","link","stack","Date","now","emit","EVENT_TOASTS_UPDATED","setTimeout","filter","toast","lifeTime","EventEmitter","Type","Toast","props","achievementUnlocked","history","useHistory","typeText","className","onClick","push","width","alt","src","process","ONE_MINUTE","TWO_MINUTES","HALF_HOUR","ONE_HOUR","ONE_DAY","ONE_YEAR","formatDuration","ms","timeUnitsList","unit","amount","Math","abs","output","el","tmp","floor","join","kill10Boars","getQuestVars","questStore","questVars","getInitialQuestVars","foo","bar","nodes","x","y","nothing","log","encounter","startScene","retrieveMagicAmulet","baz","zux","requiredItems","adventurersOnQuest","adventurers","party","map","findAdventurerById","getQuestLeader","leaderId","find","a","storeIsRehydrated","store","rngState","lerpLocation","point1","point2","alpha","lerp","n1","n2","loadResourceAsync","path","loader","PIXI","Loader","shared","Promise","resolve","reject","add","load","_","loadResource","callback","ApparelType","equipmentType","feet","boots2","boots3","chainmailHood","head","armourRating","clothGloves","hands","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","WeaponType","DamageType","weapon","weaponDefinitions","battleAxe","weaponType","axe","damage","kinetic","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","SceneControllerManager","controllerType","controllerTypes","require","eventName","listener","events","i","length","splice","event","fn","TiledLayerType","Orientation","RenderOrder","Allegiance","CombatActionType","barBrawl","actors","allegiance","player","health","location","remainingAP","turn","updateCombat","delta","actor","combat","getState","action","endsAt","enemy","move","dispatch","target","moveActor","clearCombatAction","Resource","asInt","semVer","parts","split","part","Number","numericVersion","convertSemVerToInt","ItemsBox","itemsInInventory","aggregate","items","reduce","accumulator","current","listItems","listItemClass","itemDescription","itemsDescription","style","backgroundImage","connect","ownProps","tmpWarehouse","stockpile","found","findIndex","removed","ContextType","IconSize","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","workers","getClassName","size","smallest","small","medium","big","biggest","TooltipManager","info","originRect","referenceRect","deepEquals","lastContext","clear","EVENT_CONTEXT_UPDATED","undefined","ItemIcon","itemDefinition","warn","showContext","currentTarget","getBoundingClientRect","showContextTooltip","stopPropagation","Progressbar","val","min","max","progress","label","UpDownValue","displayValue","upDisabled","e","onUp","downDisabled","onDown","StructureViewHeader","ProductionStructureView","useState","selectedItem","setSelectedItem","workersAssigned","setWorkersAssigned","structureDefinition","level","levelDefinition","getStructureName","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","indexOf","display","workersFree","craftingTime","formatted","makeTimeString","onCraft","createCraftingDetails","tasks","t","startTime","timeRemaining","addGold","subtractGold","addItemToWarehouse","toSlot","addItem","removeItemFromWarehouse","fromSlot","removeItem","addResources","finishBuildingStructure","upgradeStructure","increaseWorkers","decreaseWorkers","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","createSelector","state","structures","acc","DragSourceType","structureStore","running","productionDefinition","removeResources","craftItem","town","AdventurerAvatar","adventurer","avatarImg","DragType","DropTarget","drop","monitor","onDrop","getItem","canDrop","connectDropTarget","dropTarget","isOver","AssignAdventurers","slots","content","onAdventurerClicked","onAdventurerDropped","availableSlots","slotsContent","QuestBoard","checkEnoughItems","questDefinition","every","amountRequired","availableQuests","q","iconImgPath","selectedQuestName","onQuestClick","getQuestTitle","fullParty","enoughItems","canLaunch","getQuestDescription","onRemoveAdventurer","ItemsCostBox","onLaunchQuest","getQuestDetails","QuestStatus","spec","beginDrag","sourceId","sourceType","adventurerInventory","EquipmentSlotType","DragSource","connectDragSource","dragSource","isDragging","itemAndEquipmentSlotMatch","equipmentSlotType","checkEquipment","mainHand","offHand","borderColor","children","inventorySlot","index","AdventurerEquipment","onDropItemEquipment","getEquipmentSlot","slotType","equipment","contents","itemRef","React","createRef","adventurerEquipment","ref","dragInfo","isActive","classNames","Inventory","slot","iconSize","onDropItem","moveItemInInventory","adventurerId","addItemToInventory","removeItemFromInventory","assignEquipment","equipmentSlot","removeEquipment","AdventurerPanel","useDispatch","actions","existingEquipment","inventory","otherItem","AdventurerButton","onAddAdventurer","Boolean","emptySlot","getEmptySlot","RoomWithAdventurer","onQuest","expanded","assigned","SOURCE_ID","RoomEmpty","RoomList","roomCount","selectedAdventurer","setSelectedAdventurer","handleAdventurerNameClick","roomContent","room","values","quests","TavernStructureView","setAassignedAdventurers","selectedQuest","setSelectedQuest","getAvailableQuests","status","available","handleAddAdventurer","copy","handleRemoveAdventurer","handleQuestClick","questTitle","leader","addToast","questLaunched","handleLaunchQuest","withAppContext","WrappedComponent","AppContext","Consumer","Component","deltaResources","toFixed","getStructure","to","onCloseWindow","Tab","active","AdventurerInfo","attributes","stats","stat","onRemoveItemFromInventory","onAssignEquipment","onAddItemToInventory","onAssignEquipmentFromWarehouse","onAddItemToWarehouse","onRemoveEquipment","handleDropItemEquipment","equipmentList","onMoveItemInInventory","onMoveItemFromWarehouseToInventory","remove","assign","switchItem","usePrevious","useRef","useEffect","initialState","empty","Tabstrip","activeTab","Children","child","cloneElement","handleTabClick","tabId","onTabSelected","AdventurerTabstrip","onAdventurerTabSelected","selectedAdventurerId","WAREHOUSE","WarehouseStructureView","resourcesDelta","setResourcesDelta","previousResources","resourcesRef","classList","onMoveItemInWarehouse","onMoveItemFromAdventurer","adventurersInTown","getAdventurers","getQuests","selectAdventurersInTown","foundInParty","groupedAdventurers","foundAdventurers","StructureState","moveItemInWarehouse","onMoveItemToAdventurer","MusicTrack","Sound","media","NotBuilt","ResourceStructureView","useSelector","handleWorkersDown","handleWorkersUp","createWorkersRow","handleUpgrade","generatesText","createGeneratesRow","StructureDetails","Building","buildTask","renderContent","SquareIconButton","text","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","url","sound","play","track","hasOwnProperty","fade","musicVolume","nextMusic","playing","loop","volume","_musicVolume","localStorage","setItem","fromStorage","parseFloat","_soundVolume","Window","BackButton","backEnabled","onBack","playSound","buttonClick","CloseButton","closeEnabled","onClose","withWindow","compose","MediaType","StructureDetailsView","manifest","Indicator","itemsLoaded","itemsTotal","loadImage","image","Image","check","naturalWidth","removeEventListener","complete","addEventListener","getType","toLowerCase","endsWith","Preloader","completed","setCompleted","setItemsLoaded","loadMedia","indicator","promises","loadItem","catch","err","then","results","onLoadComplete","mediaType","Howl","Viewport","forwardRef","app","useApp","cursor","renderer","plugins","interaction","cursorStyles","pointer","PixiComponentViewport","PixiComponent","create","viewport","PixiViewport","screenWidth","screenHeight","worldWidth","worldHeight","ticker","on","minScale","maxScale","drag","pinch","wheel","clamp","direction","clampZoom","decelerate","HitAreaShapes","shapes","sprite","definition","shape","contains","LumberMill","hitAreaShapes","atlas","textures","setTextures","filters","selected","STRUCTURE_HIGHLIGHT_FILTER","rotation","setRotation","useTick","r","position","interactive","buttonMode","pointertap","onStructureClick","hitArea","texture","anchor","ParticleEmitter","applyProps","instance","oldProps","newProps","config","newP","applyDefaultProps","emitter","_emitter","particles","from","elapsed","performance","tick","raf","requestAnimationFrame","update","willUnmount","cancelAnimationFrame","Tavern","smoke","Generic","Legenda","orderedStructures","match","useRouteMatch","params","toString","renderText","OutlineFilter","selectedStructure","addMusicTrack","playMusicTrack","handleStructureClick","dragging","viewportRef","onScroll","preventDefault","window","passive","zoomPercent","getStructurePosition","moveCenter","MAX_WIDTH","height","options","sharedLoader","reverse","polygons","Point","Toasts","activeToasts","setActiveToasts","toastsUpdated","toastConfig","CheatWindow","itemSelectRef","cheats","setCheats","structureDef","getStructureDefinition","levelDef","checked","Built","onChange","handleChangeStructureState","getStructureRow","getItemOption","isNaN","getItemTypeOptions","onCheatStructureState","cheat","evt","onCheatGold","onCheatWorkers","onCheatResources","onCheatItem","resourceOrder","setStructureState","addWorkers","step","linear","pow","defaultValue","sqrt","onOpenWindow","Resourcebar","storeProps","createItem","number","digits","SI_SYMBOL","tier","log10","suffix","scale","scaled","formatNumber","Topbar","useContext","QuestMarker","encounterActive","avatar","maskGraphics","beginFill","drawCircle","CIRCLE_DIAMETER","endFill","mask","addChild","pointerdown","QuestLine","positions","draw","graphics","lineStyle","moveTo","xc","yc","quadraticCurveTo","selectActiveQuests","WorldMap","retrieveWorldViewRef","smallMap","questSelector","useCallback","activeQuests","WIDTH","canvasWidth","setCanvasWidth","canvasHeight","setCanvasHeight","resize","worldView","worldViewWidth","clientWidth","worldViewHeight","clientHeight","SMALL_HEIGHT","focusOnQuestingParty","point","nodeLocationToPoint","partyLocation","getQuestWorldLocation","previousPositions","getPreviousPositions","currentPosition","questNode","onPartyClick","roundedProgress","lastNode","nextNode","WORLD_WIDTH","WORLD_HEIGHT","lastPosition","RectTileLayer","tilemap","CompositeRectTileLayer","layer","tileset","horizontalTiles","spritesheet","data","w","tilewidth","h","tileheight","spriteId","addFrame","SceneActionType","ObjectTileLayer","objects","gid","Tilemap","tileObjects","layers","setLayers","debug","spritesheetData","parseSpritesheetData","getTileset","clearTextureCache","parse","allLayers","l","visible","tilelayer","createTileLayer","createObjectLayer","mapData","tilesets","source","columns","frames","tilecount","firstgid","frame","spriteSourceSize","rotated","trimmed","sourceSize","meta","imagewidth","imageheight","ActionPath","graphicsRef","useImperativeHandle","drawAction","allowed","grfx","color","lineTo","BridgedStage","restProps","SceneActor","tileWidth","tileHeight","actorRef","actionQueueSelector","controller","actionQueue","nextAction","actionType","moveComplete","actorMoved","duration","gsap","killTweensOf","ease","pixi","onComplete","useMemo","useQuest","Layout","Scene","actionActor","setActionActor","selectedActor","handleCancelAction","handleActorEndDrag","onLootCacheChanged","pointToSceneLocation","global","locationIsBlocked","convertLocation","aStar","findPath","actionPath","actionPathRef","sceneWidth","sceneHeight","container","actionOriginLocation","mouseMove","blocked","off","renderActor","setSelectedActor","handleActorStartDrag","pointerup","pointerupoutside","actorCanInteract","actorInteract","o","QuestDetails","SceneLoader","useStore","getSceneController","loaded","setLoaded","loadData","createScene","useSceneController","DraggableItemsList","useAdventurer","adventurerSelector","LootCache","cache","caches","lootCache","ChannelType","QuestPanel","layout","auto","activeLootCache","setActiveLootCache","setSelectedAdventurerID","handleAdventurerSelected","WorldView","worldMapRef","world","SimpleLog","setExpanded","selectedTabId","setSelectedTabId","logEntries","channels","tabType","displayEntries","currentTab","lE","Tabs","tab","logEntry","getLogEntryRow","Placement","handleStartConstruction","startBuildingStructure","buildStructure","deedInfo","enoughGold","weaponDefinition","getWeaponDefinition","apparelDefinition","getApparelDefinition","View","Tooltip","placement","bottom","setPlacement","containerRect","setContainerRect","tooltipElement","tooltipRect","top","opacity","contentElement","querySelector","left","offset","transform","right","closest","ContextTooltip","selectedContext","setSelectedContext","tooltipUpdated","PixiPlugin","registerPIXI","registerPlugin","createContext","App","containerRef","setMedia","activeWindows","setActiveWindows","handleViewButtonClick","selectStructure","handleWindowOpened","handleWindowClose","handleWindowBack","slice","handleScroll","debounce","Provider","maxWidth","DndProvider","backend","HTML5Backend","mediaItems","addSounds","exact","data-for","data-tip2","persistor","purge","reload","render","topWindow","commonWindowProps","renderWindow","generator","getMaxResources","getProducedResources","lastProducedUpdate","result","factor","resourceStructureDefinition","handleStructure","getQuestUpdates","questDefinitions","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","questEncounter","logUpdates","questUpdates","dirty","getRngState","Random","isLocalhost","hostname","register","navigator","URL","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","generateRandomStats","strength","random","perception","endurance","charisma","intelligenge","agility","luck","testState","lastTick","gameTick","lU","encounterResults","reward","questStoreState","qss","tO","questsToUpdate","questToUpdate","updateQuestVars","vars","updateEncounterResult","concat","nodeIndex","lootCaches","structureInitialState","updateStructureState","structureState","createTask","combineReducers","element","moveItemToOtherAdventurer","fromAdventurerId","toAdventurerId","fromAdventurer","startCombatAction","addAction","combatType","moveAction","engine","GameActionType","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","initial","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","processCompletedTasks","itemCrafted","handleCompletedTask","initGame","init","seed","seedrandom","configureStore","continueGame","startNewGame","runGame","ReactDOM","document","getElementById","registerServiceWorker","setInterval","logs","resourcesUpdates","parseProperties","properties","locationEquals","b","BaseSceneController","tilemapObjects","jsonPath","blockedTiles","dataLoaded","tilemapData","objectLayers","objectgroup","objectLayer","ezProps","extended","getExtendedTilemapObjects","list","tile","addAllTilesInLayerToList","createAStar","createTileObjects","createActors","loadScene","getQuest","node","actorName","interactWithObject","_actor","_object","matrix","row","AStarFinder","grid","includeStartNode","heuristic","weight","startLocations","storeState","getTextEntry","questUpdate","substr","lastIndexOf","DungeonEntranceSceneController","getAdventurerByActor","DungeonHallwaySceneController","registerSceneController"],"mappings":"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","file":"static/js/main.ae3d6805.chunk.js","sourcesContent":["\nexport enum ItemType {\n    deed,\n    apparel,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    arrowheads = \"arrowheads\",\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    gunpowder = \"gunpowder\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dragonEye = \"dragonEye\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    sandwich = \"sandwich\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { StructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport weaver from \"./weaver\";\nimport workshop from \"./workshop\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n    workshop = \"workshop\",\n}\n\nconst all = {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n    workshop,\n};\n\nexport default all;\n\nexport function getDefinition<T extends StructureDefinition>(structure: string): T {\n    return all[structure] as T;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumberMill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { stone: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { stone: 4 },\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { stone: 6 },\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n\nexport default weaver;\n","// tslint:disable:object-literal-sort-keys\n// todo: maybe 'quest items' is not the right name\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const torch: ProductionDefinition = {\n    item: Item.torch,\n    cost: {\n        resources: { wood: 2, fabric: 1 },\n        time: time.ONE_MINUTE,\n    },\n};\n\nexport const sandwich: ProductionDefinition = {\n    item: Item.sandwich,\n    cost: {\n        resources: { food: 1 },\n        time: time.ONE_MINUTE / 2,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { sandwich, torch } from \"definitions/production/questItems\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst workshop: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ torch, sandwich ],\n    }, {\n        // level 2:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }, {\n        // level 4:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\nexport default workshop;\n","import { TextEntry } from \"constants/text\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\nimport { Structure } from \"definitions/structures\";\nimport * as Handlebars from \"handlebars\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTextEntry(textEntry: TextEntry): string {\n        return this.get(textEntry.key, textEntry.context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    public static getStructureName(structure: Structure): string {\n        return this.get(`structure-${structure}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: Item, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: Item) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","import { QuestStoreState } from 'stores/quest';\nimport { Item } from 'definitions/items/types';\n\nexport enum QuestNodeType {\n    nothing = 0,    // Nothing much going on here\n    encounter = 1,\n    // combat = 2,     // Not implemented\n    // boss = 3,\n}\n\nexport interface QuestDefinition<TQuestVars = any> {\n    nodes: QuestNode[];\n    requiredItems?: Item[];\n    getQuestVars: (questStoreState: QuestStoreState) => TQuestVars;\n    getInitialQuestVars: (questStoreState: QuestStoreState) => TQuestVars;\n}\n\ntype AllNodeTypes = {\n    x: number;\n    y: number;\n    log?: string;   \n}\n\nexport type QuestNode  =\n    | AllNodeTypes & { type: QuestNodeType.nothing}\n    | AllNodeTypes & { type: QuestNodeType.encounter, startScene: string}\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n                                  // todo: REMOVE\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","import { TextEntry } from \"constants/text\";\n\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry extends TextEntry {\n    time: number;\n    channel: LogChannel;\n    channelContext?: string;\n}\n","// Utilities for routing \n\nimport { Structure } from 'definitions/structures';\n\nexport const getWorldLink = () => `/world`;\nexport const getQuestLink = (questName: string) => `${getWorldLink()}/${questName}`;\n\nexport const getTownLink = () => `/town`;\nexport const getStructureLink = (structure: Structure) => `${getTownLink()}/${structure}`;\n","import { Action } from \"redux\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { SceneAction, SceneStoreState, TileObject } from 'stores/scene';\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",                            // Embark upon a new quest\n    updateQuestVars = \"updateQuestVars\",                    // ?\n    updateEncounterResult = \"updateEncounterResult\",        // unused?\n    startEncounter = \"startEncounter\",                      // unused! remove\n    setSceneName = \"setSceneName\",                          // Sets name of the current scene of a quest\n    setScene = \"setScene\",                                  // Fills in the scene of a quest\n    exitEncounter = \"exitEncounter\",                        // Encounter is complete, leave scene and continue on quest \n    updateQuests = \"updateQuests\",                          // unused! remove\n    enqueueSceneAction = \"enqueueSceneAction\",\n    completeSceneAction = \"completeSceneAction\",\n    updateSceneObjectAction = \"updateSceneObjectAction\",    // Updates a tile object on the scene. Can update any property except 'id'\n    takeGoldFromCache = \"takeGoldFromCache\",                // Takes *all* the gold from a cache\n}\n\nexport interface QuestAction extends Action<ActionType> {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface SetSceneNameAction extends QuestAction {\n    sceneName: string;\n}\n\nexport interface SetSceneAction extends QuestAction {\n    scene: SceneStoreState;\n}\n\nexport interface EnqueueSceneActionAction extends QuestAction {\n    sceneAction: SceneAction;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport interface TakeGoldFromCacheAction extends QuestAction {\n    cacheName: string;\n}\n\nexport interface UpdateSceneObjectAction extends QuestAction {\n    id: number;\n    object: Partial<Omit<TileObject, 'id'>>;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Completes the current encounter so the party can continue the quest */\nexport function exitEncounter(quest: string): QuestAction {\n    return {\n        type: ActionType.exitEncounter,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\n// Scene stuff\n\nexport function setSceneName(questName: string, sceneName: string): SetSceneNameAction {\n    return {\n        type: ActionType.setSceneName,\n        questName,\n        sceneName,\n    };\n}\n\nexport function setScene(questName: string, scene: SceneStoreState): SetSceneAction {\n    return {\n        type: ActionType.setScene,\n        questName,\n        scene,\n    };\n}\n\nexport function enqueueSceneAction(quest: string, sceneAction: SceneAction): EnqueueSceneActionAction {\n    return {\n        type: ActionType.enqueueSceneAction,\n        questName: quest,\n        sceneAction,\n    };\n}\n\nexport function completeSceneAction(quest: string): QuestAction {\n    return {\n        type: ActionType.completeSceneAction,\n        questName: quest,\n    };\n}\n\nexport const updateSceneObjectAction = (questName: string, id: number, object: Partial<Omit<TileObject, 'id'>>): UpdateSceneObjectAction => {\n    return {\n        type: ActionType.updateSceneObjectAction,\n        questName,\n        id,\n        object\n    };\n}\n\n\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n\nexport const takeGoldFromCache = (questName: string, cacheName: string): TakeGoldFromCacheAction => {\n   return {\n       type: ActionType.takeGoldFromCache,\n       questName,\n       cacheName\n   } \n}","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.arrowheads]: {\n        item: Item.arrowheads,\n        itemType,\n        iconImg: `${basePath}arrowheads.png`,\n    },\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.gunpowder]: {\n        item: Item.gunpowder,\n        itemType,\n        iconImg: `${basePath}gunpowder.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.dragonEye]: {\n        item: Item.dragonEye,\n        itemType,\n        iconImg: `${basePath}dragon-eye.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.sandwich]: {\n        item: Item.sandwich,\n        itemType,\n        iconImg: `${basePath}sandwich.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import apparel from \"./apparel\";\nimport deeds from \"./deeds\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...apparel,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import { Action } from \"redux\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TextEntry } from 'constants/text';\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface AddLogEntryAction extends Action<ActionType> {\n    entry: TextEntry;\n    channel: LogChannel;\n    channelContext?: string;\n}\n\nexport function addLogText(key: string, context?: any, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    const entry: TextEntry = {\n        key,\n        context\n    };\n    return {\n        type: ActionType.addLogEntry,\n        entry,\n        channel,\n        channelContext,\n    };\n}\n\nexport function addLogEntry(entry: TextEntry, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        entry,\n        channel,\n        channelContext,\n    };\n}\n","import { Type } from '../components/ui/toasts/Toast';\nimport EventEmitter from './EventEmitter';\n\nexport interface ToastConfig {\n    time: number;\n    title: string;\n    type?: Type;\n    icon?: string;\n    link?: string;\n}\n\nexport abstract class ToastManager extends EventEmitter<ToastConfig[]>() {\n    \n    private static stack: ToastConfig[] = [];\n    private static lifeTime = 5000; // Time each toast lives\n\n    static EVENT_TOASTS_UPDATED = \"toast\";\n\n    static addToast(title: string, type?: Type, icon?: string, link?: string) {\n\n        this.stack = [...this.stack, {\n            time: Date.now(),\n            title,\n            type,\n            icon,\n            link\n        }];\n\n        this.emit(this.EVENT_TOASTS_UPDATED, this.stack);\n\n        setTimeout(() => {\n            // Remove all popups that have expired\n            this.stack = this.stack.filter((toast) => {\n                return Date.now() - toast.time < this.lifeTime\n            });\n            this.emit(this.EVENT_TOASTS_UPDATED, this.stack);\n\n        }, this.lifeTime);\n    }\n}","import React from 'react';\nimport { TextManager } from 'global/TextManager';\nimport { ToastConfig } from 'global/ToastManager';\nimport { useHistory } from 'react-router';\n\ntype Props = ToastConfig;\n\nexport enum Type {\n    achievementUnlocked,\n    cheat,\n    itemCrafted,\n    questCompleted,\n    questEncounter,\n    questLaunched,\n    questUpdate,\n}\n\nconst Toast = (props: Props) => {\n    const { \n        title,\n        type = Type.achievementUnlocked,\n        icon = \"/img/items/quest-items/dragon-eye.png\",\n        link\n    } = props;\n    const history = useHistory();\n\n    const handleClick = () => {\n        if (link) {\n            history.push(link);\n        }\n    }\n\n    const typeText = TextManager.get(`ui-toast-type-${Type[type]}`)\n    return (\n        <div className={`toast ${link && \"withlink\"}`} onClick={handleClick}>\n            <div className=\"label type\">{typeText}</div>\n            <div className=\"label title app-h2-white\">{title}</div>\n            <div className=\"icon\">\n                <div className=\"background\"></div>\n                <img className=\"image\" width=\"300\" alt=\"dragon eye\" src={`${process.env.PUBLIC_URL}${icon}`} />\n                <div className=\"foreground\"></div>\n            </div>\n            <div className=\"banner\"></div>\n        </div>\n    );\n}\n\nexport default Toast;","import { TextManager } from 'global/TextManager';\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\nexport const ONE_DAY = ONE_HOUR * 24;\nexport const ONE_YEAR = ONE_DAY * 265.25;\n\nexport const formatDuration = (ms: number): string => {\n    const timeUnitsList = [\n        { unit: 'year', amount: ONE_YEAR },\n        { unit: 'day', amount: ONE_DAY },\n        { unit: 'hour', amount: ONE_HOUR },\n        { unit: 'minute', amount: ONE_MINUTE },\n        { unit: 'second', amount: ONE_SECOND },\n    ]\n    let time = Math.abs(ms);\n    const output: string[] = [];\n    timeUnitsList.forEach((el) => {\n        const tmp = Math.floor(time / el.amount);\n        time -= tmp * el.amount\n        if (tmp !== 0) {\n            const unit = TextManager.get(`common-time-${el.unit}${tmp > 1 ? \"-plural\": \"\"}`);\n            output.push(`${tmp} ${unit}`);\n        }\n    })\n    return output.join(\" \");\n}\n","import { QuestStoreState } from 'stores/quest';\nimport { QuestDefinition, QuestNodeType } from '../types';\n\nexport interface Kill10BoarsQuestVars {\n    foo: boolean;\n    bar: number;\n}\n\nconst kill10Boars: QuestDefinition<Kill10BoarsQuestVars> = {\n    getQuestVars: (questStore: QuestStoreState) => questStore.questVars as Kill10BoarsQuestVars,\n    getInitialQuestVars: (questStore: QuestStoreState) => {\n        const vars: Kill10BoarsQuestVars = {\n            foo: false,\n            bar: 3\n        }\n        return vars;\n    },\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node0\",\n    // }, {\n    //     x: 0,\n    //     y: 2,\n    //     type: QuestNodeType.nothing,\n    //     log: \"quest-kill10Boars-node0\",\n    // }, {\n    //     x: 0,\n    //     y: 3,\n    //     type: QuestNodeType.nothing,\n    //     log: \"quest-kill10Boars-node0\",\n    // }, {\n    //     x: 0,\n    //     y: 4,\n    //     type: QuestNodeType.nothing,\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.encounter,\n        log: \"quest-kill10Boars-enter-dungeon\",\n        startScene: \"dungeon.entrance\"\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-leave-dungeon\",\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-left-dungeon\"\n    }, {\n        x: 2,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 3,\n        y: 3,\n        type: QuestNodeType.encounter,\n        startScene: \"dungeon.hallway\"\n\n        //encounter: Encounter.backstabbed,\n    }, {\n        x: 4,\n        y: 4,\n        type: QuestNodeType.nothing,\n        log: \"The party spots a boss\",\n    }, {\n        x: 5,\n        y: 4,\n        type: QuestNodeType.nothing,\n    }],\n};\n\nexport default kill10Boars;","import kill10Boars from './kill10Boars';\r\nimport retrieveMagicAmulet from './retrieveMagicAmulet';\r\nimport { QuestDefinition } from './types';\r\n\r\n// tslint:disable:object-literal-sort-keys\r\n\r\n\r\n\r\n\r\n\r\n// const fulruhmRaid: QuestDefinition = {\r\n//     nodes: [{\r\n//         x: -4,\r\n//         y: -1,\r\n//         type: QuestNodeType.nothing,\r\n//     }, {\r\n//         x: -4,\r\n//         y: -1,\r\n//         type: QuestNodeType.nothing,\r\n\r\nconst all = {\r\n    kill10Boars,\r\n    retrieveMagicAmulet,\r\n};\r\n\r\nexport default all;\r\n\r\nexport function getDefinition<T>(questName: string): QuestDefinition<T> {\r\n    return all[questName];\r\n}\r\n","import { QuestStoreState } from 'stores/quest';\nimport { Item } from 'definitions/items/types';\nimport { QuestDefinition, QuestNodeType } from '../types';\n\nexport interface RetrieveMagicAmuletQuestVars {\n    baz: boolean;\n    zux: number;\n}\n\nconst retrieveMagicAmulet: QuestDefinition<RetrieveMagicAmuletQuestVars> = {\n    getQuestVars: (questStore: QuestStoreState) => questStore.questVars as RetrieveMagicAmuletQuestVars,\n    getInitialQuestVars: (questStore: QuestStoreState) => {\n        const vars: RetrieveMagicAmuletQuestVars = {\n            baz: false,\n            zux: 13\n        }\n        return vars;\n    },\n    requiredItems: [\n        Item.torch,\n        Item.torch,\n        Item.torch,\n        Item.sandwich,\n        Item.sandwich,\n    ],\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 3,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 4,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 5,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 7,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 8,\n        y: 2,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 8,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 9,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 10,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 10,\n        y: 2,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 10,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 10,\n        y: 4,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 11,\n        y: 5,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 12,\n        y: 6,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 12,\n        y: 7,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 13,\n        y: 8,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 12,\n        y: 8,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 12,\n        y: 9,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 11,\n        y: 8,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 10,\n        y: 8,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 9,\n        y: 8,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 8,\n        y: 9,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 7,\n        y: 8,\n        type: QuestNodeType.encounter,\n        startScene: \"dungeon.hallway\"\n    }, {\n        x: 8,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        startScene: \"dungeon.hallway\"\n    }, {\n        x: 3,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }],\n};\n\nexport default retrieveMagicAmulet;","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (adventurers: AdventurerStoreState[], quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(adventurers, id)!);\n};\n\nexport const getQuestLeader = (adventurers: AdventurerStoreState[], quest: QuestStoreState): AdventurerStoreState | undefined => {\n    const leaderId = quest.party[0];\n    return findAdventurerById(adventurers, leaderId);\n}\n\nexport const findAdventurerById = (adventurers: AdventurerStoreState[], id: string): AdventurerStoreState | undefined => {\n    return adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n\n","import { LoaderResource } from 'pixi.js';\n\ninterface Location {\n    x: number;\n    y: number;\n}\n\nexport const lerpLocation = (point1: Location, point2: Location, alpha: number): Location => {\n    const x = lerp(point1.x, point2.x, alpha);\n    const y = lerp(point1.y, point2.y, alpha);\n    return { x, y };\n}\n\nconst lerp = (n1: number,  n2: number,  alpha: number) =>  {\n    return n1 + alpha * (n2 - n1);\n}\n\n// Uses the shared pixi loader to load a resource\nexport async function loadResourceAsync(path: string) { \n    const loader = PIXI.Loader.shared;\n    return new Promise<LoaderResource>((resolve, reject) => {\n        if (loader.resources[path]) {\n            resolve(loader.resources[path]);\n        }\n        else { \n            loader.add(path).load((_, resources) => {\n                resolve(resources[path]);            \n            });    \n        }\n    });\n}\n\nexport const loadResource = (path: string, callback: (resource: LoaderResource) => void) => { \n    const loader = PIXI.Loader.shared;\n    if (loader.resources[path]) {\n        callback(loader.resources[path]);\n        return;\n    }\n    loader.add(path).load((_, resources) => { callback(resources[path]!)});\n}","// tslint:disable:object-literal-sort-keys\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.apparel;\nconst basePath = \"/img/items/apparel/\";\n\nexport enum ApparelType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface ApparelDefinition extends ItemDefinition {\n    equipmentType: ApparelType;\n    armourRating?: number;\n}\n\nconst all: Record<string, ApparelDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n        armourRating: 3,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n        armourRating: 2,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n        armourRating: 20,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n        armourRating: 10,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n        armourRating: 10,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default all;\n\nexport function getDefinition<T extends ApparelDefinition>(apparel: string): T {\n    return all[apparel] as T;\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\nexport enum DamageType {\n    kinetic = \"kinetic\",\n}\n\nexport interface DamageDefinition {\n    [DamageType.kinetic]: number | undefined;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n    damage: DamageDefinition;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n        damage: { [DamageType.kinetic]: 20 },\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \"Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n        damage: { [DamageType.kinetic]: 3 },\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n        damage: { [DamageType.kinetic]: 5 },\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n        damage: { [DamageType.kinetic]: 25 },\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n        damage: { [DamageType.kinetic]: 2 },\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n        damage: { [DamageType.kinetic]: 12 },\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 14 },\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n        damage: { [DamageType.kinetic]: 16 },\n    },\n};\nexport default weaponDefinitions;\n\nexport function getDefinition<T extends WeaponDefinition>(weapon: string): T {\n    return weaponDefinitions[weapon] as T;\n}\n","import { Store, AnyAction } from \"redux\";\nimport { StoreState } from 'stores';\nimport { BaseSceneController } from 'mechanics/scenes/BaseSceneController';\n\nexport abstract class SceneControllerManager {\n    static store: { [key: string]: BaseSceneController } = {};\n    static controllerTypes = {};\n    \n    static registerSceneController(questName: string, sceneName: string, controllerType: typeof BaseSceneController) {\n        this.controllerTypes[`${questName}.${sceneName}`] = controllerType;\n    }\n\n    static getSceneController(questName: string, sceneName: string, store: Store<StoreState, AnyAction>,): BaseSceneController {\n        if (!this.store[`${questName}.${sceneName}`]) {\n            if (!this.controllerTypes[`${questName}.${sceneName}`]) {\n                console.log(this.controllerTypes)\n                throw new Error(`No controller registered for ${questName}.${sceneName}`);\n            }\n            this.store[`${questName}.${sceneName}`] = new this.controllerTypes[`${questName}.${sceneName}`](store, questName);\n        }\n        return this.store[`${questName}.${sceneName}`];\n    }\n\n    static destroySceneConroller(questName: string, sceneName: string, ) {\n        delete this.store[`${questName}.${sceneName}`];\n    }\n}\n\nrequire('definitions/quests/kill10Boars/encounters/dungeon');\n","function EventEmitter<TEventType>() {\n    abstract class EventEmitter {\n        static events = {};\n        \n        static addEventListener (eventName: string, listener: (event: TEventType) => void) {\n            this.events[eventName] = this.events[eventName] || [];\n            this.events[eventName].push(listener);\n        }\n\n        static removeEventListener (eventName: string, listener: (event: TEventType) => void) {\n            if (this.events[eventName]) {\n                for (var i = 0; i < this.events[eventName].length; i++) {\n                    if (this.events[eventName][i] === listener) {\n                        this.events[eventName].splice(i, 1);\n                        break;\n                    }\n                };\n            }\n        }\n\n        protected static emit (eventName: string, event: TEventType | undefined) {\n            if (this.events[eventName]) {\n                this.events[eventName].forEach((fn: (event: TEventType | undefined) => any) => fn(event));\n            }\n        }\n    }\n    return EventEmitter;\n}\n\nexport default EventEmitter;","export interface TiledMapData {\n    width: number;\n    height: number;\n    tilewidth: number;\n    tileheight: number;\n    infinite: boolean;\n    backgroundcolor: string | null;\n    orientation: Orientation;\n    renderorder: RenderOrder;\n    tilesets: TiledTilesetData[];\n    layers: TiledLayerData[];\n}\n  \nexport interface TiledTilesetData {\n    columns: number;\n    firstgid: number;\n    source: string;\n    image: string;\n    imagewidth: number;\n    imageheight: number;\n    tilewidth: number;\n    tileheight: number;\n    tilecount: number;\n    name: string;\n    margin: number; // todo: \n    spacing: number; // todo\n    tiles?: TileData[];\n}\n  \nexport interface TileData {\n    id: number,\n    properties?: TiledProperty[];\n}\n  \nexport interface TiledLayerData {\n    data: number[];\n    objects: TiledObjectData[];\n    type: TiledLayerType;\n    height: number;\n    id: number;\n    name: string;\n    opacity: number; // not supported atm\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    properties?: TiledProperty[];  \n}\n  \nexport interface TiledObjectData {\n    gid?: number;\n    id: number;\n    name: string;\n    properties?: TiledProperty[];  \n    type: string;\n    visible: boolean;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n}\n  \nexport enum TiledLayerType {\n    tilelayer = \"tilelayer\",\n    objectgroup = \"objectgroup\"\n}\n  \nexport interface TiledProperty {\n    name: string,\n    type: string,\n    value: any\n}\n  \nenum Orientation {\n    orthagonal = \"orthagonal\",\n    isometric = \"isometric\",\n    staggered = \"staggered\",\n    hexagonal = \"hexagonal\"\n}\n  \nenum RenderOrder {\n    rightUp = \"right-up\",\n    rightDown = \"right-down\",\n    leftUp = \"left-up\",\n    leftDown = \"left-down\"\n} ","// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { CombatActionType } from \"stores/combat\";\n\nexport enum ActionType {\n    clearCombatAction = \"clearCombatAction\",\n    startCombatAction = \"startCombatAction\",\n    moveActor = \"moveActor\",\n}\n\nexport interface AddCombatActionAction extends Action<ActionType> {\n    combatType: CombatActionType;\n    actor: string;\n    target: [number, number];\n    endsAt: number;\n}\n\nexport interface MoveActorAction extends Action<ActionType> {\n    actor: string;\n    location: [number, number];\n}\n\nexport function startCombatAction(type: CombatActionType, actor: string, target: [number, number], endsAt: number): AddCombatActionAction {\n    return {\n        type: ActionType.startCombatAction,\n        combatType: type,\n        actor,\n        target,\n        endsAt,\n    };\n}\n\nexport function moveActor(actor: string, location: [number, number]): MoveActorAction {\n    return {\n        type: ActionType.moveActor,\n        actor,\n        location,\n    };\n}\n\nexport function clearCombatAction(): Action<ActionType> {\n    // currently there is only one combat possible. so only one needs to be cleared\n    return {\n        type: ActionType.clearCombatAction,\n    };\n}\n","export interface CombatStoreState {\n    actors: Actor[];\n    turn: Allegiance;\n    action?: CombatAction;\n}\n\nexport interface Actor {\n    name: string;\n    allegiance: Allegiance;\n    location: number[];\n    health: number;\n    remainingAP: number;\n}\n\nexport enum Allegiance {\n    player,\n    enemy,\n}\n\nexport interface CombatAction {\n    type: CombatActionType;\n    actor: string;\n    target: [number, number];\n    endsAt: number;\n}\n\nexport enum CombatActionType {\n    move = \"move\",\n    slash = \"slash\",\n    shoot = \"shoot\",\n}\n\nexport const barBrawl: CombatStoreState = {\n    actors: [{\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [3, 5],\n        name: \"c4a5d270\",\n        remainingAP: 5,\n    }, {\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [4, 6],\n        name: \"2e655832\",\n        remainingAP: 4,\n    }],\n    turn: Allegiance.player,\n};\n","import { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\r\nimport { Action } from \"redux\";\r\nimport { State as seedrandomStateType } from \"seedrandom\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\n\r\nexport enum ActionType {\r\n    gameTick = \"gameTick\",\r\n}\r\nexport interface GameTickAction extends Action<ActionType> {\r\n    delta: number;\r\n    rngState: seedrandomStateType | null;\r\n    resources: ResourceStoreState | null;\r\n    quests: QuestUpdate[];\r\n    log: LogUpdate[];\r\n}\r\n\r\n// export type IncrementResource = IncrementResource // | others\r\n\r\n// tslint:disable: align\r\nexport function gameTick(delta: number,\r\n    rngState: seedrandomStateType | null,\r\n    resources: ResourceStoreState | null,\r\n    quests: QuestUpdate[],\r\n    log: LogUpdate[],\r\n): GameTickAction {\r\n    return {\r\n        type: ActionType.gameTick,\r\n        delta,\r\n        rngState,\r\n        resources,\r\n        quests,\r\n        log,\r\n    };\r\n}\r\n","import { clearCombatAction, moveActor } from \"actions/combat\";\nimport { Store } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Allegiance, CombatAction, CombatActionType } from \"stores/combat\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface CombatUpdate  {\n    // todo: maybe this is not needed\n    action: CombatAction | null;\n}\n\nconst updateCombat = (delta: number, store: Store<StoreState>): CombatUpdate | null => {\n    const state = store.getState();\n    const combat = state.combat;\n    if (combat.action) {\n        const action = combat.action;\n        if (action.endsAt < Date.now()) {\n            if (combat.turn === Allegiance.enemy) {\n                /* if (apLeft(enemy))\n                determine next action\n                else\n                players turn now\n                */\n            } else if (combat.turn === Allegiance.player) {\n                switch (combat.action.type) {\n                    case CombatActionType.move:\n                        store.dispatch(moveActor(combat.action.actor, combat.action.target));\n                        store.dispatch(clearCombatAction());\n                        break;\n                    default:\n                        break;\n                }\n                return {\n                    action: null,\n                };\n            }\n        }\n    }\n    return null;\n};\n\nexport default updateCombat;\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n};\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.5\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    // eslint-disable-next-line no-mixed-operators\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","import itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"global/TextManager\";\nimport \"components/ui/css/common/icon.css\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items, to be used as requirements for something\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const aggregate = props.items.reduce((accumulator: object, current: Item) => {\n        if (!accumulator[current]) {\n            accumulator[current] = 0;\n        }\n        accumulator[current]++;\n        return accumulator;\n    }, {});\n\n    const listItems = Object.keys(aggregate).map((key: string) => {\n        const item = key as Item;\n        const amount = aggregate[key] as number;\n        let listItemClass = \"item\";\n\n        // Check if we have enough\n        const amountInInventory = itemsInInventory ? itemsInInventory.filter((i) => i === item).length : 0;\n        if (amount > amountInInventory) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className={listItemClass} key={item}>\n            <div \n                className=\"icon common-icon-smallest\" \n                style={{ backgroundImage: `url(${process.env.PUBLIC_URL}${itemDescription.iconImg})`}}\n            ></div>\n            <div className=\"name\">\n                { `${TextManager.getItemName(item)} (${ amount })` }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className={className} >\n            {listItems}\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    const tmpWarehouse = [ ...store.stockpile];\n    ownProps.items.forEach((item: Item) => {\n        const found = tmpWarehouse.findIndex((i) => i === item);\n        if (found > -1) {\n            // Remove the item from tmpWarehouse and add to itemsInInventory\n            const [ removed ] = tmpWarehouse.splice(found, 1);\n            if (removed) {\n                itemsInInventory.push(removed);\n            }\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextPopup\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","export enum IconSize {\r\n    smallest,\r\n    small,\r\n    medium,\r\n    big,\r\n    biggest,\r\n}\r\n\r\nexport const getClassName = (size?: IconSize): string => {\r\n    switch (size) {\r\n        case IconSize.smallest:\r\n            return \"common-icon-smallest\";\r\n        case IconSize.small:\r\n            return \"common-icon-small\";\r\n        case IconSize.medium:\r\n            return \"common-icon-medium\";\r\n        case IconSize.big:\r\n            return \"common-icon-big\";\r\n        case IconSize.biggest:\r\n            return \"common-icon-biggest\";\r\n    }\r\n    return getClassName(IconSize.medium);\r\n};\r\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${process.env.PUBLIC_URL}${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    // Each additional worker shaves off 10% of the production time\n    return time - (.1 * time * (workers - 1));\n};\n","import { ContextInfo, ContextType } from 'constants/context';\nimport deepEquals from 'deep-equal';\nimport EventEmitter from './EventEmitter';\n\nexport interface Context {\n    type: ContextType;\n    info: ContextInfo;\n    referenceRect: ClientRect;\n}\n\nexport abstract class TooltipManager extends EventEmitter<Context>() {\n\n    static EVENT_CONTEXT_UPDATED = \"tooltipContextUpdated\";\n    private static lastContext: Context | undefined; \n\n    static showContextTooltip (type: ContextType, info: ContextInfo, originRect: ClientRect) {\n        const context = { type, info, referenceRect: originRect};\n\n        if(deepEquals(context, this.lastContext)) {\n            this.clear();\n        } else {\n            this.emit(this.EVENT_CONTEXT_UPDATED, context);\n            this.lastContext = context;  \n        }\n    }\n    \n    static clear() {\n        this.emit(this.EVENT_CONTEXT_UPDATED, undefined);   \n        this.lastContext = undefined;    \n    }\n}","import \"components/ui/css/common/icon.css\";\nimport { ContextType } from \"constants/context\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\nimport { TooltipManager } from 'global/TooltipManager';\n\nexport interface Props {\n    item: Item;\n    onClick?: (event: React.MouseEvent) => void;\n    size?: IconSize;\n    showContext?: boolean;\n}\n\nconst ItemIcon = (props: Props) => {\n    const {item} = props;\n    const itemDefinition = getDefinition(item);\n\n    if (!itemDefinition) {\n        // tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    const handleClick = (event: React.MouseEvent) => {\n        if (props.showContext !== false) {\n            const origin = (event.currentTarget as HTMLElement);\n            const originRect = origin.getBoundingClientRect();\n            TooltipManager.showContextTooltip(ContextType.item, getDefinition(item), originRect);\n            event.stopPropagation();\n        }\n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    };\n\n    const className = `item-icon ${getClassName(props.size)}`;\n\n    return (\n        <div \n            className={className}\n            onClick={handleClick}\n            style={{backgroundImage: `url(${process.env.PUBLIC_URL}${itemDefinition.iconImg})`}}\n        >\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\nexport interface Props {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nconst Progressbar = (props: Props) => {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{props.label}</div>\n            <div className=\"progressbar-bar\" style= {{width: `${progress * 100}%`}}></div>\n        </div>\n    );\n};\n\nexport default Progressbar;\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","import { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface ModifyGoldAction extends Action<ActionType> {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","import { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface MoveItemInWarehouseAction extends Action<ActionType> {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface AddResources extends Action<ActionType> {\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { Action } from \"redux\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface StructureAction extends Action<ActionType> {\n    structure: Structure;\n}\nexport interface StructureStateAction extends StructureAction {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends StructureAction {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action, AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface AddAction extends Action<ActionType> {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: (e: React.MouseEvent) => void;\n    onDown?: (e: React.MouseEvent) => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = (e: React.MouseEvent) => {\n        if (props.onUp && !props.upDisabled) { props.onUp(e); }\n    };\n\n    const handleDown = (e: React.MouseEvent) => {\n        if (props.onDown && !props.downDisabled) { props.onDown(e); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import React from \"react\";\nimport { Structure } from 'definitions/structures';\nimport \"./css/structureviewheader.css\";\n\ninterface Props {\n    structure: Structure;\n}\n\nconst StructureViewHeader = (props: Props) => {\n    //const displayName = TextManager.getStructureName(props.structure);\n    return (\n        <div className={`structureview-header structureview-header-${props.structure}`}>\n            {/* <h1 className=\"app-h1-white\">{displayName}</h1> */}\n        </div>\n    );\n}\n\nexport default StructureViewHeader;","import * as React from \"react\";\nimport { useState } from 'react';\nimport MaterialsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"global/TextManager\";\nimport { formatDuration } from \"utils/time\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport StructureViewHeader from './StructureViewHeader';\nimport \"./css/productionstructureview.css\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Array<Item | null>;  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ProductionStructureView = (props: AllProps) => {\n\n    const [selectedItem, setSelectedItem] = useState<Item>();\n    const [workersAssigned, setWorkersAssigned] = useState<number>(0);\n\n    const structureDefinition = getDefinition<ProductionStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type}\n            with type ProductionStructureDefinition.`);\n    }\n    const level: number =   props.level || 0;\n    const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(props.type);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ `${(level + 1)} / ${structureDefinition.levels.length}` }\n            <button\n                style={{float: \"right\"}}\n                onClick={handleClick}\n                disabled={!canUpgrade} >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createCraftTabs = () => {\n\n        return levelDefinition.produces.map((produces) => {\n            const handleSelectCraftingItem = (e: React.MouseEvent) => {\n                e.stopPropagation();\n\n                setSelectedItem(produces.item);\n            };\n\n            return <li\n                key={`craft${produces.item}`}\n                onClick={handleSelectCraftingItem}\n                className={selectedItem === produces.item ? \"selected\" : \"\"}\n            >\n                <ItemIcon item={produces.item} />\n                { TextManager.getItemName(produces.item) }\n            </li>;\n        });\n    };\n\n    const createCraftingDetails = () => {\n        const item = selectedItem;\n        if (!item) { return null; }\n\n        const produces = levelDefinition.produces.find((p) => p.item === item)!;\n        const playerResources = props.resources || {};\n        const costResources = produces.cost.resources!;\n        const missingAtLeastOneResource = Object.keys(costResources)\n            .some((resource) => costResources[resource] > playerResources[resource]);\n\n        let missingAtLeastOneItem = false;\n        const costMaterials = produces.cost.materials;\n        if (costMaterials) {\n            missingAtLeastOneItem = costMaterials\n                .some((i: Item) => props.items.indexOf(i) === -1);\n        }\n\n        const disabled = missingAtLeastOneResource || missingAtLeastOneItem || workersAssigned < 1;\n        // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n        const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n        const makeTimeString = (time: number): string => {\n            if (workersAssigned === 0) {\n                return \"\";\n            }\n            const craftingTime = calculateProductionTime(time, workersAssigned);\n            const formatted = formatDuration(craftingTime);\n            return ` Crafting time: ${formatted}`;\n        };\n\n        const handleClick = (e: React.MouseEvent) => {\n            e.stopPropagation();\n\n            if (props.onCraft) {\n                props.onCraft(produces, workersAssigned);\n                setWorkersAssigned(0);\n            }\n        };\n\n        const handleUp = (e: React.MouseEvent) => {\n            e.stopPropagation();\n            setWorkersAssigned(workersAssigned + 1);\n        };\n\n        const handleDown = (e: React.MouseEvent) => {\n            e.stopPropagation();\n            setWorkersAssigned(workersAssigned - 1);\n        };\n\n        return (\n            <div className=\"crafting-details\">\n                Craft a { TextManager.getItemName(itemDefinition.item) }\n                <div className=\"crafting-costs\">\n                    <fieldset>\n                        <ResourcesCostBox resources={costResources} />\n                    </fieldset>\n                    <fieldset>\n                        {costMaterials && <MaterialsCostBox items={costMaterials} />}\n                    </fieldset>\n                </div>\n                <div style={{display: \"flex\"}}>\n                    <UpDownValue\n                        value={workersAssigned}\n                        label={\"Workers: \"}\n                        onUp={handleUp}\n                        onDown={handleDown}\n                        upDisabled={\n                            workersAssigned >= props.workersFree ||\n                            workersAssigned >= MAX_WORKERS_CRAFTING\n                        }\n                        downDisabled={ workersAssigned < 1 }\n                    />\n                    &nbsp;\n                    { makeTimeString(produces.cost.time || 0) }\n                </div>\n                <div>\n                    <button\n                        disabled={disabled }\n                        onClick={handleClick }>\n                        Craft\n                    </button>\n                </div>\n            </div>\n        );\n    };\n\n    const createProgressbars = () => {\n        const tasks = props.tasks || [];\n        return tasks.map((t) => (\n            <Progressbar\n                key={`${t.name}${t.startTime}`}\n                label={`${t.name} (${formatDuration(t.timeRemaining)})`}\n                progress={t.progress}\n            />\n        ));\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <>\n            <StructureViewHeader structure={props.type} />\n\n            <details open={true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            {createCraftTabs()}\n                        </ul>\n                        {createCraftingDetails()}\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        {createProgressbars()}\n                    </fieldset>\n                </section>\n            </details>\n        </>\n    );\n}\n\nexport default ProductionStructureView;\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogText } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    return {\n        gold: store.gold,\n        items: store.stockpile,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogText(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ProductionStructureView);\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurerInventory,\n    warehouse,\n    tavern,\n    adventurerEquipment,\n    lootCache\n}\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${process.env.PUBLIC_URL}${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import { DragType } from \"constants/dragging\";\r\nimport * as React from \"react\";\r\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\r\nimport \"./css/droppableadventurerslot.css\";\r\n\r\nconst dropTarget: DropTargetSpec<Props> = {\r\n    drop(props: Props, monitor: DropTargetMonitor) {\r\n        props.onDrop(monitor.getItem());\r\n    },\r\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\r\n        return true; // todo: can't drop on yourself\r\n    },\r\n};\r\n\r\nexport interface Props {\r\n    onDrop: (item: any) => void;\r\n}\r\n\r\nexport interface DropSourceProps {\r\n    canDrop: boolean;\r\n    isOver: boolean;\r\n    connectDropTarget: ConnectDropTarget;\r\n}\r\n\r\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\r\n    canDrop: monitor.canDrop(),\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver(),\r\n});\r\n\r\n/*\r\n * Can drop adventurers on this */\r\nconst DroppableAdventurerSlot = (props: Props & DropSourceProps) => {\r\n    const {\r\n        isOver,\r\n        canDrop,\r\n        connectDropTarget,\r\n    } = props;\r\n    // const isActive = isOver && canDrop;\r\n    let className = \"droppable-adventurer-slot\";\r\n\r\n    if (isOver) {\r\n        className += \" active-drop\";\r\n    } else if (canDrop) {\r\n        className += \" can-drop\";\r\n    }\r\n\r\n    return connectDropTarget(\r\n        <div className = { className }>\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DropTarget<Props, DropSourceProps>(\r\n    DragType.ADVENTURER,\r\n    dropTarget,\r\n    collect,\r\n)(DroppableAdventurerSlot);\r\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAdventurerDropped: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onAdventurerClicked: (adventurer: AdventurerStoreState) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = (\n                    <AdventurerAvatar \n                        adventurer={adventurer} \n                        displayName={false} \n                        onClick={() => props.onAdventurerClicked(adventurer) }\n                    /> \n                );\n                className = \"has-adventurer\";\n            } else {\n                content = (\n                    <DroppableAdventurerSlot onDrop={ (item: AdventurerAvatarDragInfo) => { props.onAdventurerDropped(item, i); }} />\n                );\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return (\n        <ul className = \"assign-adventurers\">\n            { slotsContent() }\n        </ul>\n    );\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport ItemsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"global/TextManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\nimport { QuestDefinition } from 'definitions/quests/types';\n\nexport const AVAILABLE_SLOTS = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface StateProps {\n    items: Array<Item | null>;  // items in inventory\n}\n\n// tslint:disable-next-line: no-empty-interface\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName?: string;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n\n    onQuestClick: (questName: string) => void;\n    onAdventurerDropped: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (adventurer: AdventurerStoreState) => void;\n    onLaunchQuest: () => void;\n}\n\ntype AllProps = Props  & StateProps;\n\nconst QuestBoard = (props: AllProps) => {\n\n    const getQuestDetails = () => {\n        if (!props.selectedQuestName) {\n            return null;\n        }\n        const quest = props.availableQuests.find((q) => q.name === props.selectedQuestName);\n        if (!quest) {\n            return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n        }\n        const questDefinition = getDefinition(quest.name);\n\n        // Need a full party to launch\n        const fullParty = props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n        // Check if we have the required items\n        const enoughItems = checkEnoughItems(questDefinition);\n\n        const canLaunch = fullParty && enoughItems;\n\n        return <div className=\"quest-details\">\n            {TextManager.getQuestDescription(props.selectedQuestName)}\n            <AssignAdventurers\n                availableSlots={AVAILABLE_SLOTS}\n                assignedAventurers={props.assignedAventurers}\n                onAdventurerClicked={props.onRemoveAdventurer}\n                onAdventurerDropped={props.onAdventurerDropped} \n            />\n            <ItemsCostBox items={ questDefinition.requiredItems || [] }/>\n            <button disabled={!canLaunch} onClick = { () => props.onLaunchQuest() }>\n                {TextManager.get(\"structure-tavern-button-launch-quest\")}\n            </button>\n        </div>;\n    };\n\n    /**\n     * Returns true if all the items required by the quest are in the inventory */\n    const checkEnoughItems = (questDefinition: QuestDefinition): boolean => {\n        if (!questDefinition.requiredItems) {\n            return true;\n        }\n        return questDefinition.requiredItems.every((item: Item) => {\n            const amountRequired = (questDefinition.requiredItems)!.filter((i) => i === item).length;\n            return props.items.filter((i) => i === item).length >= amountRequired;\n        });\n    }\n\n    // quest board, expanded quest info + assign adventurers + launch button\n    return (\n        <div className=\"quest-board\">\n            <h2> \n                {TextManager.get(\"structure-tavern-title-quest-board\")}\n            </h2>\n            <ul className=\"quest-list\">\n                {props.availableQuests.map((q) => {\n                    const iconImgPath = `${process.env.PUBLIC_URL}img/sigils/${q.icon }`;\n                    const className = `quest ${(q.name === props.selectedQuestName) ? \" selected\" : \"\"}`;\n                    return (\n                        <li key={q.name} className={className} onClick={() => {props.onQuestClick(q.name);} }>\n                            <div\n                                className=\"icon\"\n                                style={{backgroundImage: `url(${process.env.PUBLIC_URL}${iconImgPath})`}}\n                            ></div>\n                            <div className=\"title\">{ TextManager.getQuestTitle(q.name) } </div>\n                        </li>\n                    );\n                })}\n            </ul>\n            { getQuestDetails() }\n        </div>\n    );\n}\n\nexport default QuestBoard;\n","import QuestBoard, { Props, StateProps } from \"components/structures/tavern/QuestBoard\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        items: store.stockpile,\n    };\n}\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(QuestBoard);\n","import { Item } from \"definitions/items/types\";\nimport { SceneStoreState } from './scene';\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];                // list of adventurer ids\n    progress: number;               // Which questnode the party is at currently\n    questVars: any;                     // \n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    icon: string;\n\n    reward?: QuestReward;\n    scene?: SceneStoreState;\n    sceneName?: string;\n}\n ","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport * as React from \"react\";\r\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\r\nimport \"./css/draggableadventureravatar.css\";\r\n\r\nexport interface Props {\r\n    sourceId?: string;\r\n    onClick?: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface CollectedProps {\r\n    isDragging: boolean;\r\n    connectDragSource: ConnectDragSource;\r\n}\r\n\r\nexport interface AdventurerAvatarDragInfo {\r\n    adventurer: AdventurerStoreState;\r\n    sourceId?: string;\r\n}\r\n\r\n/**\r\n * Specifies the drag source contract.\r\n * Only `beginDrag` function is required.\r\n */\r\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\r\n    beginDrag(props: Props & AdventurerAvatarProps) {\r\n        // Return the data describing the dragged item\r\n        return {\r\n            adventurer: props.adventurer,\r\n            sourceId: props.sourceId,\r\n            sourceType: DragSourceType.adventurerInventory,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging(),\r\n    };\r\n}\r\n\r\nconst DraggableAdventurerAvatar = (props: Props & CollectedProps & AdventurerAvatarProps) => {\r\n\r\n    const { isDragging, connectDragSource, disabled } = props;\r\n    let className = \"draggable-adventurer-avatar\";\r\n    if (disabled) {\r\n        className += \" disabled\";\r\n    }\r\n    if (isDragging) {\r\n        className += \" dragging\";\r\n    }\r\n\r\n    /*if (isDragging) {\r\n        // TODO: can show some sort of empty state?\r\n        return null;\r\n    }*/\r\n    return connectDragSource(\r\n        <div className = { className }>\r\n            <AdventurerAvatar\r\n                // Copy all props down to AdventurerAvatar\r\n                { ...props }\r\n            />\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\r\n","// todo: hooks!\n// https://github.com/react-dnd/react-dnd/pull/1244\nimport { DragType } from \"constants/dragging\";\nimport { getDefinition } from \"definitions/items\";\nimport { ApparelDefinition, ApparelType } from \"definitions/items/apparel\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/equipmentslot.css\";\nimport { InventoryItemDragInfo } from \"./DraggableItemIcon\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        const item = monitor.getItem().item;\n\n        return itemAndEquipmentSlotMatch(item, props.type);\n    },\n};\n\nexport enum EquipmentSlotType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n    mainHand,\n    offHand,\n}\n\n// Returns true if item can be slotted in equipmentSlotType\nexport const itemAndEquipmentSlotMatch = (item: Item, equipmentSlotType: EquipmentSlotType) => {\n    switch (equipmentSlotType) {\n        case EquipmentSlotType.chest:\n            return checkEquipment(item, ApparelType.chest);\n         case EquipmentSlotType.feet:\n            return checkEquipment(item, ApparelType.feet);\n        case EquipmentSlotType.hands:\n            return checkEquipment(item, ApparelType.hands);\n        case EquipmentSlotType.head:\n            return checkEquipment(item, ApparelType.head);\n        case EquipmentSlotType.legs:\n            return checkEquipment(item, ApparelType.legs);\n        case EquipmentSlotType.mainHand:\n        case EquipmentSlotType.offHand:\n            const itemDefinition = getDefinition(item);\n            if (itemDefinition.itemType !== ItemType.weapon) {\n                return false;\n            }\n\n            // todo: prevent shields to be equipped in main hand\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport interface Props {\n    type: EquipmentSlotType;\n    onDrop: (item: InventoryItemDragInfo) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The EquipmentSlot displays a slot in which an item can be placed.\n */\nconst EquipmentSlot = (props: React.PropsWithChildren<Props & DropSourceProps>) => {\n    const {\n        isOver,\n        canDrop,\n        connectDropTarget,\n    } = props;\n    const isActive = isOver && canDrop;\n    let borderColor = \"grey\";\n    if (isActive) {\n        borderColor = \"green\";\n    } else if (canDrop) {\n        borderColor = \"orange\";\n    }\n\n    return connectDropTarget(\n        <div className = \"equipment-slot\" style = { { borderColor }} title={EquipmentSlotType[props.type]}>\n            { props.children }\n        </div>,\n    );\n};\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(EquipmentSlot);\n\nconst checkEquipment = (item: Item, equipmentType: ApparelType) => {\n    const itemDefinition = getDefinition(item);\n    if (itemDefinition.itemType !== ItemType.apparel) {\n        return false;\n    }\n    return (itemDefinition as ApparelDefinition).equipmentType === equipmentType;\n};\n","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport { IconSize } from \"constants/icons\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\r\nimport ItemIcon from \"./ItemIcon\";\r\n\r\nexport interface Props {\r\n    index: number;\r\n    item: Item;\r\n    sourceType: DragSourceType;\r\n    sourceId?: string;\r\n    size?: IconSize;\r\n    onClick?: (event: React.MouseEvent) => void;\r\n}\r\n\r\ninterface CollectedProps {\r\n    isDragging: boolean;\r\n    connectDragSource: ConnectDragSource;\r\n}\r\n\r\nexport interface InventoryItemDragInfo {\r\n    item: Item;\r\n    inventorySlot?: number;\r\n    sourceId?: string;\r\n    sourceType: DragSourceType;\r\n}\r\n\r\n/**\r\n * Specifies the drag source contract.\r\n * Only `beginDrag` function is required.\r\n */\r\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\r\n    beginDrag(props: Props) {\r\n        // Return the data describing the dragged item\r\n        return {\r\n            inventorySlot: props.index,\r\n            item: props.item,\r\n            sourceId: props.sourceId,\r\n            sourceType: props.sourceType,\r\n        };\r\n    },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        isDragging: monitor.isDragging(),\r\n    };\r\n}\r\n\r\nconst DraggableItemIcon = (props: Props & CollectedProps) => {   \r\n\r\n    const { item, onClick, isDragging, connectDragSource, size } = props;\r\n    const handleClick = (event: React.MouseEvent) => {\r\n        if (onClick) {\r\n            onClick(event);\r\n        }\r\n    };\r\n    if (isDragging) {\r\n        // TODO: can show some sort of empty state?\r\n        return null;\r\n    }\r\n    return connectDragSource((\r\n        <div>\r\n            <ItemIcon\r\n                item={item}\r\n                onClick={handleClick}\r\n                size={size}\r\n            />\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\r\n","import { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n    assignEquipment = \"assignEquipment\",\n    removeEquipment = \"removeEquipment\",\n}\n\nexport interface AdventurerAction extends Action<ActionType> {\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends AdventurerAction {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends AdventurerAction {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends AdventurerAction {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends AdventurerAction {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport interface AssignEquipmentAction extends AdventurerAction {\n    item: Item;\n    equipmentSlot: EquipmentSlotType;\n}\nexport interface RemoveEquipmentAction extends AdventurerAction {\n    equipmentSlot: EquipmentSlotType;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n\nexport function assignEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item): AssignEquipmentAction {\n    return {\n        type: ActionType.assignEquipment,\n        adventurerId,\n        item,\n        equipmentSlot,\n    };\n}\n\nexport function removeEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType): RemoveEquipmentAction {\n    return {\n        type: ActionType.removeEquipment,\n        adventurerId,\n        equipmentSlot,\n    };\n}\n","import React from \"react\";\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport EquipmentSlot, { EquipmentSlotType } from 'components/ui/EquipmentSlot';\nimport { Item } from 'definitions/items/types';\nimport DraggableItemIcon, { InventoryItemDragInfo } from 'components/ui/DraggableItemIcon';\nimport { DragSourceType } from 'constants/dragging';\nimport { IconSize } from 'constants/icons';\nimport { TextManager } from 'global/TextManager';\n\nexport interface Props {\n    adventurer: AdventurerStoreState\n    onDropItemEquipment: (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => void;\n}\n\nconst AdventurerEquipment = (props: Props) => {\n    const { adventurer, onDropItemEquipment } = props;\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n\n            contents = (\n                <DraggableItemIcon\n                    index={slotType}\n                    sourceId={adventurer.id}\n                    sourceType={DragSourceType.adventurerEquipment}\n                    item={item}\n                    ref={itemRef}\n                    size={IconSize.medium}\n                />\n            );\n        }\n\n        return (\n            <>\n                <EquipmentSlot\n                    onDrop={(dragInfo: InventoryItemDragInfo) => onDropItemEquipment(dragInfo, slotType)}\n                    type={slotType}\n                >\n                    {contents}\n                </EquipmentSlot>\n                <span className=\"info\">{TextManager.get(`ui-equipmentslot-${EquipmentSlotType[slotType]}`)}</span>\n            </>\n        );\n    };\n    return (\n        <ul>\n            <li>{getEquipmentSlot(EquipmentSlotType.head)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.shoulders)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.chest)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.hands)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.legs)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.feet)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.mainHand)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.offHand)}</li>\n        </ul>\n    )\n}\n\nexport default AdventurerEquipment;","import { DragSourceType, DragType } from \"constants/dragging\";\r\nimport { getClassName, IconSize } from \"constants/icons\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\r\nimport { InventoryItemDragInfo } from \"../DraggableItemIcon\";\r\nimport { itemAndEquipmentSlotMatch } from \"../EquipmentSlot\";\r\n\r\nconst dropTarget: DropTargetSpec<Props> = {\r\n    drop(props: Props, monitor: DropTargetMonitor) {\r\n        props.onDrop(monitor.getItem());\r\n    },\r\n    canDrop(props: Props, monitor: DropTargetMonitor) {\r\n        const dragInfo: InventoryItemDragInfo = monitor.getItem();\r\n        if (dragInfo.sourceType === DragSourceType.adventurerEquipment) {\r\n            return props.item == null || itemAndEquipmentSlotMatch(props.item, dragInfo.inventorySlot!);\r\n        }\r\n        return true;\r\n    },\r\n};\r\n\r\nexport interface Props {\r\n    item: Item | null;\r\n    onDrop: (item: any) => void;\r\n    size?: IconSize;\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport interface DropSourceProps {\r\n    canDrop: boolean;\r\n    isOver: boolean;\r\n    connectDropTarget: ConnectDropTarget;\r\n}\r\n\r\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\r\n    canDrop: monitor.canDrop(),\r\n    connectDropTarget: connect.dropTarget(),\r\n    isOver: monitor.isOver(),\r\n});\r\n\r\n/**\r\n * The InventorySlot displays a slot in which an item can be placed.\r\n */\r\nconst InventorySlot = (props: Props & DropSourceProps) => {\r\n    const {\r\n        isOver,\r\n        canDrop,\r\n        connectDropTarget,\r\n    } = props;\r\n    const isActive = isOver && canDrop;\r\n\r\n    const classNames = [\r\n        \"inventory-item\",\r\n        getClassName(props.size),\r\n    ];\r\n\r\n    if (isActive) {\r\n        classNames.push(\"drop-active\");\r\n    } else if (canDrop) {\r\n        classNames.push(\"drop-possible\");\r\n    }\r\n\r\n    return connectDropTarget(\r\n        <div className = { classNames.join(\" \") }>\r\n            { props.children }\r\n        </div>,\r\n    );\r\n}\r\n\r\nexport default DropTarget<Props, DropSourceProps>(\r\n    DragType.ITEM,\r\n    dropTarget,\r\n    collect,\r\n)(InventorySlot);\r\n","import DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport {Item} from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    iconSize?: IconSize;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n    className?: string;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n        };\n\n        if (item) {\n            contents = (\n                <DraggableItemIcon\n                    index={i}\n                    sourceId={props.sourceId}\n                    sourceType={props.sourceType}\n                    item={item}\n                />\n            );\n       }\n\n        const slot = (\n            <InventorySlot\n                key={`inventory-slot-${i}`}\n                item={item}\n                size={props.iconSize}\n                onDrop={handleDrop}\n            >\n                {contents}\n            </InventorySlot>\n        );\n        slots.push(slot);\n   }\n    return (\n        <div className={`inventory ${props.className}`}>\n            {slots}\n        </div>\n    );\n};\nexport default Inventory;\n","import React from \"react\";\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport { EquipmentSlotType } from 'components/ui/EquipmentSlot';\nimport { Item } from 'definitions/items/types';\nimport { InventoryItemDragInfo } from 'components/ui/DraggableItemIcon';\nimport { DragSourceType } from 'constants/dragging';\nimport AdventurerEquipment from './AdventurerEquipment';\nimport Inventory from 'components/ui/inventory/Inventory';\nimport { useDispatch } from 'react-redux';\nimport { Action } from \"redux\";\nimport { removeItemFromInventory, assignEquipment, addItemToInventory, removeEquipment, moveItemInInventory } from 'actions/adventurers';\nimport { removeItemFromWarehouse, addItemToWarehouse } from 'actions/items';\nimport \"./css/adventurerPanel.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n}\n\n/** Vertical panel showing adventurer info \n * todo: move outside of /world\n*/\nconst AdventurerPanel = (props: Props) => {\n    const { adventurer } = props;\n    const dispatch = useDispatch();\n\n    const renderAttributes = () => Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key={`${adventurer.id}-${stat}`} > <b>{stat}</b>: {value.toFixed(1)} </div>;\n    });    \n\n    // When an item gets dropped on equipment slot\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        const item = dragInfo.item;\n        const actions: Action[] = [];\n\n        switch (dragInfo.sourceType) {\n            // Dragged from inventory\n            case DragSourceType.adventurerInventory: {\n                actions.push(\n                    // Item gets removed from inventory\n                    removeItemFromInventory(adventurer.id, dragInfo.inventorySlot!),\n                    // Item gets assigned to an equipment slot\n                    assignEquipment(adventurer.id, slotType, item),\n                );\n                \n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    // There is already an item in this slot. Place in inventory\n                    actions.push(addItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!));\n                }\n                break;\n            }\n            // Dragged from warehouse. I dont think this can happen in this AdventurerPanel\n            case DragSourceType.warehouse: {\n                actions.push(\n                    removeItemFromWarehouse(dragInfo.inventorySlot!),\n                    assignEquipment(adventurer.id, slotType, item),\n                );            \n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    // There is already an item in this slot. Place in warehouse\n                    actions.push(addItemToWarehouse(existingEquipment, dragInfo.inventorySlot!));\n                }\n                break;\n            }\n\n            // Dragged from equipment slot (only applicable to weapons)\n            case DragSourceType.adventurerEquipment: {\n                actions.push(\n                    assignEquipment(adventurer.id, slotType, item)\n                );\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    actions.push(assignEquipment(adventurer.id, fromSlot, existingEquipment),)\n                } else {\n                    // Clear the slot where it came from\n                    actions.push(removeEquipment(adventurer.id, fromSlot));\n                }\n                break;\n            }\n        }\n        actions.forEach(a => dispatch(a));\n    };\n\n    // When an item gets dropped on the inventory\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        const actions: Action[] = [];        \n        switch (sourceType) {\n            // Drag from one inventory slot to another\n            case DragSourceType.adventurerInventory:\n                actions.push(moveItemInInventory(adventurer.id, fromSlot, toSlot))\n                break;\n\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                actions.push(\n                    removeItemFromWarehouse(fromSlot),\n                    addItemToInventory(adventurer.id, item, toSlot),\n                )\n                const otherItem = adventurer.inventory[toSlot];\n                if (otherItem) {\n                    actions.push(\n                        addItemToWarehouse(otherItem, fromSlot)\n                    )\n                }\n                break;\n            }\n\n            // Drag from equipment slot\n            case DragSourceType.adventurerEquipment: {\n                actions.push(\n                    addItemToInventory(adventurer.id, item, toSlot)\n                );\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    actions.push(assignEquipment(adventurer.id, fromSlot, existingEquipment));\n                } else {\n                    // Clear the slot where it came from\n                    actions.push(removeEquipment(adventurer.id, fromSlot));\n                }\n                break;\n            }\n        }\n        actions.forEach(a => dispatch(a));\n    };\n\n    return (\n        <div className=\"adventurer-panel\">\n            <div className=\"info\">\n                <div className=\"name\">\n                    <b>{adventurer.name}</b>\n                </div>\n                {/* <div className=\"renderAttributes\">\n                    {renderAttributes()}\n                </div> */}\n            </div>\n                <div className=\"equipment\">\n                    <AdventurerEquipment adventurer={adventurer} onDropItemEquipment={handleDropItemEquipment} />\n                </div>\n            <div className=\"right\">\n                <Inventory\n                    sourceType={DragSourceType.adventurerInventory}\n                    sourceId={adventurer.id}\n                    items={adventurer.inventory}\n                    className=\"inventory-small\"\n                    onDropItem={handleDropItemInventory}\n                /> \n            </div>\n        </div>\n    )\n}\n\nexport default AdventurerPanel;","import * as React from \"react\";\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport { AVAILABLE_SLOTS } from './QuestBoard';\nimport \"./css/adventurerButton.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    assignedAventurers: AdventurerStoreState[];  // assigned to a quest in the QuestBoard\n\n    onAddAdventurer: (adventurer: AdventurerStoreState, index: number) => void;\n    onRemoveAdventurer: (adventurer: AdventurerStoreState) => void;\n}\n\n// Toggles adventurer participation in a quest\nconst AdventurerButton = (props: Props) => {\n    const {\n        adventurer,\n        assignedAventurers,\n        onAddAdventurer,\n        onRemoveAdventurer\n    } = props;\n\n    const isAssigned = assignedAventurers.indexOf(adventurer) > -1;\n\n    const handleAddClick = () => {\n        const emptySlot = getEmptySlot(assignedAventurers);\n        onAddAdventurer(adventurer, emptySlot);\n    };\n\n    const handleRemoveClick = () => {\n        onRemoveAdventurer(adventurer);\n    }\n\n    if (isAssigned) {\n        return (\n            <button onClick={handleRemoveClick} className=\"adventurer-button\">\n                Leave\n            </button>\n        );\n    }\n    // Skip holes\n    if (assignedAventurers.filter(Boolean).length === AVAILABLE_SLOTS) {\n        return (\n            <button disabled  className=\"adventurer-button\">\n                Party full\n            </button>\n        )\n    }\n    return (\n        <button onClick={handleAddClick}  className=\"adventurer-button\">\n            Join\n        </button>\n    )\n}\n\nexport default AdventurerButton;\n\n// Finds the first array index with a falsey value\nconst getEmptySlot = (assignedAventurers: AdventurerStoreState[]) => {\n    for (let i = 0; i < AVAILABLE_SLOTS; i++) {\n        if (!assignedAventurers[i]) {\n            return i;\n        }\n    }\n    return 0;\n}","import React from 'react';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport DraggableAdventurerAvatar from 'components/ui/DraggableAdventurerAvatar';\nimport { SOURCE_ID } from './TavernStructureView';\nimport AdventurerPanel from 'components/world/QuestPanel/AdventurerPanel';\nimport AdventurerButton from './AdventurerButton';\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    onQuest: boolean;\n    assignedAventurers: AdventurerStoreState[];\n    expanded: boolean;\n    selectedQuestName?: string;\n\n    onClick: (adventurer: AdventurerStoreState) => void;\n    onAddAdventurer: (adventurer: AdventurerStoreState, index: number) => void;\n    onRemoveAdventurer: (adventurer: AdventurerStoreState) => void;\n}\n\n// Room block that has adventurer\nconst RoomWithAdventurer = (props: Props) => {\n    const {\n        adventurer,\n        onQuest,\n        assignedAventurers,\n        expanded,\n        selectedQuestName,\n        onClick,\n        onAddAdventurer,\n        onRemoveAdventurer\n    } = props;\n    /*\n    <button\n        className=\"boot\"\n        key={ `boot:${adventurer.id}` }\n    >\n        Boot\n    </button>,*/\n    const assigned = assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n\n    return (\n        <>\n            <div className={`room ${expanded ? \"expanded\" : \"\"}`}>\n                <DraggableAdventurerAvatar\n                    disabled={assigned || onQuest}\n                    adventurer={adventurer}\n                    className=\"adventurer-icon\"\n                    sourceId={SOURCE_ID}\n                    key={`avatar:${adventurer.id}`}\n                />\n                <span key={ adventurer.id } onClick={() => onClick(adventurer)}>\n                    {adventurer.name}\n                    {(onQuest) && \" (on a quest)\" }\n                </span>\n            </div>\n            { expanded && (\n                <div className=\"adventurer-details\">\n                    <AdventurerPanel adventurer={adventurer} />\n                    { (!onQuest && selectedQuestName) && (\n                        <AdventurerButton \n                            adventurer={adventurer}\n                            assignedAventurers={assignedAventurers}\n                            onAddAdventurer={onAddAdventurer}\n                            onRemoveAdventurer={onRemoveAdventurer}\n                        />\n                    )}\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default RoomWithAdventurer;\n","import React, {  } from 'react';\n\nexport interface Props {\n}\n\nconst RoomEmpty = () => {\n    return (\n        <div className=\"room\">\n            (empty room)\n        </div>\n    );\n}\n\nexport default RoomEmpty;\n","import React, { useState } from 'react';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport { QuestStoreState } from 'stores/quest';\nimport RoomWithAdventurer from './RoomWithAdventurer';\nimport RoomEmpty from './RoomEmpty';\n\nexport interface Props {\n    roomCount: number;\n    adventurers: AdventurerStoreState[];\n    assignedAventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n    selectedQuestName?: string;       // name of selected quest\n\n    onAddAdventurer: (adventurer: AdventurerStoreState, index: number) => void;\n    onRemoveAdventurer: (adventurer: AdventurerStoreState) => void;\n}\n\nconst RoomList = (props: Props) => {\n    const {\n        roomCount,\n        adventurers,\n        assignedAventurers,\n        selectedQuestName,\n        onAddAdventurer,\n        onRemoveAdventurer\n    } = props;\n    const [selectedAdventurer, setSelectedAdventurer] = useState<string>();\n\n    const getQuestByAdventurer = (adventurerId: string): QuestStoreState | undefined => {\n        return Object.values(props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    };\n\n    const handleAdventurerNameClick = (adventurer: AdventurerStoreState) => {\n        if (selectedAdventurer === adventurer.id) {\n            setSelectedAdventurer(undefined);\n        } else {\n            setSelectedAdventurer(adventurer.id);\n        }\n    };\n\n    const roomContent: JSX.Element[] = [];\n    for (let i = 0; i < roomCount; i++) {\n        const adventurer = adventurers.find((a) => a.room === i);\n        if (!adventurer) {\n            roomContent.push((\n                <RoomEmpty key={`room${i}`} />\n            ));\n            continue;\n        }\n        const onQuest = !!getQuestByAdventurer(adventurer.id);\n\n        roomContent.push((\n            <RoomWithAdventurer \n                key={adventurer.id}\n                adventurer={adventurer}\n                assignedAventurers={assignedAventurers}\n                selectedQuestName={selectedQuestName}\n                expanded={selectedAdventurer === adventurer.id}\n                onQuest={onQuest}\n\n                onClick={handleAdventurerNameClick}\n                onAddAdventurer={onAddAdventurer}\n                onRemoveAdventurer={onRemoveAdventurer}\n            />\n        ));\n    }   \n\n    return (\n        <div className=\"rooms\">\n            <h2>Rooms</h2>\n            { roomContent }\n        </div>\n    );\n}\n\nexport default RoomList;","import * as React from \"react\";\nimport { AdventurerAvatarDragInfo} from \"components/ui/DraggableAdventurerAvatar\";\nimport QuestBoard from \"containers/structures/tavern/QuestBoard\";\nimport { getDefinition, Structure} from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition} from \"definitions/structures/types\";\nimport { AdventurerStoreState} from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState} from \"stores/quest\";\nimport { TextManager} from \"global/TextManager\";\nimport \"./css/tavernstructureview.css\";\nimport { ToastManager} from 'global/ToastManager';\nimport { Type} from 'components/ui/toasts/Toast';\nimport { getQuestLink} from 'utils/routing';\nimport RoomList from './RoomList';\nimport { useState} from 'react';\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\n\nexport const SOURCE_ID = \"tavern\";\n\nconst TavernStructureView = (props: AllProps) => {\n    const {adventurers, quests} = props;\n    const [assignedAventurers, setAassignedAdventurers] = useState<AdventurerStoreState[]>([]);\n    const [selectedQuest, setSelectedQuest] = useState<string>();\n\n    const structureDefinition = getDefinition<TavernStructureDefinition>(Structure.tavern);\n    const level: number = props.level || 0;\n    const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(Structure.tavern);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1);}\n        };\n        \n        return (\n            <div>\n                <label>level:</label>{ `${(level + 1)} / ${structureDefinition.levels.length}` }\n                <button\n                    style = {{ float: \"right\"}}\n                    onClick={handleClick}\n                    disabled= { !canUpgrade}\n                >\n                    { upgradeText}\n                </button>\n            </div>\n        );\n    };\n    \n\n    const getAvailableQuests = props.quests.filter((q) => q.status === QuestStatus.available );\n\n    const handleQuestClick = (name: string): void => {\n        if (selectedQuest === name) {\n            setSelectedQuest(undefined);\n        } else {\n            setSelectedQuest(name);\n        }\n\n        // Unassign all adventurers\n        setAassignedAdventurers([]);\n    };\n\n    const handleAdventurerDropped = (item: AdventurerAvatarDragInfo, index: number) => {\n        if (item.sourceId === SOURCE_ID) {\n            handleAddAdventurer(item.adventurer, index)\n        }\n    }\n\n    const handleAddAdventurer = (adventurer: AdventurerStoreState, index: number): void => {\n        const copy = [ ...assignedAventurers];\n        copy[index] = adventurer;\n        setAassignedAdventurers(copy);\n    };\n\n    const handleRemoveAdventurer = (adventurer: AdventurerStoreState): void => {\n        const index = assignedAventurers.indexOf(adventurer);\n        const copy = [ ...assignedAventurers];\n        delete copy[index];\n        setAassignedAdventurers(copy);\n    };\n\n    const handleLaunchQuest = (): void => {\n        const questTitle = TextManager.getQuestTitle(selectedQuest!);\n        const leader = assignedAventurers[0];\n        ToastManager.addToast(questTitle, Type.questLaunched, leader?.avatarImg, getQuestLink(selectedQuest!));\n        props.onLaunchQuest(selectedQuest!, assignedAventurers);\n    };\n\n    return (\n        <details open className=\"tavernstructureview\">\n            <summary>{displayName}</summary>\n            {createUpgradeRow()}\n            <section>\n                <RoomList \n                    roomCount={levelDefinition.rooms}\n                    adventurers={adventurers}\n                    assignedAventurers={assignedAventurers}\n                    quests={quests}\n                    selectedQuestName={selectedQuest}\n                    onAddAdventurer={handleAddAdventurer}\n                    onRemoveAdventurer={handleRemoveAdventurer}\n                />\n                <QuestBoard\n                    availableQuests={getAvailableQuests}\n                    selectedQuestName={selectedQuest}\n                    assignedAventurers={assignedAventurers}\n                    onQuestClick={(name: string) => handleQuestClick(name)}\n                    onAdventurerDropped={handleAdventurerDropped}\n                    onRemoveAdventurer={handleRemoveAdventurer}\n                    onLaunchQuest={() => handleLaunchQuest()}\n                />\n            </section>\n        </details>\n    );\n};\n\nexport default TavernStructureView;\n","import { subtractGold } from \"actions/gold\";\nimport { addLogText } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogText(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.tavern,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(TavernStructureView);\n","import { AppContext } from \"components/App\";\nimport { MediaItem } from \"components/preloading/Preloader\";\nimport * as React from \"react\";\nimport { Component, ComponentType } from 'react';\n\n// Sharing context within the entire App\nexport interface AppContextProps {  \n    onOpenWindow: (window: React.ReactElement) => void;\n    onCloseWindow: () => void;\n    media: MediaItem[] | null;\n}\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n};\n","import \"components/ui/css/common/icon.css\";\r\nimport \"components/ui/resources/css/resourcesbox.css\";\r\nimport { Resource } from \"definitions/resources\";\r\nimport resourceDescriptions from \"definitions/resources\";\r\nimport * as React from \"react\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport { StructuresStoreState } from 'stores/structures';\r\nimport { Structure } from 'definitions/structures';\r\nimport { Link } from 'react-router-dom';\r\nimport { getStructureLink } from 'utils/routing';\r\nimport { withAppContext, AppContextProps } from 'hoc/withAppContext';\r\n\r\nexport interface Props {\r\n    className?: string;\r\n    resources: ResourceStoreState;\r\n    structures: StructuresStoreState;\r\n    maxResources: ResourceStoreState;\r\n    deltaResources: ResourceStoreState;\r\n}\r\n\r\nexport interface StateProps {\r\n    sufficientResources?: Record<Resource, boolean>;\r\n}\r\n\r\ntype AllProps = Props & StateProps;\r\n\r\n/**\r\n * The ResourcesBox is used in the Warehouse to show a list of resources\r\n */\r\nconst ResourcesBox = (props: AllProps & AppContextProps) => {\r\n    const {\r\n        sufficientResources,\r\n        resources,\r\n        deltaResources,\r\n    } = props;\r\n\r\n    const className = (props.className || \"\") + \" resourcesbox\";\r\n    const listItems = Object.keys(resources).map((resource: string) => {\r\n        let listItemClass = \"resource\";\r\n        if (sufficientResources && !sufficientResources[resource]) {\r\n             listItemClass += \" insufficient\";\r\n        }\r\n        const resourceDescription = resourceDescriptions[resource];\r\n        const amount = props.resources[resource]!;\r\n        if (!resourceDescription) {\r\n            throw new Error(`No resource description found for ${resource}`);\r\n        }\r\n\r\n        let delta;\r\n        if (deltaResources[resource]) {\r\n            delta = <span className = \"animate-up\">\r\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\r\n            </span>;\r\n        }\r\n\r\n        const structure = getStructure(resource);\r\n\r\n        const handleStructureClick = () => {\r\n            props.onCloseWindow();\r\n        }\r\n\r\n        return <li className = { listItemClass } key = { resource }>\r\n            <div className = \"icon common-icon-smallest\" style = {{\r\n                backgroundImage:  `url(${process.env.PUBLIC_URL}${resourceDescription.iconImg})`,\r\n            }}></div>\r\n            <div className = \"name\">\r\n                { TextManager.getResourceName(resource as Resource) }\r\n            </div>\r\n            <div className = \"amount\" >\r\n                { amount.toFixed(1) }\r\n            </div>\r\n            <div className = \"max\" >\r\n                { ` / ${props.maxResources[resource]}` }\r\n            </div>\r\n            <div className = \"delta\">\r\n                { delta }\r\n            </div>\r\n            <div className = \"structure\"> \r\n                source:\r\n                <Link to={getStructureLink(structure)} onClick={handleStructureClick}>\r\n                    { TextManager.getStructureName(structure) }\r\n                </Link>\r\n            </div>\r\n        </li>;\r\n    });\r\n\r\n    return (\r\n        <ul className = { className } >\r\n            { listItems }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default withAppContext(ResourcesBox);\r\n\r\n\r\nconst getStructure = (resource: string) : Structure => {\r\n    switch (resource) {\r\n        case Resource.fabric:\r\n            return Structure.weaver;\r\n        case Resource.food:\r\n            return Structure.garden;\r\n        case Resource.iron:\r\n            return Structure.mine;\r\n        case Resource.leather:\r\n            return Structure.tannery;\r\n        case Resource.stone:\r\n            return Structure.quarry;\r\n        case Resource.wood:\r\n            return Structure.lumberMill;\r\n    }\r\n    throw new Error(`Unknown structure for resource ${resource}`);\r\n}\r\n","import * as React from \"react\";\nimport \"./css/tabstrip.css\";\n\nexport interface Props {\n    id: string;\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    active?: boolean;\n    children?: any;\n}\n\ntype AllProps = Props;\n\nconst Tab = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = ((props.active) ? \"active\" : \"\") + (props.className || \"\");\n    return <li className = { `tabstrip-tab ${className}` } onClick = { handleClick } >\n        { props.children }\n    </li>;\n};\n\nexport default Tab;\n","import { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { TextManager } from \"global/TextManager\";\nimport \"./css/adventurerinfo.css\";\nimport DraggableItemIcon, { InventoryItemDragInfo } from \"./DraggableItemIcon\";\nimport EquipmentSlot, { EquipmentSlotType } from \"./EquipmentSlot\";\nimport Inventory from \"./inventory/Inventory\";\nimport { TooltipManager } from 'global/TooltipManager';\n\nexport interface Props {\n    adventurerId: string;\n}\n\nexport interface DispatchProps {\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => void;\n    onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => void;\n    onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => void;\n    onMoveItemFromWarehouseToInventory: (adventurerId: string, fromSlot: number, toSlot: number, item: Item, otherItem: Item|null) => void;\n    onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => void;\n    onAddItemToWarehouse: (item: Item, toSlot: number) => void;\n    onAssignEquipmentFromWarehouse: (adventurerId: string, fromSlot: number, item: Item, equipmentSlot: EquipmentSlotType) => void;\n}\n\nexport interface StateProps {\n    adventurer: AdventurerStoreState;\n    warehouse: Array<Item|null>;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\nconst AdventurerInfo = (props: AllProps) => {\n\n    const adventurer = props.adventurer;\n    const attributes = Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key={`${adventurer.id}-${stat}`} > <b>{stat}</b>: {value.toFixed(1)} </div>;\n    });\n    // const equipmentList = Object.keys(getEquipment(.map((equipment) =) {\n    //     return <div key = { `${adventurer.id}-${equipment}` } ><b>{ equipment }</b>: { getEquipment(equipment] }  </di)>;\n    // });\n\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        // When an item gets dropped on equipment slot\n        const item = dragInfo.item;\n        switch (dragInfo.sourceType) {\n            case DragSourceType.adventurerInventory: {\n                // Dragged from inventory\n                props.onRemoveItemFromInventory(adventurer.id, dragInfo.inventorySlot!);\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                props.onAssignEquipmentFromWarehouse(adventurer.id, dragInfo.inventorySlot!, item, slotType);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToWarehouse(existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.adventurerEquipment: {\n                // Dragged from equipment slot (only applicable to weapons)\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n            }\n        }\n    };\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n            const handleClick = (event: React.MouseEvent) => {\n                const origin = (event.currentTarget as HTMLElement);\n                const originRect = origin.getBoundingClientRect();\n                TooltipManager.showContextTooltip(ContextType.item, getDefinition(item), originRect);\n                event.stopPropagation();\n            };\n\n            contents = (\n                <DraggableItemIcon\n                    index={slotType}\n                    sourceId={adventurer.id}\n                    sourceType={DragSourceType.adventurerEquipment}\n                    item={item}\n                    onClick={handleClick}\n                    ref={itemRef}\n                    size={IconSize.medium}\n                />\n            );\n        }\n\n        return (\n            <>\n                <EquipmentSlot\n                    onDrop={(dragInfo: InventoryItemDragInfo) => handleDropItemEquipment(dragInfo, slotType)}\n                    type={slotType}\n                >\n                    {contents}\n                </EquipmentSlot>\n                <span className=\"info\">{TextManager.get(`ui-equipmentslot-${EquipmentSlotType[slotType]}`)}</span>\n            </>\n        );\n    };\n\n    const equipmentList = (\n        <ul>\n            <li>{getEquipmentSlot(EquipmentSlotType.head)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.shoulders)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.chest)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.hands)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.legs)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.feet)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.mainHand)}</li>\n            <li>{getEquipmentSlot(EquipmentSlotType.offHand)}</li>\n        </ul>\n    );\n\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        switch (sourceType) {\n            case DragSourceType.adventurerInventory:\n                // Drag from one inventory slot to another\n                if (props.onMoveItemInInventory) {\n                    props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\n                }\n                break;\n\n            case DragSourceType.warehouse: {\n                // Dragged from warehouse\n                const otherItem = adventurer.inventory[toSlot];\n                props.onMoveItemFromWarehouseToInventory(adventurer.id, fromSlot, toSlot, item, otherItem);\n                break;\n            }\n\n            case DragSourceType.adventurerEquipment:\n                // Drag from equipment slot\n                if (props.onAddItemToInventory && props.onRemoveEquipment) {\n                    props.onAddItemToInventory(adventurer.id, item, toSlot);\n                }\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n        }\n    };\n    return (\n        <div className=\"adventurer-info\">\n            <div className=\"left\">\n                <div className=\"name\">\n                    <b>{adventurer.name}</b>\n                </div>\n                <div className=\"attributes\">\n                    {attributes}\n                </div>\n                <div className=\"equipment\">\n                    {equipmentList}\n                </div>\n            </div>\n            <div className=\"right\">\n                <Inventory\n                    sourceType={DragSourceType.adventurerInventory}\n                    sourceId={adventurer.id}\n                    items={adventurer.inventory}\n                    onDropItem={handleDropItemInventory}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AdventurerInfo;\n","import { addItemToInventory, assignEquipment, moveItemInInventory, removeEquipment, removeItemFromInventory } from \"actions/adventurers\";\nimport { addItemToWarehouse, removeItemFromWarehouse } from \"actions/items\";\nimport AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n        warehouse: store.stockpile,\n    };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        // Adds item to inventory of adventurer\n        onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => {\n            const action = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action);\n        },\n        // Adds item to warehouse\n        onAddItemToWarehouse: (item: Item, toSlot: number) => {\n            const add = addItemToWarehouse(item, toSlot);\n            dispatch(add);\n        },\n        // Equipment gets assigned to a slot\n        onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => {\n            const action = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(action);\n        },\n        // Assigns an equipment from the warehouse directly to an adventurer equipment slot\n        onAssignEquipmentFromWarehouse: (adventurerId: string, fromSlot: number, item: Item, equipmentSlot: EquipmentSlotType) => {\n            const remove = removeItemFromWarehouse(fromSlot);\n            dispatch(remove);\n\n            const assign = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(assign);\n        },\n        // Item gets removed from warehouse\n        onMoveItemFromWarehouseToInventory: (adventurerId: string, fromSlot: number, toSlot: number, item: Item, otherItem: Item|null) => {\n            const remove = removeItemFromWarehouse(fromSlot);\n            dispatch(remove);\n\n            const add = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(add);\n\n            if (otherItem) {\n                const switchItem = addItemToWarehouse(otherItem, fromSlot);\n                dispatch(switchItem);\n            }\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => {\n            const action = removeEquipment(adventurerId, equipmentSlot);\n            dispatch(action);\n        },\n        // Removes an item from an adventurers' inventory\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => {\n            const action = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurerInfo);\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst usePrevious = <T extends {}>(value: T) => {\r\n    const ref = useRef<T>();\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    });\r\n    return ref.current;\r\n};\r\nexport default usePrevious;\r\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n\nexport const empty: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 0,\n    leather: 0,\n    stone: 0,\n    wood: 0,\n};\n","import React from \"react\";\nimport \"./css/tabstrip.css\";\nimport { Props as TabProps } from \"./Tab\";\n\nexport interface Props {\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    onTabSelected?: (tabId: string) => void;\n    children?: any;\n    activeTab?: string;\n    disabled?: boolean;\n}\n\ntype AllProps = Props;\nconst Tabstrip = (props: AllProps) => {\n    let {activeTab = null} = props;\n    if (!activeTab && props.children && props.children.length) {\n        activeTab = props.children[0].props.id;\n    }\n    const className = `${props.className} ${(props.disabled ? \"disabled\" : \"\")}`;\n    const children = React.Children.map(props.children, (child: React.ReactElement<TabProps>) => {\n        const clone: React.ReactElement<TabProps> = React.cloneElement(child, {\n            active: child.props.id === activeTab,\n            onClick: () => { handleTabClick(child.props.id); }\n        });\n        return clone;\n    });\n\n    const handleTabClick = (tabId: string) => {\n        if (props.onTabSelected && props.disabled !== true) {\n            props.onTabSelected(tabId);\n        }\n    };\n\n    const handleClick = (e: React.MouseEvent<Element>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n\n    return (\n        <ul className={`tabstrip ${className}`} onClick={handleClick}>\n            {children}\n        </ul>\n    );\n};\n\nexport default Tabstrip;\n","import React from \"react\";\nimport Tabstrip from 'components/ui/tabs/Tabstrip';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport Tab from 'components/ui/tabs/Tab';\nimport AdventurerAvatar from 'components/ui/AdventurerAvatar';\n\ninterface Props {\n    adventurers: AdventurerStoreState[];\n    selectedAdventurerId?: string;\n    onAdventurerTabSelected: (adventurerId: string) => void;\n    disabled?: boolean;\n}\n\n// Shows adventurer portraits in a tabstrip\nconst AdventurerTabstrip = (props: Props) => {\n    const {adventurers, onAdventurerTabSelected} = props;\n\n    const handleAdventurerTabSelected = (adventurerId: string) => {\n        const adventurer = props.adventurers.find(a => a.id === adventurerId)!;\n        onAdventurerTabSelected(adventurer.id);\n    }\n\n    const renderAdventurerTab = (adventurer: AdventurerStoreState) => (\n        <Tab id={adventurer.id} key={adventurer.id}>\n            <AdventurerAvatar adventurer={adventurer} className=\"common-icon-small\"/>\n        </Tab>\n    );\n    return (\n        <Tabstrip \n            className=\"adventurers-tabstrip\" \n            onTabSelected={handleAdventurerTabSelected}\n            activeTab={props.selectedAdventurerId}\n            disabled={props.disabled}\n        >\n            {adventurers.map((a) => renderAdventurerTab(a))}\n        </Tabstrip>\n    )\n}\n\nexport default AdventurerTabstrip;","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\r\nimport Inventory from \"components/ui/inventory/Inventory\";\r\nimport ResourcesBox from \"components/ui/resources/ResourcesBox\";\r\nimport Tab from \"components/ui/tabs/Tab\";\r\nimport Tabstrip from \"components/ui/tabs/Tabstrip\";\r\nimport { DragSourceType } from \"constants/dragging\";\r\nimport AdventurerInfo from \"containers/ui/AdventurerInfo\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { getDefinition, Structure  } from \"definitions/structures\";\r\nimport { StructureDefinition } from \"definitions/structures/types\";\r\nimport usePrevious from \"hooks/usePrevious\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport { empty, ResourceStoreState } from \"stores/resources\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/warehousestructureview.css\";\r\nimport AdventurerTabstrip from 'components/world/QuestPanel/AdventurerTabstrip';\r\n\r\nexport interface DispatchProps {\r\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\r\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number, otherItem: Item|null) => void;\r\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\r\n    onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\r\n    onUpgrade?: (cost: number, level: number) => void;\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface Props  {\r\n}\r\n\r\nexport interface StateProps  {\r\n    level: number;\r\n    workers: number;\r\n    workersFree: number;\r\n    gold: number;\r\n    items: Array<Item|null>;\r\n    adventurersInTown: AdventurerStoreState[];\r\n    structures: StructuresStoreState;\r\n    resources: ResourceStoreState;\r\n    maxResources: ResourceStoreState;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\nconst WAREHOUSE = DragSourceType.warehouse;\r\n\r\n// todo 20191202: Resource update should happen at a set interval\r\nconst WarehouseStructureView = (props: AllProps) => {\r\n\r\n    const [selectedAdventurer, setSelectedAdventurer] = useState<string>();\r\n\r\n    const [resourcesDelta, setResourcesDelta] = useState<ResourceStoreState>(empty);    // updating this will trigger animation\r\n    const previousResources = usePrevious(props.resources);\r\n    const resourcesRef = useRef<HTMLFieldSetElement>(null);\r\n\r\n    useEffect(() => {\r\n        // Calculate delta\r\n        const delta = Object.keys(props.resources).reduce((acc, value) => {\r\n            if (previousResources && previousResources[value]) {\r\n                acc[value] = props.resources[value] - previousResources[value];\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n        setResourcesDelta(delta);\r\n    }, [props.resources, previousResources]);\r\n\r\n    useEffect(() => {\r\n        if (!resourcesRef.current) {\r\n            return;\r\n        }\r\n        const ref = resourcesRef.current as unknown as HTMLFieldSetElement;\r\n        ref.classList.remove(\"animate\");\r\n        setTimeout(() => {\r\n            if (resourcesRef) {\r\n                ref.classList.add(\"animate\");\r\n            }\r\n        }, 200);\r\n    }, [resourcesDelta]);\r\n\r\n    const structureDefinition = getDefinition<StructureDefinition>(Structure.warehouse);\r\n    if (!structureDefinition) {\r\n        throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\r\n    }\r\n    const level: number = props.level;\r\n    const displayName = TextManager.getStructureName(Structure.warehouse);\r\n\r\n    const createUpgradeRow = () => {\r\n        const gold = props.gold;\r\n        const nextLevel = structureDefinition.levels[level + 1];\r\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\r\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\r\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\r\n\r\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\r\n        };\r\n        return (\r\n            <div>\r\n                <label>level:</label>{(level + 1) + \" / \" + structureDefinition.levels.length}\r\n                <button\r\n                    style={{ float: \"right\" }}\r\n                    onClick={handleClick}\r\n                    disabled={!canUpgrade}\r\n                >\r\n                    {upgradeText}\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleDropItemWarehouse = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\r\n            switch (sourceType) {\r\n                case WAREHOUSE:\r\n                    if (props.onMoveItemInWarehouse) {\r\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\r\n                    }\r\n                    break;\r\n                case DragSourceType.adventurerInventory:\r\n                    if (props.onMoveItemFromAdventurer) {\r\n                        const otherItem = props.items[toSlot];\r\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot, otherItem);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n    const handleAdventurerTabSelected = (tabId: string) => {\r\n        setSelectedAdventurer(tabId);\r\n    };\r\n\r\n    const renderAdventurerContent = () => {\r\n        if (selectedAdventurer) {\r\n            return (\r\n                <AdventurerInfo\r\n                    adventurerId={selectedAdventurer}\r\n                />\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const renderAdventurerTab = (adventurer: AdventurerStoreState) => (\r\n        <Tab id={adventurer.id} key={adventurer.id}>\r\n            <AdventurerAvatar adventurer={adventurer} className=\"common-icon-small\"/>\r\n        </Tab>\r\n    );\r\n\r\n    return (\r\n        <details open={true} className=\"warehouse-structureview\">\r\n            <summary>{displayName}</summary>\r\n            {createUpgradeRow()}\r\n            <fieldset className=\"resources\" ref={resourcesRef}>\r\n                <legend>Resources</legend>\r\n                <ResourcesBox\r\n                    resources={props.resources}\r\n                    structures={props.structures}\r\n                    maxResources={props.maxResources}\r\n                    deltaResources={resourcesDelta}\r\n                />\r\n            </fieldset>\r\n            <h3>Stockpile</h3>\r\n            <Inventory\r\n                sourceType={WAREHOUSE}\r\n                items={props.items}\r\n                onDropItem={handleDropItemWarehouse}\r\n            />\r\n            <h3>Adventurers</h3>\r\n            <div>\r\n                <AdventurerTabstrip\r\n                    adventurers={props.adventurersInTown} \r\n                    selectedAdventurerId={selectedAdventurer}\r\n                    onAdventurerTabSelected={handleAdventurerTabSelected} \r\n                />\r\n                <div className=\"adventurer-inventory\">\r\n                    {renderAdventurerContent()}\r\n                </div>\r\n            </div>\r\n        </details>\r\n    );\r\n\r\n};\r\n\r\nexport default WarehouseStructureView;\r\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { adventurersOnQuest } from 'storeHelpers';\n\n// Store accessors\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\n\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(adventurers, val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\nconst getAdventurersInTown = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n    // Get an array of all adventurer ids on any active quest\n    const adventurersOnQuest = quests.reduce<string[]>((acc, val: QuestStoreState) => {\n        if (val.status === QuestStatus.active) {\n            acc.push(...val.party);\n        }\n        return acc;\n    }, []);\n\n    return adventurers.filter((a) => adventurersOnQuest.indexOf(a.id) === -1);\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n\n/** Returns a selector keyed by active quests whose value is a list of AdventurerStoreState */\nexport const createSelectAdventurersOnQuest = (questName: string) => {\n    const getAdventurersOnQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n        const quest = quests.find(q => q.name === questName)!;\n        return adventurersOnQuest(adventurers, quest);\n    };\n\n    return createSelector([\n        getAdventurers,\n        getQuests],\n        getAdventurersOnQuest,\n    );\n}\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersInTown = createSelector([\n    getAdventurers,\n    getQuests],\n    getAdventurersInTown,\n);\n","import { addItemToInventory, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\r\nimport { subtractGold } from \"actions/gold\";\r\nimport { addItemToWarehouse, moveItemInWarehouse, removeItemFromWarehouse } from \"actions/items\";\r\nimport { addLogText } from \"actions/log\";\r\nimport { upgradeStructure } from \"actions/structures\";\r\nimport WarehouseStructureView,\r\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { getDefinition, Structure } from \"definitions/structures\";\r\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction, Dispatch } from \"redux\";\r\nimport { selectAdventurersInTown } from \"selectors/adventurers\";\r\nimport { selectFreeWorkers } from \"selectors/workers\";\r\nimport { StoreState } from \"stores\";\r\nimport { LogChannel } from \"stores/logEntry\";\r\nimport { StructureStoreState } from \"stores/structure\";\r\n\r\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\r\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\r\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\r\n    const level: number = structureStore.level;\r\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\r\n    const adventurersInTown = selectAdventurersInTown(store);   // todo: refreshes too much. fix\r\n\r\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\r\n    return {\r\n        adventurersInTown,\r\n        gold: store.gold,\r\n        items: store.stockpile,\r\n        level,\r\n        maxResources: levelDefinition.maxResources,\r\n        resources: store.resources,\r\n        structures: store.structures,\r\n        workers: structureStore.workers,\r\n        workersFree: selectFreeWorkers(store),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\r\n    return {\r\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number, otherItem: Item|null) {\r\n            const remove = removeItemFromInventory(adventurerId, fromSlot);\r\n            dispatch(remove);\r\n\r\n            const add = addItemToWarehouse(item, toSlot);\r\n            dispatch(add);\r\n\r\n            if (otherItem) {\r\n                const switchItem = addItemToInventory(adventurerId, otherItem, fromSlot);\r\n                dispatch(switchItem);\r\n            }\r\n        },\r\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\r\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\r\n        },\r\n        // Moves item within an adventurers' inventory\r\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\r\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\r\n            dispatch(action);\r\n        },\r\n        // Moves item from warehouse to an adventurer\r\n        onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\r\n            const remove = removeItemFromWarehouse(fromSlot);\r\n            dispatch(remove);\r\n\r\n            const add = addItemToInventory(adventurerId, item, toSlot);\r\n            dispatch(add);\r\n        },\r\n        onUpgrade: (cost: number, level: number) => {\r\n            dispatch(subtractGold(cost));\r\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\r\n\r\n            level++;\r\n            dispatch(addLogText(\"log-town-upgrade-structure-complete\", {\r\n                level,\r\n                structure: Structure.warehouse,\r\n            }, LogChannel.town));\r\n        },\r\n    };\r\n}\r\n\r\n// export default compose(\r\n//     connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\r\n// //    withAppContext,\r\n// )(WarehouseStructureView) as React.ComponentType<Props>;\r\n\r\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(WarehouseStructureView);\r\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n    error,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\nconst DEFAULT_MUSIC_VOLUME = 0.8;\nconst STORAGE_KEY_MUSIC_VOLUME = \"musicVolume\";\n\nexport class SoundManager {\n    private static _musicVolume: number;\n    private static _soundVolume: number;\n\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            // todo: assert [10/07/2019 ASSERTS]\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        if (!media) { return; }\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (!media) { return; }\n\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(SoundManager.musicVolume, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, SoundManager.musicVolume, 500);\n\n        currentMusicTrack = track;\n    }\n\n    public static soundVolume(volume: number) {\n        \n    }\n\n    static set musicVolume(volume: number) {\n        if (currentMusicTrack) {\n            musicTracks[currentMusicTrack].volume(volume);\n        }\n        this._musicVolume = volume;\n        try {\n            localStorage.setItem(STORAGE_KEY_MUSIC_VOLUME, `${volume}`);\n        }\n        catch (e) {}\n    }\n\n    static get musicVolume() : number {\n        if (this._musicVolume !== undefined) {\n            return this._musicVolume;\n        }\n        const fromStorage = localStorage.getItem(STORAGE_KEY_MUSIC_VOLUME);\n        if (fromStorage == null) { \n            this._musicVolume = DEFAULT_MUSIC_VOLUME;\n        } else {\n            this._musicVolume = parseFloat(fromStorage);\n        }\n        return this._musicVolume;\n    }\n}\n","import { getDefinition, Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport { StructureStoreState } from 'stores/structure';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from 'stores';\nimport { selectFreeWorkers } from 'selectors/workers';\nimport { subtractGold } from 'actions/gold';\nimport { upgradeStructure, decreaseWorkers, increaseWorkers } from 'actions/structures';\nimport { addLogText } from 'actions/log';\nimport { LogChannel } from 'stores/logEntry';\nimport StructureViewHeader from './StructureViewHeader';\n\n\nexport interface Props  {\n    type: Structure;\n}\n\nconst ResourceStructureView = (props: Props) => {\n\n    // Fetch needed values from store\n    const gold = useSelector<StoreState, number>((store) => store.gold);\n    const level = useSelector<StoreState, number>((store) => { \n        const structureStore: StructureStoreState = store.structures[props.type];\n        if (!structureStore) { throw new Error(`No structure '${props.type}' found in the store!`); }\n        return structureStore.level;\n    });\n    const workers = useSelector<StoreState, number>((store) => { \n        const structureStore: StructureStoreState = store.structures[props.type];\n        if (!structureStore) { throw new Error(`No structure '${props.type}' found in the store!`); }\n        return structureStore.workers;\n    });\n    const workersFree = useSelector<StoreState, number>((store) => selectFreeWorkers(store));\n\n    const structureDefinition = getDefinition<ResourceStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n\n    // Reducer dispatch\n    const dispatch = useDispatch();\n    const handleUpgrade = (cost: number, level: number) => {\n        dispatch(subtractGold(cost));\n        dispatch(upgradeStructure(props.type)); // Todo: [07/07/2019] time??\n\n        level++;\n        dispatch(addLogText(\"log-town-upgrade-structure-complete\", {\n            level,\n            structure: props.type,\n        }, LogChannel.town));\n    }\n    \n    const handleWorkersDown = () => {\n        dispatch(decreaseWorkers(props.type));\n    }\n\n    const handleWorkersUp = () => {\n        dispatch(increaseWorkers(props.type));\n    };\n    \n\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n\n    const createWorkersRow = () => {\n        const upDisabled = workers === levelDefinition.workerCapacity || (workersFree || 0) < 1;\n        const downDisabled = workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value={workers}\n            max={levelDefinition.workerCapacity}\n            upDisabled={upDisabled}\n            downDisabled={downDisabled}\n            onDown={handleWorkersDown}\n            onUp={handleWorkersUp}\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            handleUpgrade(nextLevelCost, level + 1);\n        };\n\n        return <div>\n            <label>level:</label>{(level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick={handleClick }\n                disabled= {!canUpgrade } >\n                    {upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${workers} = ${generates[value] * (workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            {\"Generates (every minute): \" }\n            <br/>\n            {generatesText }\n        </div>;\n    };\n\n    return (\n        <>\n            <StructureViewHeader structure={props.type} />\n            <details open={true } className = \"structureview\">\n                <section>\n                    {createWorkersRow() }\n                    {createUpgradeRow() }\n                    {createGeneratesRow() }\n                </section>\n            </details>\n        </>\n    );\n};\n\nexport default ResourceStructureView;\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\nimport ResourceStructureView from './structures/ResourceStructureView';\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\n\ntype AllProps = Props & StateProps;\n\n\nconst StructureDetails = (props: AllProps) => {\n\n    const renderContent = () => {\n        const structureState: StructureStoreState = props.structures[props.structure];\n        if (structureState.state === StructureState.Building) {\n            const progress = props.buildTask ? props.buildTask.progress : 1 ;\n            return (\n                <div>\n                    <Progressbar label=\"Building...\" progress={progress} />\n                </div>\n            );\n        } else {\n\n            const structureDefinition: StructureDefinition = getDefinition(props.structure);\n            switch (structureDefinition.type) {\n                case StructureType.production: {\n                    return <ProductionStructureView type = { props.structure }/>;\n                }\n                case StructureType.resource: {\n                    return <ResourceStructureView type = { props.structure }/>;\n                }\n                case StructureType.warehouse: {\n                    return <WarehouseStructureView />;\n                }\n                case StructureType.tavern: {\n                    return <TavernStructureView />;\n                }\n                default: {\n                    return <div> { props.structure } </div>;\n                }\n            }\n        }\n    }\n\n    return (\n        <div className=\"structure-details\">\n            { renderContent() }\n        </div>\n    );\n};\n\nexport default StructureDetails;\n","import * as React from \"react\";\nimport \"./css/squareiconbutton.css\";\n\nexport interface Props {\n    text: string; /* temp */\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n}\n\ntype AllProps = Props;\n\nconst SquareIconButton = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = props.className || \"\";\n    return <div className = { `ui-button widgets-squareiconbutton ${className}` } onClick = { handleClick }>\n        { props.text }\n    </div>;\n};\n\nexport default SquareIconButton;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport SquareIconButton from \"components/ui/buttons/SquareIconButton\";\nimport * as React from \"react\";\nimport { SoundManager, Sound } from 'global/SoundManager';\n\n// todo: refactor using WindowManager [30/03/2020]\nexport interface Props {\n    title: string;\n    backEnabled?: boolean;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n}\n\ntype AllProps = Props;\n\n/**\n *\n */\nconst Window: React.FunctionComponent<AllProps> = (props) => {\n\n    const handleClose = (e: React.MouseEvent) => {\n        if (props.onClose) {\n            props.onClose();\n\n            SoundManager.playSound(Sound.buttonClick);\n        }\n        \n    };\n    const handleBack = (e: React.MouseEvent) => {\n        if (props.onBack) {\n            props.onBack();\n\n            SoundManager.playSound(Sound.buttonClick);\n        }\n    };\n\n    let BackButton = null;\n    if (props.backEnabled !== false) {\n         BackButton = <SquareIconButton className = \"back-button\" onClick = { handleBack } text = \"<\"/>;\n\n    }\n\n    let CloseButton = null;\n    if (props.closeEnabled !== false) {\n        CloseButton = <SquareIconButton className = \"close-button\" onClick = { handleClose } text = \"x\"/>;\n    }\n\n    return <div className = \"window\">\n        <div className = \"header\">\n            { BackButton }\n            <h3>{ props.title }</h3>\n            { CloseButton }\n        </div>\n        { props.children }\n    </div>;\n};\n\nexport default Window;\n","import \"components/ui/window/css/window.css\";\nimport Window, { Props } from \"components/ui/window/Window\";\nimport * as React from \"react\";\n\nexport const withWindow = <TWrappedComponentProps extends Props>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    return class WithWindow extends React.Component<TWrappedComponentProps> {\n\n        public render() {\n            return <Window { ...this.props } >\n                <WrappedComponent { ...this.props } />\n            </Window>;\n        }\n    };\n};\n","import StructureDetailsView, { Props, StateProps } from \"components/StructureDetailsView\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\n\nexport default compose(\n    connect<StateProps, null, Props, StoreState>(mapStateToProps),\n    withWindow,\n)(StructureDetailsView) as React.ComponentType<Props & WindowProps>;\n","import { Howl } from \"howler\";\r\nimport * as React from \"react\";\r\nimport Indicator from \"./Indicator\";\r\nimport { useState, useEffect } from 'react';\r\n\r\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\r\nexport interface Props {\r\n    manifest: string[];\r\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\r\n    children: any;\r\n}\r\n\r\nexport enum MediaType {\r\n    image,\r\n    sound,\r\n}\r\n\r\nexport interface MediaItem {\r\n    url: string;\r\n    mediaType: MediaType;\r\n    content?: HTMLImageElement | Howl;\r\n    sound?: Howl;\r\n}\r\n\r\nconst Preloader = (props: Props) => {    \r\n\r\n    const [completed, setCompleted] = useState(false);\r\n    const [itemsLoaded, setItemsLoaded] = useState(0);\r\n\r\n    useEffect(() => {\r\n        loadMedia();\r\n    }, []);\r\n\r\n    const { children, manifest } = props;\r\n\r\n    const indicator = <Indicator\r\n        itemsLoaded = { itemsLoaded }\r\n        itemsTotal = { manifest.length }\r\n    />;\r\n\r\n    const loadMedia = () => {\r\n        // todo: what if props get set at runtime\r\n        setItemsLoaded(0);\r\n\r\n        const promises = props.manifest\r\n            .map((url) => loadItem(url)\r\n            // tslint:disable-next-line:no-console\r\n            .catch((err) => console.error(err)));\r\n\r\n        Promise.all(promises).then((results) => {\r\n            if (props.onLoadComplete) {\r\n                props.onLoadComplete(media);\r\n            }\r\n            setCompleted(true);\r\n        });\r\n    }\r\n\r\n    const loadItem = async (url: string): Promise<MediaItem> => {\r\n        if (media.some((m) => m.url === url)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\r\n        }\r\n        const mediaType = getType(url);\r\n        let item;\r\n        if (mediaType === MediaType.image) {\r\n            const value = await loadImage(url);\r\n            item = {\r\n                content: value,\r\n                mediaType,\r\n                url,\r\n            } ;\r\n        }\r\n        if (mediaType === MediaType.sound) {\r\n            const value = new Howl({\r\n                src: [ `${process.env.PUBLIC_URL}/${url}` ],\r\n            });\r\n            item = {\r\n                content: value,\r\n                mediaType,\r\n                url,\r\n            };\r\n        }\r\n        if (item) {\r\n            media.push(item);\r\n            setItemsLoaded(itemsLoaded + 1);\r\n            return item;\r\n        } else {\r\n            throw new Error(`Unknown error while trying to load ${url}`);\r\n        }\r\n    }\r\n\r\n    return completed ? children : indicator;\r\n}\r\n\r\nconst media: MediaItem[] = [];\r\n\r\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\r\n    const image = new Image();\r\n    image.src = url;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        if (image.naturalWidth) {\r\n            resolve(image);\r\n        } else if (image.complete) {\r\n            reject(null);\r\n        } else {\r\n            image.addEventListener(\"load\", check);\r\n            image.addEventListener(\"error\", check);\r\n        }\r\n        function check() {\r\n            if (image.naturalWidth) {\r\n                resolve(image);\r\n            } else {\r\n                reject(null);\r\n            }\r\n            image.removeEventListener(\"load\", check);\r\n            image.removeEventListener(\"error\", check);\r\n        }\r\n    });\r\n};\r\n\r\nconst getType = (url: string): MediaType => {\r\n    url = url.toLowerCase();\r\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\r\n        return MediaType.image;\r\n    }\r\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\r\n        return MediaType.sound;\r\n    }\r\n    throw Error(`Could not determine type for ${url}`);\r\n};\r\n\r\nexport default Preloader;","export const manifest = [\r\n    \"sound/fx/button-click.ogg\",\r\n    \"sound/fx/error.ogg\",\r\n    \"sound/music/Soliloquy.mp3\",\r\n    \"sound/music/TheLoomingBattle.ogg\",\r\n\r\n];\r\n","import * as React from \"react\";\r\n\r\nexport interface Props {\r\n    itemsLoaded?: number;\r\n    itemsTotal?: number;\r\n}\r\n\r\n/**\r\n * Loading indicator\r\n */\r\nconst Indicator = (props: Props) =>  {\r\n    const { itemsLoaded, itemsTotal } = props;\r\n    return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\r\n}\r\n\r\nexport default Indicator;\r\n","import { Action } from \"redux\";\n\n// todo this should go somewhere else\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface ModifyWorkersAction extends Action<ActionType> {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","import React, { forwardRef } from \"react\";\nimport { Viewport as PixiViewport, ClickEventData } from \"pixi-viewport\";\nimport { PixiComponent, useApp } from \"@inlet/react-pixi\";\n\ninterface Props {\n  children: React.ReactNode;\n  onClick?(event: ClickEventData): void;\n  screenWidth: number,\n  screenHeight: number,\n  worldWidth: number,\n  worldHeight: number,\n  minScale?: number;\n  maxScale?: number;\n}\n\n/** Viewport leverages pixi-viewport to create a pannable map \n * https://davidfig.github.io/pixi-viewport/jsdoc/\n */\nconst Viewport = forwardRef<PixiViewport, any>((props, ref) => {\n  const app = useApp();\n  if (app) {\n      // Perhaps this is better moved somewhere else\n      const cursor = `url('${process.env.PUBLIC_URL}/img/cursors/dwarven_gauntlet_extra_6.png'), auto`;\n      app.renderer.plugins.interaction.cursorStyles.pointer = cursor;\n  }\n  return <PixiComponentViewport app={app} {...props} ref={ref} />;  \n})\n\ninterface PixiComponentProps {\n    app: PIXI.Application;\n}\n\nconst PixiComponentViewport = PixiComponent(\"Viewport\", {\n  create: (props: PixiComponentProps & Props) => {\n    const viewport = new PixiViewport({\n      screenWidth: props.screenWidth,\n      screenHeight: props.screenHeight,\n      worldWidth: props.worldWidth,\n      worldHeight: props.worldHeight,\n      ticker: props.app.ticker,\n      interaction: props.app.renderer.plugins.interaction,\n      // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n    viewport.on(\"clicked\", (event) => { if(props.onClick) props.onClick(event) });\n\n    const { \n      minScale = 1, \n      maxScale = 2 \n    } = props;\n\n    viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .clamp({ direction: 'all' })\n      .clampZoom({ minScale, maxScale })\n      .decelerate();\n\n    return viewport;\n  },\n  // applyProps: (instance, oldProps, newProps) => {\n  //   console.log(\"applyProps\");\n  // },\n  // didMount: () => {\n  //   console.log(\"didMount\");\n  // },\n  // willUnmount: () => {\n  //   console.log(\"willUnmount\");\n  // }\n});\nexport default Viewport;\n","import * as PIXI from 'pixi.js';\n// Adapted from https://github.com/explooosion/hitarea-shapes/blob/master/src/index.js\n\nexport default class HitAreaShapes {\n    public shapes: PIXI.Polygon[];\n\n    constructor(shapes = {}, sprite: string = \"0\") {\n      this.shapes = shapes[sprite].map((definition: { shape: number[]; }) => {\n          const shape: number[] = definition.shape;\n          return new PIXI.Polygon(shape);\n      });\n    }\n  \n    /**\n     * Called by hitArea\n     * @param {number} x\n     * @param {number} y\n     */\n    contains(x = 0, y = 0) {\n      return (!this.shapes || this.shapes.length === 0)\n        ? false\n        : this.shapes.some(shape => shape.contains(x, y));\n    }\n  }","import React, { useState, useEffect } from 'react';\nimport { Structure } from 'definitions/structures';\nimport { Sprite, useApp, useTick } from '@inlet/react-pixi';\nimport HitAreaShapes from 'utils/hitAreaShapes';\nimport * as PIXI from 'pixi.js';\nimport { ITextureDictionary } from 'pixi.js';\nimport { STRUCTURE_HIGHLIGHT_FILTER } from 'components/town/TownView';\nimport { loadResource } from 'utils/pixiJs';\n\nconst BLADE_ROTATION_SPEED = 0.01;\n\nexport interface Props {\n    onStructureClick: (structure: Structure | null) => void;\n    position: PIXI.Point;\n    selected?: boolean;\n    hitAreaShapes: HitAreaShapes;\n}\n\nconst LumberMill = (props: Props) => {\n    const {hitAreaShapes} = props;\n    const structure = Structure.lumberMill;\n    const atlas = `${process.env.PUBLIC_URL}/img/town/town-alpha/${structure}.json`;\n    const [textures, setTextures] = useState<ITextureDictionary>();\n    const filters = props.selected ? [STRUCTURE_HIGHLIGHT_FILTER] : [];\n\n    const app = useApp();\n\n    useEffect(() => {\n        loadResource(atlas, (resource) => {\n            setTextures(resource.textures);    \n        })\n    }, [app, app.loader, atlas]);\n\n    const [rotation, setRotation] = useState(0);\n    useTick((delta:number | undefined) => setRotation(r => r + (BLADE_ROTATION_SPEED * delta!)));\n\n\n    if (!textures) return null;\n    return (\n        <Sprite \n            name={structure}\n            position={props.position}\n            interactive={true}\n            buttonMode={true}\n            pointertap={() => {\n                props.onStructureClick(structure);\n            }}\n            hitArea={hitAreaShapes}\n            filters={filters}\n            texture={textures[\"structure.png\"]}\n        >\n            <Sprite \n                name=\"blades\"\n                texture={textures[\"blades.png\"]}\n                anchor={new PIXI.Point(0.5, 0.5)}\n                x={15}\n                y={10}\n                rotation={rotation}\n            /> \n        </Sprite>        \n    )\n}\n\nexport default LumberMill;","import { PixiComponent, applyDefaultProps, Container } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport * as particles from 'pixi-particles';\n\n\ninterface Props  {\n    image: string;\n    config: particles.OldEmitterConfig | particles.EmitterConfig;\n};\n\nconst ParticleEmitter = PixiComponent<Props & React.ComponentProps<typeof Container>, PIXI.ParticleContainer>(\"ParticleEmitter\", {\n    create() {\n      return new PIXI.ParticleContainer();\n    },\n\n    applyProps(instance, oldProps: Props, newProps: Props) {\n      const { image, config, ...newP } = newProps;\n  \n      // apply rest props to PIXI.ParticleContainer\n      applyDefaultProps(instance, oldProps, newP);\n      \n      let emitter = (this as any)._emitter;\n      if (!emitter) {\n        emitter = new particles.Emitter(\n          instance,\n          [PIXI.Texture.from(image)],\n          config\n        );\n  \n        let elapsed = performance.now();\n  \n        const tick = () => {\n          emitter.raf = requestAnimationFrame(tick);\n          const now = performance.now();\n          //const amp = Math.random() * 5 + 15;\n          // const amp = 15;\n          // const freq = 0.0015;\n          // emitter.acceleration.x = (Math.sin((elapsed * freq)) * amp) + 15;\n\n          emitter.update((now - elapsed) * 0.0003);\n  \n          elapsed = now;\n        };  \n        emitter.emit = true;\n        // emitter.update(00.2);\n\n        tick();\n      }\n      (this as any)._emitter = emitter;\n    },\n\n    willUnmount() {\n      if ((this as any)._emitter) {\n        (this as any)._emitter.emit = false;\n        cancelAnimationFrame((this as any)._emitter.raf);\n      }\n    }\n});\n\nexport default ParticleEmitter;","import React from \"react\";\nimport { Sprite, Container } from '@inlet/react-pixi';\nimport { Structure } from 'definitions/structures';\nimport HitAreaShapes from 'utils/hitAreaShapes';\nimport smoke from './smoke.json';\nimport ParticleEmitter from 'components/pixi/ParticleEmitter';\nimport { STRUCTURE_HIGHLIGHT_FILTER } from 'components/town/TownView';\n\nexport interface Props {\n    onStructureClick: (structure: Structure | null) => void;\n    position: PIXI.Point;\n    selected?: boolean;\n    hitAreaShapes: HitAreaShapes;\n}\n\nconst Tavern = (props: Props) => {\n    const {hitAreaShapes, position} = props;\n    const structure = Structure.tavern;\n    const filters = props.selected ? [STRUCTURE_HIGHLIGHT_FILTER] : [];\n\n    return (\n        <Container position={position}>\n            <Sprite \n                name={structure}\n                interactive={true}\n                buttonMode={true}\n                pointertap={() => {\n                    props.onStructureClick(structure);\n                }}\n                filters={filters}\n                hitArea={hitAreaShapes}\n                image={`${process.env.PUBLIC_URL}/img/town/town-alpha/${structure}.png`}\n            >\n            </Sprite>\n            <ParticleEmitter\n                name=\"smoke\"\n                x={107}\n                y={-2}\n                image={`${process.env.PUBLIC_URL}/img/town/effects/smokeparticle.png`} \n                config={smoke} \n            />\n        </Container>\n    )\n}\nexport default Tavern;","import React from 'react';\nimport { Structure } from 'definitions/structures';\nimport { Sprite } from '@inlet/react-pixi';\nimport HitAreaShapes from 'utils/hitAreaShapes';\nimport { STRUCTURE_HIGHLIGHT_FILTER } from 'components/town/TownView';\n\nexport interface Props {\n    onStructureClick: (structure: Structure | null) => void;\n    position: PIXI.Point;\n    selected?: boolean;\n    structure: Structure;\n    hitAreaShapes: HitAreaShapes;\n}\n\nconst Generic = (props: Props) => {\n    const {structure, position, hitAreaShapes, selected, onStructureClick} = props;\n    const filters = selected ? [STRUCTURE_HIGHLIGHT_FILTER] : [];\n    return (\n        <Sprite\n            name={structure}\n            position={position}\n            interactive={true}\n            buttonMode={true}\n            pointertap={() => { onStructureClick(structure); }}\n            hitArea={hitAreaShapes}\n            filters={filters}\n            image={`${process.env.PUBLIC_URL}/img/town/town-alpha/${structure}.png`}          \n        >\n            {/* <Graphics\n                name=\"hitarea\"\n                draw={graphics => {\n                    graphics.beginFill(0xffffff);\n                    hitAreaShapes.shapes.map(shape => graphics.drawPolygon(shape))\n                    graphics.endFill();\n                }}\n            /> */}\n        </Sprite>\n    );\n}\nexport default Generic;","import React from \"react\";\nimport \"./css/legenda.css\";\nimport { StructuresStoreState } from 'stores/structures';\nimport { Structure } from 'definitions/structures';\nimport { StructureStoreState, StructureState } from 'stores/structure';\nimport { Link } from 'react-router-dom';\nimport { getStructureLink, getTownLink } from 'utils/routing';\nimport { TextManager } from 'global/TextManager';\nimport { useRouteMatch } from 'react-router';\n\ninterface Props {\n    structures: StructuresStoreState;\n}\n\n// Legenda with clickable names of structures\nconst Legenda = (props: Props) => {\n    const {structures} = props;\n    const orderedStructures = [\n        Structure.workshop,\n        Structure.quarry,\n        Structure.tavern,\n        Structure.tannery,\n        Structure.alchemist,\n        Structure.garden,\n        Structure.weaponsmith,\n        Structure.armoursmith,\n        Structure.warehouse,\n        Structure.mine,\n        Structure.lumberMill,\n        Structure.weaver,\n    ];   \n    const match = useRouteMatch(`${getTownLink()}/:structure`);\n\n    const renderText = (structure: Structure) => {\n        if (match?.params['structure'] === structure.toString()) {\n            return (\n                <span className=\"highlighted\">{`${TextManager.getStructureName(structure)}`}</span>\n            )\n        }\n        return (\n            <Link to={getStructureLink(structure)} >\n                {`${TextManager.getStructureName(structure)}`}\n            </Link>\n        )\n    }\n\n    return (\n        <div className=\"legenda\">\n            <ul>\n            {orderedStructures.map((structure) => {\n                const structureStore: StructureStoreState = structures[structure];\n                if (structureStore.state === StructureState.NotBuilt) {\n                    return null;\n                }\n                return (\n                    <li key={structure}>\n                        {renderText(structure)}\n                    </li>\n                );\n            })}\n            </ul>\n        </div>\n    );\n}\n\nexport default Legenda;","import React, { useRef, useEffect } from \"react\";\r\nimport { Stage, Sprite } from '@inlet/react-pixi';\r\nimport { Structure } from 'definitions/structures';\r\nimport { StructuresStoreState } from 'stores/structures';\r\nimport { SoundManager, MusicTrack } from 'global/SoundManager';\r\nimport { Viewport as PixiViewport} from 'pixi-viewport';\r\nimport { useRouteMatch } from 'react-router';\r\nimport {OutlineFilter} from '@pixi/filter-outline';\r\nimport { getTownLink } from 'utils/routing';\r\nimport Viewport from '../pixi/Viewport';\r\nimport { StructureState, StructureStoreState } from 'stores/structure';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from 'stores';\r\nimport \"./css/townView.css\"\r\nimport { MAX_WIDTH } from 'components/App';\r\nimport HitAreaShapes from 'utils/hitAreaShapes';\r\nimport polygons from './hitAreas.json';\r\nimport LumberMill from './structures/LumberMill';\r\nimport Tavern from './structures/Tavern';\r\nimport { withAppContext, AppContextProps } from 'hoc/withAppContext';\r\nimport Generic from './structures/Generic';\r\nimport Legenda from './Legenda';\r\n\r\nconst HEIGHT = 1079;\r\nconst WORLD_WIDTH = 1024;\r\nconst WORLD_HEIGHT = 1600;\r\n\r\nexport interface Props {\r\n    onStructureClick: (structure: Structure | null) => void;\r\n}\r\n\r\nexport const STRUCTURE_HIGHLIGHT_FILTER = new OutlineFilter(4, 0xffcc00);\r\n\r\nconst TownView = (props: Props & AppContextProps) => {\r\n    const match = useRouteMatch(`${getTownLink()}/:structurename`);\r\n    const selectedStructure = match?.params['structurename'];\r\n\r\n    useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\r\n        SoundManager.playMusicTrack(MusicTrack.town);\r\n    }, []);\r\n\r\n    const handleStructureClick = (structure: Structure | null) => {\r\n        if (!dragging.current) {\r\n            // if (structure) {\r\n            //     // history.push(getStructureLink(structure));\r\n            // } else {\r\n            //     // history.push(getTownLink());\r\n            // }\r\n            props.onStructureClick(structure); \r\n        }\r\n    }\r\n\r\n\r\n    //console.log('rendering town');\r\n\r\n    const structures = useSelector<StoreState, StructuresStoreState>((state: StoreState) => {\r\n        return state.structures;\r\n    });\r\n\r\n\r\n    const renderStructures = () => {\r\n        const orderedStructures = [\r\n            Structure.workshop,\r\n            Structure.quarry,\r\n            Structure.tavern,\r\n            Structure.tannery,\r\n            Structure.alchemist,\r\n            Structure.garden,\r\n            Structure.weaponsmith,\r\n            Structure.armoursmith,\r\n            Structure.warehouse,\r\n            Structure.mine,\r\n            Structure.lumberMill,\r\n            Structure.weaver,\r\n        ]\r\n        return orderedStructures.reverse().map((structure) => {\r\n            const structureStore: StructureStoreState = structures[structure];\r\n            if (structureStore.state === StructureState.NotBuilt) {\r\n                return null;\r\n            }\r\n            // todo: refactor into seperate components\r\n        \r\n            const Structure = getStructure(structure);\r\n            const position = getStructurePosition(structure);\r\n            const hitAreaShapes = new HitAreaShapes(polygons, structure);\r\n            return (\r\n                <Structure \r\n                    position={position}\r\n                    structure={structure}\r\n                    hitAreaShapes={hitAreaShapes}\r\n                    onStructureClick={handleStructureClick}\r\n                    key={structure} \r\n                    selected={selectedStructure === structure} \r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    let dragging = useRef(false);\r\n    const viewportRef = useRef<PixiViewport>(null);\r\n    useEffect(() => {\r\n        if(viewportRef.current) {\r\n            const viewport = viewportRef.current;\r\n            viewport.on(\"drag-start\", () => { dragging.current = true; });\r\n            viewport.on(\"drag-end\", () => { dragging.current = false; });\r\n        }\r\n\r\n        const onScroll = (e: WheelEvent) => {\r\n            // Scrolling the mouse is just used for zoom, not for actual scrolling\r\n            e.preventDefault();\r\n        }\r\n        window.addEventListener(\"wheel\", onScroll, {passive: false});\r\n        return () => {\r\n            window.removeEventListener(\"wheel\", onScroll);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedStructure && viewportRef.current) {\r\n            const viewport = viewportRef.current;\r\n            viewport.zoomPercent(2);\r\n            const position = getStructurePosition(selectedStructure);\r\n            viewport.moveCenter(position);\r\n        }\r\n    }, [selectedStructure]);\r\n\r\n    const options = {\r\n        sharedLoader: true\r\n    }\r\n    return (\r\n        <div className=\"town-view\">\r\n            <Legenda structures={structures} />\r\n            <Stage width={MAX_WIDTH} height={HEIGHT} options={options} >\r\n                <Viewport screenWidth={MAX_WIDTH} screenHeight={HEIGHT} worldWidth={WORLD_WIDTH} worldHeight={WORLD_HEIGHT} ref={viewportRef}>\r\n                    <Sprite \r\n                        name=\"background\"\r\n                        image={`${process.env.PUBLIC_URL}/img/town/town-alpha/background.png`}          \r\n                    >\r\n                        {renderStructures()}\r\n                    </Sprite>\r\n                </Viewport>\r\n            </Stage>\r\n            {/* { selectedStructure && (\r\n                <StructureDetailsView \r\n                    structure={selectedStructure} \r\n                    title={TextManager.getStructureName(selectedStructure)} \r\n                    onClose={() => handleStructureClick(null)}\r\n                />\r\n            )} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withAppContext(TownView);\r\n\r\nconst getStructure = (structure: Structure) => {\r\n    switch (structure) {\r\n        case Structure.workshop:\r\n        case Structure.quarry:\r\n        case Structure.tannery:\r\n        case Structure.alchemist:\r\n        case Structure.garden:\r\n        case Structure.weaponsmith:\r\n        case Structure.armoursmith:\r\n        case Structure.warehouse:\r\n        case Structure.mine:\r\n        case Structure.weaver:\r\n            return Generic;\r\n        case Structure.lumberMill:\r\n            return LumberMill;\r\n        case Structure.tavern:\r\n            return Tavern;    \r\n    }\r\n}\r\n\r\nconst getStructurePosition = (structure: Structure) => {\r\n    let x, y;              \r\n    switch (structure) {\r\n        case Structure.workshop:\r\n            x = 373;\r\n            y = 610;\r\n            break;\r\n        case Structure.quarry:\r\n            x = 632;\r\n            y = 633;\r\n            break;\r\n        case Structure.tannery:\r\n            x = 372;\r\n            y = 460;\r\n            break;\r\n        case Structure.tavern:\r\n            x = 500;\r\n            y = 469;\r\n            break;\r\n        case Structure.alchemist:\r\n            x = 411;\r\n            y = 371;\r\n            break;\r\n        case Structure.garden:\r\n            x = 822;\r\n            y = 689;\r\n            break;\r\n        case Structure.weaponsmith:\r\n            x = 449;\r\n            y = 460;\r\n            break;\r\n        case Structure.armoursmith:\r\n            x = 473;\r\n            y = 442;\r\n            break;\r\n        case Structure.warehouse:\r\n            x = 471;\r\n            y = 130;\r\n            break;\r\n        case Structure.lumberMill:\r\n            x = 403;\r\n            y = 320;\r\n            break;\r\n        case Structure.mine:\r\n            x = 183;\r\n            y = 527;\r\n            break;\r\n        case Structure.weaver:\r\n            x = 484;\r\n            y = 333;\r\n            break;\r\n    }\r\n    return new PIXI.Point(x, y);\r\n}      ","import React, { useEffect, useState } from 'react';\nimport './toasts.css';\nimport Toast from './Toast';\nimport { ToastManager, ToastConfig } from '../../../global/ToastManager';\n\n// Toasts can be added by calling ToastManager.addToast\n// ToastManager will inform whenever the something is added to the list of toasts via EVENT_TOASTS_UPDATED\n// The toasts themselves will fade out via css transition\nconst Toasts = () => {\n\n    const [activeToasts, setActiveToasts] = useState<ToastConfig[]>([]);\n\n    const toastsUpdated = (stack: ToastConfig[]) => {\n        setActiveToasts(stack);\n    }\n\n    useEffect(() => {\n        ToastManager.addEventListener(ToastManager.EVENT_TOASTS_UPDATED, toastsUpdated);\n        return () => {\n            ToastManager.removeEventListener(ToastManager.EVENT_TOASTS_UPDATED, toastsUpdated);\n        }\n    }, []);\n\n    return (\n        <div className=\"toasts\" > \n            { activeToasts.map((toastConfig) => (\n                <Toast key={toastConfig.time} {...toastConfig}/>\n            ))}\n        </div>\n    )\n}\n\nexport default Toasts;","import { getDefinition } from \"definitions/items\";\r\nimport { Item, ItemType } from \"definitions/items/types\";\r\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\r\nimport * as React from \"react\";\r\nimport { StructureState, StructureStoreState } from \"stores/structure\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"global/TextManager\";\r\nimport \"./css/cheatbox.css\";\r\nimport { useRef, useState } from 'react';\r\nimport { ToastManager } from 'global/ToastManager';\r\nimport { Type } from 'components/ui/toasts/Toast';\r\n\r\nexport interface DispatchProps {\r\n    onCheatGold?: (amount: number) => void;\r\n    onCheatWorkers?: (amount: number) => void;\r\n    onCheatResources?: (amount: number) => void;\r\n    onCheatItem?: (item: Item) => void;\r\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    structures: StructuresStoreState;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\nconst CheatWindow = (props: AllProps) => {\r\n\r\n    const itemSelectRef = useRef<HTMLSelectElement>(null);\r\n    const [cheats, setCheats] = useState({\r\n        gold: 50,\r\n        resources: 50,\r\n        workers: 10,\r\n    });\r\n\r\n    const getStructureRow = (structure: Structure) => {\r\n        const structureDef = getStructureDefinition(structure);\r\n        const structureStore: StructureStoreState = props.structures[structure];\r\n        const levelDef = structureDef.levels[structureStore.level];\r\n\r\n        const displayName = TextManager.get(levelDef.displayName);\r\n\r\n        return <div\r\n            className=\"label-dropdown\"\r\n            key={structure}\r\n        >\r\n            <label title={structure}>\r\n                { `${displayName}` }\r\n            </label>\r\n            <input\r\n                key={structure}\r\n                type=\"checkbox\"\r\n                checked={props.structures[structure].state === StructureState.Built }\r\n                onChange={() => handleChangeStructureState(structure, props.structures[structure].state !== StructureState.Built)}\r\n            />\r\n        </div>;\r\n    };\r\n\r\n    const structures = Object.keys(props.structures)\r\n        .map((structure) => getStructureRow(structure as Structure));\r\n\r\n    const getItemTypeOptions = (type: ItemType) => {\r\n        return Object.keys(Item)\r\n            // tslint:disable-next-line: triple-equals\r\n            // eslint-disable-next-line eqeqeq\r\n            .filter((item: string) => getDefinition(item as Item).itemType == type)\r\n            .map((item: string) => getItemOption(item as Item));\r\n    };\r\n\r\n    const getItemOption = (item: Item) => {\r\n        return <option value ={item } key ={item }>\r\n            { TextManager.getItemName(item) }\r\n        </option>;\r\n    };\r\n\r\n    const items = Object.keys(ItemType)\r\n        .filter((val: any) => !isNaN(val))\r\n        .map((type: string) => {\r\n        return <optgroup label ={ItemType[type] } key ={type }>\r\n            { getItemTypeOptions(type as unknown as ItemType) }\r\n        </optgroup>;\r\n    });\r\n\r\n    \r\n    const handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = cheats.gold;\r\n        if (props.onCheatGold) { props.onCheatGold(amount); }\r\n\r\n        const text = TextManager.get(\"common-cheat-gold-added\", { amount });\r\n        const icon = \"/img/resources/gold.png\";\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = cheats.workers;\r\n        if (props.onCheatWorkers) { props.onCheatWorkers(amount); }\r\n        const text = TextManager.get(\"common-cheat-workers-added\", { amount });\r\n        const icon = \"/img/resources/worker.png\";\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (props.onCheatResources) { props.onCheatResources(cheats.resources); }\r\n        const text = TextManager.get(\"common-cheat-resources-added\", { amount: cheats.resources });\r\n        ToastManager.addToast(text, Type.cheat);\r\n    }\r\n\r\n    const handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const item = itemSelectRef.current!.value as Item;\r\n        if (props.onCheatItem) { props.onCheatItem(item); }\r\n\r\n        const text = TextManager.get(\"common-cheat-item-added\", { item });\r\n        const icon = getDefinition(item).iconImg;\r\n        ToastManager.addToast(text, Type.cheat, icon);\r\n    }\r\n\r\n    const handleChangeStructureState = (structure: Structure, checked: boolean) => {\r\n        if (props.onCheatStructureState) {\r\n            props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\r\n        }\r\n        if (checked) {\r\n            ToastManager.addToast(`The ${TextManager.getStructureName(structure)} is constructed`, Type.cheat);\r\n        } else {\r\n            ToastManager.addToast(`The ${TextManager.getStructureName(structure)} is not constructed`, Type.cheat);\r\n        }\r\n    }\r\n \r\n    const handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            gold: amount,\r\n        });\r\n    }\r\n\r\n    const handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            workers: amount,\r\n        });\r\n    }\r\n\r\n    const handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        setCheats({\r\n            ...cheats,\r\n            resources: amount,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"cheat-box\">\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Gold</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.gold}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeGold}>\r\n                </input>\r\n                <button onClick={handleCheatGold}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Workers</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.workers}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeWorkers}>\r\n                </input>\r\n                <button onClick={handleCheatWorkers}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Resources</label>\r\n                <input type=\"number\"\r\n                    value= {cheats.resources}\r\n                    style={{width: \"50px\"}}\r\n                    onChange={handleChangeResources}>\r\n                </input>\r\n                <button onClick={handleCheatResources}>Add</button>\r\n            </div>\r\n            <div className=\"label-numberbox-button\">\r\n                <label>Items</label>\r\n                <select style={{width: \"150px\"}} ref={itemSelectRef}>\r\n                    { items }\r\n                </select>\r\n                <button onClick={handleCheatItem}>Add</button>\r\n            </div>\r\n            { structures }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheatWindow;\r\n","import { Resource } from \"definitions/resources\";\n\nexport const resourceOrder = [\n    Resource.food,\n    Resource.wood,\n    Resource.stone,\n    Resource.fabric,\n    Resource.leather,\n];\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogText } from \"actions/log\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/CheatWindow\";\nimport { resourceOrder } from \"constants/resources\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => {\n            dispatch(addGold(amount));\n            dispatch(addLogText(\"common-cheat-gold-added\", { amount }, LogChannel.common));\n        },\n        onCheatItem: (item: Item) => {\n            dispatch(addItemToWarehouse(item));\n            dispatch(addLogText(\"common-cheat-item-added\", { item }, LogChannel.common));\n        },\n        onCheatResources: (amount: number) => {\n            // Create ResourceStoreState where value of each resource is `amount`\n            const resources = resourceOrder.reduce((acc: ResourceStoreState, resource) => {\n                acc[resource] = amount;\n                return acc;\n            }, {});\n\n            dispatch(addResources(resources));\n            dispatch(addLogText(\"common-cheat-resources-added\", { amount }, LogChannel.common));\n        },\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => {\n            dispatch(addWorkers(amount));\n            dispatch(addLogText(\"common-cheat-workers-added\", { amount }, LogChannel.common));\n        },\n    };\n};\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(CheatWindow) as React.ComponentType<Props & WindowProps>;\n","import { Props as WindowProps } from \"components/ui/window/Window\";\r\nimport CheatWindow from \"containers/windows/CheatWindow\";\r\nimport { withWindow } from \"hoc/withWindow\";\r\nimport * as React from \"react\";\r\nimport { compose } from \"redux\";\r\nimport \"./css/settingswindow.css\";\r\nimport { ChangeEvent } from 'react';\r\nimport { SoundManager } from 'global/SoundManager';\r\n\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\r\nconst SettingsWindow = (props: AllProps) => {\r\n\r\n    const handleMusicChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const linear = parseFloat(e.target.value);\r\n        const log = Math.pow(linear, 2);\r\n        SoundManager.musicVolume = log;\r\n    };\r\n    return (\r\n        <div className=\"settings-window\">\r\n            <details open = { true } >\r\n                <summary>Sound</summary>\r\n                <section>\r\n                    <p>\r\n                        <label>Music</label>\r\n                        <input type=\"range\" min=\"0\" max=\"1\" step=\"0.05\" onChange={handleMusicChange} defaultValue={`${Math.sqrt(SoundManager.musicVolume)}`} />\r\n                    </p>\r\n                    <p>\r\n                        <label>Sound</label>\r\n                        <input type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" />\r\n                    </p>\r\n                </section>\r\n            </details>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withWindow,\r\n)(SettingsWindow) as React.ComponentType<AllProps>;\r\n","import { Props as WindowProps } from \"components/ui/window/Window\";\r\nimport CheatWindow from \"containers/windows/CheatWindow\";\r\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\r\nimport { withWindow } from \"hoc/withWindow\";\r\nimport * as React from \"react\";\r\nimport { compose } from \"redux\";\r\nimport \"./css/cheatbox.css\";\r\nimport SettingsWindow from './SettingsWindow';\r\n\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\r\nconst Menu = (props: AllProps & AppContextProps) => {\r\n\r\n    const handleClickCheats = () => {\r\n        const window = <CheatWindow title = \"Cheats\" />;\r\n        props.onOpenWindow(window);\r\n    };\r\n\r\n    const handleClickSettings = () => {\r\n        const window = <SettingsWindow title = \"Settings\" />;\r\n        props.onOpenWindow(window);\r\n    };\r\n    return (\r\n        <div className=\"menu\">\r\n            <p>\r\n                <button onClick={handleClickCheats}>Cheats!</button>\r\n            </p>\r\n            <p>\r\n                <button onClick={handleClickSettings}>Settings</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose(\r\n    withWindow,\r\n    withAppContext,\r\n)(Menu) as React.ComponentType<AllProps>;\r\n","import \"components/ui/css/common/icon.css\";\nimport { resourceOrder } from \"constants/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"global/TextManager\";\nimport { useSelector } from 'react-redux';\nimport \"./css/resourcebar.css\";\nimport { StoreState } from 'stores';\nimport { selectFreeWorkers } from 'selectors/workers';\nimport { formatNumber } from 'utils/number';\n\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n    resources: ResourceStoreState;\n}\n\n/** Shown on top in the UI */\nconst Resourcebar = () => {\n    //console.log('rendering resourcebar')\n\n    // todo: seperate useSelectors for better performance\n    const storeProps = useSelector<StoreState, StateProps>((store: StoreState) => {\n        return {\n            gold: store.gold,\n            resources: store.resources,\n            workers: store.workers,\n            workersFree: selectFreeWorkers(store),\n        };\n    });\n\n    const createItem = (icon: string, amount: number, title: string) => {\n        return (\n            <li \n                title={title} \n                key={title}\n            >\n                <div \n                    className=\"icon common-icon-smallest\" \n                    style = {{ backgroundImage:  `url(${process.env.PUBLIC_URL}${icon})`}}>\n                </div>\n                <div className=\"amount\">\n                    { formatNumber(amount, 0) }\n                </div>\n            </li>\n        )\n    };\n            \n\n    const resources = resourceOrder.map((resource) => {\n        const resourceDescription = resourceDescriptions[resource];\n        return createItem(resourceDescription.iconImg, storeProps.resources[resource as string], TextManager.getResourceName(resource));\n    });\n\n    resources.push(\n        createItem(\"/img/resources/worker.png\", storeProps.workersFree, \"workers\"),\n        createItem(\"/img/resources/gold.png\", storeProps.gold, \"gold\"),\n    );\n\n// <span>\n//     workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n// </span>\n// <span>\n//     gold: <b>{ props.gold }</b>\n// </span>\n\n    return (\n        <ul className=\"resourcebar\">\n            { resources }\n        </ul>\n    );\n};\nexport default Resourcebar;\n","export const formatNumber = (number: number, digits: number = 1): string => {\n    const SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n   \n    // what tier? (determines SI symbol)\n    const tier = Math.log10(number) / 3 | 0;\n    // if zero, we don't need a suffix\n    if(tier === 0) return number.toFixed(digits);\n\n    // get suffix and determine scale\n    const suffix = SI_SYMBOL[tier];\n    const scale = Math.pow(10, tier * 3);\n\n    // scale the number\n    const scaled = number / scale;\n\n    // format number and add suffix\n    return scaled.toFixed(digits) + suffix;\n}","import Menu from \"components/ui/window/windows/MenuWindow\";\nimport * as React from \"react\";\nimport \"./css/topbar.css\";\nimport Resourcebar from './Resourcebar';\nimport { useContext } from 'react';\nimport { AppContext } from 'components/App';\n\n\n\n\nconst Topbar = () => {\n    const context = useContext(AppContext)!;\n\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const window = <Menu title = \"Menu\" />;\n        context.onOpenWindow(window);\n    };\n\n    return (\n        <div className = \"topbar\">\n            <div className = \"topbar-left\">\n                <Resourcebar />\n            </div>\n            <div className = \"topbar-right\">\n                <div className = \"hamburger\" onClick = { handleClick }>☰</div>\n            </div>\n        </div>\n    );\n}\nexport default Topbar;","import React, { useRef, useEffect } from 'react';\nimport { Sprite } from '@inlet/react-pixi';\nimport { QuestStoreState } from 'stores/quest';\nimport * as PIXI from 'pixi.js';\nimport { AdventurerStoreState } from 'stores/adventurer';\nwindow.PIXI = PIXI;\n\ninterface Props {\n    quest: QuestStoreState;\n    position: PIXI.Point;\n    selected?: boolean;\n    encounterActive?: boolean;\n    onClick?: (quest: QuestStoreState) => void;\n    leader: AdventurerStoreState;\n}\nconst CIRCLE_DIAMETER = 256; // = avatar size / 2\n\nconst QuestMarker = (props: Props) => {\n    const { quest, leader, encounterActive, position, onClick, selected } = props;\n    const image = selected ? '/img/world/map-marker-selected.png' : '/img/world/map-marker.png';\n\n    const avatar = useRef<PIXI.Sprite>(null);\n    // Mask has to be a child of the avatar in order to move with it\n    useEffect(() => {\n        const sprite = avatar.current as any as PIXI.Sprite;\n\n        const maskGraphics = new PIXI.Graphics();\n        maskGraphics.beginFill(0xBADA55);\n        maskGraphics.drawCircle(0, 0, CIRCLE_DIAMETER * 1);\n        maskGraphics.endFill(); \n\n        sprite.mask = maskGraphics;\n        sprite.addChild(maskGraphics);\n    }, [avatar]);\n\n    return (\n        <Sprite\n            image={`${process.env.PUBLIC_URL}${image}`} \n            name={quest.name}\n            x={position.x}\n            y={position.y}\n            interactive={true}\n            buttonMode\n            scale={new PIXI.Point(0.1, 0.1)}\n            anchor={new PIXI.Point(0.5, 1)}\n            pointerdown={() => {\n                if(onClick) {\n                    onClick(quest);\n                }\n            }}\n        >\n            { leader && (\n            <Sprite \n                image={`${process.env.PUBLIC_URL}${leader.avatarImg}`} \n                name=\"avatar\"\n                anchor={new PIXI.Point(0.5, 0.5)}\n                x={0}\n                y={-396}\n                scale={new PIXI.Point(0.66, 0.66)}\n                ref={avatar}\n            />)}\n            {encounterActive && (\n            <Sprite \n                image={`${process.env.PUBLIC_URL}/img/world/quest-alert.png`} \n                name=\"quest-alert\"\n                anchor={new PIXI.Point(0.5, 1)}\n                x={180}\n                y={-396}\n                scale={new PIXI.Point(2, 2)}\n            />\n            )}\n        </Sprite>\n    )\n}\n\nexport default QuestMarker;","import React from \"react\";\nimport { Graphics } from '@inlet/react-pixi';\n\ninterface Props {\n    positions: PIXI.Point[];\n}\n\nconst QuestLine = (props: Props) => {\n    const { positions } = props;\n    if (props.positions.length > 2) {\n        return <Graphics\n            name=\"questline\"\n            x={0}\n            y={0}\n            draw={graphics => {\n                graphics.lineStyle(3, 0xFF3300);\n                graphics.moveTo(positions[0].x, positions[0].y);\n\n                let i = 0;\n                for (i = 1; i < positions.length - 2; i ++)\n                {\n                    var xc = (positions[i].x + positions[i + 1].x) / 2;\n                    var yc = (positions[i].y + positions[i + 1].y) / 2;\n                    graphics.quadraticCurveTo(positions[i].x, positions[i].y, xc, yc);\n                }\n                graphics.quadraticCurveTo(positions[i].x, positions[i].y, positions[i+1].x, positions[i+1].y);\n                graphics.endFill(); \n            }}\n        />;\n    }\n    return null;\n}\n\nexport default QuestLine;","import { TextEntry } from \"constants/text\";\nimport { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getQuests = (state: StoreState) => state.quests;\nconst getLog = (state: StoreState) => state.log;\n\nconst activeQuests = (quests: QuestStoreState[]) => {\n    // returns the names of the active quests\n    return quests.filter((q) => q.status === QuestStatus.active).map((q) => q);\n};\n\nexport const selectActiveQuests = createSelector([\n    getQuests],\n    activeQuests,\n);\n\n/**\n * Returns the most recent log entry for a given quest\n */\nexport const selectLastQuestLogEntry = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry | undefined => {\n        const questLog = log.find((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n        return questLog;\n    },\n)(state);\n\n/**\n * Returns all log entries for given quest\n */\nexport const selectQuestLogEntries = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry[] | undefined => {\n        return log.filter((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n    },\n)(state);\n","import * as PIXI from 'pixi.js';\r\nimport { Stage, Sprite } from '@inlet/react-pixi';\r\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport React, { useEffect, useRef, useCallback, useState } from \"react\";\r\nimport { QuestStoreState } from \"stores/quest\";\r\nimport { lerpLocation } from 'utils/pixiJs';\r\nimport { QuestDefinition, QuestNodeType, QuestNode } from \"definitions/quests/types\";\r\nimport Viewport from '../../pixi/Viewport';\r\nimport MapGrid from './MapGrid';\r\nimport QuestMarker from './QuestMarker';\r\nimport { StoreState } from 'stores';\r\nimport { getQuestLeader } from 'storeHelpers';\r\nimport { AdventurerStoreState } from 'stores/adventurer';\r\nimport QuestLine from './QuestLine';\r\nimport { MAX_WIDTH as WIDTH } from 'components/App';\r\nimport { selectActiveQuests } from 'selectors/quests';\r\nimport { getDefinition } from 'definitions/quests';\r\nwindow.PIXI = PIXI; // workaround for pixi-tilemap\r\n\r\nconst FULL_HEIGHT = 1024;\r\nconst SMALL_HEIGHT = 128;   // Used when QuestPanel is open\r\nconst WORLD_WIDTH = 1500;\r\nconst WORLD_HEIGHT = 1061;\r\nconst GRID_WIDTH = 10;      // width or height of each node location in pixels\r\n\r\n// // This stuff is needed for the pixi-js browser plugin\r\nif (process.env.NODE_ENV === \"development\") {\r\n    // @ts-ignore\r\n    window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI: PIXI });\r\n}\r\n\r\nexport interface Props {\r\n    selectedQuestName?: string;\r\n    smallMap: boolean;\r\n    onPartyClick: (questName: string) => void;\r\n    retrieveWorldViewRef: () => React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst WorldMap = (props: Props) => {\r\n    const { retrieveWorldViewRef, smallMap } = props;\r\n    const questSelector = useCallback(\r\n        (state: StoreState) => state.quests.find((q) => q.name === props.selectedQuestName),\r\n        [props.selectedQuestName]\r\n    );\r\n    const selectedQuest = useSelector<StoreState, QuestStoreState | undefined>(questSelector);\r\n    const adventurers = useSelector<StoreState, AdventurerStoreState[]>((store) => store.adventurers);\r\n    const activeQuests = useSelector<StoreState, QuestStoreState[]>((store) => selectActiveQuests(store));\r\n\r\n    const handlePartyClick = (name: string) => {\r\n        props.onPartyClick(name);\r\n    };\r\n\r\n    // useEffect(() => {        \r\n    //     const onScroll = (e: WheelEvent) => {\r\n    //         // When the map is big, scrolling the mouse is just used for zoom, not for actual scrolling\r\n    //         if (!smallMap) {\r\n    //             e.preventDefault();\r\n    //         }\r\n    //     }\r\n    //     window.addEventListener(\"wheel\", onScroll, {passive: false} );\r\n    //     return () => {\r\n    //         window.removeEventListener(\"wheel\", onScroll);\r\n    //     };\r\n    // }, [smallMap]);\r\n\r\n\r\n    const [canvasWidth, setCanvasWidth] = useState(WIDTH);\r\n    const [canvasHeight, setCanvasHeight] = useState(FULL_HEIGHT);\r\n\r\n    useEffect(() => {\r\n        // This will set the dimensions of the canvas tot that of the parent (worldview)\r\n        const resize = () => {\r\n            const worldView = retrieveWorldViewRef();\r\n            const worldViewWidth = worldView.current?.clientWidth || WIDTH;\r\n            const worldViewHeight = worldView.current?.clientHeight || FULL_HEIGHT;\r\n\r\n            setCanvasWidth(worldViewWidth);\r\n            if (smallMap) {\r\n                if (worldViewWidth < 576) {\r\n                    // Small screens\r\n                    setCanvasHeight(SMALL_HEIGHT / 2);\r\n                } else {\r\n                    setCanvasHeight(SMALL_HEIGHT);\r\n                }\r\n            }\r\n            else {\r\n                setCanvasHeight(worldViewHeight);\r\n            }\r\n        }\r\n        resize();\r\n        window.addEventListener(\"resize\", resize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resize);\r\n        };\r\n    }, [retrieveWorldViewRef, smallMap]);\r\n\r\n    useEffect(() => {\r\n        if (selectedQuest) {\r\n            focusOnQuestingParty(selectedQuest);\r\n        }\r\n    }, [selectedQuest, canvasHeight])\r\n\r\n    const viewportRef = useRef<PixiViewport>(null);\r\n    useEffect(() => {\r\n        // focus on center of the map\r\n        if (viewportRef.current) {\r\n            const viewport = viewportRef.current;\r\n            const point = nodeLocationToPoint({ x: 0, y: 0 });\r\n            viewport.moveCenter(point.x, point.y);\r\n        }\r\n    }, [canvasWidth]);\r\n\r\n    const renderQuestlines = () => {\r\n        return activeQuests.map((quest) => {\r\n            const previousPositions = getPreviousPositions(quest);\r\n            return (\r\n                <QuestLine positions={previousPositions} key={quest.name} />\r\n            );\r\n        });\r\n    };\r\n\r\n    const renderMarkers = () => {\r\n        return activeQuests.map((quest) => {\r\n            const location = getQuestWorldLocation(quest);\r\n            const currentPosition = nodeLocationToPoint(location);\r\n            const leader = getQuestLeader(adventurers, quest)!;\r\n            const questDefinition: QuestDefinition = getDefinition(quest.name);\r\n            const progress: number = Math.floor(quest.progress);\r\n            const questNode: QuestNode = questDefinition.nodes[progress];\r\n\r\n            return (\r\n                <QuestMarker\r\n                    quest={quest}\r\n                    leader={leader}\r\n                    position={currentPosition}\r\n                    key={quest.name}\r\n                    selected={quest === selectedQuest}\r\n                    encounterActive={questNode.type === QuestNodeType.encounter}\r\n                    onClick={(quest) => handlePartyClick(quest.name)}\r\n                />\r\n            );\r\n        });\r\n    };\r\n\r\n\r\n    // puts the given party in the center of the map\r\n    const focusOnQuestingParty = (quest: QuestStoreState) => {\r\n        const viewport = viewportRef.current;\r\n        if (viewport) {\r\n            const partyLocation = getQuestWorldLocation(quest);\r\n            const point = nodeLocationToPoint(partyLocation);\r\n            viewport.moveCenter(point.x, point.y);\r\n        }\r\n    }\r\n\r\n    const handleMapClick = () => {\r\n        /// todo: close map\r\n        // if(smallMap === true && selectedQuest) {\r\n        //     props.onPartyClick(selectedQuest.name);\r\n        // }\r\n    }\r\n\r\n    // console.log(canvasWidth);\r\n    return (\r\n        <Stage width={canvasWidth} height={canvasHeight} >\r\n            <Viewport screenWidth={canvasWidth} screenHeight={canvasHeight} worldWidth={WORLD_WIDTH} worldHeight={WORLD_HEIGHT} ref={viewportRef} >\r\n                <Sprite\r\n                    image={`${process.env.PUBLIC_URL}/img/world/francesca-baerald-fbaerald-angeloumap-lowres.jpg`}\r\n                    interactive\r\n                    pointerdown={handleMapClick}\r\n                >\r\n                    {renderQuestlines()}\r\n                    {renderMarkers()}\r\n                </Sprite>\r\n                {/* <MapGrid width={WORLD_WIDTH} height={WORLD_HEIGHT} gridWidth={GRID_WIDTH} /> */}\r\n            </Viewport>\r\n        </Stage>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default WorldMap;\r\n\r\nconst getQuestWorldLocation = (quest: QuestStoreState): { x: number; y: number; } => {\r\n    const questDefinition = getDefinition(quest.name);\r\n    const roundedProgress = Math.floor(quest.progress);\r\n    const lastNode = questDefinition.nodes[roundedProgress];\r\n\r\n    const nextNode = questDefinition.nodes[roundedProgress + 1];\r\n    if (!nextNode) {\r\n        // We've reached the last node\r\n        return lastNode;\r\n    }\r\n    return lerpLocation(lastNode, nextNode, quest.progress - roundedProgress);\r\n};\r\n\r\n// Node locations work on a centered coordinate system\r\nconst nodeLocationToPoint = (location: { x: number; y: number; }) => {\r\n    const x = location.x * GRID_WIDTH + WORLD_WIDTH / 2;\r\n    const y = location.y * GRID_WIDTH + WORLD_HEIGHT / 2;\r\n    return new PIXI.Point(x, y);\r\n}\r\n\r\nconst getPreviousPositions = (quest: QuestStoreState) => {\r\n    const positions: PIXI.Point[] = [];\r\n    const questDefinition = getDefinition(quest.name);\r\n\r\n    for (let i = 0; i < quest.progress; i++) {\r\n        positions.push(nodeLocationToPoint(questDefinition.nodes[i]))\r\n    }\r\n    const lastPosition = nodeLocationToPoint(getQuestWorldLocation(quest));\r\n    positions.push(lastPosition);\r\n    return positions;\r\n}","import { PixiComponent } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport { TiledLayerData, TiledTilesetData } from 'constants/tiledMapData';\n\nwindow.PIXI = PIXI;\n// eslint-disable-next-line import/first\nimport 'pixi-tilemap';\n\n\ninterface Props  {\n    texture: PIXI.Texture;\n    horizontalTiles: number;\n    layer: TiledLayerData;\n    tileset: TiledTilesetData;\n    spritesheet: PIXI.Spritesheet;\n};\n\nconst RectTileLayer = PixiComponent<Props, any>(\"RectTileLayer\", {\n    create(props: Props) {\n        const tileLayer = new window.PIXI.tilemap.CompositeRectTileLayer(0, [props.texture]);\n        return tileLayer;\n    },\n\n    applyProps(instance, oldProps: Props, props: Props) {\n        const {layer, tileset, horizontalTiles, spritesheet} = props;\n        if (!layer.data) {\n            return;\n        }\n        for (let i = 0; i < layer.data.length; i++) {\n            const w = tileset.tilewidth;\n            const h = tileset.tileheight;\n            const x = (i % horizontalTiles) * w;\n            const y = Math.floor(i / horizontalTiles) * h;\n        \n            if (layer.data[i] > 0) {\n                const spriteId = `${tileset.name}-${layer.data[i]}`;\n                instance.addFrame(spritesheet.textures[spriteId], x, y);\n            }\n        }\n    }\n});\n\nexport default RectTileLayer;\n\n","import { PixiComponent } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport { TiledTilesetData } from 'constants/tiledMapData';\nimport { TileObject } from 'stores/scene';\n\nwindow.PIXI = PIXI;\n// eslint-disable-next-line import/first\nimport 'pixi-tilemap';\n\n\ninterface Props  {\n    texture: PIXI.Texture;\n    objects: TileObject[];\n    tileset: TiledTilesetData;\n    spritesheet: PIXI.Spritesheet;\n};\n\nconst ObjectTileLayer = PixiComponent<Props, any>(\"ObjectTileLayer\", {\n    create(props: Props) {\n        const tileLayer = new window.PIXI.tilemap.CompositeRectTileLayer(0, [props.texture]);\n        return tileLayer;\n    },\n\n    applyProps(instance, oldProps: Props, props: Props) {\n        const {objects, tileset, spritesheet} = props;\n        instance.clear();\n        for (let i = 0; i < objects.length; i++) {\n            const w = tileset.tilewidth;\n            const h = tileset.tileheight;\n            const x = objects[i].location[0] * w;\n            const y = objects[i].location[1] * h;\n\n            const spriteId = `${tileset.name}-${(objects[i]).gid}`;\n            instance.addFrame(spritesheet.textures[spriteId], x, y);\n        }\n    }\n});\n\nexport default ObjectTileLayer;\n\n","import { Item } from 'definitions/items/types';\n\n\nexport interface SceneStoreState {\n    tileObjects: TileObject[];\n    actors: ActorObject[];\n    caches: { [key: string]: LootCache }\n    actionQueue?: SceneAction[];\n}\n\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\nexport interface TileObject {\n    id: number;\n    name?: string;\n    type: string;\n    gid: number;\n    location: [number, number];\n};\n\nexport type ActorObject = {\n    name: string;                   // todo: refactor to id\n    location: [number, number];\n    health: number; \n};\n\n // export type Actor = SceneObject & {\n//     type: \"actor\";\n//     //allegiance: Allegiance;\n//     health: number;\n//     //remainingAP: number;\n// }\n\n\nexport interface LootCache {\n    title: string;\n    items: Item[];\n    gold?: number;\n}\n\nexport interface SceneAction {\n    actionType: SceneActionType;\n    actor: string;\n    target: [number, number];\n    endsAt: number;\n}\n\nexport enum SceneActionType {\n    move = \"move\"\n    // todo: interact?\n}\n","import React, { useState } from 'react';\nimport { TiledMapData, TiledLayerData, TiledTilesetData, TiledLayerType } from 'constants/tiledMapData';\nimport { Container, Text } from '@inlet/react-pixi';\nimport { useEffect } from 'react';\nimport { SpritesheetData, SpriteData } from 'constants/spritesheetData';\nimport RectTileLayer from 'components/pixi/tile/RectTileLayer';\nimport * as PIXI from 'pixi.js';\nimport { loadResource } from 'utils/pixiJs';\nimport { TileObject } from 'stores/scene';\nimport ObjectTileLayer from 'components/pixi/tile/ObjectTileLayer';\n\ninterface Props {\n    basePath: string;\n    data: TiledMapData;\n    tileObjects: TileObject[]; // Objects that don't move\n}\n\nconst DEBUG = false;\n\nconst Tilemap = (props: Props) => {\n    const {basePath, data, tileObjects} = props;\n    const [layers, setLayers] = useState<JSX.Element[]>();\n    const [debug, setDebug] = useState<JSX.Element[]>();\n\n    useEffect(() => {\n        const spritesheetData = parseSpritesheetData(data);\n        const tileset = getTileset(data);\n        loadResource(`${basePath}/${tileset.image}`, (resource) => {\n            const texture = resource.texture;\n            if (!texture) return;\n            PIXI.utils.clearTextureCache();\n            const spritesheet = new PIXI.Spritesheet(texture, spritesheetData);\n    \n            spritesheet.parse(() => {\n                const allLayers = data.layers.filter(l => l.visible && l.type === TiledLayerType.tilelayer).map(layer => {\n                     return createTileLayer(layer, texture, data.width, tileset, spritesheet);\n                });\n                allLayers.push(createObjectLayer(tileObjects, texture, tileset, spritesheet));\n                setLayers(allLayers);\n                \n                if (DEBUG){\n                    setDebug(getDebug(data.layers[0].data.length, data.layers[0].width, tileset.tilewidth, tileset.tileheight))\n                }\n            });\n    \n        })\n    }, [basePath, data, tileObjects]);\n    return (\n        <Container >\n            {layers}\n            {debug}\n        </Container>\n    );\n}\n\nexport default Tilemap;\n\nconst getDebug = (tileCount: number, columns: number, tileWidth: number, tileHeight: number) => {\n    const elements = [];\n    for (let i = 0 ; i < tileCount ; i++) {\n        const location = [(i % columns),  Math.floor(i / columns)];\n        const x = location[0] * tileWidth;\n        const y = location[1] * tileHeight;\n        var style = {\n            font : 'bold italic 36px Arial',\n            fill : '#F7EDCA',\n            stroke : '#4a1850',\n            strokeThickness : 5,\n            wordWrap : true,\n            wordWrapWidth : 440\n        };\n        // tile index\n        elements.push(<Text key={`${x},${y}`} style={style} text={`${i}`} x={x} y={y} />);\n        // // blocked\n        // elements.push(<Graphics\n        //     key={`blocked_${x},${y}`}\n        //     x={x} y={y}\n        //     draw={graphics => {\n        //         const line = 3;\n        //         const blocked = blockedTiles.some((loc) => loc[0] === location[0] && loc[1] === location[1]);\n        //         const color = blocked ? 0xFF3300 : 0x00FF00;\n        //         graphics.lineStyle(line, color);\n        //         graphics.drawRect(line / 2, line / 2, tileWidth - line / 2, tileHeight - line / 2);\n        //         graphics.endFill();\n        //     }}\n        // />)\n    }\n    return elements;\n}\n\nconst getTileset = (mapData: TiledMapData) => {\n    if (!mapData.tilesets.length) {\n        throw new Error(\"No tilesets found! Can't continue\");\n    }\n    if (mapData.tilesets.length > 1) {\n        console.warn(\"Found more than one tileset. But we currently only support one.\");\n    }\n    if (mapData.tilesets[0].source) {\n        throw new Error(\"Please embed tilemaps in Tiled! Can't continue\");\n    }\n    return mapData.tilesets[0];\n}\n\nconst createTileLayer = (layer: TiledLayerData, texture: PIXI.Texture, horizontalTiles: number, tileset: TiledTilesetData, spritesheet: PIXI.Spritesheet) => {\n    return (\n        <RectTileLayer\n            key={layer.name}\n            texture={texture} \n            layer={layer} \n            horizontalTiles={horizontalTiles}\n            tileset={tileset}\n            spritesheet={spritesheet}\n        />\n    );\n}\nconst createObjectLayer = (objects: TileObject[], texture: PIXI.Texture, tileset: TiledTilesetData, spritesheet: PIXI.Spritesheet) => {\n    return (\n        <ObjectTileLayer\n            key={\"objects\"}\n            objects={objects}\n            texture={texture} \n            tileset={tileset}\n            spritesheet={spritesheet}\n        />\n    );\n}\n\nconst parseSpritesheetData = (mapData: TiledMapData): SpritesheetData => {\n    const tileset = getTileset(mapData);\n    const columns = tileset.columns;\n\n    const frames: { [name: string]: SpriteData } = {};\n    for (let i = 0; i < tileset.tilecount; i++) {\n        const w = tileset.tilewidth;\n        const h = tileset.tileheight;\n        const x = (i % columns) * w;\n        const y = Math.floor(i / columns) * h;\n\n        frames[`${tileset.name}-${i + tileset.firstgid}`] = { \n            frame: {x, y, w, h},\n            spriteSourceSize: {x, y, w, h},\n            rotated: false,\n            trimmed: false,\n            sourceSize: { w, h}\n        };\n    }\n    const image = tileset.image;\n    const size = { w: tileset.imagewidth, h: tileset.imageheight };\n    return {\n        frames,\n        meta: {\n            image,\n            size,\n            scale: 1\n        }\n    };\n}\n","import React, { useRef, forwardRef, useImperativeHandle } from \"react\";\nimport { Graphics } from '@inlet/react-pixi';\n\ninterface Props {\n\n}\n\nexport interface RefActions {\n    drawAction: (from: PIXI.Point, to: PIXI.Point, allowed?: boolean) => void;\n    clear: () => void;\n}\n/**\n * ActionPath shows a line previewing the action the user is taking on a scene\n * @param props \n */\nconst ActionPath = forwardRef((props: Props, ref: React.Ref<RefActions>) => {\n    const graphicsRef = useRef<PIXI.Graphics>(null);\n  \n    useImperativeHandle(ref, () => ({\n        drawAction: (from: PIXI.Point, to: PIXI.Point, allowed: boolean = true)=> {\n            const grfx = graphicsRef.current;\n            if (!grfx) return; \n            const color = allowed ? 0x00FF00 : 0xFF3300;\n            grfx.clear()\n                .lineStyle(3, color)\n                .moveTo(from.x, from.y)\n                .lineTo(to.x, to.y);\n        },\n        clear: () => { \n            const grfx = graphicsRef.current;\n            grfx?.clear();\n        }\n    }));\n\n    return (\n        <Graphics\n            name=\"ActionPath\"\n            ref={graphicsRef}\n        />\n    )\n});\n\nexport default ActionPath;\n\n","import React from \"react\";\nimport { ReactReduxContext, Provider } from 'react-redux';\nimport { Stage } from '@inlet/react-pixi';\n\n// Contexts are not passed through the reconcilers with the new Context API. \n// This means we lose the redux context\n// Create a wrapper component that consumes the context and provides it again in the new reconciler context:\n// https://github.com/inlet/react-pixi/issues/77\nconst BridgedStage = (props: React.ComponentProps<typeof Stage>) => {\n    const { children, ...restProps } = props;\n    return (\n        <ReactReduxContext.Consumer>\n            {({ store }) => (\n                <Stage {...restProps}>\n                    <Provider store={store}>\n                        {children}\n                    </Provider>\n                </Stage>\n            )}\n        </ReactReduxContext.Consumer>\n    );\n}\n  \n\nexport default BridgedStage;\n","import { Container } from '@inlet/react-pixi';\nimport React, { useMemo,  useEffect, useRef, useCallback } from 'react';\nimport { SceneActionType, SceneAction } from 'stores/scene';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { completeSceneAction } from 'actions/quests';\nimport { StoreState } from 'stores';\nimport { gsap } from 'gsap';\nimport { BaseSceneController } from 'mechanics/scenes/BaseSceneController';\n\ninterface Props  {\n    actor: string;\n    tileWidth: number;\n    tileHeight: number;\n    controller: BaseSceneController;\n    location?: [number, number]; // tile coordinate space \n    children: React.ReactNode;\n};\n\n// This is a wrapper that exposes a location property. Will set x and y on children\nconst SceneActor = (props: Props) => {\n    const { \n        location = [0, 0],\n        tileWidth = 0, \n        tileHeight = 0,\n        children\n    } = props;\n\n    const actorRef = useRef<PIXI.Container>(null);\n    const dispatch = useDispatch();\n    \n    const actionQueueSelector = useCallback(\n        (state: StoreState) => {\n            const quest = state.quests.find((q) => q.name === props.controller.questName)!;\n            if (!quest.scene!.actionQueue) {\n                return [];\n            }\n            return quest.scene!.actionQueue.filter(a => a.actor === props.actor);\n        },  \n        [props.actor, props.controller.questName]\n    );\n    const actionQueue = useSelector<StoreState, SceneAction[]>(actionQueueSelector);\n\n    //Handle actions \n    useEffect(() => {\n        if (!actorRef) {\n            return;\n        }\n        const nextAction = actionQueue[0];\n        if (nextAction) {\n            switch (nextAction.actionType) {\n                case SceneActionType.move: {\n                    const moveComplete = () => {\n                        dispatch(completeSceneAction(props.controller.questName));\n                        props.controller.actorMoved(props.actor, nextAction.target);\n                    }\n                    const duration = (nextAction.endsAt - performance.now()) / 1000;\n                    if (duration < 0) {\n                        moveComplete();\n                    }\n                    gsap.killTweensOf(actorRef.current);\n                    gsap.to(actorRef.current, {\n                        duration,\n                        ease: \"linear\",\n                        pixi: {\n                            x: nextAction.target[0] * tileWidth,\n                            y: nextAction.target[1] * tileHeight\n                        },\n                        onComplete: moveComplete\n                    });\n\n                    break;\n                }\n            }\n        }\n    }, [dispatch, tileWidth, tileHeight, actionQueue, props.controller, props.actor]);\n\n    const {x, y} = useMemo(() => {\n        return { \n            x: location[0] * tileWidth,\n            y: location[1] * tileHeight,\n        };\n    }, [location, tileWidth, tileHeight]);\n\n    return (\n        <Container x={x} y={y} ref={actorRef}>\n            {children}\n        </Container>\n    )\n};\n\nexport default SceneActor;\n","import { useCallback } from 'react';\nimport { StoreState } from 'stores';\nimport { useSelector } from 'react-redux';\nimport { QuestStoreState } from 'stores/quest';\n\n// Returns the quest from redux store\nconst useQuest = (questName: string) => {\n    const questSelector = useCallback(\n        (state: StoreState) => state.quests.find((q) => q.name === questName)!, \n        [questName]\n    );\n    const quest = useSelector<StoreState, QuestStoreState>(questSelector);\n    return quest;\n}\n\nexport default useQuest;","import React, { useEffect, useState, useRef, useMemo } from \"react\";\nimport { Container, Graphics, Sprite } from '@inlet/react-pixi';\nimport { useDispatch } from 'react-redux';\nimport Tilemap from './Tilemap';\nimport ActionPath, { RefActions } from './ActionPath';\nimport { SceneAction, SceneActionType, ActorObject } from 'stores/scene';\nimport { enqueueSceneAction } from 'actions/quests';\nimport BridgedStage from 'components/pixi/util/BridgedStage';\nimport SceneActor from './SceneActor';\nimport { BaseSceneController } from 'mechanics/scenes/BaseSceneController';\nimport useQuest from 'hooks/useQuest';\n\nimport * as PIXI from 'pixi.js';\nwindow.PIXI = PIXI;\n// eslint-disable-next-line import/first\nimport 'pixi-tilemap'; // tilemap is not a real npm module :/\n\nexport interface Props {\n    questName: string;\n    controller: BaseSceneController;\n    selectedActor: string;\n    setSelectedActor: (actor: string) => void;\n    onLootCacheChanged: (value: string) => void; // todo: opens loot cache popup\n}\n\nconst DEBUG_ASTAR = false;\nconst DEBUG_ACTIONQUEUE = false;\n\nconst Scene = (props: Props) => {\n    const {controller} = props;\n    const [actionActor, setActionActor] = useState<ActorObject|null>(null); // actor that the player is performing an action on\n \n    const mapData = controller.mapData!;\n    const basePath = controller.basePath!;\n    \n    \n    const dispatch = useDispatch();\n    const ref = useRef<PIXI.Container>(null);\n    \n    const quest = useQuest(props.questName);\n\n    const scene = quest.scene!;\n        \n    const selectedActor = useMemo(() => {\n        return scene.actors?.find(a => a.name === props.selectedActor) || null;\n    }, [scene.actors, props.selectedActor])\n\n    const handleActorStartDrag = (actor: ActorObject) => {\n        if(!scene.actionQueue || scene.actionQueue.length === 0){\n            setActionActor(actor);\n        }\n        props.setSelectedActor(actor.name);\n    }\n\n    const handleCancelAction = (event: PIXI.interaction.InteractionEvent) => {\n        setActionActor(null);\n        event.stopPropagation();\n    }\n\n    // Queue actions\n    const handleActorEndDrag = (event: PIXI.interaction.InteractionEvent) => {\n        if(scene.actionQueue?.length || !actionActor) {\n            return;\n        }\n        props.onLootCacheChanged(\"chest\"); // todo: remove!!\n\n        const location = controller.pointToSceneLocation(new PIXI.Point(event.data.global.x, event.data.global.y));\n        const blocked = controller.locationIsBlocked(location);\n        if (!blocked) {\n            const target = controller.pointToSceneLocation(event.data.global);\n\n            const convertLocation = (location: [number, number]) => {\n                // This is the format AStarFind works with\n                return { x: location[0], y: location[1] }\n            }\n            const origin = actionActor.location;\n            const path = controller.aStar?.findPath(convertLocation(origin), convertLocation(target));\n\n            const movementDuration = 500; // time every tile movement takes\n            path?.forEach((location, index) => {\n                const sceneAction: SceneAction = {\n                    actionType: SceneActionType.move,\n                    actor: actionActor!.name,\n                    target: location as [number, number],\n                    endsAt: movementDuration * (index + 1) + performance.now()\n                };\n                dispatch(enqueueSceneAction(props.questName, sceneAction));\n            });\n\n            if (DEBUG_ASTAR) {\n                const graphics = new PIXI.Graphics();\n                path?.forEach((tile) => {\n                    const [x, y] = tile;\n                    const stroke = 3;\n                    graphics.beginFill(0xDE3249, 0.5);\n                    graphics.lineStyle(stroke, 0xFF0000);\n                    graphics.drawRect(x * mapData.tilewidth + stroke / 2, \n                        y * mapData.tileheight + stroke / 2, \n                        mapData.tilewidth - stroke / 2, \n                        mapData.tileheight - stroke / 2);\n                    graphics.endFill();\n                });\n                ref.current!.addChild(graphics);\n                setTimeout(() => { \n                    ref.current?.removeChild(graphics)}\n                , 1000);\n            }\n\n        }\n        setActionActor(null);\n        const actionPath = actionPathRef.current;\n        actionPath?.clear();\n    }\n\n    const sceneWidth = mapData.width * mapData.tilewidth;\n    const sceneHeight = mapData.height * mapData.tileheight;\n\n    // Draw a line to indicate the action to take\n    const actionPathRef = useRef<RefActions>(null);\n    useEffect(() => {\n        const container = ref.current;\n        const actionPath = actionPathRef.current;\n        if (!container || !actionActor || scene.actionQueue?.length) return;\n        const actionOriginLocation = actionActor.location;\n        const mouseMove = (event: PIXI.interaction.InteractionEvent) => {\n            if (container && actionPath && mapData && actionActor) {\n                // Find out if on a blocked tile\n                const location = controller.pointToSceneLocation(new PIXI.Point(event.data.global.x, event.data.global.y));\n                const blocked = controller.locationIsBlocked(location);\n                const from = new PIXI.Point(actionOriginLocation[0] * mapData.tilewidth + mapData.tilewidth / 2, \n                    actionOriginLocation[1] * mapData.tileheight + mapData.tileheight / 2);\n                    \n                // Draw a line to the destination tile\n                actionPath.drawAction(from, event.data.global, !blocked);\n            }\n        }\n        container.on('pointermove', mouseMove);\n        return () => {\n            container.off('pointermove', mouseMove);\n        }\n    }, [mapData, actionActor, controller, scene.actionQueue]);\n\n    const renderActor = (actor: ActorObject) => {\n        const {name, location} = actor;\n        return (\n            <SceneActor\n                key={name}\n                actor={name}\n                controller={controller}\n                tileWidth={mapData.tilewidth}\n                tileHeight={mapData.tilewidth}\n                location={location}\n            >\n                {selectedActor?.name === name && (\n                    <Graphics\n                        name=\"selectioncircle\"\n                        draw={graphics => {\n                            const line = 3;\n                            graphics.lineStyle(line, 0xFFFFFF);\n                            graphics.drawCircle(mapData.tilewidth / 2, mapData.tileheight / 2, mapData.tilewidth / 2 - line);\n                            graphics.endFill();\n                        }}\n                    />\n                )}\n                <Sprite                     \n                    y={-80}\n                    image={`${process.env.PUBLIC_URL}/img/scene/actors/wizard.png`} \n                    interactive={true}\n                    pointerdown={() => handleActorStartDrag(actor)}\n                    pointerup={handleCancelAction}\n                    pointerupoutside={handleActorEndDrag}\n                />\n                { (selectedActor?.name === name && controller.actorCanInteract(selectedActor.name)) && (\n                    <Container\n                        interactive\n                        pointerdown={() => {controller.actorInteract(selectedActor.name)}}\n                    >\n                        <Graphics\n                            draw={graphics => {\n                                graphics.beginFill(0xDE3249);\n                                graphics.drawCircle(mapData.tilewidth / 2, mapData.tileheight, mapData.tilewidth / 4);\n                                graphics.endFill();\n                            }}\n                        />\n                        <Sprite \n                            image={`${process.env.PUBLIC_URL}/img/ui/scene/icons/interact.png`}\n                            scale={[.3, .3]} \n                            y={mapData.tileheight}\n                            x={mapData.tilewidth/2}\n                            anchor={.5}\n                    />\n                    </Container>\n                )}\n            </SceneActor>\n        );\n        \n    }\n\n\n    return (\n        <>\n            <BridgedStage width={sceneWidth} height={sceneHeight}>\n                <Container \n                    ref={ref}\n                    interactive={true} \n                    hitArea={new PIXI.Rectangle(0, 0, sceneWidth, sceneHeight)}\n                >\n                    <Tilemap \n                        basePath={basePath} \n                        data={mapData} \n                        tileObjects={scene.tileObjects}    \n                    />\n                    <ActionPath\n                        ref={actionPathRef}\n                    />\n                    { /** todo: create SceneAventurer  */\n                    scene.actors?.map((o) => renderActor(o))}\n                </Container>\n            </BridgedStage>           \n            {DEBUG_ACTIONQUEUE && (\n                <div style={{ position: 'absolute', bottom: 0}}>\n                    <h2>ActionQueue</h2>\n                    <ul>\n                        {scene.actionQueue && scene.actionQueue.map((action) => (\n                            <li key={JSON.stringify(action)}>{JSON.stringify(action)}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default Scene;\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport \"./css/questPanel.css\";\nimport AdventurerTabstrip from './AdventurerTabstrip';\nimport { createSelectAdventurersOnQuest } from 'selectors/adventurers';\nimport { useSelector } from 'react-redux';\nimport AdventurerPanel from './AdventurerPanel';\nimport QuestDetails from './QuestDetails';\nimport { useHistory } from 'react-router';\nimport { getWorldLink } from 'utils/routing';\nimport LootCache from './modals/LootCache';\n\nenum Layout {\n    auto,       // horizontal on large screens, vertical on small screens\n    vertical,   \n    horizontal\n}\n\ninterface Props {\n    questName: string;\n    layout?: Layout;\n}\n\nconst QuestPanel = (props: Props) => {\n    const history = useHistory();\n    const {layout = Layout.auto} = props;\n    const adventurers = useSelector(createSelectAdventurersOnQuest(props.questName));\n    const [activeLootCache, setActiveLootCache] = useState<string>();\n    const leader = adventurers[0];\n    const [selectedAdventurerId, setSelectedAdventurerID] = useState<string>(leader?.id);\n\n    const selectedAdventurer = useMemo(() => {\n        return adventurers.find(a => a.id === selectedAdventurerId);\n    }, [adventurers, selectedAdventurerId]);\n\n    const handleLootCacheChanged = (value: string) => {\n        setActiveLootCache(value);\n\n    }\n\n    const handleAdventurerSelected = (adventurerId: string) => {\n        setSelectedAdventurerID(adventurerId);\n    }\n    \n    useEffect(() => {\n        if (!adventurers.length) {\n            // no adventurers, something went wrong, perhaps invalid url\n            // bounce back to world\n            history.push(getWorldLink());\n       }\n    }, [adventurers.length, history]);\n    if (!adventurers.length) return null;\n\n    return (\n        <div className={`quest-panel quest-panel-${Layout[layout]}`}>\n            <div className=\"quest-area\">\n                <QuestDetails \n                    questName={props.questName} \n                    selectedActor={selectedAdventurerId}\n                    onLootCacheChanged={handleLootCacheChanged}\n                    setSelectedActor={handleAdventurerSelected}\n                />\n                { activeLootCache && (\n                    <div className=\"modal\" onClick={() => setActiveLootCache(undefined)}>\n                        <LootCache \n                            questName={props.questName} \n                            cacheName={activeLootCache}\n                            adventurerId={selectedAdventurerId}\n                            onClose={() => setActiveLootCache(undefined)}\n                        />\n                    </div>\n                )}\n            </div>\n            <div className=\"party-area\">\n                <AdventurerTabstrip \n                    adventurers={adventurers} \n                    selectedAdventurerId={selectedAdventurerId}\n                    onAdventurerTabSelected={handleAdventurerSelected}\n                    disabled={activeLootCache !== undefined}\n                />\n                <div className=\"adventurer-details\">\n                    { selectedAdventurer && (\n                        <AdventurerPanel adventurer={selectedAdventurer} />\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default QuestPanel;\n","import React from 'react';\nimport Scene from 'components/world/QuestPanel/QuestDetails/Scene';\nimport { useSceneController } from 'hooks/useSceneController';\nimport { SceneStoreState } from 'stores/scene';\nimport useQuest from 'hooks/useQuest';\n\nexport interface Props {\n    questName: string;\n    selectedActor: string;\n    setSelectedActor: (actor: string) => void;\n    onLootCacheChanged: (value: string) => void;\n}\n\nconst QuestDetails = (props: Props) => {\n //     {/* <h1 className=\"app-h2\">{TextManager.getQuestTitle(quest.name)}</h1> */}\n\n    const quest = useQuest(props.questName);\n\n    if (!quest.sceneName) {\n        return null;\n    }\n\n    return (\n        <SceneLoader {...props} sceneName={quest.sceneName} scene={quest.scene} />\n    );\n}\n\nexport default QuestDetails;\n\ntype SceneLoaderProps = Props & { \n    sceneName: string;\n    scene?: SceneStoreState;\n}\n\n// Ensures a sceneController is present with tilemap data loaded and quest scene data is present on the store\nconst SceneLoader = (props: SceneLoaderProps) => {\n    const { controller, loaded } = useSceneController(props.questName, props.sceneName);\n    if (!props.scene || !loaded || !controller.mapData) {\n        return null;\n    }\n    return (\n        <Scene {...props} controller={controller} />\n    )\n}\n","import { useStore } from 'react-redux';\nimport { SceneControllerManager } from 'global/SceneControllerManager';\nimport { useEffect, useState, useMemo } from 'react';\nimport { StoreState } from 'stores';\n\nexport const useSceneController = (questName: string, sceneName: string) => {\n    const store = useStore<StoreState>();\n    const controller = useMemo(() => (\n        SceneControllerManager.getSceneController(questName, sceneName, store)\n    ), [questName, sceneName, store]);\n    const [loaded, setLoaded] = useState<boolean>(false);\n\n    const storeState = store.getState();\n    const quest = storeState.quests.find(q => q.name === questName)!;\n    const {scene} = quest;\n\n    useEffect(() => {\n        if (sceneName) {\n            setLoaded(false);\n            const loadingComplete = () => {\n                setLoaded(true);\n                \n                // If the store has no scene for this quest yet, create and store it!\n                if (!scene) {\n                    controller.createScene();\n                }\n            }\n            controller.loadData(loadingComplete);\n        }\n    }, [controller, questName, scene, sceneName]);\n\n    return { controller, loaded };\n}","import itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"global/TextManager\";\nimport \"components/ui/css/common/icon.css\";\nimport \"./css/itemsList.css\";\nimport DraggableItemIcon from 'components/ui/DraggableItemIcon';\nimport { DragSourceType } from 'constants/dragging';\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n    sourceType: DragSourceType;\n    sourceId?: string;\n}\n\n/**\n * The ItemsList displays a list of items vertically. Shows icon and description\n */\nconst DraggableItemsList = (props: Props) => {\n    const className = (props.className || \"\") + \" itemsbox\";\n\n    return (\n        <ul className={className} >\n            {props.items.map((item, index) => (\n                <li \n                    key={`${item}${index}`} \n                    className=\"item\"\n                >\n                    <DraggableItemIcon \n                        item={item} \n                        index={index}\n                        sourceId={props.sourceId}\n                        sourceType={props.sourceType}\n                    />\n                    {TextManager.getItemName(item) }\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default DraggableItemsList;\n","import { useCallback } from 'react';\nimport { StoreState } from 'stores';\nimport { useSelector } from 'react-redux';\nimport { AdventurerStoreState } from 'stores/adventurer';\n\n// Returns the adventurer from redux store\nconst useAdventurer = (adventurerId: string) => {\n    const adventurerSelector = useCallback(\n        (state: StoreState) => state.adventurers.find((q) => q.id === adventurerId)!, \n        [adventurerId]\n    );\n    const quest = useSelector<StoreState, AdventurerStoreState>(adventurerSelector);\n    return quest;\n}\n\nexport default useAdventurer;","import React, { useState, useMemo, useEffect } from \"react\";\nimport \"./lootCache.css\";\nimport useQuest from 'hooks/useQuest';\nimport DraggableItemsList from 'components/ui/items/DraggableItemsList';\nimport { TextManager } from 'global/TextManager';\nimport AdventurerAvatar from 'components/ui/AdventurerAvatar';\nimport useAdventurer from 'hooks/useAdventurer';\nimport { DragSourceType } from 'constants/dragging';\nimport { Item } from 'definitions/items/types';\nimport { useDispatch } from 'react-redux';\nimport { addGold } from 'actions/gold';\nimport { takeGoldFromCache } from 'actions/quests';\nimport { addItemToInventory } from 'actions/adventurers';\n\ninterface Props {\n    questName: string;   \n    cacheName: string;\n    adventurerId: string;\n    onClose: () => void;\n}\n\nconst LootCache = (props: Props) => {\n    const dispatch = useDispatch();\n    const quest = useQuest(props.questName);\n    const {scene} = quest;\n    const cache = scene?.caches[props.cacheName];\n    const adventurer = useAdventurer(props.adventurerId);\n\n    if (!cache) {\n        return null;\n    }\n\n    const handleTakeGold = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        // todo: animate gold flying away\n        \n        dispatch(addGold(cache.gold || 0));\n        dispatch(takeGoldFromCache(props.questName, props.cacheName))\n    } \n\n    const handleTakeAllItems = (e: React.MouseEvent) => {\n        e.stopPropagation();\n\n        cache.items.forEach((item) => {\n            ///console.log(item)\n            dispatch(addItemToInventory(props.adventurerId, item))\n        })\n    }\n\n    return (\n        <div className=\"lootCache\">\n            <div className=\"header\">\n                <div className=\"title\">\n                    {cache.title}\n                </div>\n                <div className=\"close\" onClick={props.onClose}>\n                </div>\n            </div>\n            { cache.items.length > 0 && (\n                <div className=\"content\">\n                    <div className=\"items\">\n                        <DraggableItemsList \n                            items={cache.items}\n                            sourceType={DragSourceType.lootCache}\n                            sourceId={props.cacheName}\n                        />\n                    </div>\n                    <div className=\"adventurer\">\n                        <AdventurerAvatar adventurer={adventurer}/>\n                        <button onClick={handleTakeAllItems}>\n                            {TextManager.get(\"quest-common-loot-cache-take-all\")}\n                        </button>\n                    </div>\n                </div>\n            )}\n            { !!cache.gold && (\n                <div className=\"content\">\n                    <div className=\"gold\">\n                        <div \n                            className=\"icon common-icon-medium\" \n                            style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/img/resources/gold.png)`}}>\n                        </div>\n                        {TextManager.get(\"quest-common-loot-cache-gold\", { gold: cache.gold })}\n                    </div>\n                    <div className=\"take-gold\">\n                        <button onClick={handleTakeGold}>\n                            {TextManager.get(\"quest-common-loot-cache-take\")} \n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default LootCache;","import SquareIconButton from \"components/ui/buttons/SquareIconButton\";\r\nimport Tab from \"components/ui/tabs/Tab\";\r\nimport Tabstrip from \"components/ui/tabs/Tabstrip\";\r\nimport * as React from \"react\";\r\nimport {LogChannel, LogEntry} from \"stores/logEntry\";\r\nimport {TextManager} from \"global/TextManager\";\r\nimport \"./css/simplelog.css\";\r\nimport {useState} from 'react';\r\nimport {StoreState} from 'stores';\r\nimport {useSelector} from 'react-redux';\r\nimport {QuestStoreState} from 'stores/quest';\r\nimport {selectActiveQuests} from 'selectors/quests';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\nenum ChannelType {\r\n    all,\r\n    town,\r\n    quest,\r\n}\r\n\r\ninterface ChannelDefinition {\r\n    label: string;\r\n    tabType: ChannelType;\r\n    tabId: string;\r\n    channelContext?: string;\r\n}\r\n\r\nconst SimpleLog = (props: Props) => {\r\n\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [selectedTabId, setSelectedTabId] = useState(\"all\");\r\n\r\n    const logEntries = useSelector<StoreState, LogEntry[]>((store) => store.log);\r\n    const activeQuests = useSelector<StoreState, QuestStoreState[]>((store) => selectActiveQuests(store));\r\n\r\n\r\n    const channels: ChannelDefinition[]=[{\r\n        label: TextManager.get(\"ui-log-tab-all\"),\r\n        tabId: \"all\",\r\n        tabType: ChannelType.all,\r\n    }, {\r\n        label: TextManager.get(\"ui-log-tab-town\"),\r\n        tabId: \"town\",\r\n        tabType: ChannelType.town,\r\n    }];\r\n\r\n    const handleTabSelected=(tabId: string) => {\r\n        setSelectedTabId(tabId);\r\n    }\r\n    \r\n    const handleToggleExpand=() => {\r\n        setExpanded(!expanded);\r\n    }\r\n\r\n    activeQuests.forEach((quest) => {\r\n        const questName=quest.name;\r\n        channels.push({\r\n            channelContext: questName,\r\n            label: TextManager.getQuestTitle(questName),\r\n            tabId: `quest-${questName}`,\r\n            tabType: ChannelType.quest,\r\n        });\r\n    });\r\n\r\n    let displayEntries: LogEntry[]=[];\r\n    const currentTab=channels.find((t) => t.tabId === selectedTabId)!;\r\n    switch (currentTab.tabType) {\r\n        case ChannelType.all:\r\n            // All the things\r\n            displayEntries=logEntries;\r\n            break;\r\n\r\n        case ChannelType.town:\r\n            // Only town\r\n            displayEntries=logEntries.filter((lE) => lE.channel === LogChannel.town);\r\n            break;\r\n\r\n        case ChannelType.quest:\r\n            // Only the selected quest\r\n            displayEntries=logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.channelContext === currentTab.channelContext);\r\n            break;\r\n}\r\n\r\n    const getLogEntryRow=(logEntry: LogEntry) => {\r\n        const text = TextManager.get(logEntry.key, logEntry.context);\r\n        return <div className=\"entry\" key={logEntry.time}>\r\n            {text}\r\n        </div>;\r\n    };\r\n\r\n    const Tabs=channels.map((tab) => {\r\n        return <Tab id={tab.tabId} key={tab.tabId} >{tab.label}</Tab>;\r\n    });\r\n\r\n    return <div className={`log ${expanded ? \"expanded\" : \"\"}`}>\r\n        <div className=\"tab-bar\">\r\n            <Tabstrip className=\"tabs\" onTabSelected={handleTabSelected} activeTab={selectedTabId}>\r\n                {Tabs}\r\n            </Tabstrip>\r\n            <SquareIconButton className=\"expand-button\" onClick={() => handleToggleExpand()} text={expanded ? \"▼\" : \"▲\"}/>\r\n        </div>\r\n        <div className=\"log-entries\">\r\n            {displayEntries.map((entry) => getLogEntryRow(entry))}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default SimpleLog;\r\n","import WorldMap from \"components/world/WorldMap\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { MusicTrack, SoundManager, Sound } from \"global/SoundManager\";\r\nimport \"./css/worldView.css\";\r\nimport QuestPanel from './QuestPanel';\r\nimport { useRouteMatch, useHistory } from 'react-router';\r\nimport { getQuestLink, getWorldLink } from 'utils/routing';\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\n\r\n/**\r\n * WorldView shows the map and QuestPanel\r\n * @param props\r\n */\r\nconst WorldView = () => {\r\n    const worldMapRef = useRef<HTMLDivElement>(null);\r\n    const match = useRouteMatch(`${getWorldLink()}/:questname`);\r\n    const selectedQuestName = match?.params['questname'];\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\r\n        SoundManager.playMusicTrack(MusicTrack.world);\r\n    }, []);\r\n\r\n    // console.log(params.questname);\r\n    // const handleMapMove = (distance: number, angle: number) => {\r\n    //     const compassEl = compassRef!.current!;\r\n    //     const compassTextEl = compassEl.firstElementChild! as HTMLElement;\r\n\r\n    //     // Rotate the compass\r\n    //     compassEl.style.transform = `rotate(${angle - (Math.PI / 2)}rad)`;\r\n    //     compassEl.style.opacity = distance > 10 ? \"1\" : \"0\";\r\n    //     compassTextEl.style.transform = `rotate(${-angle + (Math.PI / 2)}rad)`;\r\n    //     compassTextEl.innerHTML = `${distance.toFixed(0)}`;\r\n    // };\r\n\r\n    // const handleCompassClick = () => {\r\n    //     //setScrollToPosition(new Vector2(1, 1));\r\n    // };\r\n\r\n    const handlePartyClick = (questName: string) => {\r\n        if (questName === selectedQuestName) {\r\n            history.push(getWorldLink());\r\n        } else {\r\n            history.push(getQuestLink(questName));\r\n        }\r\n        SoundManager.playSound(Sound.buttonClick);\r\n    };\r\n\r\n    const handleRetrieveWorldViewRef = () => {\r\n        return worldMapRef;\r\n    }\r\n\r\n    return (\r\n        <div className=\"world-view\" ref={worldMapRef}>\r\n            {/* <div className=\"compass\" ref={compassRef} onClick={handleCompassClick}>\r\n                <div className=\"distance\"/>\r\n            </div> */}\r\n            <WorldMap\r\n                selectedQuestName={selectedQuestName}\r\n                // onMapMove={handleMapMove}\r\n                smallMap={selectedQuestName != null}\r\n                onPartyClick={handlePartyClick}\r\n                retrieveWorldViewRef={handleRetrieveWorldViewRef}\r\n            />\r\n            { selectedQuestName && (\r\n                <QuestPanel questName={selectedQuestName} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorldView;\r\n","\nimport { subtractGold } from \"actions/gold\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/tooltip/context/ItemContext\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            const structureDefinition = getDefinition(structure);\n\n            dispatch(subtractGold(structureDefinition.cost.gold || 0));\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","import React, { useEffect, useRef, useState } from 'react';\nimport './css/tooltip.css';\nimport { TooltipManager } from 'global/TooltipManager';\n\nconst ARROW_SIZE = 8; // warning: sync to tooltip.css var\nconst PADDING = 8;\n\nexport interface Props {\n    referenceRect: ClientRect;  // place tooltip in reference to this rect\n    placement?: Placement;\n    children?: any;\n}\n\nexport enum Placement {\n    bottom,\n    top,\n    left,\n    right,\n}\n\nexport const Tooltip = (props: Props) => {\n    const {children, referenceRect} = props;\n    const ref = useRef<HTMLDivElement>(null);\n    const [placement, setPlacement] = useState<Placement>(props.placement || Placement.bottom);\n \n    const [containerRect, setContainerRect] = useState<ClientRect>(); // This is the \n\n    useEffect(() => {\n        // Reposition if needed\n        const tooltipElement = ref.current;\n        if (!tooltipElement) return;\n        if (!containerRect) return;\n        const tooltipRect = tooltipElement.getBoundingClientRect();\n\n        // Flip vertically\n        switch (placement) {\n            case Placement.top:\n                if (tooltipRect.top - tooltipRect.height - ARROW_SIZE - PADDING < containerRect!.top) {\n                    // Too high, place underneath\n                    setPlacement(Placement.bottom);\n                    return;\n                }\n                break;\n            case Placement.bottom:\n                if (tooltipRect.top + tooltipRect.height + ARROW_SIZE + PADDING > containerRect!.height ) {\n                    // Too low, place top\n                    setPlacement(Placement.top);\n                    return;\n                }\n                break;\n        }\n        tooltipElement.style.opacity = \"1\"; // animated through css\n\n        const contentElement = tooltipElement.querySelector(\".tooltip-content\") as HTMLElement;\n        if (tooltipRect.left < containerRect!.left + PADDING) {\n            // Check left bounding edge\n            const offset = containerRect!.left - tooltipRect.left + PADDING;\n            contentElement.style.transform = `translateX(${offset}px)`;\n        } else if (tooltipRect.right > containerRect!.right - PADDING) {\n            // Check right bounding edge\n            const offset = tooltipRect.right - containerRect!.right + PADDING;\n            contentElement.style.transform = `translateX(${-offset}px)`;\n        } else {\n            contentElement.style.transform = '';\n        }\n\n    }, [setPlacement, containerRect, placement, referenceRect]);\n\n    const resize = () => {\n        TooltipManager.clear();\n    }\n\n    useEffect(() => {\n        setContainerRect(ref.current?.closest('.app')?.getBoundingClientRect());\n\n        window.addEventListener(\"resize\", resize);\n        return () => {\n            window.removeEventListener(\"resize\", resize);\n        };\n    }, []);\n\n\n    let x: number = 0;\n    let y: number = 0;\n    let className: string = \"\";\n\n    if (containerRect) {\n        switch (placement) {\n            case Placement.bottom:\n                x = referenceRect.left - containerRect!.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect!.top + referenceRect.height;\n                className = \"tooltip-bottom\";\n                break;\n            case Placement.top:\n                x = referenceRect.left - containerRect!.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect!.top;\n                className = \"tooltip-top\";\n                break;\n        }    \n    }\n\n    return (\n        <div className = { `tooltip ${className}` }\n            style = {{\n                left: x,\n                opacity: 0,\n                top: y,\n            }}\n            ref = { ref }\n        >\n            <div className = \"tooltip-arrow\"></div>\n            <div className = \"tooltip-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\n\nexport default Tooltip;\n","\nimport { getDefinition as getApparelDefinition } from \"definitions/items/apparel\";\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport { DamageType, getDefinition as getWeaponDefinition } from \"definitions/items/weapons\";\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = getStructureDefinition(deedInfo.structure);\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n\n        case ItemType.weapon:\n            const weaponDefinition = getWeaponDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    <p> damage: { weaponDefinition.damage[DamageType.kinetic] } </p>\n                </>\n            );\n\n        case ItemType.apparel:\n            const apparelDefinition = getApparelDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    { apparelDefinition.armourRating && <p> armour: { apparelDefinition.armourRating } </p> }\n                </>\n            );\n\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","// tslint:disable: object-literal-sort-keys\r\nimport { ContextInfo, ContextType} from \"constants/context\";\r\nimport CombatView from \"containers/combat/CombatView\";\r\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\r\nimport { AppContextProps} from \"hoc/withAppContext\";\r\nimport { manifest} from \"manifest/app\";\r\nimport * as React from \"react\";\r\nimport { useRef, useState, createContext, useEffect } from \"react\";\r\nimport { DndProvider} from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { Link, Redirect, Route, Switch, HashRouter} from \"react-router-dom\";\r\nimport { Persistor} from \"redux-persist\";\r\nimport { PixiPlugin } from 'gsap/all';\r\nimport { gsap } from 'gsap';\r\nimport { Sound, SoundManager} from \"global/SoundManager\";\r\nimport { TextManager} from \"global/TextManager\";\r\nimport { Structure} from \"../definitions/structures\";\r\nimport debounce from \"debounce\";\r\nimport \"./css/app.css\";\r\nimport Preloader, { MediaItem, MediaType} from \"./preloading/Preloader\";\r\nimport TownView from './town/TownView';\r\nimport Toasts from './ui/toasts/Toasts';\r\nimport Topbar from './ui/topbar/Topbar';\r\nimport WorldView from './world/WorldView';\r\nimport SimpleLog from './log/SimpleLog';\r\nimport ContextTooltip from './ui/tooltip/ContextTooltip';\r\nimport { TooltipManager } from 'global/TooltipManager';\r\nimport { getWorldLink, getTownLink } from 'utils/routing';\r\n\r\nPixiPlugin.registerPIXI(PIXI);\r\ngsap.registerPlugin(PixiPlugin);\r\n\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport enum View {\r\n    Town,\r\n    World,\r\n}\r\n\r\nexport interface Props {\r\n    persistor: Persistor;\r\n}\r\n\r\ninterface SelectedContext {\r\n    contextType: ContextType ;\r\n    contextInfo: ContextInfo;\r\n    contextRect: ClientRect;\r\n}\r\n\r\nexport const MAX_WIDTH = 960;\r\n\r\nexport const AppContext = createContext<AppContextProps | null>(null);\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\n\r\nconst App = (props: AllProps) => {\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [media, setMedia] = useState<MediaItem[]>([]);\r\n    const [activeWindows, setActiveWindows] = useState<React.ReactElement[]>([]);\r\n\r\n    const handleViewButtonClick = () => {\r\n        SoundManager.playSound(Sound.buttonClick);\r\n    };\r\n\r\n    const handleResetClick = () => {\r\n        props.persistor.purge();\r\n        // todo: go to root \r\n        (window as any).location.reload();\r\n    };\r\n\r\n    const selectStructure = (structure: Structure | null) => {\r\n        if (structure) {\r\n            const displayName = TextManager.getStructureName(structure);\r\n\r\n            const window = <StructureDetailsView structure={structure} title={displayName}/>;\r\n            handleWindowOpened(window);\r\n\r\n            SoundManager.playSound(Sound.buttonClick);\r\n       }\r\n    };\r\n\r\n    const renderTownView = () => <TownView onStructureClick={selectStructure} />;\r\n    const renderWorldView = () => <WorldView />;\r\n\r\n    const handleWindowOpened = (window: React.ReactElement) => {\r\n        setActiveWindows([\r\n            ...activeWindows || [],\r\n            window,\r\n        ]);\r\n    };   \r\n\r\n    /**\r\n     * Closes all windows\r\n     */\r\n    const handleWindowClose = () => {\r\n        setActiveWindows([]);\r\n    };\r\n\r\n    /**\r\n     * Closes the top window of the stack\r\n     */\r\n    const handleWindowBack = () => {\r\n        if (activeWindows && activeWindows.length) {\r\n            setActiveWindows(activeWindows.slice(0, -1));\r\n        }\r\n    };\r\n\r\n    const renderWindow = (): React.ReactElement | null => {\r\n        if (!activeWindows.length) {\r\n            return null;\r\n        }\r\n\r\n        const topWindow = activeWindows[activeWindows.length - 1];\r\n        const commonWindowProps = {\r\n            onClose: handleWindowClose,\r\n            onBack: handleWindowBack,\r\n            backEnabled: activeWindows.length > 1,\r\n            closeEnabled: true,\r\n        };\r\n\r\n        const element = React.cloneElement(topWindow, commonWindowProps);\r\n        return element;\r\n    };\r\n\r\n    const handleMediaLoadComplete = (mediaItems: MediaItem[]) => {\r\n        const sounds = mediaItems.filter((m) => m.mediaType === MediaType.sound);\r\n        SoundManager.loadMedia(sounds);\r\n\r\n        SoundManager.addSounds({\r\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\r\n            [Sound.error]: \"sound/fx/error.ogg\",\r\n            // add more sounds here\r\n        });\r\n\r\n        setMedia(mediaItems);\r\n\r\n        // todo: temporary!\r\n        //const window = <CombatView/>;\r\n        //handleWindowOpened(window);\r\n    };\r\n\r\n    const handleAppClick = () => {\r\n        TooltipManager.clear();\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        const handleScroll = debounce(() => {\r\n            TooltipManager.clear();\r\n        }, 100);\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        window.addEventListener(\"wheel\", handleScroll);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleScroll);\r\n            window.removeEventListener(\"wheel\", handleScroll);\r\n        };\r\n    }, []);\r\n    // const handleResize = () => {\r\n    //     if (containerRef.current) {\r\n    //         if (window.innerHeight < resolution.height) {\r\n    //            // containerRef.current.style.transform = `scale(${Math.min(window.innerWidth / resolution.width, 1)}) translateX(-50%)`;\r\n    //         } else {\r\n    //             //containerRef.current.style.transform = `scale(1) translateX(-50%)`;\r\n    //         }\r\n    //         //const parentBox = containerRef.current.getBoundingClientRect();\r\n    //         //setContainerRect(parentBox);\r\n    //    }\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     // todo: see if we can disable this;\r\n    //     window.addEventListener(\"resize\", handleResize);\r\n    //     handleResize();\r\n    //     return () => {\r\n    //         window.removeEventListener(\"resize\", handleResize);\r\n    //     };\r\n    // }, []);\r\n\r\n    return (\r\n        <AppContext.Provider value={{ \r\n            media, \r\n            onOpenWindow: handleWindowOpened,\r\n            onCloseWindow: handleWindowClose,\r\n        }} >\r\n            <div\r\n                className=\"app\"\r\n                ref={containerRef}\r\n                style={{\r\n                    maxWidth: MAX_WIDTH\r\n                }}\r\n                onClick={handleAppClick}\r\n            >\r\n                <DndProvider backend={HTML5Backend}>\r\n                <HashRouter>\r\n                    <Preloader\r\n                        manifest={manifest}\r\n                        onLoadComplete={handleMediaLoadComplete}\r\n                    >\r\n                        <Topbar/>\r\n                        <div>\r\n                            <Switch>\r\n                                <Route path=\"/\" exact>\r\n                                    <Redirect from=\"/\" to={getWorldLink()} />\r\n                                </Route>\r\n                                <Route path={getWorldLink()}>\r\n                                    <Link to={getTownLink()}>\r\n                                        <button onClick={() => handleViewButtonClick()}> {TextManager.get(`ui-view-button-town`)} </button>\r\n                                    </Link>\r\n                                </Route>\r\n                                <Route path={getTownLink()}>\r\n                                    <Link to={getWorldLink()}>\r\n                                        <button onClick={() => handleViewButtonClick()}> {TextManager.get(`ui-view-button-world`)} </button>\r\n                                    </Link>\r\n                                </Route>\r\n                            </Switch>\r\n                            {` | `}\r\n                            <button data-for=\"global2\" data-tip2 onClick={() => handleResetClick()} style={{ color: \"red\"}}> Restart! </button>\r\n                        </div>\r\n                        <Switch>\r\n                            <Route path={getTownLink()} render={renderTownView} />\r\n                            <Route path={getWorldLink()} render={renderWorldView} />\r\n                        </Switch>\r\n                        <SimpleLog/>\r\n                        {renderWindow()}\r\n                        <ContextTooltip />    \r\n                        <Toasts />\r\n                    </Preloader>\r\n                </HashRouter>\r\n                </DndProvider>\r\n            </div>\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React, { useEffect, useState } from 'react';\nimport { ContextType } from 'constants/context';\nimport { TooltipManager, Context } from 'global/TooltipManager';\nimport { TextManager } from 'global/TextManager';\nimport ItemContext from 'containers/ui/context/ItemContext';\nimport Tooltip from './Tooltip';\nimport './css/contextTooltip.css';\n\nexport interface Props {\n}\n\n// A contextual popup showing what you just clicked. Can be an Item\nconst ContextTooltip = (props: Props) => {\n\n    const [selectedContext, setSelectedContext] = useState<Context | undefined>();\n\n    const tooltipUpdated = (context: Context | undefined) => {\n        setSelectedContext(context);\n    }\n\n    useEffect(() => {\n        TooltipManager.addEventListener(TooltipManager.EVENT_CONTEXT_UPDATED, tooltipUpdated);\n        return () => {\n            TooltipManager.removeEventListener(TooltipManager.EVENT_CONTEXT_UPDATED, tooltipUpdated);\n        }\n    }, []);\n    if (!selectedContext) { return null; }\n\n    const { info, type } = selectedContext;\n    let content;\n\n    switch (type) {\n        case ContextType.item:\n        default:\n            content = <ItemContext info={info} />;\n    }\n\n    const name = TextManager.getItemName(info.item);\n\n    return (\n        <Tooltip referenceRect={selectedContext.referenceRect}>\n            <div className = \"context-tooltip\">\n                <div>{name}</div>\n                {content}\n            </div>\n        </Tooltip>\n    )\n}\nexport default ContextTooltip;\n","import App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import { getDefinition, Structure } from \"definitions/structures\";\r\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\r\nimport { StoreState } from \"stores\";\r\nimport { ResourceStoreState } from \"stores/resources\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\n\r\n//const RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\r\nconst RESOURCE_INTERVAL = 20000; // every thirty seconds constitutes a resource tick. todo: move to some other shared place\r\n\r\n /*\r\n  * Calculates how many resources are generated by the in the town.\r\n  * Will return a ResourceStoreState with the amount of each resource to add  */\r\nconst getProducedResources = (lastProducedUpdate: number, store: StoreState): ResourceStoreState|null => {\r\n    const structures: StructuresStoreState = store.structures;\r\n    const result: ResourceStoreState = {};\r\n    const factor = ((Date.now() - lastProducedUpdate) / RESOURCE_INTERVAL);\r\n\r\n    // this function can run at different intervals\r\n    // faster or slower than once a minute\r\n    // we will multiply the resource amount by the factor to normalize\r\n    const maxResources = getMaxResources(store);\r\n\r\n    const handleStructure = (structure: string) => {\r\n        const structureDefinition = getDefinition(structure);\r\n\r\n        if (structureDefinition.type === StructureType.resource) {\r\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\r\n            const level: number = structures[structure].level;\r\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\r\n\r\n            // Store all the resources that this structure will generate this tick into `result`\r\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\r\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\r\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\r\n                return accumulator;\r\n            }, result);\r\n        }\r\n    };\r\n\r\n    if (factor < 1) {\r\n        return null;\r\n    }\r\n    // Calculate what each structure generates. Stores in `result`.\r\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\r\n\r\n    // Check if the warehouse can actually hold it\r\n    Object.keys(result).forEach((resource: string) => {\r\n        if (result[resource]) {\r\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\r\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\r\n            }\r\n        }\r\n        //console.log(`Adding: ${resource} ${result[resource]} factor ${factor}`);\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\r\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\r\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\r\n    const level: number = store.structures[Structure.warehouse].level;\r\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\r\n    return levelDefinition.maxResources;\r\n};\r\n\r\nexport default getProducedResources;\r\n","import { TextEntry } from \"constants/text\";\nimport questDefinitions from \"definitions/quests\";\nimport { QuestDefinition, QuestNodeType } from 'definitions/quests/types';\n\nimport { Store } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { ToastManager } from 'global/ToastManager';\nimport { TextManager } from 'global/TextManager';\nimport { Type } from 'components/ui/toasts/Toast';\nimport { getQuestLeader } from 'storeHelpers';\nimport { getQuestLink } from 'utils/routing';\nimport { setSceneName } from 'actions/quests';\n\nexport interface QuestUpdate {\n    name: string;\n    progress: number;\n}\n\nexport interface LogUpdate extends TextEntry {\n    key: string;\n    channel: LogChannel;\n    channelContext?: any;\n}\n\ninterface QuestGameTickResponse {\n    questUpdates: QuestUpdate[];\n    logUpdates: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: Store<StoreState>): QuestGameTickResponse => {\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n    const state: StoreState = store.getState();\n\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the player has to do something to move the quest along\n    state.quests.forEach((quest: QuestStoreState) => {\n        if (quest.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[quest.name];\n        const currentProgress = quest.progress;\n        const currentNodeIndex = Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            // console.log(nextProgress, nodesPassed)\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n//                console.log(`next node: ${QuestNodeType[nextNode.type]}`)\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n\n                    store.dispatch(setSceneName(quest.name, nextNode.startScene!));\n\n                    const questTitle = TextManager.getQuestTitle(quest.name);\n                    const leader = getQuestLeader(state.adventurers, quest);\n                    ToastManager.addToast(questTitle, Type.questEncounter, leader?.avatarImg, getQuestLink(quest.name));\n\n                    // Add quest to log\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: quest.name,\n                            key: nextNode.log,\n                        });\n                    }\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: quest.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                name: quest.name,\n                progress: nextProgress,\n            });\n        }\n    });\n//console.log(log)\n    return {\n        logUpdates: log,\n        questUpdates: quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ActionType,\n    AssignEquipmentAction,\n    InventoryAction,\n    MoveItemInInventoryAction,\n    MoveItemToOtherAdventurerAction, RemoveEquipmentAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { AdventurerStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\nconst avatarImgBasePath = \"/img/avatars\";\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: {\n        chest: Item.chest,\n        head: Item.cowl,\n    },\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `${avatarImgBasePath}/female/f_14.png`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `${avatarImgBasePath}/male/m_05.png`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, Item.boots1, Item.chainmailHood, Item.nomadHelmet, Item.plateChest4, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null, Item.plateHelmet, Item.cowl],\n}, {\n    id: \"ec6f1050\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `${avatarImgBasePath}/male/m_09.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `${avatarImgBasePath}/male/m_19.png`,\n    inventory: [ null, null, null, null, Item.khopesh, Item.hornedHelmet ],\n}, {\n    id: \"96c686c3\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `${avatarImgBasePath}/male/m_08.png`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Alexis Ortiz \",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `${avatarImgBasePath}/female/f_10.png`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `${avatarImgBasePath}/female/f_16.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `${avatarImgBasePath}/male/m_09.png`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `${avatarImgBasePath}/male/m_26.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null, Item.shoulders1, Item.fedora, Item.greaves2 ],\n}, {\n    id: \"12c613d4\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `${avatarImgBasePath}/male/m_33.png`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], AnyAction> = (\n    state: AdventurerStoreState[] = testState, action: AnyAction) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null || toSlot === undefined) {\n                        toSlot = inventory.findIndex((val) => (val === null || val === undefined));\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.assignEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot, item } = action as AssignEquipmentAction;            \n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: item,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.removeEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot } = action as RemoveEquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: null,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\r\n\r\nexport interface EngineStoreState {\r\n    lastTick: number;\r\n    lastProducedUpdate: number;\r\n}\r\n\r\nexport const initialState: EngineStoreState = {\r\n    lastTick: Date.now(),\r\n    lastProducedUpdate: Date.now()\r\n};\r\n","\r\nimport {  ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\n\r\nconst testState = [\r\n    null,\r\n    null,\r\n    null,\r\n    Item.dagger,\r\n    Item.deedForWeaponsmith,\r\n    null,\r\n    Item.sandwich,\r\n    Item.sandwich,\r\n    null,\r\n    null,\r\n    Item.torch,\r\n    Item.torch,\r\n    null,\r\n    Item.torch\r\n];\r\n\r\n// Items in warehouse\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\r\n                                                 action: AnyAction) => {\r\n    switch (action.type) {\r\n        case ActionType.addItem: {\r\n            // toSlot is optional\r\n            const { item } = (action as AddAction);\r\n            let { toSlot } = (action as AddAction);\r\n            if (toSlot === undefined) {\r\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\r\n                if (toSlot === -1) {\r\n                    // Still not found. Add at end\r\n                    // todo: [07/07/2019] GAME DESIGN\r\n                    return [ ...state, item ];\r\n                }\r\n            }\r\n            return state.map((element, index) => index === toSlot ? item : element);\r\n        }\r\n\r\n        case ActionType.moveItemInWarehouse: {\r\n            const {\r\n                fromSlot,\r\n                toSlot,\r\n            } = (action as MoveItemInWarehouseAction);\r\n\r\n            return state.map((element, index) => {\r\n                // todo: items switch places\r\n                if (index === fromSlot) { return null; }\r\n                if (index === toSlot) { return state[fromSlot]; }\r\n                return element;\r\n            });\r\n        }\r\n        case ActionType.removeItem: {\r\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\r\n\r\n            return state.map((element, index) => index !== fromSlot ? element : null);\r\n        }\r\n    }\r\n\r\n    return state;\r\n};\r\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const {entry, channel, channelContext} = (action as AddLogEntryAction);\n            const {key, context} = entry;\n            const time = Date.now();\n            return [{\n                    channel,\n                    channelContext,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, UpdateEncounterResultAction, EnqueueSceneActionAction, SetSceneNameAction, SetSceneAction, UpdateSceneObjectAction, TakeGoldFromCacheAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { SceneActionType } from 'stores/scene';\nimport { QuestDefinition } from 'definitions/quests/types';\nimport { getDefinition } from 'definitions/quests';\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil1.png\",\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil2.png\",\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState, action: AnyAction ) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.exitEncounter:\n            return exitEncounter(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        // case ActionType.startEncounter:\n        //     return startEncounter(state, action as StartEncounterAction);\n\n        case ActionType.setSceneName:\n            return setSceneName(state, action as SetSceneNameAction);\n\n        case ActionType.setScene:\n            return setScene(state, action as SetSceneAction);\n\n        case ActionType.enqueueSceneAction:\n            return enqueueSceneAction(state, action as EnqueueSceneActionAction);\n\n        case ActionType.completeSceneAction:\n            return completeSceneAction(state, action as QuestAction);\n\n        case ActionType.updateSceneObjectAction:\n            return updateSceneObjectAction(state, action as UpdateSceneObjectAction);\n\n        case ActionType.takeGoldFromCache:\n            return takeGoldFromCache(state, action as TakeGoldFromCacheAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (questStoreState: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return questStoreState.map((qss) => {\n        if (qss.name === action.questName) {\n            const questDefinition: QuestDefinition = getDefinition(action.questName);\n            const questVars = questDefinition.getInitialQuestVars(qss);\n\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n                questVars\n            };\n        }\n        return qss;\n    });\n};\n\nconst exitEncounter = (state: QuestStoreState[], action: QuestAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            //const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            // const nextNode = questDefinition.nodes[Math.floor(progress)];\n\n            return {\n                ...qss,\n                progress,\n                scene: undefined,\n                sceneName: undefined\n            };\n        }\n        return qss;\n    });\n};\n\n// const startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n//     const {scene} = action;\n//     return state.map((qss) => {\n//         if (qss.name === action.questName) {\n//             return {\n//                 ...qss,\n//                 scene\n//             };\n//         }\n//         return qss;\n//     });\n// };\nconst setSceneName = (state: QuestStoreState[], action: SetSceneNameAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                sceneName: action.sceneName\n            };\n        }\n        return qss;\n    });\n};\n\nconst setScene = (state: QuestStoreState[], action: SetSceneAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                scene: action.scene\n            };\n        }\n        return qss;\n    });\n};\n\n// Enqueues a scene action on this quest\nconst enqueueSceneAction = (state: QuestStoreState[], action: EnqueueSceneActionAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const scene = qss.scene;\n            if (!scene) throw new Error(\"Something broke. No scene\");\n            scene.actionQueue = [...scene.actionQueue || [], action.sceneAction];\n\n            return {\n                ...qss,\n                scene\n            };\n        }\n        return qss;\n    });\n};\n\n// Action on scene is completed\nconst completeSceneAction = (state: QuestStoreState[], action: QuestAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const scene = qss.scene;\n            if (!scene) throw new Error(\"Something broke. No scene\");\n            const action = scene.actionQueue![0];\n            if (!action) return qss;\n\n            switch (action.actionType) {\n                case SceneActionType.move: {\n                    scene.actors = scene.actors.map((a) => {\n                        if (a.name === action.actor) {\n                            return { ...a, location: action.target };\n                        }\n                        return a;\n                    })\n                }\n            }\n\n            // pop first action of the stack\n            scene.actionQueue = [\n                ...scene.actionQueue!.slice(1)\n            ];\n\n            return {\n                ...qss,\n                scene\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateSceneObjectAction = (state: QuestStoreState[], action: UpdateSceneObjectAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const scene = qss.scene;\n            if (!scene) throw new Error(\"Something broke. No scene\");\n\n            scene.tileObjects = scene.tileObjects.map(tO => {\n                if (tO.id === action.id) { \n                    return {\n                        ...tO,\n                        ...action.object\n                    }\n                }\n                return tO;\n            })\n\n            return {\n                ...qss,\n                scene\n            };\n        }\n        return qss;\n    });\n}\n\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n    if (!questsToUpdate.length) {\n        return state;\n    }\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            //const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                // currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\nconst takeGoldFromCache = (state: QuestStoreState[], action: TakeGoldFromCacheAction) => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName && qss.scene) {            \n            const lootCaches = {\n                ...qss.scene?.caches,\n                [action.cacheName]: {\n                    ...qss.scene?.caches[action.cacheName],\n                    gold: 0\n                }\n            }\n            qss.scene.caches = lootCaches;\n        }\n        return qss;\n    });\n}\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState, initialState as structureInitialState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n    [Structure.workshop]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: structureInitialState,\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: structureInitialState,\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: structureInitialState,\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: structureInitialState,\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: structureInitialState,\n    [Structure.workshop]: structureInitialState,\n};\n","import { ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, AnyAction> = (state: StructuresStoreState = initialState,\n                                                                     action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","\nimport { ActionType as GameActionType } from \"actions/game\";\nimport {  ActionType, AddAction} from \"actions/tasks\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\n\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { combat } from \"./combat\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    combat,\n    engine,\n    gold,\n    stockpile: items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType, AddCombatActionAction, MoveActorAction } from \"actions/combat\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { barBrawl, CombatStoreState } from \"stores/combat\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const combat: Reducer<CombatStoreState> = (state: CombatStoreState = barBrawl, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startCombatAction:\n            const addAction = action as AddCombatActionAction;\n\n            return {\n                ...state,\n                action: {\n                    actor: addAction.actor,\n                    endsAt: addAction.endsAt,\n                    target: addAction.target,\n                    type: addAction.combatType,\n                },\n            };\n\n        case ActionType.moveActor:\n            const moveAction = action as MoveActorAction;\n\n            // Moves an actor to another position\n            const actors = state.actors.map((a) => {\n                if (a.name === moveAction.actor) {\n                    return {\n                        ...a,\n                        location: moveAction.location,\n                    };\n                }\n                return a;\n            });\n\n            return {\n                ...state,\n                actors,\n            };\n\n            case ActionType.clearCombatAction:\n            // Clears current combat action\n            return {\n                ...state,\n                action: undefined,\n            };\n    }\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\nimport { EngineStoreState, initialState } from \"stores/engine\";\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case GameActionType.gameTick:\r\n\r\n            // Keep track of the last time resources were produced\r\n            const resourcesToAdd = (action as GameTickAction).resources;\r\n            const lastProducedUpdate = resourcesToAdd === null ? state.lastProducedUpdate : Date.now();\r\n            return {\r\n                ...state,\r\n                lastProducedUpdate,\r\n                lastTick: Date.now(),\r\n            };\r\n    }\r\n    return state;\r\n};\r\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            console.log(\"addgold\", (action as ModifyGoldAction).amount)\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n    }\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\r\nimport { AnyAction, Reducer } from \"redux\";\r\nimport { ActionType, AddResources } from \"../actions/resources\";\r\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\r\n\r\n/**\r\n * reducer\r\n * @param state\r\n * @param action\r\n */\r\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\r\n                                                       action: AnyAction | GameTickAction) => {\r\n\r\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\r\n        // todo: Check if warehouse can hold it\r\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\r\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\r\n            return accumulator;\r\n        }, {});\r\n    };\r\n\r\n    switch (action.type) {\r\n        case ActionType.addResources: {\r\n            const resourcesToAdd = (action as AddResources).resources;\r\n            return addResources(resourcesToAdd);\r\n        }\r\n        case ActionType.removeResources: {\r\n            const resourcesToRemove = (action as AddResources).resources;\r\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\r\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\r\n                return accumulator;\r\n            }, {});\r\n        }\r\n\r\n        case GameActionType.gameTick: {\r\n            const resourcesToAdd = (action as GameTickAction).resources;\r\n            if (resourcesToAdd === null) {\r\n                return state;\r\n            }\r\n            return addResources(resourcesToAdd);\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","import { ActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, AnyAction> = (state: seedrandomStateType = initialState,\n                                                                  action: AnyAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { ActionType, ModifyWorkersAction } from \"actions\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import { TaskStoreState, TaskType } from 'stores/task';\nimport { TasksStoreState } from 'stores/tasks';\nimport { AnyAction, Dispatch } from \"redux\";\nimport { ToastManager } from 'global/ToastManager';\nimport { TextManager } from 'global/TextManager';\nimport { Type } from 'components/ui/toasts/Toast';\nimport { getDefinition } from 'definitions/items';\nimport { Item } from 'definitions/items/types';\n\nexport const processCompletedTasks = (tasks: TasksStoreState, dispatch: Dispatch<AnyAction>) => {\n    const handleCompletedTask = (task: TaskStoreState) => {\n        // Fire all callbacks\n        task.callbacks.forEach((action) => dispatch(action));\n\n        switch (task.type) {\n            case TaskType.craftItem:\n                const item = task.name as Item;\n                const title = TextManager.get(\"common-item-crafted\", { item });\n                const definition = getDefinition(item);\n                ToastManager.addToast(title, Type.itemCrafted, definition.iconImg);\n                break;\n        }\n    };\n\n    tasks.completed.forEach((task) => handleCompletedTask(task));\n};","import updateCombat from \"mechanics/gameTick/combat\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Persistor } from \"redux-persist\";\r\nimport { gameTick } from \"./actions/game\";\r\nimport { addLogText } from \"./actions/log\";\r\nimport version from \"./constants/version\";\r\nimport App from \"./containers/App\";\r\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\r\nimport getQuestUpdates, { LogUpdate } from \"./mechanics/gameTick/quests\";\r\nimport getRngState from \"./mechanics/gameTick/rngState\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { StoreState } from \"./stores\";\r\nimport configureStore from \"./utils/configureStore\";\r\nimport * as Random from \"./utils/random\";\r\nimport { TextManager } from \"./global/TextManager\";\r\nimport { loadResourceAsync } from 'utils/pixiJs';\r\nimport { processCompletedTasks } from 'mechanics/gameTick/tasks';\r\nimport \"./index.css\";\r\n\r\nconst TICK_INTERVAL = 2500;\r\n\r\nconst initGame = async () => {\r\n    const texts = await loadResourceAsync(`${process.env.PUBLIC_URL}/lang/en-US.json`);\r\n    TextManager.init(texts.data);\r\n    Random.init(\"GILLESROX2\");\r\n\r\n    const { store, persistor, isHydrated } = await configureStore();\r\n    if (!isHydrated) {\r\n        startNewGame(store);\r\n    } else {\r\n        continueGame(store);\r\n    }\r\n    runGame(store, persistor);\r\n};\r\n\r\n/**\r\n * Gets called when a player starts a new game\r\n * @param store\r\n */\r\nconst startNewGame = (store: any) => {\r\n\r\n    store.dispatch(addLogText(\"test-game-welcome\"));\r\n    // todo: here is a good place to launch a tutorial or something\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\nconst continueGame = (store: any) => {\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\n// const stopGame = () => {\r\n//     clearTimeout(interval);\r\n// };\r\n\r\nconst runGame = (store: any, persistor: Persistor) => {\r\n    ReactDOM.render((\r\n        <Provider store={store}>\r\n            <App persistor={persistor} />\r\n        </Provider>\r\n    ),\r\n        document.getElementById(\"root\") as HTMLElement,\r\n    );\r\n    registerServiceWorker();\r\n\r\n    const gameLoop = () => {\r\n        const state: StoreState = store.getState();\r\n        const delta = Date.now() - state.engine.lastTick;\r\n\r\n        const logs: LogUpdate[] = [];\r\n        const resourcesUpdates = getProducedResources(state.engine.lastProducedUpdate, state);\r\n        const rngState = getRngState();\r\n        updateCombat(delta, store);\r\n        const { questUpdates, logUpdates } = getQuestUpdates(delta, store);\r\n        logs.push(...logUpdates);\r\n\r\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, questUpdates, logs));\r\n\r\n        processCompletedTasks(state.tasks, store.dispatch);\r\n\r\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", LogChannel.common, { item: Item.teeth }));\r\n    };\r\n\r\n    setInterval(gameLoop, TICK_INTERVAL);\r\n};\r\n\r\ninitGame();\r\n","import { TiledMapData, TiledObjectData, TiledLayerType, TiledProperty, TiledLayerData } from 'constants/tiledMapData';\n\n/* Tiled doesnt export the tile location of an Object. This function calculates it based on x and y.\n* Also returns a convenience object with all properties\n*/\nexport const getExtendedTilemapObjects = (tilemapData: TiledMapData) => {\n    const objectLayers = tilemapData.layers.filter(layer => layer.type === TiledLayerType.objectgroup);\n    const objects: { [key: string]: ExtendedTiledObjectData } = {};\n    objectLayers.forEach(objectLayer => {    \n        objectLayer.objects.reduce((acc: {[key: string]: ExtendedTiledObjectData}, value: TiledObjectData) => {\n            let {x, y} = value;\n            if (value.type === \"tileobject\") { \n                y -= value.height; // https://github.com/bjorn/tiled/issues/91\n            }\n            const location: [number, number] = [\n                x / tilemapData.tilewidth, \n                y / tilemapData.tileheight\n            ];\n            // reduce the props array into an object with key/values\n            const ezProps = parseProperties(value.properties);\n            const extended: ExtendedTiledObjectData = {\n                location,\n                ezProps,\n                ...value\n            };\n            acc[`${location[0]},${location[1]}`] = extended; // todo: what if object alraedy exists at this location?\n            return acc;\n        }, objects);\n    });\n    return objects;\n}\n\n// Unpack array of properties into key/value object for fast retrieval\nconst parseProperties = (properties?: TiledProperty[]) => {\n    if (!properties) return;\n    return properties.reduce((acc: {[key: string]: any}, value: TiledProperty) => {\n        acc[value.name] = value.value;\n        return acc;\n    }, {});\n}\n\nexport type ExtendedTiledObjectData = TiledObjectData & {\n    location: [number, number];\n    ezProps?: { [key: string]: any}\n}\n\n/** Add tiles in this layer to list */\nexport const addAllTilesInLayerToList = (list: [number, number][], layer: TiledLayerData, columns: number) => {\n    layer.data.reduce((acc: [number, number][], tile, index) => {\n        if (tile > 0) {\n            const x = (index % columns);\n            const y = Math.floor(index / columns);\n            acc.push([x, y]);  \n        }\n        return acc;\n    }, list);\n}\n\nexport const locationEquals = (a: [number, number], b: [number, number]) => {\n    return a[0] === b[0] && a[1] === b[1];\n}","import { Store, AnyAction } from \"redux\";\nimport { getExtendedTilemapObjects, ExtendedTiledObjectData, addAllTilesInLayerToList, locationEquals } from 'utils/tilemap';\nimport { adventurersOnQuest } from 'storeHelpers';\nimport { StoreState } from 'stores';\nimport { loadResource } from 'utils/pixiJs';\nimport { TiledMapData } from 'constants/tiledMapData';\nimport { AStarFinder } from 'astar-typescript';\nimport { AdventurerStoreState } from 'stores/adventurer';\nimport { setScene, setSceneName, exitEncounter } from 'actions/quests';\nimport { TileObject, ActorObject } from 'stores/scene';\nimport { ToastManager } from 'global/ToastManager';\nimport { Type } from 'components/ui/toasts/Toast';\nimport { getQuestLink } from 'utils/routing';\nimport { TextEntry } from 'constants/text';\nimport { TextManager } from 'global/TextManager';\nimport { addLogText, addLogEntry } from 'actions/log';\nimport { getDefinition } from 'definitions/quests';\nimport { LogChannel } from 'stores/logEntry';\nimport { Item } from 'definitions/items/types';\n\nexport class BaseSceneController {\n    public mapData?: TiledMapData;\n    public aStar?: AStarFinder;\n    public questName: string;\n    public tilemapObjects?: {[key: string]: ExtendedTiledObjectData};\n\n    protected jsonPath?: string;\n    protected store: Store<StoreState, AnyAction>;\n    protected blockedTiles: [number, number][] = [];\n\n    constructor(store: Store<StoreState, AnyAction>, questName: string) {\n        this.store = store;\n        this.questName = questName;\n    }\n\n    get basePath(): string | null {\n        if (!this.jsonPath) return null;\n        return `${process.env.PUBLIC_URL}/${this.jsonPath.substr(0, this.jsonPath.lastIndexOf('/'))}`;\n    }\n\n    get dataLoaded(): boolean {\n        return !!this.mapData;\n    }\n\n    loadData(callback: () => void) {\n        if (this.dataLoaded) {\n            return callback();\n        }\n        if (!this.jsonPath) {\n            throw new Error(\"No jsonPath defined!\");\n        }\n\n        loadResource(`${process.env.PUBLIC_URL}/${this.jsonPath}`, (resource) => {\n            this.mapData = resource.data;\n            this.tilemapObjects = getExtendedTilemapObjects(resource.data);\n            this.mapData!.layers.filter(layer => layer.visible).forEach(layer => {\n                if (layer.properties && layer.properties.some(p => p.name === 'blocksMovement' && p.value === true)){\n                    addAllTilesInLayerToList(this.blockedTiles, layer, layer.width);\n                }\n            });\n\n            this.aStar = this.createAStar();\n\n            callback();\n        });\n    }\n\n    // Constructs the scene and dispatches it to be saved to the store\n    createScene() {\n        const tileObjects = this.createTileObjects();\n        const actors = this.createActors();\n        const caches = {\n            \"chest\": {\n                title: \"test-title\",\n                gold: 3,\n                items: [\n                    Item.savageStaff,\n                    Item.savageStaff,\n                    Item.savageStaff,\n                    Item.shoulders1,\n                ]\n            }\n        }\n\n        // todo: perhaps this should be a class such that stuff that repeats for every scene can be done in a base class\n        const scene = {\n            tileObjects,\n            actors,\n            caches\n        }\n        this.store.dispatch(setScene(this.questName, scene));\n    }\n\n    actorMoved(actor: string, location: [number, number]) {\n        const object = this.tilemapObjects![`${location[0]},${location[1]}`];\n        if (!object) return;\n\n\n        \n        if (object.type === \"exit\") {\n            // We've hit the exit. Should we load another scene?\n            if (object.ezProps?.loadScene) {\n                this.store.dispatch(setSceneName(this.questName, object.ezProps.loadScene))\n            } else {\n                // Or exit the encounter\n                const index = Math.floor(this.getQuest().progress) + 1;\n                const definition = getDefinition(this.questName);\n                const node = definition.nodes[index];\n                if (node.log) {\n                    // If the next node has a log entry, add it\n                    this.store.dispatch(addLogText(node.log, null, LogChannel.quest, this.questName));\n                }\n                this.store.dispatch(exitEncounter(this.questName));\n            }\n        }\n           \n    }\n\n    actorCanInteract(actorName: string) {\n        const {scene} = this.getQuest();\n        const actor = scene?.actors.find(o => o.name === actorName)!;\n        const object = scene?.tileObjects\n            .find(o => locationEquals(o.location, actor.location));\n\n        // todo: should we look for some specific property?    \n        return !!object;\n    }\n\n    actorInteract(actorName: string) {\n        if (!this.actorCanInteract(actorName)) {\n            console.warn(\"Can't interact\");\n            return;\n        }\n        const {scene} = this.getQuest();\n        const actor = scene?.actors.find(o => o.name === actorName)!;\n        const object = scene?.tileObjects\n            .find(o => locationEquals(o.location, actor.location));\n\n        if (!object || object.type !== \"tileobject\") {\n            console.warn(\"No object found\");\n            return;\n        }\n    \n        this.interactWithObject(actor, object);\n    }\n\n    interactWithObject(_actor: ActorObject, _object: TileObject) {\n    }\n\n    // Converts pixel coordinate to scene location\n    pointToSceneLocation (point: PIXI.Point): [number, number] {\n        if (!this.mapData?.tilewidth || !this.mapData?.tileheight) {\n            return [0, 0];\n        }\n        return [Math.floor(point.x / this.mapData.tilewidth), Math.floor(point.y / this.mapData.tilewidth)];\n    }\n\n    // Returns true if the tile is blocked \n    locationIsBlocked(location: [number, number]){\n        return this.blockedTiles.some((l) => locationEquals(l, location));\n    }\n\n    protected createAStar() {\n        const matrix: number[][] = [];\n        for (let y = 0; y < this.mapData!.height; y++) {\n            const row: number[] = [];\n            for (let x = 0; x < this.mapData!.width; x++) {\n                const location: [number, number] = [x, y];\n                const blocked = this.locationIsBlocked(location);\n                row.push(blocked ? 1 : 0);\n            }\n            matrix.push(row);\n        }\n        return new AStarFinder({\n            grid: {\n                matrix\n            }, \n            includeStartNode: false,\n            heuristic: \"Manhatten\",\n            weight: 0,\n        });\n    }\n\n    protected createActors(): ActorObject[] {\n\n        if (!this.tilemapObjects) {\n            throw new Error(\"No tilemapObjects\");\n        }\n\n        const adventurers = this.getAdventurers();\n\n        const startLocations = Object.values(this.tilemapObjects)\n            .filter(o => o.type === \"adventurerStart\")\n            .map(o => o.location);\n        if (adventurers.length > startLocations.length) {\n            throw new Error(\"Not enough objects with 'adventurerStart' property set to true\");\n        }\n        return adventurers.reduce((acc: ActorObject[], value: AdventurerStoreState, index: number) => {\n            const location = startLocations[index];\n            acc.push({\n                health: 100,\n                location,\n                name: value.id,\n            })\n            return acc;\n        }, []);\n    }\n\n    protected createTileObjects(): TileObject[] {\n        if (!this.tilemapObjects) {\n            throw new Error(\"No tilemapObjects\");\n        }\n\n        return Object.values(this.tilemapObjects)\n            .filter(o => o.type === \"tileobject\")\n            .map(o => ({\n                id: o.id,\n                gid: o.gid!,\n                location: o.location,\n                name: o.name,\n                type: \"tileobject\",\n            }));\n    }\n\n    protected getQuest() {\n        const storeState = this.store.getState();\n        return storeState.quests.find(q => q.name === this.questName)!;\n    }\n\n    protected getAdventurers() {\n        const storeState = this.store.getState();\n        const quest = this.getQuest();\n        return adventurersOnQuest(storeState.adventurers, quest);\n    }\n\n    protected getAdventurerByActor(actor: ActorObject) {\n        const storeState = this.store.getState();\n        return storeState.adventurers.find(a => a.id === actor.name);\n    }\n        \n    protected questUpdate(textEntry: TextEntry, icon?: string) {\n        const title = TextManager.getTextEntry(textEntry);\n        ToastManager.addToast(title, Type.questUpdate, icon, getQuestLink(this.questName));\n        this.store.dispatch(addLogEntry(textEntry, LogChannel.quest, this.questName));\n    }\n}\n","import { BaseSceneController } from 'mechanics/scenes/BaseSceneController';\nimport { SceneControllerManager } from 'global/SceneControllerManager';\nimport { TileObject, ActorObject } from 'stores/scene';\nimport { updateSceneObjectAction } from 'actions/quests';\nimport { TextManager } from 'global/TextManager';\n\nconst TILE_CHEST_CLOSED = 33; // todo: take this from json?\nconst TILE_CHEST_OPEN = 34; // todo: take this from json?\nexport class DungeonEntranceSceneController extends BaseSceneController {\n    jsonPath = \"scenes/ork-dungeon-level1.json\";\n    \n    interactWithObject(actor: ActorObject, object: TileObject) {\n        switch (object.name) {\n            // todo: I want to share this common stuff with other SceneControllers\n            case \"chest\":\n                if (object.gid === TILE_CHEST_CLOSED) {\n                    const adventurer = this.getAdventurerByActor(actor)?.name;\n                    const textEntry = { key: \"quest-common-adventurer-opened-chest\", context: { adventurer } };\n                    this.questUpdate(textEntry, \"/img/items/misc/chest-02.png\");\n                    this.store.dispatch(updateSceneObjectAction(this.questName, object.id, { gid: TILE_CHEST_OPEN }));\n                }\n                // display loot modal!\n                break;\n        }\n        super.interactWithObject(actor, object);\n    }\n}\n\nexport class DungeonHallwaySceneController extends BaseSceneController {\n    jsonPath = \"scenes/ork-dungeon-level2.json\";\n}\n\n// export const register = () => {\n    SceneControllerManager.registerSceneController(\"kill10Boars\", \"dungeon.entrance\", DungeonEntranceSceneController);\n    SceneControllerManager.registerSceneController(\"kill10Boars\", \"dungeon.hallway\", DungeonHallwaySceneController);\n// }\n"],"sourceRoot":""}