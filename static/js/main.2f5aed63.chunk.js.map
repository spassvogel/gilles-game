{"version":3,"sources":["actions/combat.ts","stores/combat.ts","actions/game.ts","stores/logEntry.ts","actions/log.ts","mechanics/gameTick/combat.ts","utils/version.ts","definitions/items/types.ts","constants/version.tsx","components/widgets/SquareIconButton.tsx","components/widgets/Tab.tsx","components/widgets/Tabstrip.tsx","definitions/items/apparel.ts","definitions/structures/types.tsx","definitions/structures/alchemist.tsx","definitions/structures/index.tsx","utils/time.tsx","definitions/production/armour.tsx","definitions/structures/armoursmith.tsx","definitions/structures/garden.tsx","definitions/structures/lumberMill.tsx","definitions/structures/mine.tsx","definitions/structures/quarry.tsx","definitions/structures/tannery.tsx","definitions/structures/tavern.tsx","definitions/structures/warehouse.tsx","definitions/production/weapons.tsx","definitions/structures/weaponsmith.tsx","definitions/structures/weaver.tsx","definitions/production/questItems.tsx","definitions/structures/workshop.tsx","definitions/items/deeds.ts","definitions/items/weapons.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","utils/textManager.ts","components/log/SimpleLog.tsx","stores/quest.ts","selectors/quests.tsx","stores/structure.ts","containers/log/SimpleLog.tsx","utils/soundManager.ts","components/RealTownView.tsx","hoc/withAppContext.tsx","containers/RealTownView.tsx","actions/gold.ts","actions/resources.ts","definitions/resources.tsx","components/ui/items/ItemsBox.tsx","containers/ui/context/items/ItemsCostBox.tsx","constants/context.ts","constants/icons.ts","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","components/ui/ItemIcon.tsx","components/ui/Progressbar.tsx","actions/items.ts","actions/structures.ts","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/ProductionStructureView.tsx","selectors/workers.tsx","stores/task.ts","containers/structures/ProductionStructureView.tsx","components/structures/ResourceStructureView.tsx","containers/structures/ResourceStructureView.tsx","actions/quests.ts","constants/dragging.ts","components/ui/AdventurerAvatar.tsx","components/ui/DraggableAdventurerAvatar.tsx","definitions/encounters/types.ts","definitions/quests/index.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","containers/structures/tavern/QuestBoard.tsx","actions/adventurers.ts","components/ui/EquipmentSlot.tsx","components/ui/DraggableItemIcon.tsx","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/ui/AdventurerInfo.tsx","components/ui/window/Window.tsx","hoc/withWindow.tsx","components/ui/window/windows/AdventurerInfoWindow.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","components/ui/resources/ResourcesBox.tsx","components/structures/warehouse/WarehouseStructureView.tsx","selectors/adventurers.tsx","containers/structures/warehouse/WarehouseStructureView.tsx","components/StructureDetailsView.tsx","containers/structures/StructureDetailsView.tsx","components/three/Controls.tsx","components/three/debug/Sphere.tsx","components/three/DebugInspector.js","utils/random.ts","hooks/useModel.ts","components/three/world/WorldMapTerrain.tsx","components/three/debug/Cube.tsx","components/three/world/structures/Structure.tsx","components/three/world/WorldMap.tsx","components/ui/DroppableAdventurerAvatar.tsx","containers/ui/AdventurerInfo.ts","storeHelpers/index.tsx","oracle/index.tsx","definitions/encounters/backstabbed.ts","definitions/encounters/goblinHouse.ts","definitions/encounters/index.ts","definitions/encounters/theBigTree.ts","components/ui/window/windows/PartyWindow.tsx","containers/windows/PartyWindow.tsx","components/partyScreen/RealWorldView.tsx","containers/world/RealWorldView.tsx","hoc/withPopup.tsx","actions/index.ts","manifest/app.tsx","components/preloading/Preloader.tsx","components/ui/window/windows/CheatWindow.tsx","constants/resources.ts","containers/windows/CheatWindow.tsx","components/ui/window/windows/MenuWindow.tsx","components/topbar/Resourcebar.tsx","containers/topbar/Resourcebar.ts","containers/Topbar.tsx","components/topbar/Topbar.tsx","components/preloading/Indicator.tsx","containers/ui/context/ItemContext.tsx","components/App.tsx","components/ui/context/ItemContext.tsx","components/ui/context/ContextView.tsx","containers/App.tsx","mechanics/gameTick/producedResources.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","reducers/combat.ts","stores/engine.ts","reducers/engine.ts","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/resources.ts","stores/structures.ts","reducers/structures.ts","stores/tasks.ts","reducers/tasks.ts","reducers/index.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","index.tsx"],"names":["ActionType","Allegiance","CombatActionType","LogChannel","barBrawl","actors","allegiance","player","health","location","name","remainingAP","turn","updateCombat","delta","store","actor","combat","getState","action","endsAt","Date","now","enemy","type","move","dispatch","target","moveActor","clearCombatAction","addLogEntry","key","context","channel","common","channelContext","ItemType","Item","asInt","semVer","parts","split","map","part","Number","length","Error","forEach","numericVersion","i","convertSemVerToInt","SquareIconButton","props","className","onClick","e","text","Tab","active","children","Tabstrip","initialSelectedTab","id","useState","activeTab","setActiveTab","React","Children","child","cloneElement","handleTabClick","tabId","onTabSelected","ApparelType","itemType","apparel","basePath","StructureType","all","boots1","item","equipmentType","feet","subText","iconImg","boots2","boots3","chainmailHood","head","armorRating","chest","clothGloves","hands","cowl","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","Structure","alchemist","production","cost","gold","time","levels","displayName","workerCapacity","produces","formatDuration","unit","moment","format","trim","resources","wood","iron","ONE_MINUTE","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","stone","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","torch","sandwich","workshop","getDefinition","structure","WeaponType","DamageType","deed","deedForLumbermill","deedForWeaponsmith","material","arrowheads","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","gunpowder","scales","spring","thread","questItem","questItemDefinitions","blueprints","crate","dynamite","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","tusk","vase","vial","weeds","trinket","trinketDefinitions","magicAmulet","ring","weapon","weaponDefinitions","battleAxe","weaponType","axe","damage","kinetic","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","deeds","questItems","trinkets","TextManager","texts","precompile","this","templates","compileAll","initialized","template","getTemplate","console","error","textEntry","get","compile","Object","keys","value","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","ChannelType","itemArticleUndefined","getItemName","articleTemplate","noun","QuestStatus","SimpleLog","state","expanded","selectedTabId","channels","label","tabType","town","questNames","questName","push","getQuestTitle","quest","logEntries","currentTab","find","t","filter","lE","Tabs","tab","handleTabSelected","handleToggleExpand","entry","logEntry","getLogEntryRow","setState","StructureState","getLog","log","selectActiveQuests","createSelector","quests","q","status","selectLastQuestLogEntry","l","connect","MusicTrack","Sound","media","initialState","level","NotBuilt","workers","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","url","content","sound","play","track","hasOwnProperty","fade","nextMusic","playing","loop","RealTownView","anim","undefined","handleStructureClick","evt","onStructureClick","handleBackgroundClick","images","addMusicTrack","playMusic","stop","structures","index","structureDef","structureStore","levelDef","x","y","fontSize","fill","width","height","scale","image","imgSrc","shadowBlur","shadowColor","shadowEnabled","strokeWidth","ref","node","drawHitFromCache","result","playMusicTrack","img","withAppContext","WrappedComponent","AppContext","Consumer","compose","ownProps","addGold","amount","subtractGold","addResources","Resource","ItemsBox","itemsInInventory","aggregate","items","reduce","accumulator","current","listItems","listItemClass","itemDescription","itemsDescription","style","backgroundImage","tmpWarehouse","found","findIndex","splice","removed","ContextType","IconSize","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","getClassName","size","smallest","small","medium","big","biggest","ItemIcon","itemDefinition","warn","event","showContext","originRect","currentTarget","getBoundingClientRect","onContextualObjectActivated","Progressbar","val","min","max","progress","UpDownValue","displayValue","upDisabled","onUp","downDisabled","onDown","ProductionStructureView","selectedItem","workersAssigned","structureDefinition","levelDefinition","getStructureName","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","stopPropagation","createCraftTabs","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","indexOf","costItemsContent","display","workersFree","craftingTime","formatted","makeTimeString","onCraft","createCraftingDetails","tasks","startTime","timeRemaining","addItemToWarehouse","toSlot","addItem","finishBuildingStructure","upgradeStructure","increaseWorkers","decreaseWorkers","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","acc","running","productionDefinition","removeResources","craftItem","ResourceStructureView","onWorkersDown","onWorkersUp","createWorkersRow","generatesText","join","createGeneratesRow","advanceQuest","startEncounter","encounter","DragSourceType","DragType","AdventurerAvatar","adventurer","avatarImg","spec","beginDrag","sourceId","sourceType","adventurerInventory","Encounter","QuestNodeType","DraggableAdventurerAvatar","isDragging","connectDragSource","DragSource","monitor","dragSource","kill10Boars","nodes","nothing","goblinHouseOutside","backstabbed","boss","retrieveMagicAmulet","requiredItems","theBigTree","DroppableAdventurerSlot","isOver","canDrop","connectDropTarget","DropTarget","drop","onDrop","getItem","dropTarget","AssignAdventurers","slots","assignedAventurers","onRemoveAdventurer","onAddEventurer","availableSlots","slotsContent","QuestBoard","selectedQuest","questListContent","availableQuests","iconImgPath","icon","selectedQuestName","onQuestClick","questDefinition","fullParty","a","enoughItems","checkEnoughItems","canLaunch","getQuestDescription","onAddAdventurer","ItemsCostBox","onLaunchQuest","getQuestDetails","every","amountRequired","moveItemInInventory","adventurerId","fromSlot","addItemToInventory","removeItemFromInventory","assignEquipment","equipmentSlot","removeEquipment","EquipmentSlotType","DraggableItemIcon","inventorySlot","itemAndEquipmentSlotMatch","equipmentSlotType","checkEquipment","mainHand","offHand","borderColor","title","dragInfo","adventurerEquipment","InventorySlot","isActive","classNames","contents","slot","iconSize","onDropItem","AdventurerInfo","attributes","stats","stat","toFixed","getEquipmentSlot","slotType","equipment","itemRef","onRemoveItemFromInventory","onAssignEquipment","existingEquipment","onAddItemToInventory","onRemoveEquipment","handleDropItemEquipment","equipmentList","inventory","onMoveItemInInventory","Window","BackButton","backEnabled","onBack","CloseButton","closeEnabled","onClose","withWindow","adventurers","TavernStructureView","setAassignedAdventurers","setSelectedQuest","roomCount","getAvailableQuests","available","getQuestByAdventurer","values","party","handleAdventurerNameClick","window","AdventurerInfoWindow","onOpenWindow","roomContent","room","assigned","createRooms","handleQuestClick","copy","handleAddAdventurer","handleRemoveAdventurer","launchQuest","deltaResources","WarehouseStructureView","resourcesDelta","resourcesRef","selectedAdventurer","adventurerContent","adventurersInTown","onMoveItemToAdventurer","adventurersArea","handleAdventurerTabSelected","onMoveItemInWarehouse","onMoveItemFromAdventurer","prevProps","classList","remove","setTimeout","add","getAdventurers","getQuests","selectAdventurersInTown","foundInParty","findAdventurerById","groupedAdventurers","foundAdventurers","adventurersOnQuest","action1","action2","moveItemInWarehouse","removeItem","removeItemFromWarehouse","StructureDetails","view","Building","buildTask","getStructureView","onCheatGold","onCheatResources","StructureDetailsView","DEFAULT_CAMERA_POS","THREE","Controls","camera","useThree","controls","useRef","useEffect","mapControls","MapControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","position","localStorage","savedCamera","JSON","parse","cam","scrollToPosition","Vector3","z","useRender","update","mouseDown","onCameraMove","setItem","stringify","handleMouseDown","handleMouseUp","document","addEventListener","removeEventListener","Sphere","geometry","color","object","DebugInspector","generator","scene","useModel","group","setGroup","toLowerCase","endsWith","OBJLoader","load","grp","ColladaLoader","collada","colladaGroup","Group","FBXLoader","WorldMapTerrain","texture","useMemo","modelInfo","wrapS","wrapT","rotation","attach","fog","Cube","parseVector3","input","terrainRotation","terrainScale","townPos","WorldMap","fov","unproject","compassCenter","compassPos","Vector2","distance","distanceTo","angle","onMapMove","activeQuests","questPosition","getQuestWorldPosition","onPartyClick","screenLocation","groundY","vector","set","direction","sub","normalize","clone","multiplyScalar","roundedProgress","floor","lastPosition","lastPositionWorld","nextPosition","nextPostionWorld","lerp","DroppableAdventurerAvatar","storeIsRehydrated","rngState","randomInt","ceil","dirty","random","Oracle","concat","sort","b","questVars","oracles","getOracle","getDescription","oracle","getOptions","fight","flight","answer","option","finder","getRandomAdventurer","investigate","leave","goblinHouseHallway","strongest","getAdventurerWithHighest","walkAround","lift","treeState","vars","updateQuestVars","goldAmount","PartyWindow","getAvatars","selected","handleAvatarClick","fromAdventurer","onMoveItemToOtherAdventurer","getBottomPart","getAdventurerInfo","getQuestDefinition","questNode","message","actions","lastLog","getTextEntry","getEncounterDefinition","currentEncounter","descriptionTextEntry","descriptionText","options","o","handleEncounterOptionClick","onDispatch","onUpdateEncounterResult","Component","onAdvanceQuest","fromAdventurerId","toAdventurerId","moveItemToOtherAdventurer","nodeIndex","updateEncounterResult","RealWorldView","compassRef","setScrollToPosition","world","compassEl","compassTextEl","firstElementChild","transform","opacity","innerHTML","Placement","manifest","MediaType","CheatWindow","itemSelectRef","handleCheatGold","handleCheatWorkers","onCheatWorkers","handleCheatResources","handleCheatItem","onCheatItem","handleChangeStructureState","checked","onCheatStructureState","Built","handleChangeGold","handleChangeWorkers","handleChangeResources","getStructureDefinition","onChange","getStructureRow","getItemOption","isNaN","getItemTypeOptions","resourceOrder","setStructureState","addWorkers","Menu","Resourcebar","createItem","withRouter","Indicator","itemsLoaded","itemsTotal","Preloader","loadMedia","promises","loadItem","catch","err","Promise","then","results","onLoadComplete","completed","mediaType","getType","loadImage","Howl","src","complete","indicator","Image","resolve","reject","check","naturalWidth","View","handleStartConstruction","startBuildingStructure","buildStructure","info","deedInfo","enoughGold","weaponDefinition","apparelDefinition","getApparelDefinition","ContextView","withPopup","placement","bottom","setPlacement","containerRect","referenceRect","popupElement","popupRect","top","left","offset","querySelector","right","resolution","App","containerRef","selectStructure","handleWindowOpened","handleMediaLoadComplete","addSounds","buttonClick","handleContextualObjectActivated","selectedContext","contextInfo","contextType","contextRect","handleAppClick","activeWindows","handleWindowClose","handleWindowBack","slice","selectedStructure","handleResize","bind","handleViewButtonClick","playSound","ContextPopup","getActiveWindow","Provider","backend","HTML5Backend","from","to","path","component","persistor","purge","reload","topWindow","commonWindowProps","innerHeight","parentBox","getMaxResources","getProducedResources","factor","resourceStructureDefinition","handleStructure","getQuestUpdates","qss","questDefinitions","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","nextNode","encounterDefintions","logUpdates","questUpdates","getRngState","Random","isLocalhost","Boolean","hostname","match","register","navigator","URL","process","toString","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","generateRandomStats","strength","perception","endurance","charisma","intelligenge","agility","luck","testState","lastTick","gameTick","lU","encounterResults","reward","questsToUpdate","questToUpdate","assign","structureInitialState","updateStructureState","structureState","createTask","combineReducers","element","startCombatAction","addAction","combatType","moveAction","engine","GameActionType","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","initial","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","initGame","axios","axiosResult","data","init","seed","seedrandom","configureStore","continueGame","startNewGame","runGame","ReactDOM","getElementById","registerServiceWorker","processCompletedTasks","handleCompletedTask","setInterval","logs","resourcesUpdates"],"mappings":"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","file":"static/js/main.2f5aed63.chunk.js","sourcesContent":["// tslint:disable:object-literal-sort-keys\nimport { Action, AnyAction } from \"redux\";\nimport { CombatActionType } from \"stores/combat\";\n\nexport enum ActionType {\n    clearCombatAction = \"clearCombatAction\",\n    startCombatAction = \"startCombatAction\",\n    moveActor = \"moveActor\",\n}\n\nexport interface AddCombatActionAction extends Action<ActionType> {\n    combatType: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport interface MoveActorAction extends Action<ActionType> {\n    actor: string;\n    location: number[];\n}\n\nexport function startCombatAction(type: CombatActionType, actor: string, target: number[], endsAt: number): AddCombatActionAction {\n    return {\n        type: ActionType.startCombatAction,\n        combatType: type,\n        actor,\n        target,\n        endsAt,\n    };\n}\n\nexport function moveActor(actor: string, location: number[]): MoveActorAction {\n    return {\n        type: ActionType.moveActor,\n        actor,\n        location,\n    };\n}\n\nexport function clearCombatAction(): Action<ActionType> {\n    // currently there is only one combat possible. so only one needs to be cleared\n    return {\n        type: ActionType.clearCombatAction,\n    };\n}\n","export interface CombatStoreState {\n    actors: Actor[];\n    turn: Allegiance;\n    action?: CombatAction;\n}\n\nexport interface Actor {\n    name: string;\n    allegiance: Allegiance;\n    location: number[];\n    health: number;\n    remainingAP: number;\n}\n\nexport enum Allegiance {\n    player,\n    enemy,\n}\n\nexport interface CombatAction {\n    type: CombatActionType;\n    actor: string;\n    target: number[];\n    endsAt: number;\n}\n\nexport enum CombatActionType {\n    move = \"move\",\n    slash = \"slash\",\n    shoot = \"shoot\",\n}\n\nexport const barBrawl: CombatStoreState = {\n    actors: [{\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [3, 5],\n        name: \"c4a5d270\",\n        remainingAP: 5,\n    }, {\n        allegiance: Allegiance.player,\n        health: 100,\n        location: [4, 6],\n        name: \"2e655832\",\n        remainingAP: 4,\n    }],\n    turn: Allegiance.player,\n};\n","// tslint:disable:object-literal-sort-keys\nimport { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\nimport { Action } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    gameTick = \"gameTick\",\n}\nexport interface GameTickAction extends Action<ActionType> {\n    delta: number;\n    rngState: seedrandomStateType | null;\n    resources: ResourceStoreState;\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\n// export type IncrementResource = IncrementResource // | others\n\n// tslint:disable: align\nexport function gameTick(delta: number,\n    rngState: seedrandomStateType | null,\n    resources: ResourceStoreState,\n    quests: QuestUpdate[],\n    log: LogUpdate[],\n): GameTickAction {\n    return {\n        type: ActionType.gameTick,\n        delta,\n        rngState,\n        resources,\n        quests,\n        log,\n    };\n}\n","import { TextEntry } from \"constants/text\";\n\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry extends TextEntry {\n    time: number;\n    channel: LogChannel;\n    channelContext?: string;\n}\n","// tslint:disable: object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { LogChannel } from \"stores/logEntry\";\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface AddLogEntryAction extends Action<ActionType> {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n    channelContext?: string;\n}\n\nexport function addLogEntry(key: string, context?: any, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        key,\n        channel,\n        channelContext,\n        context,\n    };\n}\n","import { clearCombatAction, moveActor } from \"actions/combat\";\nimport { Store } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Allegiance, CombatAction, CombatActionType } from \"stores/combat\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface CombatUpdate  {\n    // todo: maybe this is not needed\n    action: CombatAction | null;\n}\n\nconst updateCombat = (delta: number, store: Store<StoreState>): CombatUpdate | null => {\n    const state = store.getState();\n    const combat = state.combat;\n    if (combat.action) {\n        const action = combat.action;\n        if (action.endsAt < Date.now()) {\n            if (combat.turn === Allegiance.enemy) {\n                /* if (apLeft(enemy))\n                determine next action\n                else\n                players turn now\n                */\n            } else if (combat.turn === Allegiance.player) {\n                switch (combat.action.type) {\n                    case CombatActionType.move:\n                        store.dispatch(moveActor(combat.action.actor, combat.action.target));\n                        store.dispatch(clearCombatAction());\n                        break;\n                    default:\n                        break;\n                }\n                return {\n                    action: null,\n                };\n            }\n        }\n    }\n    return null;\n};\n\nexport default updateCombat;\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","\nexport enum ItemType {\n    deed,\n    apparel,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    arrowheads = \"arrowheads\",\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    gunpowder = \"gunpowder\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    sandwich = \"sandwich\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.4\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","import * as React from \"react\";\nimport \"./css/squareiconbutton.css\";\n\nexport interface Props {\n    text: string; /* temp */\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n}\n\ntype AllProps = Props;\n\nconst SquareIconButton = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = props.className || \"\";\n    return <div className = { `ui-button widgets-squareiconbutton ${className}` } onClick = { handleClick }>\n        { props.text }\n    </div>;\n};\n\nexport default SquareIconButton;\n","import * as React from \"react\";\nimport \"./css/tabstrip.css\";\n\nexport interface Props {\n    id: string;\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    active?: boolean;\n    children?: any;\n}\n\ntype AllProps = Props;\n\nconst Tab = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = ((props.active) ? \"active\" : \"\") + (props.className || \"\");\n    return <li className = { `widget-tab ${className}` } onClick = { handleClick } >\n        { props.children }\n    </li>;\n};\n\nexport default Tab;\n","import React, { useState } from \"react\";\nimport \"./css/tabstrip.css\";\nimport { Props as TabProps } from \"./Tab\";\n\nexport interface Props {\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    onTabSelected?: (tabId: string) => void;\n    children?: any;\n}\n\ntype AllProps = Props;\nconst Tabstrip = (props: AllProps) => {\n    let initialSelectedTab = null;\n    if (props.children && props.children.length) {\n        initialSelectedTab = props.children[0].props.id;\n    }\n    const [activeTab, setActiveTab] = useState<string|null>(initialSelectedTab);\n    const className = props.className || \"\";\n\n    const children = React.Children.map(props.children, (child: React.ReactElement<TabProps>) => {\n        const clone: React.ReactElement<TabProps> = React.cloneElement(child, {\n            active: child.props.id === activeTab,\n            onClick: () => { handleTabClick(child.props.id); },\n        });\n        return clone;\n    });\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n        if (props.onTabSelected) {\n            props.onTabSelected(tabId);\n        }\n    };\n\n    const handleClick = (e: React.MouseEvent<Element>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n\n    return <ul className = { `widget-tabstrip ${className}` } onClick = { handleClick } >\n        { children }\n    </ul>;\n};\n\nexport default Tabstrip;\n","// tslint:disable:object-literal-sort-keys\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.apparel;\nconst basePath = \"/img/items/apparel/\";\n\nexport enum ApparelType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface ApparelDefinition extends ItemDefinition {\n    equipmentType: ApparelType;\n    armorRating?: number;\n}\n\nconst all: Record<string, ApparelDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n        armorRating: 3,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n        armorRating: 2,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n        armorRating: 20,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: ApparelType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n        armorRating: 10,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n        armorRating: 10,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: ApparelType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: ApparelType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: ApparelType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: ApparelType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: ApparelType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default all;\n\nexport function getDefinition<T extends ApparelDefinition>(apparel: string): T {\n    return all[apparel] as T;\n}\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n                                  // todo: REMOVE\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { StructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport weaver from \"./weaver\";\nimport workshop from \"./workshop\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n    workshop = \"workshop\",\n}\n\nconst all = {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n    workshop,\n};\n\nexport default all;\n\nexport function getDefinition<T extends StructureDefinition>(structure: string): T {\n    return all[structure] as T;\n}\n","import * as moment from \"moment\";\nimport \"moment-duration-format\";\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\n\nexport const formatDuration = (time: number, unit: moment.DurationInputArg2 = \"milliseconds\" ): string => {\n    return moment.duration(time, unit)\n        .format(\"d [days] h [hours] m [min] s [sec]\", {\n        trim: \"both\",\n    });\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { stone: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { stone: 4 },\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { stone: 6 },\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n\nexport default weaver;\n","// tslint:disable:object-literal-sort-keys\n// todo: maybe 'quest items' is not the right name\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const torch: ProductionDefinition = {\n    item: Item.torch,\n    cost: {\n        resources: { wood: 2, fabric: 1 },\n        time: time.ONE_MINUTE,\n    },\n};\n\nexport const sandwich: ProductionDefinition = {\n    item: Item.sandwich,\n    cost: {\n        resources: { food: 1 },\n        time: time.ONE_MINUTE / 2,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { sandwich, torch } from \"definitions/production/questItems\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst workshop: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ torch, sandwich ],\n    }, {\n        // level 2:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }, {\n        // level 4:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\nexport default workshop;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\nexport enum DamageType {\n    kinetic = \"kinetic\",\n}\n\nexport interface DamageDefinition {\n    [DamageType.kinetic]: number | undefined;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n    damage: DamageDefinition;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n        damage: { [DamageType.kinetic]: 20 },\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \" Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n        damage: { [DamageType.kinetic]: 3 },\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n        damage: { [DamageType.kinetic]: 5 },\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n        damage: { [DamageType.kinetic]: 25 },\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n        damage: { [DamageType.kinetic]: 2 },\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n        damage: { [DamageType.kinetic]: 15 },\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n        damage: { [DamageType.kinetic]: 12 },\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n        damage: { [DamageType.kinetic]: 13 },\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n        damage: { [DamageType.kinetic]: 8 },\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 10 },\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n        damage: { [DamageType.kinetic]: 14 },\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n        damage: { [DamageType.kinetic]: 16 },\n    },\n};\nexport default weaponDefinitions;\n\nexport function getDefinition<T extends WeaponDefinition>(weapon: string): T {\n    return weaponDefinitions[weapon] as T;\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.arrowheads]: {\n        item: Item.arrowheads,\n        itemType,\n        iconImg: `${basePath}arrowheads.png`,\n    },\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.gunpowder]: {\n        item: Item.gunpowder,\n        itemType,\n        iconImg: `${basePath}gunpowder.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.sandwich]: {\n        item: Item.sandwich,\n        itemType,\n        iconImg: `${basePath}sandwich.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import apparel from \"./apparel\";\nimport deeds from \"./deeds\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...apparel,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import { TextEntry } from \"constants/text\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\nimport * as Handlebars from \"handlebars\";\nimport { Structure } from \"definitions/structures\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTextEntry(textEntry: TextEntry): string {\n        return this.get(textEntry.key, textEntry.context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    public static getStructureName(structure: Structure): string {\n        return this.get(`structure-${structure}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: Item, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: Item) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","import SquareIconButton from \"components/widgets/SquareIconButton\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport * as React from \"react\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/simplelog.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface StateProps  {\n    logEntries: LogEntry[];\n    questNames: string[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nenum ChannelType {\n    all,\n    town,\n    quest,\n}\n\ninterface ChannelDefinition {\n    label: string;\n    tabType: ChannelType;\n    tabId: string;\n    channelContext?: string;\n}\n\ninterface LocalState {\n    selectedTabId: string;\n    expanded: boolean;\n}\n\nclass SimpleLog extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            expanded: false,\n            selectedTabId: \"all\",\n        };\n    }\n\n    public render() {\n\n        const channels: ChannelDefinition[] = [{\n            label: TextManager.get(\"common-log-tab-all\"),\n            tabId: \"all\",\n            tabType: ChannelType.all,\n        }, {\n            label: TextManager.get(\"common-log-tab-town\"),\n            tabId: \"town\",\n            tabType: ChannelType.town,\n        }];\n\n        this.props.questNames.forEach((questName) => {\n            channels.push({\n                channelContext: questName,\n                label: TextManager.getQuestTitle(questName),\n                tabId: `quest-${questName}`,\n                tabType: ChannelType.quest,\n            });\n        });\n\n        let logEntries: LogEntry[] = [];\n        const currentTab = channels.find((t) => t.tabId === this.state.selectedTabId)!;\n        switch (currentTab.tabType) {\n            case ChannelType.all:\n                // All the things\n                logEntries = this.props.logEntries;\n                break;\n\n            case ChannelType.town:\n                // Only town\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.town);\n                break;\n\n            case ChannelType.quest:\n                // Only the selected quest\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.channelContext === currentTab.channelContext);\n                break;\n        }\n\n        const getLogEntryRow = (logEntry: LogEntry) => {\n            const text = TextManager.get(logEntry.key, logEntry.context);\n            return <div className = \"entry\" key={ logEntry.time }>\n                { text }\n            </div>;\n        };\n\n        const Tabs = channels.map((tab) => {\n            return <Tab id = { tab.tabId } key = { tab.tabId } >{ tab.label }</Tab>;\n        });\n\n        return <div className = { `log ${this.state.expanded ? \"expanded\" : \"\"}` }>\n            <div className = \"tab-bar\">\n                <Tabstrip className = \"tabs\"  onTabSelected = { (tabId: string) => this.handleTabSelected(tabId) } >\n                    { Tabs }\n                </Tabstrip>\n                <SquareIconButton className = \"expand-button\" onClick = { () => this.handleToggleExpand() } text = { this.state.expanded ? \"▼\" : \"▲\" }/>\n            </div>\n            <div className = \"log-entries\">\n                { logEntries.map((entry) => getLogEntryRow(entry))}\n            </div>\n        </div>;\n    }\n\n    private handleTabSelected(tabId: string) {\n        this.setState({\n            selectedTabId: tabId,\n        });\n    }\n\n    private handleToggleExpand() {\n        this.setState({\n            expanded: !this.state.expanded,\n        });\n    }\n}\n\nexport default SimpleLog;\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];        // list of adventurer ids\n    progress: number;       // Which questnode the party is at currently\n    questVars: any;\n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    icon: string;\n\n    currentEncounter: Encounter | null;\n    reward?: QuestReward;\n}\n","import { TextEntry } from \"constants/text\";\nimport { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getQuests = (state: StoreState) => state.quests;\nconst getLog = (state: StoreState) => state.log;\n\nconst activeQuests = (quests: QuestStoreState[]) => {\n    // returns the names of the active quests\n    return quests.filter((q) => q.status === QuestStatus.active).map((q) => q.name);\n};\n\nexport const selectActiveQuests = createSelector([\n    getQuests],\n    activeQuests,\n);\n\n/**\n * Returns the most recent log entry for a given quest\n */\nexport const selectLastQuestLogEntry = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry | undefined => {\n        const questLog = log.find((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n        return questLog;\n    },\n)(state);\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import SimpleLog, { DispatchProps, Props, StateProps } from \"components/log/SimpleLog\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectActiveQuests } from \"selectors/quests\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        logEntries: store.log,\n        questNames: selectActiveQuests(store),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(SimpleLog);\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n    error,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\n\nexport class SoundManager {\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            // todo: assert\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(1, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, 1, 500);\n\n        currentMusicTrack = track;\n    }\n}\n","import { getDefinition, Structure  } from \"definitions/structures\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport Konva from \"konva\";\nimport * as React from \"react\";\nimport { Image, Layer, Stage, Text } from \"react-konva\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/townView.css\";\n\n// It's actually not the *real* town view hihi\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n\n}\n\nexport interface Props {\n    onStructureClick?: (structure: Structure | null) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n    // tasks: TaskStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {}\n\ntype AllProps = Props & DispatchProps & StateProps & AppContextProps;\n\nclass RealTownView extends React.Component<AllProps, LocalState> {\n\n    private anim?: Konva.Animation = undefined;\n\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            images: {},\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n\n        /*        const period = 500;\n        if (this.plasmaBeam) {\n            this.plasmaBeam.filters([Konva.Filters.Brighten]);\n            //this.plasmaBeam.cache(null);\n            this.anim = new Konva.Animation((frame: any) => {\n                if (this.plasmaBeam){\n                const freq = 2; // speed\n                const brightness = (Math.sin((frame.time / period) * freq) + 1) / 2;   // fluctuate between 0 and 1\n                this.plasmaBeam.brightness(brightness);\n                //this.plasmaBeam.cache(null);\n                this.plasmaBeam.fillPatternOffsetX(this.plasmaBeam.fillPatternOffsetX() - 150);\n                }\n            }, this.plasmaBeam.getLayer());\n\n            this.anim.start();\n        }*/\n    }\n\n    public componentWillUnmount() {\n        if (this.anim) { this.anim.stop(); }\n        delete this.anim;\n    }\n\n    // public changeSize(node: Konva.Node) {\n    //     node.to({\n    //         scaleX: Math.random() + 2.8,\n    //         scaleY: Math.random() + 2.8,\n    //         duration: 10,\n    //     });\n    // }\n\n    public render() {\n        const structures = Object.keys(Structure).map((structure, index) => {\n            const structureDef = getDefinition(structure);\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            if (structureStore.state === StructureState.NotBuilt) {\n                return null;\n            }\n            const levelDef = structureDef.levels[structureStore.level];\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <Text name= { structure }\n                key = { structure }\n                text = { `█ ${displayName} (level ${structureStore.level + 1})` }\n                x = { 100 }\n                y = { 90 * index + 100 }\n                fontSize = { 80 }\n                fill = { \"white\" }\n                onClick = { this.handleStructureClick }\n            />;\n        });\n        // tslint:disable-next-line:no-console\n        console.log(`rendered the town`); // TODO: remove\n\n        return (\n            <Stage width={1024} height={768} scale= { {x: 0.4, y: 0.4} }>\n            <Layer name=\"background\" onClick = { this.handleBackgroundClick } >\n                <Image image={ this.imgSrc(\"img/town/sky.jpg\") }></Image>\n            </Layer>\n            <Layer name=\"town\">\n                {/* <Rect\n                    x={20}\n                    y={20}\n                    width={50}\n                    height={50}\n                    fill={ \"white\"}\n\n                    // onClick={this.handleClick}\n                /> */}\n                {/* <Rect\n                     PLASMA BEAM\n                    x={20}\n                    y={20}\n                    width={1500}\n                    height={256}\n                    fillPatternImage = { this.imgSrc(\"img/town/effects/plasma_beam_heavy_green.png\") }\n                    fillPatternOffset = { { x: 20, y: 0 }}\n                    globalCompositeOperation = \"lighter\"\n                    shadowBlur={5}\n                    ref = { (node: Konva.Rect) => this.plasmaBeam = node }\n                /> */}\n                   <Image\n                        name = \"warehouse\"\n                        image={ this.imgSrc(\"img/town/tavern.png\") }\n                        x = { 15 }\n                        y = { 1057 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        shadowColor = \"red\"\n                        shadowEnabled = { true }\n                        strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        // ref={ (node) => { this.convaImages.tavern = node!; }}\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n\n                    <Image\n                        name = { Structure.warehouse }\n                        image={ this.imgSrc(\"img/town/lighthouse.png\") }\n                        // onClick = { this.handleStructureClick }\n\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    <Image\n                        name = \"lumberMill\"\n                        image = { this.imgSrc(\"img/town/mill.png\") }\n                        x = { 947 }\n                        y = { 1384 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        // shadowColor = \"red\"\n                        // shadowEnabled = { true }\n                        // strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    { structures }\n\n                    </Layer>\n                    {/* <SmokeEmitter\n                        emitterX = { 190 }\n                        emitterY = { 510 }\n                        smokeImg = { this.imgSrc(\"img/town/effects/smoke.png\") }\n                    /> */}\n\n            </Stage>\n        );\n    }\n\n    public handleStructureClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick( Structure[evt.target.name()]); }\n    }\n\n    public handleBackgroundClick = () => {\n        if (this.props.onStructureClick) { this.props.onStructureClick(null); }\n    }\n\n    private imgSrc(url: string): HTMLImageElement {\n        const result = this.props.media.find((m) => m.url === url);\n        if (result === undefined) {\n            throw Error(`Could not find image with url ${url}`);\n        } else {\n            return result.content as HTMLImageElement;\n        }\n    }\n\n    private playMusic() {\n        SoundManager.playMusicTrack(MusicTrack.town);\n    }\n}\n\nconst drawHitFromCache = (img: Konva.Image) => {\n    if (img) {\n       // img.cache(null);\n       // img.drawHitFromCache(0.5);\n    }\n};\n\nexport default RealTownView;\n","import { AppContext } from \"components/App\";\nimport { MediaItem } from \"components/preloading/Preloader\";\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport * as React from \"react\";\n\n// Sharing context within the entire App\nexport interface AppContextProps {\n    onContextualObjectActivated: (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => void;\n    onOpenWindow: (window: React.ReactElement) => void;\n    media: MediaItem[];\n}\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends React.Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n};\n","\nimport RealTownView, { DispatchProps, Props, StateProps } from \"components/RealTownView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        structures: store.structures,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealTownView) as React.ComponentType<Props>;\n","import { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface ModifyGoldAction extends Action<ActionType> {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface AddResources extends Action<ActionType> {\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n};\n","import \"components/ui/css/common/icon.css\";\nimport itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items, to be used as requirements for something\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const aggregate = props.items.reduce((accumulator: object, current: Item) => {\n        if (!accumulator[current]) {\n            accumulator[current] = 0;\n        }\n        accumulator[current]++;\n        return accumulator;\n    }, {});\n\n    const listItems = Object.keys(aggregate).map((key: string) => {\n        const item = key as Item;\n        const amount = aggregate[key] as number;\n        let listItemClass = \"item\";\n\n        // Check if we have enough\n        const amountInInventory = itemsInInventory ? itemsInInventory.filter((i) => i === item).length : 0;\n        if (amount > amountInInventory) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className = { listItemClass } key = { item }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage: `url(${itemDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { `${TextManager.getItemName(item)} (${ amount })` }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    const tmpWarehouse = [ ...store.items];\n    ownProps.items.forEach((item: Item) => {\n        const found = tmpWarehouse.findIndex((i) => i === item);\n        if (found > -1) {\n            // Remove the item from tmpWarehouse and add to itemsInInventory\n            const [ removed ] = tmpWarehouse.splice(found, 1);\n            if (removed) {\n                itemsInInventory.push(removed);\n            }\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextView\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","export enum IconSize {\r\n    smallest,\r\n    small,\r\n    medium,\r\n    big,\r\n    biggest,\r\n}\r\n\r\nexport const getClassName = (size?: IconSize): string => {\r\n    switch (size) {\r\n        case IconSize.smallest:\r\n            return \"common-icon-smallest\";\r\n        case IconSize.small:\r\n            return \"common-icon-small\";\r\n        case IconSize.medium:\r\n            return \"common-icon-medium\";\r\n        case IconSize.big:\r\n            return \"common-icon-big\";\r\n        case IconSize.biggest:\r\n            return \"common-icon-biggest\";\r\n    }\r\n    return getClassName(IconSize.medium);\r\n};\r\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    // Each additional worker shaves off 10% of the production time\n    return time - (.1 * time * (workers - 1));\n};\n","import { AppContext } from \"components/App\";\nimport \"components/ui/css/common/icon.css\";\nimport { ContextType } from \"constants/context\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\n\nexport interface Props {\n    item: Item;\n    onClick?: (event: React.MouseEvent) => void;\n    size?: IconSize;\n    showContext?: boolean;\n}\n\nconst ItemIcon: React.FC<Props> = (props) => {\n    const { item } = props;\n    const itemDefinition = getDefinition(item);\n    const context = React.useContext(AppContext)!;\n    const ref = React.useRef(null);\n\n    if (!itemDefinition) {\n        // tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    const handleClick = (event: React.MouseEvent) => {\n        if (props.showContext !== false) {\n            const origin = (event.currentTarget as HTMLElement);\n            const originRect = origin.getBoundingClientRect();\n            context.onContextualObjectActivated(\n                ContextType.item,\n                getDefinition(item),\n                ref,\n                originRect,\n            );\n        }\n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    };\n\n    const className = \"item-icon \" + getClassName(props.size);\n\n    return (\n        <div className = { className }\n            onClick = { handleClick }\n            style = {{\n                backgroundImage: `url(${itemDefinition.iconImg})`,\n            }}>\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps { }\nexport interface Props extends DispatchProps {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nconst Progressbar = (props: Props) => {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{ props.label }</div>\n            <div className=\"progressbar-info\" style= {{ width: `${progress * 100}%`}}>  </div>\n        </div>\n    );\n};\n\nexport default Progressbar;\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","import { Item } from \"definitions/items/types\";\nimport { Action } from \"redux\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface MoveItemInWarehouseAction extends Action<ActionType> {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { Action } from \"redux\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface StructureAction extends Action<ActionType> {\n    structure: Structure;\n}\nexport interface StructureStateAction extends StructureAction {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends StructureAction {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): StructureAction {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action, AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface AddAction extends Action<ActionType> {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: (e: React.MouseEvent) => void;\n    onDown?: (e: React.MouseEvent) => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = (e: React.MouseEvent) => {\n        if (props.onUp && !props.upDisabled) { props.onUp(e); }\n    };\n\n    const handleDown = (e: React.MouseEvent) => {\n        if (props.onDown && !props.downDisabled) { props.onDown(e); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import MaterialsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"utils/textManager\";\nimport { formatDuration } from \"utils/time\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport \"./css/productionstructureview.css\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Array<Item | null>;  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedItem: Item|null;\n    workersAssigned: number;\n}\n\nexport default class ProductionStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedItem: null,\n            workersAssigned: 0,\n        };\n    }\n\n    public render() {\n        const structureDefinition = getDefinition<ProductionStructureDefinition>(this.props.type);\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${this.props.type}\n                with type ProductionStructureDefinition.`);\n        }\n        const level: number = this.props.level || 0;\n        const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.getStructureName(this.props.type);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style={{float: \"right\"}}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade } >\n                        { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const createCraftTabs = () => {\n            const selectedItem = this.state.selectedItem;\n\n            return levelDefinition.produces.map((produces) => {\n                const handleSelectCraftingItem = (e: React.MouseEvent) => {\n                    e.stopPropagation();\n\n                    this.setState({\n                        selectedItem: produces.item,\n                    });\n                };\n\n                return <li\n                    key = { `craft${produces.item}`}\n                    onClick = { handleSelectCraftingItem }\n                    className = { selectedItem === produces.item ? \"selected\" : \"\" }\n                >\n                    <ItemIcon item= { produces.item }  />\n                    { TextManager.getItemName(produces.item) }\n                </li>;\n            });\n        };\n\n        const createCraftingDetails = () => {\n            const item = this.state.selectedItem;\n            if (!item) { return null; }\n\n            const produces = levelDefinition.produces.find((p) => p.item === item)!;\n            const playerResources = this.props.resources || {};\n            const costResources = produces.cost.resources!;\n            const missingAtLeastOneResource = Object.keys(costResources)\n                .some((resource) => costResources[resource] > playerResources[resource]);\n\n            let missingAtLeastOneItem = false;\n            const costMaterials = produces.cost.materials;\n            if (costMaterials) {\n                missingAtLeastOneItem = costMaterials\n                    .some((i: Item) => this.props.items.indexOf(i) === -1);\n            }\n\n            const disabled = missingAtLeastOneResource || missingAtLeastOneItem || this.state.workersAssigned < 1;\n            // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n            const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n            const makeTimeString = (time: number): string => {\n                if (this.state.workersAssigned === 0) {\n                    return \"\";\n                }\n                const craftingTime = calculateProductionTime(time, this.state.workersAssigned);\n                const formatted = formatDuration(craftingTime);\n                return ` Crafting time: ${formatted}`;\n            };\n\n            const handleClick = (e: React.MouseEvent) => {\n                e.stopPropagation();\n\n                if (this.props.onCraft) {\n                    this.props.onCraft(produces, this.state.workersAssigned);\n                    this.setState({\n                        workersAssigned: 0,\n                    });\n                }\n            };\n\n            const handleUp = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned + 1,\n                });\n            };\n\n            const handleDown = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned - 1,\n                });\n            };\n\n            let costItemsContent = null;\n            if (costMaterials) {\n                costItemsContent = <MaterialsCostBox items = { costMaterials } />;\n            }\n            return (\n                <div className = \"crafting-details\">\n                    Craft a { TextManager.getItemName(itemDefinition.item) }\n                    <div className = \"crafting-costs\">\n                        <fieldset>\n                            <ResourcesCostBox resources = { costResources } />\n                        </fieldset>\n                        <fieldset>\n                            { costItemsContent }\n                        </fieldset>\n                    </div>\n                    <div style={ { display: \"flex \"}}>\n                        <UpDownValue\n                            value = { this.state.workersAssigned }\n                            label ={ \"Workers: \" }\n                            onUp = { handleUp }\n                            onDown = { handleDown }\n                            upDisabled={\n                                this.state.workersAssigned >= this.props.workersFree ||\n                                this.state.workersAssigned >= MAX_WORKERS_CRAFTING\n                            }\n                            downDisabled={ this.state.workersAssigned < 1 }\n                        />\n                        &nbsp;\n                        { makeTimeString(produces.cost.time || 0) }\n                    </div>\n                    <div>\n                        <button\n                            disabled = { disabled }\n                            onClick = { handleClick }>\n                            Craft\n                        </button>\n                    </div>\n                </div>\n            );\n        };\n\n        const createProgressbars = () => {\n            const tasks = this.props.tasks || [];\n            return tasks.map((t) => <Progressbar\n                key = { `${t.name}${t.startTime}` }\n                label = { `${t.name} (${formatDuration(t.timeRemaining)})` }\n                progress = { t.progress }/>,\n            );\n        };\n\n        return (\n            // TODO: abstract some stuff to generic StructureView\n            <details open = { true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            { createCraftTabs() }\n                        </ul>\n                        { createCraftingDetails() }\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        { createProgressbars() }\n                    </fieldset>\n                </section>\n            </details>\n        );\n    }\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    return {\n        gold: store.gold,\n        items: store.items,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ProductionStructureView);\n","import { getDefinition, Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport UpDownValue from \"../ui/UpDownValue\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onWorkersUp?: () => void;\n    onWorkersDown?: () => void;\n}\n\nexport interface Props  {\n    type: Structure;\n}\n\nexport interface StateProps {\n    level?: number;\n    workers?: number;\n    workersFree?: number;\n    gold?: number;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ResourceStructureView = (props: AllProps) => {\n\n    const structureDefinition = getDefinition<ResourceStructureDefinition>(props.type);\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n    const level: number = props.level || 0;\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(props.type);\n\n    const createWorkersRow = () => {\n\n        const handleUp = () => {\n            if (props.onWorkersUp) { props.onWorkersUp(); }\n        };\n        const handleDown = () => {\n            if (props.onWorkersDown) { props.onWorkersDown(); }\n        };\n\n        const upDisabled = props.workers === levelDefinition.workerCapacity || (props.workersFree || 0) < 1;\n        const downDisabled = props.workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value = { props.workers }\n            max = { levelDefinition.workerCapacity }\n            upDisabled = { upDisabled }\n            downDisabled = { downDisabled }\n            onDown = { handleDown }\n            onUp = { handleUp }\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const gold = props.gold || 0;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick = { handleClick }\n                disabled= { !canUpgrade } >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${props.workers} = ${generates[value] * (props.workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            { \"Generates (every minute): \" }\n            <br/>\n            { generatesText }\n        </div>;\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <details open = { true } className = \"structureview\">\n            <summary>{ displayName }</summary>\n            <section>\n                { createWorkersRow() }\n                { createUpgradeRow() }\n                { createGeneratesRow() }\n            </section>\n        </details>\n    );\n};\n\nexport default ResourceStructureView;\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport ResourceStructureView,  { DispatchProps, Props, StateProps } from \"../../components/structures/ResourceStructureView\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n    if (!structureStore) { throw new Error(`No structure '${ownProps.type}' found in the store!`); }\n    return {\n        gold: store.gold,\n        level: structureStore.level,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n        onWorkersDown: () => {\n            dispatch(decreaseWorkers(ownProps.type));\n        },\n        onWorkersUp: () => {\n            dispatch(increaseWorkers(ownProps.type));\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResourceStructureView);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Action } from \"redux\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",\n    advanceQuest = \"advanceQuest\",\n    updateQuestVars = \"updateQuestVars\",\n    updateEncounterResult = \"updateEncounterResult\",\n    startEncounter = \"startEncounter\",\n    updateQuests = \"updateQuests\",\n}\n\nexport interface QuestAction extends Action<ActionType> {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface StartEncounterAction extends QuestAction {\n    encounter: Encounter;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Move to the next node */\nexport function advanceQuest(quest: string): QuestAction {\n    return {\n        type: ActionType.advanceQuest,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\nexport function startEncounter(quest: string, encounter: Encounter): StartEncounterAction {\n    return {\n        type: ActionType.startEncounter,\n        questName: quest,\n        encounter,\n    };\n}\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurerInventory,\n    warehouse,\n    tavern,\n    adventurerEquipment,\n}\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\nimport \"./css/draggableadventureravatar.css\";\n\nexport interface Props {\n    sourceId?: string;\n    onClick?: () => void;\n    disabled?: boolean;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface AdventurerAvatarDragInfo {\n    adventurer: AdventurerStoreState;\n    sourceId?: string;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\n    beginDrag(props: Props & AdventurerAvatarProps) {\n        // Return the data describing the dragged item\n        return {\n            adventurer: props.adventurer,\n            sourceId: props.sourceId,\n            sourceType: DragSourceType.adventurerInventory,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableAdventurerAvatar extends React.Component<Props & CollectedProps & AdventurerAvatarProps> {\n\n    public render() {\n        const { isDragging, connectDragSource, disabled } = this.props;\n        let className = \"draggable-adventurer-avatar\";\n        if (disabled) {\n            className += \" disabled\";\n        }\n        if (isDragging) {\n            className += \" dragging\";\n        }\n\n        /*if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }*/\n        return connectDragSource(\n            <div className = { className }>\n                <AdventurerAvatar\n                    // Copy all props down to AdventurerAvatar\n                    { ...this.props }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\n","import { TextEntry } from \"constants/text\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nexport interface EncounterDefinition {\n    name: Encounter;\n    getOracle: (questName: string, store: StoreState) => Oracle;\n    chance?: number;    // number from 0 to 1, undefined means: 1\n    getDescription: (oracle: Oracle) => TextEntry;\n    getOptions: (oracle: Oracle) => Record<string, string>;\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => string;\n}\n\nexport enum Encounter {\n    backstabbed = \"backstabbed\",\n    goblinHouseHallway = \"goblinHouseHallway\",\n    goblinHouseOutside = \"goblinHouseOutside\",\n    theBigTree = \"theBigTree\",\n}\n","import { Item } from \"definitions/items/types\";\nimport { Encounter } from \"../encounters/types\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum QuestNodeType {\n    nothing = 0,    // Nothing much going on here\n    encounter = 1,\n    combat = 2,     // Not implemented\n    boss = 3,\n}\n\nexport interface QuestDefinition {\n    nodes: QuestNode[];\n    requiredItems?: Item[];\n}\n\nexport interface QuestNode {\n    x: number;\n    y: number;\n    type: QuestNodeType;\n    encounter?: Encounter; // TODO: or array of encounters\n    log?: string;      // this text will appear in the log upon entering the node. only at 'nothing' nodes\n}\n\nconst kill10Boars: QuestDefinition = {\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node0\",\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node1\",\n    // }, {\n    //     x: 0,\n    //     y: 3,\n    //     type: QuestNodeType.nothing,\n    //     log: \"In the distance, a forest looms\",\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.goblinHouseOutside,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node4\",\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 3,\n        y: 3,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 4,\n        y: 4,\n        type: QuestNodeType.nothing,\n        log: \"The party spots a boss\",\n    }, {\n        x: 5,\n        y: 4,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst retrieveMagicAmulet: QuestDefinition = {\n    requiredItems: [\n        Item.torch,\n        Item.torch,\n        Item.torch,\n        Item.sandwich,\n        Item.sandwich,\n    ],\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Papa loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Mama loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Look at 'em sway with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"gettin' so gay with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.theBigTree,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 3,\n        y: 1,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst all = {\n    kill10Boars,\n    retrieveMagicAmulet,\n};\n\nexport default all;\n\nexport function getDefinition(quest: string): QuestDefinition {\n    return all[quest];\n}\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/droppableadventurerslot.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/*\n * Can drop adventurers on this */\nclass DroppableAdventurerSlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n        let className = \"droppable-adventurer-slot\";\n\n        if (isOver) {\n            className += \" active-drop\";\n        } else if (canDrop) {\n            className += \" can-drop\";\n        }\n\n        return connectDropTarget(\n            <div className = { className }>\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ADVENTURER,\n    dropTarget,\n    collect,\n)(DroppableAdventurerSlot);\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAddEventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (index: number) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = <AdventurerAvatar adventurer = { adventurer } displayName = { false } onClick = { () => props.onRemoveAdventurer(i) }/> ;\n                className = \"has-adventurer\";\n            } else {\n                content = <DroppableAdventurerSlot onDrop = { (item: AdventurerAvatarDragInfo) => { props.onAddEventurer(item, i); }} />;\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return <ul className = \"assign-adventurers\">\n        { slotsContent() }\n    </ul>;\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport ItemsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, QuestDefinition } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\n\nconst availableSlots = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface StateProps {\n    items: Array<Item | null>;  // items in inventory\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {}\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName: string | null;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n\n    onQuestClick: (questName: string) => void;\n    onRemoveAdventurer: (index: number) => void;\n    onAddAdventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onLaunchQuest: () => void;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n}\n\nexport default class QuestBoard extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n    }\n\n    public render() {\n        const questListContent: JSX.Element[] = this.props.availableQuests.map((q) => {\n            const iconImgPath = `img/sigils/${ q.icon }`;\n            const className = \"quest\" + ((q.name === this.props.selectedQuestName) ? \" selected\" : \"\");\n            return <li key={ q.name } className = { className } onClick = { () => { this.props.onQuestClick(q.name); } }>\n                <div\n                    className = \"icon\"\n                    style={{backgroundImage: `url(${iconImgPath})`}}\n                ></div>\n                <div className = \"title\">{ TextManager.getQuestTitle(q.name) } </div>\n            </li>;\n        });\n\n        const getQuestDetails = () => {\n            if (!this.props.selectedQuestName) {\n                return null;\n            }\n            const quest = this.props.availableQuests.find((q) => q.name === this.props.selectedQuestName);\n            if (!quest) {\n                return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n            }\n            const questDefinition = getDefinition(quest.name);\n\n            // Need a full party to launch\n            const fullParty = this.props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n            // Check if we have the required items\n            const enoughItems = this.checkEnoughItems(questDefinition);\n\n            const canLaunch = fullParty && enoughItems;\n\n            return <div className=\"quest-details\">\n                { TextManager.getQuestDescription(this.props.selectedQuestName) }\n                <AssignAdventurers\n                    availableSlots = { availableSlots }\n                    assignedAventurers = { this.props.assignedAventurers }\n                    onRemoveAdventurer = { this.props.onRemoveAdventurer }\n                    onAddEventurer = { this.props.onAddAdventurer } />\n                <ItemsCostBox items = { questDefinition.requiredItems || [] }/>\n                <button disabled = { !canLaunch } onClick = { () => this.props.onLaunchQuest() }>\n                    { TextManager.get(\"structure-tavern-button-launch-quest\") }\n                </button>\n            </div>;\n        };\n\n        // quest board, expanded quest info + assign adventurers + launch button\n        return <div className = \"quest-board\">\n            <h2> { TextManager.get(\"structure-tavern-title-quest-board\") } </h2>\n            <ul className = \"quest-list\">\n                { questListContent }\n            </ul>\n            { getQuestDetails() }\n        </div>;\n    }\n\n    /**\n     * Returns true if all the items required by the quest are in the inventory\n     */\n    public checkEnoughItems(questDefinition: QuestDefinition): boolean {\n        if (!questDefinition.requiredItems) {\n            return true;\n        }\n        return questDefinition.requiredItems.every((item: Item) => {\n            const amountRequired = (questDefinition.requiredItems)!.filter((i) => i === item).length;\n            return this.props.items.filter((i) => i === item).length >= amountRequired;\n        });\n    }\n}\n","import QuestBoard, { Props, StateProps } from \"components/structures/tavern/QuestBoard\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        items: store.items,\n    };\n}\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(QuestBoard);\n","import { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n    assignEquipment = \"assignEquipment\",\n    removeEquipment = \"removeEquipment\",\n}\n\nexport interface Action {\n    type: ActionType;\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends Action {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends Action {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport interface AssignEquipmentAction extends Action {\n    item: Item;\n    equipmentSlot: EquipmentSlotType;\n}\nexport interface RemoveEquipmentAction extends Action {\n    equipmentSlot: EquipmentSlotType;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n\nexport function assignEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item): AssignEquipmentAction {\n    return {\n        type: ActionType.assignEquipment,\n        adventurerId,\n        item,\n        equipmentSlot,\n    };\n}\n\nexport function removeEquipment(adventurerId: string, equipmentSlot: EquipmentSlotType): RemoveEquipmentAction {\n    return {\n        type: ActionType.removeEquipment,\n        adventurerId,\n        equipmentSlot,\n    };\n}\n","// todo: hooks!\n// https://github.com/react-dnd/react-dnd/pull/1244\nimport { DragType } from \"constants/dragging\";\nimport { getDefinition } from \"definitions/items\";\nimport { ApparelDefinition, ApparelType } from \"definitions/items/apparel\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/equipmentslot.css\";\nimport { InventoryItemDragInfo } from \"./DraggableItemIcon\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        const item = monitor.getItem().item;\n\n        return itemAndEquipmentSlotMatch(item, props.type);\n    },\n};\n\n// Returns true if item can be slotted in equipmentSlotType\nexport const itemAndEquipmentSlotMatch = (item: Item, equipmentSlotType: EquipmentSlotType) => {\n    switch (equipmentSlotType) {\n        case EquipmentSlotType.chest:\n            return checkEquipment(item, ApparelType.chest);\n         case EquipmentSlotType.feet:\n            return checkEquipment(item, ApparelType.feet);\n        case EquipmentSlotType.hands:\n            return checkEquipment(item, ApparelType.hands);\n        case EquipmentSlotType.head:\n            return checkEquipment(item, ApparelType.head);\n        case EquipmentSlotType.legs:\n            return checkEquipment(item, ApparelType.legs);\n        case EquipmentSlotType.mainHand:\n        case EquipmentSlotType.offHand:\n            const itemDefinition = getDefinition(item);\n            if (itemDefinition.itemType !== ItemType.weapon) {\n                return false;\n            }\n\n            // todo: prevent shields to be equipped in main hand\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport enum EquipmentSlotType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n    mainHand,\n    offHand,\n}\n\nexport interface Props {\n    type: EquipmentSlotType;\n    onDrop: (item: InventoryItemDragInfo) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The EquipmentSlot displays a slot in which an item can be placed.\n */\nconst EquipmentSlot = (props: React.PropsWithChildren<Props & DropSourceProps>) => {\n    const {\n        isOver,\n        canDrop,\n        connectDropTarget,\n    } = props;\n    const isActive = isOver && canDrop;\n    let borderColor = \"grey\";\n    if (isActive) {\n        borderColor = \"green\";\n    } else if (canDrop) {\n        borderColor = \"orange\";\n    }\n\n    return connectDropTarget(\n        <div className = \"equipment-slot\" style = { { borderColor }} title={EquipmentSlotType[props.type]}>\n            { props.children }\n        </div>,\n    );\n};\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(EquipmentSlot);\n\nconst checkEquipment = (item: Item, equipmentType: ApparelType) => {\n    const itemDefinition = getDefinition(item);\n    if (itemDefinition.itemType !== ItemType.apparel) {\n        return false;\n    }\n    return (itemDefinition as ApparelDefinition).equipmentType === equipmentType;\n};\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport ItemIcon from \"./ItemIcon\";\n\nexport interface Props {\n    index: number;\n    item: Item;\n    sourceType: DragSourceType;\n    sourceId?: string;\n    size?: IconSize;\n    onClick?: (event: React.MouseEvent) => void;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface InventoryItemDragInfo {\n    item: Item;\n    inventorySlot?: number;\n    sourceId?: string;\n    sourceType: DragSourceType;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\n    beginDrag(props: Props) {\n        // Return the data describing the dragged item\n        return {\n            inventorySlot: props.index,\n            item: props.item,\n            sourceId: props.sourceId,\n            sourceType: props.sourceType,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableItemIcon extends React.Component<Props & CollectedProps > {\n\n    public render() {\n        const { item, onClick, isDragging, connectDragSource, size } = this.props;\n\n        const handleClick = (event: React.MouseEvent) => {\n            if (onClick) {\n                onClick(event);\n            }\n        };\n        if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }\n        return connectDragSource(\n            <div>\n                <ItemIcon\n                    item = { item }\n                    onClick = { handleClick }\n                    size = { size }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport { InventoryItemDragInfo } from \"../DraggableItemIcon\";\nimport { itemAndEquipmentSlotMatch } from \"../EquipmentSlot\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor) {\n        const dragInfo: InventoryItemDragInfo = monitor.getItem();\n        if (dragInfo.sourceType === DragSourceType.adventurerEquipment) {\n            return props.item == null || itemAndEquipmentSlotMatch(props.item, dragInfo.inventorySlot!);\n        }\n        return true;\n    },\n};\n\nexport interface Props {\n    item: Item | null;\n    onDrop: (item: any) => void;\n    size?: IconSize;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The InventorySlot displays a slot in which an item can be placed.\n */\nclass InventorySlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        const isActive = isOver && canDrop;\n\n        const classNames = [\n            \"inventory-item\",\n            getClassName(this.props.size),\n        ];\n\n        if (isActive) {\n            classNames.push(\"drop-active\");\n        } else if (canDrop) {\n            classNames.push(\"drop-possible\");\n        }\n\n        return connectDropTarget(\n            <div className = { classNames.join(\" \") }>\n                { this.props.children }\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(InventorySlot);\n","import DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport {Item} from \"definitions/items/types\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    iconSize?: IconSize;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props & AppContextProps) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n        };\n\n        if (item) {\n            contents = <DraggableItemIcon\n                index = { i }\n                sourceId = { props.sourceId }\n                sourceType = { props.sourceType }\n                item = { item }\n            >\n            </DraggableItemIcon>;\n       }\n\n        const slot = <InventorySlot\n            key = { `inventory-slot-${i}` }\n            item = { item }\n            size = { props.iconSize }\n            onDrop = { handleDrop }\n        >\n            { contents }\n        </InventorySlot>;\n        slots.push(slot);\n   }\n    return <div className = \"inventory\">\n        {slots}\n    </div>;\n};\nexport default withAppContext(Inventory); // todo: we don't need appcontext\n","import { AppContext } from \"components/App\";\nimport { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventurerinfo.css\";\nimport DraggableItemIcon, { InventoryItemDragInfo } from \"./DraggableItemIcon\";\nimport EquipmentSlot, { EquipmentSlotType } from \"./EquipmentSlot\";\nimport Inventory from \"./inventory/Inventory\";\n\nexport interface Props {\n    adventurerId: string;\n}\n\nexport interface DispatchProps {\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => void;\n    onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => void;\n    onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => void;\n    onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => void;\n}\n\nexport interface StateProps {\n    adventurer: AdventurerStoreState;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\nconst AdventurerInfo = (props: AllProps) => {\n\n    const context = React.useContext(AppContext)!;\n    const adventurer = props.adventurer;\n    const attributes = Object.keys(adventurer.stats).map((stat) => {\n        const value: number = adventurer.stats[stat];\n        return <div key = { `${adventurer.id}-${stat}`} > <b>{ stat }</b>: { value.toFixed(1) } </div>;\n    });\n    // const equipmentList = Object.keys(getEquipment(.map((equipment) =) {\n    //     return <div key = { `${adventurer.id}-${equipment}` } ><b>{ equipment }</b>: { getEquipment(equipment] }  </di)>;\n    // });\n\n    const handleDropItemEquipment = (dragInfo: InventoryItemDragInfo, slotType: EquipmentSlotType) => {\n        // When an item gets dropped on equipment slot\n        const item = dragInfo.item;\n\n        switch (dragInfo.sourceType) {\n            case DragSourceType.adventurerInventory: {\n                // Dragged from inventory\n                props.onRemoveItemFromInventory(adventurer.id, dragInfo.inventorySlot!);\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                if (existingEquipment) {\n                    props.onAddItemToInventory(adventurer.id, existingEquipment, dragInfo.inventorySlot!);\n                }\n                break;\n            }\n            case DragSourceType.adventurerEquipment: {\n                // Dragged from equipment slot (only applicable to weapons)\n                props.onAssignEquipment(adventurer.id, slotType, item);\n\n                const existingEquipment = adventurer.equipment[EquipmentSlotType[slotType]];\n                const fromSlot = dragInfo.inventorySlot!;\n                if (existingEquipment) {\n                    // Another weapon was there, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n            }\n        }\n    };\n\n    const getEquipmentSlot = (slotType: EquipmentSlotType) => {\n        // returns EquipmentSlot\n        const item: Item | undefined = adventurer.equipment[EquipmentSlotType[slotType]];\n        let contents = null;\n        if (item) {\n            const itemRef: React.RefObject<any> = React.createRef();\n            const handleClick = (event: React.MouseEvent) => {\n                const origin = (event.currentTarget as HTMLElement);\n                const originRect = origin.getBoundingClientRect();\n                context.onContextualObjectActivated(\n                    ContextType.item,\n                    getDefinition(item),\n                    itemRef,\n                    originRect,\n                );\n                event.stopPropagation();\n            };\n\n            contents = <DraggableItemIcon\n                index = { slotType }\n                sourceId = { adventurer.id }\n                sourceType = { DragSourceType.adventurerEquipment }\n                item = { item }\n                onClick = { handleClick }\n                ref = { itemRef }\n                size = { IconSize.medium }\n            >\n            </DraggableItemIcon>;\n        }\n\n        return (\n            <EquipmentSlot\n                onDrop = { (dragInfo: InventoryItemDragInfo) => handleDropItemEquipment(dragInfo, slotType) }\n                type = { slotType }\n            >\n                { contents }\n            </EquipmentSlot>\n        );\n    };\n\n    const equipmentList = <ul>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.head) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.shoulders) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.chest) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.hands) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.legs) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.feet) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.mainHand) }\n        </li>\n        <li>\n            { getEquipmentSlot(EquipmentSlotType.offHand) }\n        </li>\n    </ul>;\n\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n        switch (sourceType) {\n            case DragSourceType.adventurerInventory:\n                // Drag from one inventory slot to another\n                if (props.onMoveItemInInventory) {\n                    props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\n                }\n                break;\n\n            case DragSourceType.adventurerEquipment:\n                // Drag from equipment slot\n                if (props.onAddItemToInventory && props.onRemoveEquipment) {\n                    props.onAddItemToInventory(adventurer.id, item, toSlot);\n                }\n\n                const existingEquipment = adventurer.inventory[toSlot];\n                if (existingEquipment) {\n                    // Was dropped on another piece of equipment in inventory, switch them\n                    props.onAssignEquipment(adventurer.id, fromSlot, existingEquipment);\n                } else {\n                    // Clear the slot where it came from\n                    props.onRemoveEquipment(adventurer.id, fromSlot);\n                }\n                break;\n        }\n    };\n    return (\n        <div className = \"adventurer-info\">\n            <div className = \"left\">\n                <div className = \"name\">\n                    <b>{ adventurer.name }</b>\n                </div>\n                <div className = \"attributes\">\n                    { attributes }\n                </div>\n                <div className = \"equipment\">\n                    { equipmentList }\n                </div>\n            </div>\n            <div className = \"right\">\n                <Inventory\n                    sourceType = { DragSourceType.adventurerInventory }\n                    sourceId = { adventurer.id }\n                    items = { adventurer.inventory }\n                    onDropItem = { handleDropItemInventory }\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default AdventurerInfo;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport SquareIconButton from \"components/widgets/SquareIconButton\";\nimport * as React from \"react\";\n\nexport interface Props {\n    title: string;\n    backEnabled?: boolean;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n}\n\ntype AllProps = Props;\n\n/**\n *\n */\nconst Window: React.FunctionComponent<AllProps> = (props) => {\n\n    const handleClose = (e: React.MouseEvent) => {\n        if (props.onClose) {\n            props.onClose();\n        }\n    };\n    const handleBack = (e: React.MouseEvent) => {\n        if (props.onBack) {\n            props.onBack();\n        }\n    };\n\n    let BackButton = null;\n    if (props.backEnabled !== false) {\n         BackButton = <SquareIconButton className = \"back-button\" onClick = { handleBack } text = \"<\"/>;\n\n    }\n\n    let CloseButton = null;\n    if (props.closeEnabled !== false) {\n        CloseButton = <SquareIconButton className = \"close-button\" onClick = { handleClose } text = \"x\"/>;\n    }\n\n    return <div className = \"window\">\n        <div className = \"header\">\n            { BackButton }\n            <h3>{ props.title }</h3>\n            { CloseButton }\n        </div>\n        { props.children }\n    </div>;\n};\n\nexport default Window;\n","import \"components/ui/window/css/window.css\";\nimport Window, { Props } from \"components/ui/window/Window\";\nimport * as React from \"react\";\n\nexport const withWindow = <TWrappedComponentProps extends Props>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    return class WithWindow extends React.Component<TWrappedComponentProps> {\n\n        public render() {\n            return <Window { ...this.props } >\n                <WrappedComponent { ...this.props } />\n            </Window>;\n        }\n    };\n};\n","import { addItemToInventory, assignEquipment, moveItemInInventory, removeEquipment, removeItemFromInventory } from \"actions/adventurers\";\nimport AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { Item } from \"definitions/items/types\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\ntype AllProps = Props & WindowProps;\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        // Adds item to inventory of adventurer\n        onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => {\n            const action = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action);\n        },\n        // Equipment gets assigned to a slot\n        onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => {\n            const action = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(action);\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => {\n            const action = removeEquipment(adventurerId, equipmentSlot);\n            dispatch(action);\n        },\n        // Removes an item from an adventurers' inventory\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot) => {\n            const action = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default compose(\n    withWindow,\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n)(AdventurerInfo) as React.ComponentType<AllProps>;\n","import DraggableAdventurerAvatar, { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport QuestBoard from \"containers/structures/tavern/QuestBoard\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/tavernstructureview.css\";\nimport { AppContext } from \"components/App\";\nimport AdventurerInfoWindow from \"components/ui/window/windows/AdventurerInfoWindow\";\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n    selectedQuestName: string | null;\n    assignedAventurers: AdventurerStoreState[];\n}\n\nconst SOURCE_ID = \"tavern\";\n\nconst TavernStructureView = (props: AllProps) => {\n    const [assignedAventurers, setAassignedAdventurers] = React.useState<AdventurerStoreState[]>([]);\n    const [selectedQuest, setSelectedQuest] = React.useState<string | null>(null);\n    const context = React.useContext(AppContext)!;\n\n    const structureDefinition = getDefinition<TavernStructureDefinition>(Structure.tavern);\n    const level: number = props.level || 0;\n    const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.getStructureName(Structure.tavern);\n\n    const createUpgradeRow = () => {\n        const gold = props.gold;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style = {{ float: \"right\" }}\n                onClick = { handleClick }\n                disabled= { !canUpgrade }\n            >\n                { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const roomCount = levelDefinition.rooms;\n    const createRooms = () => {\n\n        const roomContent: JSX.Element[] = [];\n        for (let i = 0; i < roomCount; i++) {\n            const adventurer = props.adventurers.find((a) => a.room === i);\n            let content = null;\n            if (adventurer) {\n                let name = adventurer.name;\n\n                const assigned = assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n                const party = getQuestByAdventurer(adventurer.id);\n                if (party) {\n                    name += \" (on a quest)\";\n                }\n                content = [<DraggableAdventurerAvatar\n                    disabled = { assigned || party != null }\n                    adventurer = { adventurer }\n                    className = \"adventurer-icon\"\n                    sourceId = { SOURCE_ID }\n                    key = { `avatar:${adventurer.id}` }\n                />,\n                <a key = { adventurer.id } onClick = { () => handleAdventurerNameClick(adventurer) }> { name }</a>,\n                /*\n                <button\n                    className = \"boot\"\n                    key = { `boot:${adventurer.id}` }\n                >\n                    Boot\n                </button>,*/\n            ];\n            } else {\n                content = \"(empty room)\";\n            }\n\n            roomContent.push(<div key = { `room${i}` } className = \"room\">\n                { content }\n            </div>);\n        }\n\n        return <div className = \"rooms\">\n            <h2>Rooms</h2>\n            { roomContent }\n        </div>;\n    };\n\n    const getAvailableQuests = props.quests.filter((q) => q.status === QuestStatus.available );\n\n    const getQuestByAdventurer = (adventurerId: string): QuestStoreState | undefined => {\n        return Object.values(props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    };\n\n    const handleQuestClick = (name: string) => {\n        if (selectedQuest === name) {\n            setSelectedQuest(null);\n        } else {\n            setSelectedQuest(name);\n        }\n\n        // Unassign all adventurers\n        setAassignedAdventurers([]);\n    };\n\n    const handleAddAdventurer = (item: AdventurerAvatarDragInfo, index: number) => {\n        if (item.sourceId === SOURCE_ID) {\n            const copy = [ ...assignedAventurers];\n            copy[index] = item.adventurer;\n            setAassignedAdventurers(copy);\n        }\n    };\n\n    const handleRemoveAdventurer = (index: number): void => {\n        const copy = [ ...assignedAventurers];\n        delete copy[index];\n        setAassignedAdventurers(copy);\n    };\n\n    const handleLaunchQuest = (): void => {\n        props.onLaunchQuest(selectedQuest!, assignedAventurers);\n    };\n\n    const handleAdventurerNameClick = (adventurer: AdventurerStoreState) => {\n        const window = <AdventurerInfoWindow adventurerId = { adventurer.id } title = { adventurer.name } />;\n        context.onOpenWindow(window);\n    };\n\n    return (\n        <details open = { true } className = \"tavernstructureview\">\n            <summary>{ displayName }</summary>\n            { createUpgradeRow() }\n            <section>\n                { createRooms() }\n                <QuestBoard\n                    availableQuests = { getAvailableQuests }\n                    selectedQuestName = { selectedQuest }\n                    assignedAventurers = { assignedAventurers }\n                    onQuestClick = { (name: string) => handleQuestClick(name) }\n                    onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => handleAddAdventurer(item, index) }\n                    onRemoveAdventurer = { (index: number) => handleRemoveAdventurer(index) }\n                    onLaunchQuest = { () => handleLaunchQuest() }\n                />\n            </section>\n        </details>\n    );\n};\n\nexport default TavernStructureView;\n\n// export default class TavernStructureView extends React.Component<AllProps, LocalState> {\n\n//     constructor(props: AllProps) {\n//         super(props);\n\n//         this.state = {\n//             assignedAventurers: [],\n//             selectedQuestName: null,\n//         };\n//     }\n\n//     public render() {\n//         const structureDefinition = getDefinition<TavernStructureDefinition>(Structure.tavern);\n//         const level: number = this.props.level || 0;\n//         const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n//         const displayName = TextManager.getStructureName(Structure.tavern);\n\n//         const createUpgradeRow = () => {\n//             const gold = this.props.gold;\n//             const nextLevel = structureDefinition.levels[level + 1];\n//             const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n//             const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n//             const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n//             const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//                 if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n//             };\n//             return <div>\n//                 <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n//                 <button\n//                     style = {{ float: \"right\" }}\n//                     onClick = { handleClick }\n//                     disabled= { !canUpgrade }\n//                 >\n//                     { upgradeText }\n//                 </button>\n//             </div>;\n//         };\n\n//         const roomCount = levelDefinition.rooms;\n//         const createRooms = () => {\n\n//             const roomContent: JSX.Element[] = [];\n//             for (let i = 0; i < roomCount; i++) {\n//                 const adventurer = this.props.adventurers.find((a) => a.room === i);\n//                 let content = null;\n//                 if (adventurer) {\n//                     let name = adventurer.name;\n\n//                     const assigned = this.state.assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n//                     const party = this.getQuestByAdventurer(adventurer.id);\n//                     if (party) {\n//                         name += \" (on a quest)\";\n//                     }\n//                     content = [<DraggableAdventurerAvatar\n//                         disabled = { assigned || party != null }\n//                         adventurer = { adventurer }\n//                         className = \"adventurer-icon\"\n//                         sourceId = { SOURCE_ID }\n//                         key = { `avatar:${adventurer.id}` }\n//                     />,\n//                     <a key = { adventurer.id } onClick = { () => this.handleAdventurerNameClick(adventurer) }> { name }</a>,\n//                     /*\n//                     <button\n//                         className = \"boot\"\n//                         key = { `boot:${adventurer.id}` }\n//                     >\n//                         Boot\n//                     </button>,*/\n//                 ];\n//                 } else {\n//                     content = \"(empty room)\";\n//                 }\n\n//                 roomContent.push(<div key = { `room${i}` } className = \"room\">\n//                     { content }\n//                 </div>);\n//             }\n\n//             return <div className = \"rooms\">\n//                 <h2>Rooms</h2>\n//                 { roomContent }\n//             </div>;\n//         };\n\n//         const availableQuests = this.props.quests.filter((q) => q.status === QuestStatus.available );\n\n//         return (\n//             <details open = { true } className = \"tavernstructureview\">\n//                 <summary>{ displayName }</summary>\n//                 { createUpgradeRow() }\n//                 <section>\n//                     { createRooms() }\n//                     <QuestBoard\n//                         availableQuests = { availableQuests }\n//                         selectedQuestName = { this.state.selectedQuestName }\n//                         assignedAventurers = { this.state.assignedAventurers }\n//                         onQuestClick = { (name: string) => this.handleQuestClick(name) }\n//                         onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => this.handleAddAdventurer(item, index) }\n//                         onRemoveAdventurer = { (index: number) => this.handleRemoveAdventurer(index) }\n//                         onLaunchQuest = { () => this.handleLaunchQuest() }\n//                     />\n//                 </section>\n//             </details>\n//         );\n//     }\n\n//     private handleQuestClick(name: string) {\n//         if (this.state.selectedQuestName === name) {\n//             this.setState( { selectedQuestName: null });\n//         } else {\n//             this.setState( { selectedQuestName: name });\n//         }\n\n//         // Unassign all adventurers\n//         this.setState({\n//             assignedAventurers: [],\n//         });\n//     }\n\n//     private handleAdventurerNameClick(adventurer: AdventurerStoreState) {\n//         //console.log(name)\n//     }\n\n//     private handleAddAdventurer(item: AdventurerAvatarDragInfo, index: number) {\n//         if (item.sourceId === SOURCE_ID) {\n//             const assignedAventurers = [ ...this.state.assignedAventurers];\n//             assignedAventurers[index] = item.adventurer;\n//             this.setState({\n//                 assignedAventurers,\n//             });\n//         }\n//     }\n\n//     /**\n//      * Removes an assigned adventurer from a slot\n//      * @param index\n//      */\n//     private handleRemoveAdventurer(index: number): void {\n//         const assignedAventurers = [ ...this.state.assignedAventurers];\n//         delete assignedAventurers[index];\n//         this.setState({\n//             assignedAventurers,\n//         });\n//     }\n\n//     private handleLaunchQuest(): void {\n//         const assignedAventurers = this.state.assignedAventurers;\n//         const selectedQuestName = this.state.selectedQuestName!;\n//         this.props.onLaunchQuest(selectedQuestName, assignedAventurers);\n//     }\n\n//     /**\n//      * Returns the party the adventurer is in. undefined if not in any party\n//      * @param adventurerId\n//      */\n//     private getQuestByAdventurer(adventurerId: string): QuestStoreState | undefined {\n//         return Object.values(this.props.quests).find((quest) => {\n//             return quest.party.indexOf(adventurerId) > -1;\n//         });\n//     }\n// }\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.tavern,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(TavernStructureView);\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n    deltaResources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox is used in the Warehouse to show a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n        resources,\n        deltaResources,\n    } = props;\n\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        const amount = props.resources[resource]!;\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        let delta;\n        if (deltaResources[resource]) {\n            delta = <span className = \"animate-up\">\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\n            </span>;\n        }\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { amount.toFixed(1) }\n            </div>\n            <div className = \"max\" >\n                { ` / ${props.maxResources[resource]}` }\n            </div>\n            <div className = \"delta\">\n                { delta }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport Inventory from \"components/ui/inventory/Inventory\";\nimport ResourcesBox from \"components/ui/resources/ResourcesBox\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, Structure  } from \"definitions/structures\";\nimport { StructureDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/warehousestructureview.css\";\n\nexport interface DispatchProps {\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props  {\n}\n\nexport interface StateProps  {\n    level: number;\n    workers: number;\n    workersFree: number;\n    gold: number;\n    items: Array<Item|null>;\n    adventurersInTown: AdventurerStoreState[];\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\nconst warehouse = DragSourceType.warehouse;\n\nclass WarehouseStructureView extends React.Component<AllProps, LocalState> {\n    private resourcesDelta: ResourceStoreState;\n    private resourcesRef: HTMLFieldSetElement | null;\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedAdventurer: null,\n        };\n\n        this.resourcesDelta = {};\n        this.resourcesRef = null;\n    }\n\n    public render() {\n        const props = this.props;\n        const structureDefinition = getDefinition<StructureDefinition>(Structure.warehouse);\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\n        }\n        const level: number = props.level;\n        const displayName = TextManager.getStructureName(Structure.warehouse);\n\n        const createUpgradeRow = () => {\n            const gold = props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const handleDropItemWarehouse = (item: Item, fromSlot: number,\n                                         toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            switch (sourceType) {\n                case warehouse:\n                    if (props.onMoveItemInWarehouse) {\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\n                    }\n                    break;\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemFromAdventurer) {\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        const handleAdventurerTabSelected = (tabId: string) => {\n            this.setState({\n                selectedAdventurer: tabId,\n            });\n        };\n\n        const handleDropItemAdventurer = (item: Item, fromSlot: number,\n                                          toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            const adventurerId = this.state.selectedAdventurer!;\n            switch (sourceType) {\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemInInventory) {\n                        props.onMoveItemInInventory(adventurerId, fromSlot, toSlot);\n                    }\n                    break;\n                case warehouse:\n                    if (props.onMoveItemToAdventurer) {\n                        props.onMoveItemToAdventurer(adventurerId, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        let adventurerContent = null;\n        if (this.state.selectedAdventurer) {\n            const adventurer = props.adventurersInTown.find((a) => a.id === this.state.selectedAdventurer)!;\n            adventurerContent = <Inventory\n                sourceType = { warehouse }\n                items = { adventurer.inventory }\n                onDropItem = { handleDropItemAdventurer }\n            />;\n        }\n\n        const adventurersArea = <>\n            <Tabstrip className = \"adventurers-tabstrip\" onTabSelected = { (tabId: string) => handleAdventurerTabSelected(tabId) } >\n            { props.adventurersInTown.map((a) => {\n                return <Tab id = { a.id } key = { a.id }>\n                    <AdventurerAvatar adventurer = { a } className = \"common-icon-small\"/>\n                </Tab>;\n            }) }\n            </Tabstrip>\n            <div className = \"adventurer-info\">\n                { adventurerContent }\n            </div>\n        </>;\n\n        return (\n            <details open = { true } className = \"warehouse-structureview\">\n                <summary>{ displayName }</summary>\n                { createUpgradeRow() }\n                <fieldset className=\"resources\" ref = { (ref) => { this.resourcesRef = ref; }}>\n                    <legend>Resources</legend>\n                    <ResourcesBox\n                        resources = { props.resources }\n                        maxResources = { props.maxResources }\n                        deltaResources = { this.resourcesDelta }\n                    />\n                </fieldset>\n\n                <Inventory\n                    sourceType = { warehouse }\n                    items = { props.items }\n                    onDropItem = { handleDropItemWarehouse }\n                />\n                { adventurersArea }\n\n            </details>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<AllProps>) {\n        Object.keys(prevProps.resources).forEach((resource: string) => {\n            this.resourcesDelta[resource] = this.props.resources[resource]! - prevProps.resources[resource]!;\n        });\n\n        if (this.resourcesRef) {\n            this.resourcesRef.classList.remove(\"animate\");\n            setTimeout(() => {\n                if (this.resourcesRef) {\n                    this.resourcesRef.classList.add(\"animate\");\n                }\n            }, 200);\n        }\n    }\n}\n\nexport default WarehouseStructureView;\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n    const adventurersOnQuest = (quest: QuestStoreState): AdventurerStoreState[] => {\n        const party: string[] = quest.party;\n        return party.map((id: string) => findAdventurerById(id)!);\n    };\n\n    const findAdventurerById = (id: string): AdventurerStoreState | undefined => {\n        return adventurers.find((a) => a.id === id);\n    };\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\nconst getAdventurersInTown = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n    // Get an array of all adventurer ids on any active quest\n    const adventurersOnQuest = quests.reduce<string[]>((acc, val: QuestStoreState) => {\n        if (val.status === QuestStatus.active) {\n            acc.push(...val.party);\n        }\n        return acc;\n    }, []);\n\n    return adventurers.filter((a) => adventurersOnQuest.indexOf(a.id) === -1);\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersInTown = createSelector([\n    getAdventurers,\n    getQuests],\n    getAdventurersInTown,\n);\n","import { addItemToInventory, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse, moveItemInWarehouse, removeItemFromWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { upgradeStructure } from \"actions/structures\";\nimport WarehouseStructureView,\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectAdventurersInTown } from \"selectors/adventurers\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\n    const level: number = structureStore.level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    const adventurersInTown = selectAdventurersInTown(store);   // todo: refreshes too much. fix\n\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\n    return {\n        adventurersInTown,\n        gold: store.gold,\n        items: store.items,\n        level,\n        maxResources: levelDefinition.maxResources,\n        resources: store.resources,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number) {\n            const action1 = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToWarehouse(item, toSlot);\n            dispatch(action2);\n        },\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        // Moves item from warehouse to an adventurer\n        onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\n            const action1 = removeItemFromWarehouse(fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action2);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.warehouse,\n            }, LogChannel.town));\n        },\n    };\n}\n\n// export default compose(\n//     connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n// //    withAppContext,\n// )(WarehouseStructureView) as React.ComponentType<Props>;\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(WarehouseStructureView);\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport ResourceStructureView from \"containers/structures/ResourceStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst getStructureView = (structure: Structure) => {\n    const structureDefinition: StructureDefinition = getDefinition(structure);\n    switch (structureDefinition.type) {\n        case StructureType.production: {\n            return <ProductionStructureView type = { structure }/>;\n        }\n        case StructureType.resource: {\n            return <ResourceStructureView type = { structure }/>;\n        }\n        case StructureType.warehouse: {\n            return <WarehouseStructureView />;\n        }\n        case StructureType.tavern: {\n            return <TavernStructureView />;\n        }\n        default: {\n            return <div> { structure } </div>;\n        }\n    }\n};\n\nconst StructureDetails = (props: AllProps) => {\n    let view;\n    const structureState: StructureStoreState = props.structures[props.structure];\n    if (structureState.state === StructureState.Building) {\n        const progress = props.buildTask ? props.buildTask.progress : 1 ;\n        view = <div>\n            <Progressbar label = \"Building...\" progress= { progress } />\n        </div>;\n    } else {\n        view = getStructureView(props.structure) ;\n    }\n\n    return <fieldset className=\"structure-details\">\n        <legend>Structure</legend>\n        { view }\n    </fieldset>;\n};\n\nexport default StructureDetails;\n","import { addGold } from \"actions/gold\";\nimport { addResources } from \"actions/resources\";\nimport StructureDetailsView, { DispatchProps, Props, StateProps } from \"components/StructureDetailsView\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>): DispatchProps {\n    return {\n        onCheatGold: (amount: number) => dispatch(addGold(amount)),\n        onCheatResources: (amount: ResourceStoreState) => dispatch(addResources(amount)),\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(StructureDetailsView) as React.ComponentType<Props & WindowProps>;\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useThree } from \"react-three-fiber\";\r\nimport { useRender } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\nimport { Camera, Vector2, Vector3 } from \"three\";\r\nimport { MapControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"worldpos\";\r\nconst DEFAULT_CAMERA_POS = new THREE.Vector3(-50, 150, 50);\r\n\r\nexport interface Props {\r\n  scrollToPosition?: Vector2;\r\n  onCameraMove: (camera: Camera, controls: MapControls) => void;\r\n}\r\n\r\nconst Controls = (props: Props) => {\r\n    const { camera } = useThree();\r\n    const controls = useRef<MapControls>();\r\n\r\n    useEffect(() => {\r\n      const mapControls = new MapControls( camera );\r\n      mapControls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n      mapControls.dampingFactor = 0.05;\r\n      mapControls.screenSpacePanning = true;\r\n      mapControls.minDistance = 1;\r\n      mapControls.maxDistance = 250;\r\n      mapControls.maxPolarAngle = Math.PI / 2;\r\n      mapControls.target = new THREE.Vector3(0, 0, 0);\r\n      // mapControls.enableRotate = false;\r\n      // mapControls.enableZoom = false;\r\n      controls.current = mapControls;\r\n\r\n      camera.position.copy(DEFAULT_CAMERA_POS);\r\n      if (localStorage.getItem(LOCAL_STORAGE_KEY)) {\r\n        const savedCamera = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)!);\r\n\r\n        // Restore earlier saved position\r\n        if (savedCamera) {\r\n          camera.position.copy( savedCamera.cam );\r\n          mapControls.target.copy( savedCamera.target );\r\n        }\r\n      }\r\n    }, [camera]);\r\n\r\n    useEffect(() => {\r\n      if (controls.current && props.scrollToPosition) {\r\n        const { x, y } = props.scrollToPosition!;\r\n        const target =  new Vector3(x, 0, y);\r\n        controls.current!.target = target;\r\n        // console.log(target.cross(DEFAULT_CAMERA_POS));\r\n        camera.position.copy(new Vector3(x + DEFAULT_CAMERA_POS.x, DEFAULT_CAMERA_POS.y, DEFAULT_CAMERA_POS.z + y));\r\n      }\r\n\r\n    }, [props.scrollToPosition]);\r\n\r\n    useRender(() => {\r\n      if (controls.current) {\r\n        controls.current.update();\r\n      }\r\n\r\n      if (mouseDown.current || true) {\r\n        props.onCameraMove(camera, controls.current!);\r\n\r\n        // todo: save in redux or just here?\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify({\r\n          cam: camera.position,\r\n          target: controls.current!.target,\r\n        }));\r\n      }\r\n    }, false);\r\n\r\n    useEffect(() => {\r\n      const savePosition = () => {\r\n        if (!mouseDown.current) {\r\n          return;\r\n        }\r\n        props.onCameraMove(camera, controls.current!);\r\n\r\n        // todo: save in redux or just here?\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify({\r\n          cam: camera.position,\r\n          target: controls.current!.target,\r\n        }));\r\n\r\n      };\r\n      // const interval = setInterval(savePosition, 150);\r\n      // todo: use requestAnimationFrame https://css-tricks.com/using-requestanimationframe-with-react-hooks/\r\n      return () => {\r\n        // clearInterval(interval);\r\n      };\r\n    }, [camera.position]);\r\n\r\n    //\r\n    const mouseDown = useRef<boolean>(false);\r\n    useEffect(() => {\r\n      const handleMouseDown = () => {\r\n        mouseDown.current = true;\r\n      };\r\n\r\n      const handleMouseUp = () => {\r\n        mouseDown.current = false;\r\n      };\r\n\r\n      document.addEventListener(\"mousedown\", handleMouseDown);\r\n      document.addEventListener(\"mouseup\", handleMouseUp);\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", handleMouseDown);\r\n        document.removeEventListener(\"mouseup\", handleMouseUp);\r\n      };\r\n    }, []);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Controls;\r\n","import React, {  } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport interface Props {\r\n  name?: string;\r\n  position?: THREE.Vector3|number[];\r\n  onClick?: (object: THREE.Object3D) => void;\r\n}\r\n\r\nconst Sphere = (props: Props) => {\r\n    const geometry = new THREE.SphereGeometry( 5, 32, 32 );\r\n    const material = new THREE.MeshBasicMaterial( {color: \"purple\"} );\r\n\r\n    const handleClick = (evt: any) => {\r\n      if (props.onClick) {\r\n        props.onClick(evt.object);\r\n      }\r\n    };\r\n\r\n    if (!geometry) {\r\n      return null;\r\n    }\r\n    return (\r\n      <mesh\r\n        name={ props.name}\r\n        position={props.position}\r\n        onClick={ handleClick }\r\n        geometry={ geometry }\r\n        material={ material }\r\n      />\r\n    );\r\n  };\r\n\r\nexport default Sphere;\r\n","// It's a js file because there is some problem with the\r\nimport React, { useEffect } from 'react'\r\nimport { useThree } from 'react-three-fiber'\r\nimport * as THREE from 'three'\r\n\r\nfunction DebugInspector(props/*: ModelProps | any*/) {\r\n    const { scene } = useThree();\r\n\r\n    useEffect(() => {\r\n      if (!window.scene) { window.scene = scene; }\r\n      window.THREE = THREE;\r\n    }, []);\r\n\r\n    return null;\r\n}\r\n\r\nexport default DebugInspector;\r\n","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import React, { useEffect, useState } from \"react\";\r\nimport { Geometry, Group, Mesh } from \"three\";\r\nimport { ColladaLoader } from \"three/examples/jsm/loaders/ColladaLoader\";\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\r\n\r\nconst useModel = (url: string) => {\r\n    // const [geometry, setGeometry] = useState<Geometry | null>();\r\n    const [group, setGroup] = useState<Group | null>();\r\n\r\n    useEffect(() => {\r\n        const onError = (e: ErrorEvent) => {\r\n            // tslint:disable-next-line: no-console\r\n            console.error(`Error loading model ${url}`, e);\r\n        };\r\n\r\n        if (url.toLowerCase().endsWith(\"obj\")) {\r\n            new OBJLoader().load(url, (grp: Group) => {\r\n                // setGeometry((grp.children[0] as Mesh).geometry as Geometry);\r\n            });\r\n        } else if (url.toLowerCase().endsWith(\"dae\")) {\r\n            new ColladaLoader().load(url, (collada) => {\r\n                const colladaGroup = new Group();\r\n                colladaGroup.children.push(collada.scene);\r\n                setGroup(colladaGroup);\r\n\r\n                // setGeometry((collada.scene.children[0] as Mesh).geometry as Geometry);\r\n                // console.log(collada.scene.children[0].geometry)\r\n            });\r\n        } else if (url.toLowerCase().endsWith(\"fbx\")) {\r\n            new FBXLoader().load(url, (object: Group) => {\r\n                // setGeometry((object.children[0] as Mesh).geometry as Geometry);\r\n                setGroup(object);\r\n            }, undefined, onError);\r\n        } else {\r\n            // tslint:disable-next-line: no-console\r\n            console.error(`Unknown format for model ${url}`);\r\n        }\r\n    }, [url]);\r\n    return group;\r\n};\r\n\r\nexport default useModel;\r\n","// It's a js file because there is some problem with the\r\nimport useModel from \"hooks/useModel\";\r\nimport React, { useMemo } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Mesh } from \"three\";\r\n\r\nexport interface Props {\r\n    rotation?: THREE.Euler|number[];\r\n    scale?: THREE.Vector3|number[];\r\n}\r\n\r\nconst WorldMapTerrain = (props: Props) => {\r\n\r\n    const url = \"models/terrain/terrain-grass.dae\";\r\n    const textureUrl = \"models/terrain/grass1.png\";\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl]);\r\n\r\n    const modelInfo = useModel(url);\r\n    const geometry = useMemo(() => {\r\n        if (modelInfo) {\r\n            return (modelInfo.children[0].children[0] as Mesh).geometry;\r\n        }\r\n        return null;\r\n    }, [modelInfo]);\r\n\r\n    if (texture) {\r\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n    }\r\n\r\n    if (!geometry || !texture) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <mesh\r\n            name={`Model (${url})`}\r\n            scale={props.scale || [1, 1, 1]}\r\n            rotation={props.rotation}\r\n        >\r\n            <meshBasicMaterial\r\n                attach=\"material\"\r\n                fog={true}\r\n            >\r\n            <primitive attach=\"map\" object={texture} />\r\n            </meshBasicMaterial>\r\n            <bufferGeometry attach=\"geometry\" {...geometry} />\r\n        </mesh>\r\n    );\r\n  };\r\n\r\nexport default WorldMapTerrain;\r\n","import React, {  } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Vector3 } from \"three\";\r\n\r\nexport interface Props {\r\n  name?: string;\r\n  color?: string;\r\n  size?: THREE.Vector3|number[];\r\n  position?: THREE.Vector3|number[];\r\n  onClick?: (object: THREE.Object3D) => void;\r\n}\r\n\r\nconst Cube = (props: Props) => {\r\n    const size = parseVector3(props.size || new THREE.Vector3(1, 1, 1));\r\n    const geometry = new THREE.BoxGeometry( size.x, size.y, size.z );\r\n    const material = new THREE.MeshBasicMaterial( {color: (props.color || \"green\")} );\r\n\r\n    const handleClick = (evt: any) => {\r\n      if (props.onClick) {\r\n        props.onClick(evt.object);\r\n      }\r\n    };\r\n\r\n    if (!geometry) {\r\n      return null;\r\n    }\r\n    return (\r\n      <mesh\r\n        name={props.name}\r\n        position={props.position}\r\n        onClick={handleClick }\r\n        geometry={geometry }\r\n        material={material }\r\n      />\r\n    );\r\n  };\r\n\r\nexport default Cube;\r\n\r\nconst parseVector3 = (input: THREE.Vector3|number[]): THREE.Vector3 => {\r\n    if (input instanceof THREE.Vector3) {\r\n        return input;\r\n    }\r\n    const [x, y, z] = input;\r\n    return new Vector3(x, y, z);\r\n};\r\n","import useModel from \"hooks/useModel\";\r\nimport React, { useMemo } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Mesh } from \"three\";\r\n\r\nconst textureUrl = \"models/world/human/Textures/RTS_human_atlas_4096.png\";\r\n\r\nexport interface Props {\r\n    url: string;\r\n    position?: THREE.Vector3|number[];\r\n}\r\n\r\nconst Structure = (props: Props) => {\r\n\r\n   // const loader = useLoader(FBXLoader, props.url);\r\n\r\n    const modelInfo = useModel(props.url);\r\n    const geometry = useMemo(() => {\r\n        if (modelInfo) {\r\n            return (modelInfo.children[0] as Mesh).geometry;\r\n        }\r\n        return null;\r\n    }, [modelInfo]);\r\n\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl]);\r\n    // const textureUrl = \"models/terrain/grass1.png\";\r\n    // const texture = useMemo(() => new THREE.TextureLoader().load(textureUrl), [textureUrl])\r\n    if (!geometry || !texture) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <mesh\r\n            name={`Model (${props.url})`}\r\n            position={props.position}\r\n            scale={[.01, .01, .01]}\r\n        >\r\n            <meshBasicMaterial\r\n                attach=\"material\"\r\n                fog={true}\r\n                map={texture}\r\n            />\r\n            <bufferGeometry attach=\"geometry\" {...geometry} />\r\n\r\n        </mesh>\r\n    );\r\n};\r\n\r\nexport default Structure;\r\n","import Controls from \"components/three/Controls\";\r\nimport Sphere from \"components/three/debug/Sphere\";\r\nimport DebugInspector from \"components/three/DebugInspector\";\r\nimport WorldMapTerrain from \"components/three/world/WorldMapTerrain\";\r\nimport { getDefinition } from \"definitions/quests\";\r\nimport React from \"react\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport { QuestStoreState } from \"stores/quest\";\r\nimport { Camera, Object3D, Vector2, Vector3 } from \"three\";\r\nimport { MapControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport Cube from \"../debug/Cube\";\r\nimport Guy from \"./Guy\";\r\nimport Structure from \"./structures/Structure\";\r\n\r\nconst terrainRotation = [-90 * (Math.PI / 180), 0, 0];\r\nconst terrainScale = [40, 40, 40];\r\nconst townPos = new Vector3(0, 0, 0);\r\nconst WIDTH = 648;\r\nconst HEIGHT = 690;\r\nexport interface Props {\r\n  quests: QuestStoreState[];\r\n  compassCenter: Vector2; // compass center in 2d UI coordinate system\r\n  scrollToPosition?: Vector2;\r\n  activeQuests: QuestStoreState[];\r\n  selectedQuest?: string;\r\n  onMapMove: (distance: number, angle: number) => void;\r\n  onPartyClick: (questName: string) => void;\r\n}\r\n\r\n// tslint:disable-next-line: no-empty-interface\r\nexport interface DispatchProps {\r\n  // onAdvanceQuest: (questName: string) => void;\r\n}\r\n\r\ntype AllProps = Props & DispatchProps;\r\n\r\nconst WorldMap = (props: AllProps) => {\r\n    // useEffect(() => {\r\n    // }, [props.scrollToPosition]);\r\n\r\n    const handleClick = (object: Object3D) => {\r\n        // console.log(object);\r\n    };\r\n\r\n    const handleCameraMove = (camera: Camera) => {\r\n\r\n        // the position of the compass as if it was in 3d space\r\n        const { x, z } = unproject(camera, props.compassCenter);\r\n\r\n        // Calculate the distance and angle between the town and the virtual compass in 3d space\r\n        const compassPos = new Vector2(x, z);\r\n        const distance = compassPos.distanceTo(new Vector2(townPos.x, townPos.z));\r\n        const angle = compassPos.angle(); // This only works because our town is at 0, 0\r\n\r\n        props.onMapMove(distance, angle);\r\n    };\r\n\r\n    const handlePartyClick = (name: string) => {\r\n        props.onPartyClick(name);\r\n    };\r\n\r\n    const renderParties = () => {\r\n        return props.activeQuests.map(quest => {\r\n            const questPosition = getQuestWorldPosition(quest);\r\n            return (\r\n                <Cube\r\n                    size={[1, 1, 1]}\r\n                    position={questPosition}\r\n                    color={ quest.name === props.selectedQuest ? \"white\" : \"red\"}\r\n                    onClick={() => handlePartyClick(quest.name)}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Canvas style = {{ height: HEIGHT, width: WIDTH }} camera={{ fov: 10 }} >\r\n            <DebugInspector /> */}\r\n            <Controls onCameraMove={handleCameraMove} scrollToPosition={props.scrollToPosition} />\r\n            <WorldMapTerrain rotation={terrainRotation} scale={terrainScale} />\r\n            <Sphere onClick={handleClick} position={[62, 0, 14]} name=\"party1\" />\r\n            {/* <Sphere onClick={handleClick} name=\"party2\" /> */}\r\n            { renderParties() }\r\n            <Cube size={[1, 1, 1]} position={[0, 0, 1]} color=\"blue\"/>\r\n            <Cube size={[1, 1, 1]} position={[1, 0, 2]} color=\"blue\"/>\r\n            {/* <Guy url=\"models/westernkingdoms/models/WK_archer.FBX\" position={[220, 20, 110]} /> */}\r\n\r\n            <Structure url=\"models/world/human/house_atlas.fbx\" position={[10, 0, 0]}/>\r\n            <Structure url=\"models/world/human/smithy_atlas.fbx\" position={[20, 0, 10]}/>\r\n        </Canvas>\r\n    );\r\n};\r\n\r\nexport default WorldMap;\r\n\r\n// returns a point on the ground under the camera\r\nconst unproject = (camera: Camera, screenLocation: Vector2, groundY: number = 0): Vector3 => {\r\n    const vector = new Vector3();\r\n    vector.set(\r\n      (screenLocation.x / WIDTH) * 2 - 1,\r\n      -(screenLocation.y / HEIGHT) * 2 + 1,\r\n      0.5,\r\n    );\r\n    vector.unproject( camera );\r\n\r\n    const direction = vector.sub(camera.position).normalize();\r\n    const distance = (groundY - camera.position.y) / direction.y;\r\n    return camera.position.clone().add(direction.multiplyScalar(distance));\r\n};\r\n\r\n// Gets 3d world position of quest\r\nconst getQuestWorldPosition = (quest: QuestStoreState): Vector3 => {\r\n    const questDefinition = getDefinition(quest.name);\r\n    const roundedProgress = Math.floor(quest.progress);\r\n    const lastPosition = questDefinition.nodes[roundedProgress];\r\n    const lastPositionWorld = new Vector3(lastPosition.x, 1, lastPosition.y);\r\n\r\n    const nextPosition = questDefinition.nodes[roundedProgress + 1];\r\n    if (!nextPosition) {\r\n        // We've reached the last node\r\n        return lastPositionWorld;\r\n    }\r\n    const nextPostionWorld = new Vector3(nextPosition.x, 1, nextPosition.y);\r\n    return lastPositionWorld.lerp(nextPostionWorld, quest.progress - roundedProgress);\r\n};","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps} from \"./AdventurerAvatar\";\nimport \"./css/droppableadventureravatar.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props extends AdventurerAvatarProps {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nclass DroppableAdventurerAvatar extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n\n        return connectDropTarget(\n            <div className=\"droppable-adventurer-avatar\">\n                <AdventurerAvatar\n                    adventurer = { this.props.adventurer }\n                    onClick = { this.props.onClick }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(DroppableAdventurerAvatar);\n","import { addItemToInventory, assignEquipment, moveItemInInventory, removeEquipment, removeItemFromInventory } from \"actions/adventurers\";\nimport AdventurerInfo, { DispatchProps, Props, StateProps } from \"components/ui/AdventurerInfo\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\n// todo: perhaps not use container, just pass dispatch callbacks as props?\nconst mapStateToProps = (store: StoreState, ownProps: Props) => {\n\n    const adventurer = store.adventurers.find((a) => a.id === ownProps.adventurerId)!;\n    return {\n        adventurer,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        // Adds item to inventory of adventurer\n        onAddItemToInventory: (adventurerId: string, item: Item, toSlot: number) => {\n            const action = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action);\n        },\n        // Equipment gets assigned to a slot\n        onAssignEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType, item: Item) => {\n            const action = assignEquipment(adventurerId, equipmentSlot, item);\n            dispatch(action);\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onRemoveEquipment: (adventurerId: string, equipmentSlot: EquipmentSlotType) => {\n            const action = removeEquipment(adventurerId, equipmentSlot);\n            dispatch(action);\n        },\n        // Removes an item from an adventurers' inventory\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot) => {\n            const action = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurerInfo);\n","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (store: StoreState, quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(store, id)!);\n};\n\nexport const findAdventurerById = (store: StoreState, id: string): AdventurerStoreState | undefined => {\n    return store.adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n","import { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { randomInt } from \"utils/random\";\n\n/**\n * The Oracle is a helper class for retrieving relevant data during encounters\n */\nexport class Oracle {\n    public readonly questName: string;\n    public readonly store: StoreState;\n\n    constructor(questName: string, store: StoreState) {\n        this.questName = questName;\n        this.store = store;\n    }\n\n    /**\n     * Returns the questVars of the quest that this encounter is part of\n     */\n    public get questVars(): any {\n        return this.quest.questVars;\n    }\n\n    /**\n     * Returns the quest that this encounter is part of\n     */\n    public get quest(): QuestStoreState {\n        return this.store.quests.find((q) => q.name === this.questName)!;\n    }\n\n    /**\n     * Returns all adventurers on this quest\n     */\n    public get adventurers(): AdventurerStoreState[] {\n        return adventurersOnQuest(this.store, this.quest);\n    }\n\n    /**\n     * Returns the adventurer in the encounter with highest given stat\n     * @param stat\n     */\n    public getAdventurerWithHighest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (b.stats[stat] - a.stats[stat]))[0];\n    }\n\n    /**\n     * Returns the adventurer in the encounter with lowest given stat\n     * @param stat\n     */\n    public getAdventurerWithLowest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (a.stats[stat] - b.stats[stat]))[0];\n    }\n\n    /**\n     * Returns a random adventurer in the party\n     */\n    public getRandomAdventurer(): AdventurerStoreState {\n        return this.adventurers[randomInt(0, this.adventurers.length)];\n    }\n}\n\nexport const oracles: any = {\n    // This will be the global store to hold all oracles, keyed by quest\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addItemToInventory } from \"actions/adventurers\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Item } from \"../items/types\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const backstabbed: EncounterDefinition = {\n    name: Encounter.backstabbed,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-backstabbed-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            fight: \"Fight the brigands\",\n            flight: \"Run away!\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        switch (option) {\n            case \"flight\":\n                return \"You run away like a pussy\";\n            case \"fight\":\n                const finder = oracle.getRandomAdventurer();\n                dispatch(addItemToInventory(finder.id, Item.deedForWeaponsmith));\n                return `The party fights off the rogues. One of them drops a document. ${finder.name} picks it up`;\n            default:\n                throw new Error(`Unhandled option '${option}`);\n        }\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { startEncounter, updateQuestVars, advanceQuest } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const goblinHouseOutside: EncounterDefinition = {\n    name: Encounter.goblinHouseOutside,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseOutside-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Investigate\",\n            leave: \"Keep walking\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"investigate\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            case \"leave\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\nexport const goblinHouseHallway: EncounterDefinition = {\n    name: Encounter.goblinHouseHallway,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseHallway-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Go inside the house\",\n            leave: \"Leave the premise\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"leave\":\n                // const nextEncounter = startEncounter(quest.name, goblinhouseInside)\n                const action = advanceQuest(oracle.questName);\n                dispatch(action);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party escapes the house unscathed`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\n// todo: other goblinHouse encounters\n","import { backstabbed } from \"./backstabbed\";\nimport { goblinHouseHallway, goblinHouseOutside } from \"./goblinHouse\";\nimport { theBigTree } from \"./theBigTree\";\nimport { EncounterDefinition } from \"./types\";\n\nconst all = {\n    backstabbed,\n    goblinHouseHallway,\n    goblinHouseOutside,\n    theBigTree,\n};\n\nexport default all;\n\nexport function getDefinition(encounter: string): EncounterDefinition {\n    return all[encounter];\n}\n","// tslint:disable:object-literal-sort-keys\nimport { addGold } from \"actions/gold\";\nimport { updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { randomInt } from \"utils/random\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\nexport interface QuestVars {\n    treeState: string;\n}\n\nexport const theBigTree: EncounterDefinition = {\n    name: Encounter.theBigTree,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     return `A huge tree blocks the way. ${pyromancer.name} offers to burn it`;\n        // }\n        return { key: \"encounter-thebigtree-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        //const store = oracle.store;\n        const strongest = oracle.getAdventurerWithHighest(\"strength\");\n        //        const strongest = { name: \"<<NAME>>\" };\n        const options: Record<string, string> = {\n            walkAround: \"Walk around the tree\",\n            lift: `Lift the tree (${strongest.name})`,\n        };\n        // todo: should be 'type' or 'class'\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     options.burn = \"Burn it down (${pyromancer.name}\";\n        // }\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"lift\":\n                const strongest = oracle.getAdventurerWithHighest(\"strength\");\n                questVars.treeState = \"lifted\";\n\n                const action = updateQuestVars(quest.name, questVars);\n                dispatch(action);\n\n                const goldAmount = randomInt(2, 5);\n                const goldAction = addGold(goldAmount);\n                dispatch(goldAction);\n\n                // tslint:disable-next-line:max-line-length\n                return `${strongest.name} heaves and lifts the heavy tree, moving it aside. Underneath your party finds ${goldAmount} gold coins`;\n\n                // if(random() < strongest.stats.strenth) {\n                //     questState.bigTreeState = \"lifted\";\n                //     giveGold(3);\n                //     return \"${strongest.name} heaves and lifts the heavy tree,\n                // moving it aside. Underneath your party finds 3 gold coins\";\n                // }\n                // else {\n                //     strongest.loseHealth(20);\n                //     if(strongest.isDead){\n                //         return \"${strongest.name} attempted to lift the\n                // tree but it is too heavy, causing him to die\".\n                //     }\n                //     return \"%{strongest.name} attempted to lift the tree but it is too heavy, losing 20 hp\";\n                // }\n            // case \"burn\":\n            //     const pyrommancer = store.adventurers.find(a => a.type == \"pyromancer\")\n            //     questState.bigTreeState = \"burned\";\n            //     return \"${pyromancer.name} cackles as you sets the tree ablaze.\n            // The party steps over the smouldering ashes and continues\"\n            // }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n","import { InventoryItemDragInfo } from \"components/ui/DraggableItemIcon\";\nimport DroppableAdventurerAvatar from \"components/ui/DroppableAdventurerAvatar\";\nimport { TextEntry } from \"constants/text\";\nimport AdventurerInfo from \"containers/ui/AdventurerInfo\";\nimport { getDefinition as getEncounterDefinition } from \"definitions/encounters\";\nimport { EncounterDefinition } from \"definitions/encounters/types\";\nimport { getDefinition as getQuestDefinition, QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport React from \"react\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/partywindow.css\";\n\nexport interface StateProps {\n    adventurers: AdventurerStoreState[];\n    store: StoreState;\n    lastLog?: TextEntry;\n}\n\nexport interface Props {\n    quest: QuestStoreState;\n}\n\nexport interface DispatchProps {\n    onDispatch: Dispatch<AnyAction>;\n    onAdvanceQuest: (quest: string) => void;\n    onUpdateEncounterResult: (nodeIndex: number, result: string) => void;\n    onMoveItemInInventory?: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToOtherAdventurer?: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => void;\n}\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n\n// export default\nclass PartyWindow extends React.Component<AllProps, LocalState> {\n\n    // This Component has local state, so it's a class\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            selectedAdventurer: null,\n        };\n    }\n\n    public render() {\n        return (\n            <div className = \"partywindow\">\n                <div className = \"avatars\">\n                    { this.getAvatars() }\n                </div>\n                { this.getBottomPart() }\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (prevProps.quest !== this.props.quest) {\n            // The active quest has changed, so it doesn't make sense to keep any adventurer selected\n            this.setState({\n                selectedAdventurer: null,\n            });\n        }\n    }\n\n    private getAdventurerInfo(adventurer: AdventurerStoreState): any {\n        if (!adventurer) {\n            return null;\n        }\n        return <AdventurerInfo adventurerId = { adventurer.id } />;\n    }\n\n    private handleAvatarClick(adventurerId: string | null): void {\n        if (this.state.selectedAdventurer === adventurerId) {\n            adventurerId = null;\n        }\n        this.setState({\n            selectedAdventurer: adventurerId,\n        });\n    }\n\n    private handleEncounterOptionClick(encounter: EncounterDefinition, option: string, oracle: any): any {\n        const result = encounter.answer(option, oracle, this.props.onDispatch);\n\n        /*if (!isEqual(questVars, this.props.quest.questVars)){\n            this.props.onUpdateQuestVars(questVars);\n        }*/\n        this.props.onUpdateEncounterResult(this.props.quest.progress, result);\n       // this.props.onAdvanceQuest(this.props.quest.name);\n    }\n\n    private getAvatars = () => {\n        return this.props.adventurers.map((adventurer: AdventurerStoreState) => {\n            const handleDropItem = (dragInfo: InventoryItemDragInfo) => {\n                const fromAdventurer = this.state.selectedAdventurer!; // The adventurer that has the item\n                if (adventurer.id === fromAdventurer) {\n                    // Dropping on yourself.. nothing happens\n                    return;\n                }\n\n                if (this.props.onMoveItemToOtherAdventurer) {\n                    const {\n                        inventorySlot: fromSlot,\n                    } = dragInfo;\n                    this.props.onMoveItemToOtherAdventurer(fromAdventurer, fromSlot!, adventurer.id);\n                }\n            };\n\n            const selected = this.state.selectedAdventurer === adventurer.id;\n            return <DroppableAdventurerAvatar\n                key = { `${adventurer.id}-avatar` }\n                className = { (selected ? \" selected\" : \"\") }\n                adventurer = { adventurer }\n                onClick = { () => this.handleAvatarClick(adventurer.id) }\n                onDrop = { handleDropItem }\n            />;\n        });\n    }\n\n    private getBottomPart = () => {\n\n        if (this.state.selectedAdventurer) {\n            const adventurer: AdventurerStoreState = this.props.adventurers\n                .find((a) => a.id === this.state.selectedAdventurer)!;\n            return this.getAdventurerInfo(adventurer);\n        } else {\n            const quest = this.props.quest;\n            const questDefinition: QuestDefinition = getQuestDefinition(quest.name);\n            const progress: number = Math.floor(quest.progress);\n            const questNode: QuestNode = questDefinition.nodes[progress];\n\n            let message = <p></p>;\n            let actions = <p></p>;\n\n            switch (questNode.type) {\n                case QuestNodeType.nothing: {\n                    message = <div> {\n                        this.props.lastLog && TextManager.getTextEntry(this.props.lastLog)\n                    } </div>;\n                    break;\n                }\n                case QuestNodeType.encounter: {\n                    // if (quest.encounterResults[quest.progress]) {\n                    //     message = <p> { quest.encounterResults[quest.progress] } </p>;\n                    //     break;\n                    // }\n                    const store = this.props.store;\n                    const encounter = getEncounterDefinition(quest.currentEncounter!);\n                    const oracle = encounter.getOracle(quest.name, store);\n                    const descriptionTextEntry = encounter.getDescription(oracle);\n                    const descriptionText = TextManager.getTextEntry(descriptionTextEntry);\n\n                    message = <div><p> { descriptionText } </p></div>;\n\n                    const options = encounter.getOptions(oracle);\n\n                    actions = <ul>\n                        { Object.keys(options).map((o) => <li key={ o }>\n                            <button onClick= { () => this.handleEncounterOptionClick(encounter, o, oracle) }>\n                                { o }\n                            </button>{ options[o]}\n                        </li>)}\n                    </ul>;\n\n                    break;\n                }\n                case QuestNodeType.boss: {\n                    message = <p> { \"Boss fight!\" } </p>;\n                    break;\n                }\n            }\n\n            return (\n            <div className=\"questlog\">\n                { message }\n                <div className=\"actions\">\n                    { actions}\n                </div>\n            </div>);\n        }\n    }\n}\n\nexport default PartyWindow;\n","import { moveItemInInventory, moveItemToOtherAdventurer } from \"actions/adventurers\";\nimport { updateEncounterResult } from \"actions/quests\";\nimport { advanceQuest } from \"actions/quests\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport PartyWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/PartyWindow\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { selectLastQuestLogEntry } from \"selectors/quests\";\nimport { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const adventurers = adventurersOnQuest(store, ownProps.quest);\n    const lastLog = selectLastQuestLogEntry(store, ownProps.quest.name);\n    return {\n        adventurers,\n        lastLog,\n        store, // needed for the oracle, causes update all the time :/\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n            dispatch(advanceQuest(quest));\n        },\n        onDispatch: dispatch,\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onMoveItemToOtherAdventurer: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => {\n            const action = moveItemToOtherAdventurer(fromAdventurerId, fromSlot, toAdventurerId);\n            dispatch(action);\n        },\n        onUpdateEncounterResult: (nodeIndex: number, result: string) => {\n            const action = updateEncounterResult(ownProps.quest.name, nodeIndex, result);\n            dispatch(action);\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(PartyWindow) as React.ComponentType<Props & WindowProps>;\n","import WorldMap from \"components/three/world/WorldMap\";\r\nimport PartyWindow from \"containers/windows/PartyWindow\";\r\nimport { AppContextProps } from \"hoc/withAppContext\";\r\nimport React, { useEffect, useRef, useState, useMemo } from \"react\";\r\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\r\nimport { Vector2 } from \"three\";\r\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\r\nimport { TextManager } from \"utils/textManager\";\r\nimport QuestLineVisualization from \"../world/QuestLineVisualization\";\r\nimport \"./css/realworldview.css\";\r\nimport { getDefinition } from \"definitions/quests\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\nexport interface DispatchProps {\r\n    onAdvanceQuest: (questName: string) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    quests: QuestStoreState[];\r\n}\r\n\r\ninterface LocalState {\r\n    selectedQuest: string | null;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\r\n\r\n/**\r\n * Temporary wrapper around PartyScreen. Shows quest line\r\n * @param props\r\n */\r\nconst RealWorldView = (props: AllProps) => {\r\n    const compassRef = useRef<HTMLDivElement>(null);\r\n    const [scrollToPosition, setScrollToPosition] = useState<Vector2>();\r\n    const [selectedQuest, setSelectedQuest] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\r\n        SoundManager.playMusicTrack(MusicTrack.world);\r\n    }, []);\r\n\r\n    const handleMapMove = (distance: number, angle: number) => {\r\n        const compassEl = compassRef!.current!;\r\n        const compassTextEl = compassEl.firstElementChild! as HTMLElement;\r\n\r\n        // Rotate the compass\r\n        compassEl.style.transform = `rotate(${angle - (Math.PI / 2)}rad)`;\r\n        compassEl.style.opacity = distance > 10 ? \"1\" : \"0\";\r\n        compassTextEl.style.transform = `rotate(${-angle + (Math.PI / 2)}rad)`;\r\n        compassTextEl.innerHTML = `${distance.toFixed(0)}`;\r\n    };\r\n\r\n    const handleCompassClick = () => {\r\n        setScrollToPosition(new Vector2(1, 1));\r\n    };\r\n\r\n    const handlePartyClick = (questName: string) => {\r\n        setSelectedQuest(questName);console.log(questName)\r\n\r\n        const quest = props.quests.find((q) => q.name === questName)!;\r\n        const title = TextManager.getQuestTitle(quest.name);\r\n        const window = <PartyWindow quest={quest} title={title} />;\r\n        props.onOpenWindow(window);\r\n    };\r\n\r\n    const activeQuests = useMemo(() => {\r\n        return props.quests.filter((q) => q.status === QuestStatus.active);\r\n    }, [props.quests]);\r\n\r\n    return (\r\n        <div className=\"realworldview\">\r\n            <div className=\"compass\" ref={compassRef} onClick={handleCompassClick}>\r\n                <div className=\"distance\"></div>\r\n            </div>\r\n            <WorldMap\r\n                quests={props.quests}\r\n                activeQuests={activeQuests}\r\n                selectedQuest={selectedQuest}\r\n                compassCenter={new Vector2(525, 585)}\r\n                scrollToPosition={scrollToPosition}\r\n                onMapMove={handleMapMove}\r\n                onPartyClick={handlePartyClick}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RealWorldView;\r\n","import RealWorldView,\n    { DispatchProps, Props, StateProps } from \"components/partyScreen/RealWorldView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealWorldView) as React.ComponentType<Props>;\n","import \"components/ui/popup/css/popup.css\";\nimport * as React from \"react\";\n\nconst ARROW_SIZE = 8; // warning: sync to popup.css var\nconst PADDING = 8;\n\n// Sharing context within the entire App\nexport interface PopupProps {\n    containerRect: ClientRect;\n    referenceRect: ClientRect;\n    placement?: Placement;\n    children: any;\n}\n\nexport enum Placement {\n    bottom,\n    top,\n    left,\n    right,\n}\n\nexport const withPopup = <TWrappedComponentProps extends PopupProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n\n    const WithPopup = (props: TWrappedComponentProps) => {\n\n        const ref = React.useRef<HTMLDivElement>(null);\n        const [ placement, setPlacement ] = React.useState<Placement>(props.placement || Placement.bottom);\n\n        const containerRect = props.containerRect;\n        const referenceRect = props.referenceRect;\n\n        React.useEffect(() => {\n            // Reposition if needed\n            const popupElement = ref.current!;\n            const popupRect = popupElement.getBoundingClientRect();\n\n            // Flip vertically\n            switch (placement) {\n                case Placement.top:\n                    if (popupRect.top - popupRect.height - ARROW_SIZE - PADDING < containerRect.top) {\n                        // Too high, place underneath\n                        setPlacement(Placement.bottom);\n                        return;\n                    }\n                    break;\n                case Placement.bottom:\n                    if (popupRect.top + popupRect.height + ARROW_SIZE + PADDING > containerRect.height ) {\n                        // Too low, place top\n                        setPlacement(Placement.top);\n                        return;\n                    }\n                    break;\n            }\n            popupElement.style.opacity = \"1\"; // animated through css\n\n            // Check left bounding edge\n            if (popupRect.left < containerRect.left + PADDING) {\n                const offset = containerRect.left - popupRect.left + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${offset}px)`;\n            }\n\n            // Check right bounding edge\n            if (popupRect.right > containerRect.right - PADDING) {\n                const offset = popupRect.right - containerRect.right + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${-offset}px)`;\n            }\n        }, [placement]);\n\n        let x: number = 0;\n        let y: number = 0;\n        let className: string = \"\";\n\n        switch (placement) {\n            case Placement.bottom:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top + referenceRect.height;\n                className = \"popup-bottom\";\n                break;\n            case Placement.top:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top;\n                className = \"popup-top\";\n                break;\n        }\n\n        return (\n            <div className = { `popup ${className}` }\n                style = {{\n                    left: x,\n                    opacity: 0,\n                    top: y,\n                }}\n                ref = { ref }\n            >\n                <div className = \"popup-arrow\"></div>\n                <div className = \"popup-content\">\n                    <WrappedComponent {...props } />\n                </div>\n            </div>\n        );\n    };\n    return WithPopup;\n};\n// export const withPopup = <P extends object>(Component: React.ComponentType<P>): React.FC<P & PopupProps> => ({...props}: PopupProps) => {\n//     return     <div className = \"popup\" style = {{ background: \"pink\" }} >\n//          <Component {...props as P} />\n//     </div>\n// };\n","import { Action } from \"redux\";\n\n// todo this should go somewhere else\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface ModifyWorkersAction extends Action<ActionType> {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","export const manifest = [\r\n    \"img/terrain/mountains512.png\",\r\n    \"img/town/effects/plasma_beam_heavy_green.png\",\r\n    \"img/town/effects/smoke.png\",\r\n    \"img/town/sky.jpg\",\r\n    \"img/town/lighthouse.png\",\r\n    \"img/town/tavern.png\",\r\n    \"img/town/mill.png\",\r\n    \"sound/fx/button-click.ogg\",\r\n    \"sound/fx/error.ogg\",\r\n    \"sound/music/Soliloquy.mp3\",\r\n    \"sound/music/TheLoomingBattle.ogg\",\r\n\r\n];\r\n","import { Howl } from \"howler\";\nimport * as React from \"react\";\nimport Indicator from \"./Indicator\";\n\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\nexport interface Props {\n    manifest: string[];\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\n}\n\nexport enum MediaType {\n    image,\n    sound,\n}\n\nexport interface MediaItem {\n    url: string;\n    mediaType: MediaType;\n    content?: HTMLImageElement | Howl;\n    sound?: Howl;\n}\n\ninterface State {\n    itemsLoaded: number;\n    completed: boolean;\n}\n\nexport default class Preloader extends React.Component<Props, State> {\n//    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            completed: false,\n            itemsLoaded: 0,\n        };\n    }\n\n    public componentDidMount() {\n        // this.mounted = true;\n        this.loadMedia();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        // const { images } = this.props;\n        // const oldImages = new Set(prevProps.images);\n\n        // let hasChanged = false;\n        // for (let i = 0; i < images.length; i += 1) {\n        //     const image = images[i];\n        //     if (!oldImages.has(image)) {\n        //         hasChanged = true;\n        //         break;\n        //     }\n        // }\n\n        // if (hasChanged) {\n        //     this.loadImages();\n        // }\n        // todo: implement\n    }\n\n    public componentWillUnmount() {\n        // this.mounted = false;\n        // if (this.autoResolveTimeout) {\n        //     clearTimeout(this.autoResolveTimeout);\n        // }\n    }\n\n    public render() {\n//        console.log(`loaded: ${this.state.itemsLoaded} `);\n        const { children, manifest } = this.props;\n        const complete = this.state.completed;\n\n        const indicator = <Indicator\n            itemsLoaded = { this.state.itemsLoaded }\n            itemsTotal = { manifest.length }\n        />;\n\n        return complete ? children : indicator;\n\n    }\n\n    protected loadMedia = () => {\n        // todo: what if props get set at runtime\n        this.setState({\n            itemsLoaded: 0,\n        });\n\n        const promises = this.props.manifest\n            .map((url) => this.loadItem(url)\n            // tslint:disable-next-line:no-console\n            .catch((err) => console.error(err)));\n\n        Promise.all(promises).then((results) => {\n            if (this.props.onLoadComplete) {\n                this.props.onLoadComplete(media);\n            }\n            this.setState({\n                completed: true,\n            });\n        });\n    }\n\n    protected loadItem = async (url: string): Promise<MediaItem> => {\n        if (media.some((m) => m.url === url)) {\n            // tslint:disable-next-line:no-console\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\n        }\n        const mediaType = getType(url);\n        let item;\n        if (mediaType === MediaType.image) {\n            // try {\n            const value = await loadImage(url);\n            // console.log(`loaded ${url}`); // tODO: remove\n            item = {\n                content: value,\n                mediaType,\n                url,\n            } ;\n            // } catch (e) {\n            //     throw Error(`Could not load image with url '${url}'`);\n            // }\n        }\n        if (mediaType === MediaType.sound) {\n            const value = new Howl({\n                src: [ url ],\n            });\n            item = {\n                content: value,\n                mediaType,\n                url,\n            };\n        }\n        if (item) {\n            media.push(item);\n            this.setState({\n                itemsLoaded: this.state.itemsLoaded + 1,\n            });\n            return item;\n        } else {\n            throw new Error(`Unknown error while trying to load ${url}`);\n        }\n    }\n}\n\nconst media: MediaItem[] = [];\n\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\n    const image = new Image();\n    image.src = url;\n\n    return new Promise((resolve, reject) => {\n        if (image.naturalWidth) {\n            resolve(image);\n        } else if (image.complete) {\n            reject(null);\n        } else {\n            image.addEventListener(\"load\", check);\n            image.addEventListener(\"error\", check);\n        }\n        function check() {\n            if (image.naturalWidth) {\n                resolve(image);\n            } else {\n                reject(null);\n            }\n            image.removeEventListener(\"load\", check);\n            image.removeEventListener(\"error\", check);\n        }\n    });\n};\n\nconst getType = (url: string): MediaType => {\n    url = url.toLowerCase();\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\n        return MediaType.image;\n    }\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\n        return MediaType.sound;\n    }\n    throw Error(`Could not determine type for ${url}`);\n};\n","import { getDefinition } from \"definitions/items\";\r\nimport { Item, ItemType } from \"definitions/items/types\";\r\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\r\nimport * as React from \"react\";\r\nimport { StructureState, StructureStoreState } from \"stores/structure\";\r\nimport { StructuresStoreState } from \"stores/structures\";\r\nimport { TextManager } from \"utils/textManager\";\r\nimport \"./css/cheatbox.css\";\r\n\r\nexport interface DispatchProps {\r\n    onCheatGold?: (amount: number) => void;\r\n    onCheatWorkers?: (amount: number) => void;\r\n    onCheatResources?: (amount: number) => void;\r\n    onCheatItem?: (item: Item) => void;\r\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    structures: StructuresStoreState;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n    gold: number;\r\n    workers: number;\r\n    resources: number;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\nclass CheatWindow extends React.Component<AllProps, LocalState> {\r\n\r\n    private itemSelectRef: React.RefObject<HTMLSelectElement>;\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: AllProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gold: 50,\r\n            resources: 50,\r\n            workers: 10,\r\n        };\r\n\r\n        this.itemSelectRef = React.createRef();\r\n    }\r\n\r\n    public render() {\r\n\r\n        const getStructureRow = (structure: Structure) => {\r\n            const structureDef = getStructureDefinition(structure);\r\n            const structureStore: StructureStoreState = this.props.structures[structure];\r\n            const levelDef = structureDef.levels[structureStore.level];\r\n\r\n            const displayName = TextManager.get(levelDef.displayName);\r\n\r\n            return <div\r\n                className=\"label-dropdown\"\r\n                key={structure}\r\n            >\r\n                <label title={structure}>\r\n                    { `${displayName}` }\r\n                </label>\r\n                <input\r\n                    key={structure}\r\n                    type=\"checkbox\"\r\n                    checked={this.props.structures[structure].state === StructureState.Built }\r\n                    onChange={() => this.handleChangeStructureState(structure, this.props.structures[structure].state !== StructureState.Built)}\r\n                />\r\n            </div>;\r\n        };\r\n\r\n        const structures = Object.keys(this.props.structures)\r\n            .map((structure) => getStructureRow(structure as Structure));\r\n\r\n        const getItemTypeOptions = (type: ItemType) => {\r\n            return Object.keys(Item)\r\n                // tslint:disable-next-line: triple-equals\r\n                .filter((item: string) => getDefinition(item as Item).itemType == type)\r\n                .map((item: string) => getItemOption(item as Item));\r\n        };\r\n\r\n        const getItemOption = (item: Item) => {\r\n            return <option value ={item } key ={item }>\r\n                { TextManager.getItemName(item) }\r\n            </option>;\r\n        };\r\n\r\n        const items = Object.keys(ItemType)\r\n            .filter((val: any) => !isNaN(val))\r\n            .map((type: string) => {\r\n            return <optgroup label ={ItemType[type] } key ={type }>\r\n                { getItemTypeOptions(type as unknown as ItemType) }\r\n            </optgroup>;\r\n        });\r\n\r\n        return (\r\n            <div className=\"cheat-box\">\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Gold</label>\r\n                    <input type=\"number\"\r\n                        value= {this.state.gold}\r\n                        style={{width: \"50px\"}}\r\n                        onChange={this.handleChangeGold}>\r\n                    </input>\r\n                    <button onClick={this.handleCheatGold}>Add</button>\r\n                </div>\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Workers</label>\r\n                    <input type=\"number\"\r\n                        value= {this.state.workers}\r\n                        style={{width: \"50px\"}}\r\n                        onChange={this.handleChangeWorkers}>\r\n                    </input>\r\n                    <button onClick={this.handleCheatWorkers}>Add</button>\r\n                </div>\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Resources</label>\r\n                    <input type=\"number\"\r\n                        value= {this.state.resources}\r\n                        style={{width: \"50px\"}}\r\n                        onChange={this.handleChangeResources}>\r\n                    </input>\r\n                    <button onClick={this.handleCheatResources}>Add</button>\r\n                </div>\r\n                <div className=\"label-numberbox-button\">\r\n                    <label>Items</label>\r\n                    <select style={{width: \"150px\"}} ref={this.itemSelectRef}>\r\n                        { items }\r\n                    </select>\r\n                    <button onClick={this.handleCheatItem}>Add</button>\r\n                </div>\r\n                { structures }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = this.state.gold;\r\n        if (this.props.onCheatGold) { this.props.onCheatGold(amount); }\r\n    }\r\n\r\n    private handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const amount = this.state.workers;\r\n        if (this.props.onCheatWorkers) { this.props.onCheatWorkers(amount); }\r\n    }\r\n\r\n    private handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (this.props.onCheatResources) { this.props.onCheatResources(this.state.resources); }\r\n    }\r\n\r\n    private handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\r\n        const item = this.itemSelectRef.current!.value as Item;\r\n        if (this.props.onCheatItem) { this.props.onCheatItem(item); }\r\n    }\r\n\r\n    private handleChangeStructureState = (structure: Structure, checked: boolean) => {\r\n        if (this.props.onCheatStructureState) {\r\n            this.props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\r\n        }\r\n    }\r\n\r\n    private handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        this.setState({\r\n            gold: amount,\r\n        });\r\n    }\r\n\r\n    private handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.value);\r\n        this.setState({\r\n            workers: amount,\r\n        });\r\n    }\r\n\r\n    private handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const amount = Number(event.target.checked);\r\n        this.setState({\r\n            resources: amount,\r\n        });\r\n    }\r\n}\r\n\r\nexport default CheatWindow;\r\n","import { Resource } from \"definitions/resources\";\n\nexport const resourceOrder = [\n    Resource.food,\n    Resource.wood,\n    Resource.stone,\n    Resource.fabric,\n    Resource.leather,\n];\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/CheatWindow\";\nimport { resourceOrder } from \"constants/resources\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => {\n            dispatch(addGold(amount));\n            dispatch(addLogEntry(\"common-cheat-gold-added\", { amount }, LogChannel.common));\n        },\n        onCheatItem: (item: Item) => {\n            dispatch(addItemToWarehouse(item));\n            dispatch(addLogEntry(\"common-cheat-item-added\", { item }, LogChannel.common));\n        },\n        onCheatResources: (amount: number) => {\n            // Create ResourceStoreState where value of each resource is `amount`\n            const resources = resourceOrder.reduce((acc: ResourceStoreState, resource) => {\n                acc[resource] = amount;\n                return acc;\n            }, {});\n\n            dispatch(addResources(resources));\n            dispatch(addLogEntry(\"common-cheat-resources-added\", { amount }, LogChannel.common));\n        },\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => {\n            dispatch(addWorkers(amount));\n            dispatch(addLogEntry(\"common-cheat-workers-added\", { amount }, LogChannel.common));\n        },\n    };\n};\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(CheatWindow) as React.ComponentType<Props & WindowProps>;\n","import { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow from \"containers/windows/CheatWindow\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { compose } from \"redux\";\nimport \"./css/cheatbox.css\";\n\nexport interface DispatchProps {\n}\n\nexport interface StateProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\nclass Menu extends React.Component<AllProps & AppContextProps, LocalState> {\n\n    constructor(props: AllProps & AppContextProps) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    public render() {\n\n        const handleClickCheats = () => {\n            const window = <CheatWindow title = \"Cheats\" />;\n            this.props.onOpenWindow(window);\n        };\n        return (\n            <div className=\"menu\">\n                <ul>\n                    <li onClick = { handleClickCheats }>Cheats!</li>\n                </ul>\n            </div>\n        );\n    }\n\n}\n\nexport default compose(\n    withWindow,\n    withAppContext,\n)(Menu) as React.ComponentType<AllProps>;\n","import \"components/ui/css/common/icon.css\";\nimport { resourceOrder } from \"constants/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcebar.css\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props {\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n    resources: ResourceStoreState;\n}\n\nconst Resourcebar = (props: Props & StateProps & DispatchProps) => {\n\n    const createItem = (icon: string, amount: number, title: string) => {\n        return <li title = { title } key = { title }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${icon})`,\n            }}></div>\n            <div className = \"amount\">\n                { amount.toFixed(0) }\n            </div>\n        </li>;\n    };\n\n    const resources = resourceOrder.map((resource) => {\n        const resourceDescription = resourceDescriptions[resource];\n        return createItem(resourceDescription.iconImg, props.resources[resource as string], TextManager.getResourceName(resource));\n    });\n\n    resources.push(\n        createItem(\"/img/resources/worker.png\", props.workersFree, \"workers\"),\n        createItem(\"/img/resources/gold.png\", props.gold, \"gold\"),\n    );\n\n// <span>\n//     workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n// </span>\n// <span>\n//     gold: <b>{ props.gold }</b>\n// </span>\n\n    return (\n        <ul className=\"resourcebar\">\n            { resources }\n        </ul>\n    );\n};\nexport default Resourcebar;\n","import Resourcebar, { Props, StateProps } from \"components/topbar/Resourcebar\";\nimport { connect } from \"react-redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n\n    return {\n        gold: store.gold,\n        resources: store.resources,\n        workers: store.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n};\n\n// const mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n//     return {\n//     };\n// };\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(Resourcebar);\n","import Topbar, { Props, StateProps } from \"components/topbar/Topbar\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"../stores\";\n\n// todo this container might not be strictly necessary\n// also withRouter is probably not necessary\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n    };\n};\n\nexport default compose(\n    connect<StateProps, null, Props, StoreState>(mapStateToProps),\n    withRouter,\n    withAppContext,\n)(Topbar) as React.ComponentType<Props>;\n","import Menu from \"components/ui/window/windows/MenuWindow\";\nimport Resourcebar from \"containers/topbar/Resourcebar\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport \"./css/topbar.css\";\n\nexport interface Props {\n}\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & RouteComponentProps & AppContextProps;\n\nexport default function(props: AllProps) {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const window = <Menu title = \"Menu\" />;\n        props.onOpenWindow(window);\n    };\n    return (\n        <div className = \"topbar\">\n            <div className = \"topbar-left\">\n                <Resourcebar />\n            </div>\n            <div className = \"topbar-right\">\n                <div className = \"hamburger\" onClick = { handleClick }>☰</div>\n            </div>\n        </div>\n    );\n}\n","import * as React from \"react\";\n\nexport interface Props {\n    itemsLoaded?: number;\n    itemsTotal?: number;\n}\n\n/**\n * Loading indicator\n */\nexport default class Indicator extends React.Component<Props> {\n    public render() {\n        const { itemsLoaded, itemsTotal } = this.props;\n        return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\n    }\n}\n","\nimport { subtractGold } from \"actions/gold\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/context/ItemContext\";\nimport { getDefinition, Structure } from \"definitions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            const structureDefinition = getDefinition(structure);\n\n            dispatch(subtractGold(structureDefinition.cost.gold || 0));\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","// tslint:disable: object-literal-sort-keys\r\nimport { ContextInfo, ContextType} from \"constants/context\";\r\nimport CombatView from \"containers/combat/CombatView\";\r\nimport SimpleLog from \"containers/log/SimpleLog\";\r\nimport RealTownView from \"containers/RealTownView\";\r\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\r\nimport RealWorldView from \"containers/world/RealWorldView\";\r\nimport { AppContextProps} from \"hoc/withAppContext\";\r\nimport { Placement} from \"hoc/withPopup\";\r\nimport { manifest} from \"manifest/app\";\r\nimport * as React from \"react\";\r\nimport { DndProvider} from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { BrowserRouter as Router, Link, Redirect, Route} from \"react-router-dom\";\r\nimport { Persistor} from \"redux-persist\";\r\nimport { Sound, SoundManager} from \"utils/soundManager\";\r\nimport { TextManager} from \"utils/textManager\";\r\nimport Topbar from \"../containers/Topbar\";\r\nimport { Structure} from \"../definitions/structures\";\r\nimport \"./css/app.css\";\r\nimport Preloader, { MediaItem, MediaType} from \"./preloading/Preloader\";\r\nimport ContextView from \"./ui/context/ContextView\";\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface StateProps {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface DispatchProps {\r\n}\r\n\r\nexport enum View {\r\n    Town,\r\n    World,\r\n}\r\n\r\nexport interface Props {\r\n    persistor: Persistor;\r\n}\r\n\r\ninterface LocalState {\r\n    media: MediaItem[];\r\n    selectedStructure: Structure | null;\r\n    selectedContext: SelectedContext | null;\r\n    containerRect: ClientRect | null;\r\n\r\n    activeWindows: React.ReactElement[];\r\n}\r\n\r\ninterface SelectedContext {\r\n    contextType: ContextType ;\r\n    contextInfo: ContextInfo;\r\n    contextRect: ClientRect;\r\n}\r\n\r\nconst resolution = {\r\n    height: 860, // 972,\r\n    width: 648,\r\n};\r\n\r\nexport const AppContext = React.createContext<AppContextProps | null>(null);\r\n\r\nexport default class App extends React.Component<Props & StateProps & DispatchProps, LocalState> {\r\n    private containerRef: React.RefObject<HTMLDivElement>;\r\n\r\n    // This Component has local state, so it\"s a class\r\n    constructor(props: Props & StateProps & DispatchProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedContext: null,\r\n            containerRect: null,\r\n            media: [],\r\n            selectedStructure: null,\r\n            activeWindows: [],\r\n       };\r\n        this.containerRef = React.createRef();\r\n        this.handleResize = this.handleResize.bind(this);\r\n   }\r\n\r\n    public render() {\r\n        const handleViewButtonClick = () => {\r\n            SoundManager.playSound(Sound.buttonClick);\r\n       };\r\n\r\n        const handleResetClick = () => {\r\n            this.props.persistor.purge();\r\n            (window as any).location.reload();\r\n       };\r\n\r\n        // Router elements\r\n        const TownButton = () => <Link to=\"/town\">\r\n            <button onClick= { () => handleViewButtonClick()}> { TextManager.get(`common-view-button-town`)} </button>\r\n        </Link>;\r\n\r\n        const WorldButton = () => <Link to=\"/world\">\r\n            <button onClick= { () => handleViewButtonClick()}> { TextManager.get(`common-view-button-world`)} </button>\r\n        </Link>;\r\n\r\n        const TownView = () => <RealTownView onStructureClick={this.selectStructure} />;\r\n        const WorldView = () => <RealWorldView/>;\r\n\r\n        // A contextual popup showing what you just clicked. Can be an Item\r\n        let ContextPopup = null;\r\n        if (this.state.selectedContext) {\r\n\r\n            const { contextType, contextInfo, contextRect} = this.state.selectedContext;\r\n\r\n            ContextPopup = <ContextView\r\n                type={contextType}\r\n                info={contextInfo}\r\n                containerRect={this.state.containerRect!}\r\n                referenceRect={contextRect}\r\n                placement={Placement.bottom}\r\n            >\r\n            </ContextView>;\r\n        }\r\n\r\n        const Window = this.getActiveWindow();\r\n\r\n        return <AppContext.Provider value={{\r\n            media: this.state.media,\r\n            onContextualObjectActivated: this.handleContextualObjectActivated,\r\n            onOpenWindow: this.handleWindowOpened,\r\n        }}>\r\n            <div className = \"app\"\r\n                ref={this.containerRef}\r\n                style={{\r\n                    width: resolution.width,\r\n                    height: resolution.height,\r\n                }}\r\n                onClick={this.handleAppClick}\r\n            >\r\n                <DndProvider backend={HTML5Backend}>\r\n                <Router>\r\n                    <Preloader\r\n                        manifest={manifest}\r\n                        onLoadComplete={this.handleMediaLoadComplete}\r\n                    >\r\n                    <Topbar/>\r\n                    <Redirect from=\"/\" to=\"world\" />\r\n                    <Route path=\"/world\" component={TownButton} />\r\n                    <Route path=\"/town\" component={WorldButton} />\r\n                    { ` | `}\r\n                    <button onClick= { () => handleResetClick()} style={ { color: \"red\"}}> Restart! </button>\r\n                    <Route path=\"/town\" component={TownView} />\r\n                    <Route path=\"/world\" component={WorldView} />\r\n                { Window}\r\n                { ContextPopup}\r\n                <SimpleLog/>\r\n\r\n                </Preloader>\r\n                </Router>\r\n                </DndProvider>\r\n            </div>\r\n        </AppContext.Provider>;\r\n   }\r\n\r\n    public componentDidMount() {\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n        this.handleResize();\r\n   }\r\n\r\n    public componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n   }\r\n\r\n    private getActiveWindow(): React.ReactElement | null {\r\n        if (!this.state.activeWindows.length) {\r\n            return null;\r\n       }\r\n\r\n        const topWindow = this.state.activeWindows[this.state.activeWindows.length - 1];\r\n        const commonWindowProps = {\r\n            onClose: this.handleWindowClose,\r\n            onBack: this.handleWindowBack,\r\n            backEnabled: this.state.activeWindows.length > 1,\r\n            closeEnabled: true,\r\n       };\r\n\r\n        const element = React.cloneElement(topWindow, commonWindowProps);\r\n        return element;\r\n   }\r\n\r\n    private handleResize() {\r\n        if (this.containerRef.current) {\r\n            if (window.innerHeight < resolution.height) {\r\n                this.containerRef.current.style.transform = `scale(${window.innerHeight / resolution.height}) translateX(-50%)`;\r\n\r\n           } else {\r\n                this.containerRef.current.style.transform = `scale(1) translateX(-50%)`;\r\n           }\r\n            const parentBox = this.containerRef.current.getBoundingClientRect();\r\n\r\n            this.setState({\r\n                containerRect: parentBox,\r\n                selectedContext: null, // this would be in the wrong place\r\n           });\r\n       }\r\n   }\r\n\r\n    private selectStructure = (structure: Structure | null) => {\r\n        if (structure) {\r\n            const displayName = TextManager.getStructureName(structure);\r\n\r\n            const window = <StructureDetailsView structure={structure} title={displayName}/>;\r\n            this.handleWindowOpened(window);\r\n       }\r\n   }\r\n\r\n    private handleMediaLoadComplete = (media: MediaItem[]) => {\r\n\r\n        const sounds = media.filter((m) => m.mediaType === MediaType.sound);\r\n        SoundManager.loadMedia(sounds);\r\n\r\n        SoundManager.addSounds({\r\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\r\n            [Sound.error]: \"sound/fx/error.ogg\",\r\n            // add more sounds here\r\n       });\r\n\r\n        this.setState({\r\n            media,\r\n       });\r\n\r\n        // todo: temporary!\r\n        // const window = <CombatView/>;\r\n        // this.handleWindowOpened(window);\r\n   }\r\n\r\n    private handleContextualObjectActivated = (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => {\r\n\r\n        this.setState({\r\n            selectedContext: {\r\n                contextInfo: info,\r\n                contextType: type,\r\n                contextRect: originRect,\r\n           },\r\n       });\r\n   }\r\n\r\n    private handleAppClick = () => {\r\n        if (this.state.selectedContext) {\r\n            this.setState({\r\n                selectedContext: null,\r\n           });\r\n       }\r\n   }\r\n\r\n    private handleWindowOpened = (window: React.ReactElement) => {\r\n        this.setState({\r\n            activeWindows: [\r\n                ...this.state.activeWindows,\r\n                window,\r\n            ],\r\n       });\r\n   }\r\n\r\n    /**\r\n     * Closes all windows\r\n     */\r\n    private handleWindowClose = () => {\r\n        if (this.state.activeWindows.length) {\r\n            this.setState({\r\n                activeWindows: [],\r\n           });\r\n       }\r\n   }\r\n\r\n    /**\r\n     * Closes the top window of the stack\r\n     */\r\n    private handleWindowBack = () => {\r\n        if (this.state.activeWindows.length) {\r\n            this.setState({\r\n                activeWindows: this.state.activeWindows.slice(0, -1),\r\n           });\r\n       }\r\n   }\r\n}\r\n","\nimport { getDefinition as getApparelDefinition } from \"definitions/items/apparel\";\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport { DamageType, getDefinition as getWeaponDefinition } from \"definitions/items/weapons\";\nimport { getDefinition as getStructureDefinition, Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = getStructureDefinition(deedInfo.structure);\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n\n        case ItemType.weapon:\n            const weaponDefinition = getWeaponDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    <p> damage: { weaponDefinition.damage[DamageType.kinetic] } </p>\n                </>\n            );\n\n        case ItemType.apparel:\n            const apparelDefinition = getApparelDefinition(info.item);\n            return (\n                <>\n                    <p> \" { info.subText } \" </p>\n                    { apparelDefinition.armorRating && <p> armor: { apparelDefinition.armorRating } </p> }\n                </>\n            );\n\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","import { ContextInfo, ContextType } from \"constants/context\";\nimport ItemContext from \"containers/ui/context/ItemContext\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { PopupProps, withPopup } from \"hoc/withPopup\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/contextview.css\";\n\nexport interface Props {\n    type: ContextType | null;\n    info: ContextInfo | null;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & DispatchProps & PopupProps;\n/**\n * The ContextView shows the player contextual information about the item she clicked\n * @param props\n */\nclass ContextView extends React.Component<AllProps> {\n\n    public render() {\n        let { info } = this.props;\n        const { type } = this.props;\n\n        if (!info) {\n            info = {\n                iconImg: \"/img/items/deeds/deed.png\",\n                item: Item.deedForWeaponsmith,\n                itemType: ItemType.weapon,\n                subText: \"It allows for the construction of a weaponsmith\",\n            };\n        }\n        let content;\n\n        switch (type) {\n            case ContextType.item:\n            default:\n                content = <ItemContext info= { info } />;\n        }\n\n        const name = TextManager.getItemName(info.item);\n        return <div className = \"contextbox\">\n            <div>{ name } </div>\n            { content }\n        </div>;\n    }\n\n    public componentDidUpdate() {\n    //    // console.log(this.containerRef.current)\n    //     //console.log(this.props.origin)\n\n    //     if (this.containerRef.current && this.props.origin) {\n    //        // var rect = (this.props.origin as HTMLElement).getBoundingClientRect();\n    //        // console.log(rect)\n    //         const reference = this.props.origin as Element;\n\n    //         const popperInstance = new Popper(reference, this.containerRef.current\n    //             // popper options here\n    //         );\n    //     }\n    }\n}\n\nexport default withPopup<AllProps>(ContextView);\n","import App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import { getDefinition, Structure } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { StoreState } from \"stores\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\n\n /*\n  * Calculates how many resources are generated by the in the town.\n  * Will return a ResourceStoreState with the amount of each resource to add  */\nconst getProducedResources = (delta: number, store: StoreState): ResourceStoreState => {\n    const structures: StructuresStoreState = store.structures;\n    const result: ResourceStoreState = {};\n    const factor = delta / RESOURCE_INTERVAL;\n    // this function can run at different intervals\n    // faster or slower than once a minute\n    // we will multiply the resource amount by the factor to normalize\n    const maxResources = getMaxResources(store);\n\n    const handleStructure = (structure: string) => {\n        const structureDefinition = getDefinition(structure);\n\n        if (structureDefinition.type === StructureType.resource) {\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\n            const level: number = structures[structure].level;\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\n\n            // Store all the resources that this structure will generate this tick into `result`\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\n                return accumulator;\n            }, result);\n        }\n    };\n\n    // Calculate what each structure generates. Stores in `result`.\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\n\n    // Check if the warehouse can actually hold it\n    // todo: [10/07/2019] move to reducer\n    Object.keys(result).forEach((resource: string) => {\n        if (result[resource]) {\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\n            }\n        }\n//        console.log(`Adding: ${resource} ${result[resource]}`);\n    });\n\n    return result;\n};\n\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\n    const structureDefinition = getDefinition<WarehouseStructureDefinition>(Structure.warehouse);\n    const level: number = store.structures[Structure.warehouse].level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    return levelDefinition.maxResources;\n};\n\nexport default getProducedResources;\n","import { TextEntry } from \"constants/text\";\nimport encounterDefintions from \"definitions/encounters\";\nimport { Encounter } from \"definitions/encounters/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { oracles } from \"oracle\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nexport interface QuestUpdate {\n    name: string;\n    currentEncounter: Encounter | null;\n    progress: number;\n}\n\nexport interface LogUpdate extends TextEntry {\n    key: string;\n    channel: LogChannel;\n    channelContext?: any;\n}\n\ninterface QuestGameTickResponse {\n    questUpdates: QuestUpdate[];\n    logUpdates: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: StoreState): QuestGameTickResponse => {\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the user has to do something to move the quest along\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n\n    store.quests.forEach((qss: QuestStoreState) => {\n        if (qss.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[qss.name];\n        const currentProgress = qss.progress;\n        const currentNodeIndex =  Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            let currentEncounter = qss.currentEncounter;\n\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n                    const encounter = encounterDefintions[nextNode.encounter!];\n                    const oracle = oracles[qss.name];\n                    nextProgress = currentNodeIndex + i;\n                    currentEncounter = nextNode.encounter!;\n                    // Start encounter(encounter)\n\n                    // Add quest to log\n                    log.push({\n                        channel: LogChannel.quest,\n                        channelContext: qss.name,\n                        ...encounter.getDescription(oracle),\n                    });\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    currentEncounter = null;\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: qss.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                currentEncounter,\n                name: qss.name,\n                progress: nextProgress,\n            });\n        }\n    });\n\n    return {\n        logUpdates: log,\n        questUpdates: quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ActionType,\n    AssignEquipmentAction,\n    InventoryAction,\n    MoveItemInInventoryAction,\n    MoveItemToOtherAdventurerAction, RemoveEquipmentAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { EquipmentSlotType } from \"components/ui/EquipmentSlot\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { AdventurerStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: {\n        chest: Item.chest,\n        head: Item.cowl,\n    },\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `/img/avatars/andy-victorovych-a1.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `/img/avatars/andy-victorovych-a2.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, Item.boots1, Item.chainmailHood, Item.nomadHelmet, Item.plateChest4, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null, Item.plateHelmet, Item.cowl],\n}, {\n    id: \"ec6f1050\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `/img/avatars/andy-victorovych-a3.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `/img/avatars/andy-victorovych-a4.jpg`,\n    inventory: [ null, null, null, null, Item.khopesh, Item.hornedHelmet ],\n}, {\n    id: \"96c686c3\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `/img/avatars/andy-victorovych-a5.jpg`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `/img/avatars/andy-victorovych-a6.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `/img/avatars/andy-victorovych-a7.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: {},\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `/img/avatars/andy-victorovych-a8.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `/img/avatars/andy-victorovych-a9.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null, Item.shoulders1, Item.fedora, Item.greaves2 ],\n}, {\n    id: \"12c613d4\",\n    equipment: {},\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `/img/avatars/andy-victorovych-a10.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], AnyAction> = (\n    state: AdventurerStoreState[] = testState, action: AnyAction) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null) {\n                        toSlot = inventory.findIndex((val) => val === null || val === undefined);\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.assignEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot, item } = action as AssignEquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: item,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.removeEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentSlot } = action as RemoveEquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            ...adventurer.equipment,\n                            [EquipmentSlotType[equipmentSlot]]: null,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","import { ActionType, AddCombatActionAction, MoveActorAction } from \"actions/combat\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { barBrawl, CombatStoreState } from \"stores/combat\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const combat: Reducer<CombatStoreState> = (state: CombatStoreState = barBrawl, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startCombatAction:\n            const addAction = action as AddCombatActionAction;\n\n            return {\n                ...state,\n                action: {\n                    actor: addAction.actor,\n                    endsAt: addAction.endsAt,\n                    target: addAction.target,\n                    type: addAction.combatType,\n                },\n            };\n\n        case ActionType.moveActor:\n            const moveAction = action as MoveActorAction;\n\n            // Moves an actor to another position\n            const actors = state.actors.map((a) => {\n                if (a.name === moveAction.actor) {\n                    return {\n                        ...a,\n                        location: moveAction.location,\n                    };\n                }\n                return a;\n            });\n\n            return {\n                ...state,\n                actors,\n            };\n\n            case ActionType.clearCombatAction:\n            // Clears current combat action\n            return {\n                ...state,\n                action: undefined,\n            };\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\n\nexport interface EngineStoreState {\n    lastTick: number;\n}\n\nexport const initialState: EngineStoreState = {\n    lastTick: Date.now(),\n};\n","import { ActionType as GameActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { EngineStoreState, initialState } from \"stores/engine\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case GameActionType.gameTick:\n            return {\n                ...state,\n                lastTick: Date.now(),\n            };\n    }\n    return state;\n};\n","\nimport {  ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\nimport { Item } from \"definitions/items/types\";\nimport { AnyAction, Reducer } from \"redux\";\n\nconst testState = [\n    null,\n    null,\n    null,\n    Item.dagger,\n    Item.deedForWeaponsmith,\n];\n\n// Items in warehouse\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\n                                                 action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addItem: {\n            // toSlot is optional\n            const { item } = (action as AddAction);\n            let { toSlot } = (action as AddAction);\n            if (toSlot === undefined) {\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\n                if (toSlot === -1) {\n                    // Still not found. Add at end\n                    // todo: [07/07/2019] GAME DESIGN\n                    return [ ...state, item ];\n                }\n            }\n            return state.map((element, index) => index === toSlot ? item : element);\n        }\n\n        case ActionType.moveItemInWarehouse: {\n            const {\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInWarehouseAction);\n\n            return state.map((element, index) => {\n                // todo: items switch places\n                if (index === fromSlot) { return null; }\n                if (index === toSlot) { return state[fromSlot]; }\n                return element;\n            });\n        }\n        case ActionType.removeItem: {\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\n\n            return state.map((element, index) => index !== fromSlot ? element : null);\n        }\n    }\n\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const { key, channel, channelContext, context } = (action as AddLogEntryAction);\n            const time = Date.now();\n            return [{\n                    channel,\n                    channelContext,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, StartEncounterAction, UpdateEncounterResultAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport questDefinitions, { QuestDefinition } from \"definitions/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil1.png\",\n    currentEncounter: null,\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil2.png\",\n    currentEncounter: null,\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState,\n                                                   action: AnyAction | GameTickAction) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.advanceQuest:\n            return advanceQuest(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        case ActionType.startEncounter:\n            return startEncounter(state, action as StartEncounterAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (state: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n            };\n        }\n        return qss;\n    });\n};\n\nconst advanceQuest = (state: QuestStoreState[], action: QuestAction) => {\n    // deprecated\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            // const nextNode = questDefinition.nodes[Math.floor(progress)];\n\n            return {\n                ...qss,\n                progress,\n            };\n        }\n        return qss;\n    });\n};\n\nconst startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                currentEncounter: action.encounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n    if (!questsToUpdate.length) {\n        return state;\n    }\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState, initialState as structureInitialState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n    [Structure.workshop]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: structureInitialState,\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: structureInitialState,\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: structureInitialState,\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: structureInitialState,\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: structureInitialState,\n    [Structure.workshop]: structureInitialState,\n};\n","import { ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, AnyAction> = (state: StructuresStoreState = initialState,\n                                                                     action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport {  ActionType, AddAction} from \"actions/tasks\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\n\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { combat } from \"./combat\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    combat,\n    engine,\n    gold,\n    items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n    }\n    return state;\n};\n","\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { ActionType, AddResources } from \"../actions/resources\";\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\n                                                       action: AnyAction | GameTickAction) => {\n\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\n        // todo: Check if warehouse can hold it\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\n            return accumulator;\n        }, {});\n    };\n\n    switch (action.type) {\n        case ActionType.addResources: {\n            const resourcesToAdd = (action as AddResources).resources;\n            return addResources(resourcesToAdd);\n        }\n        case ActionType.removeResources: {\n            const resourcesToRemove = (action as AddResources).resources;\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\n                return accumulator;\n            }, {});\n        }\n\n        case GameActionType.gameTick: {\n            const resourcesToAdd = (action as GameTickAction).resources;\n            return addResources(resourcesToAdd);\n        }\n    }\n    return state;\n};\n","import { ActionType, GameTickAction } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, AnyAction> = (state: seedrandomStateType = initialState,\n                                                                  action: AnyAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { ActionType, ModifyWorkersAction } from \"actions\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import axios from \"axios\";\r\nimport updateCombat from \"mechanics/gameTick/combat\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Persistor } from \"redux-persist\";\r\nimport { gameTick } from \"./actions/game\";\r\nimport { addLogEntry } from \"./actions/log\";\r\nimport version from \"./constants/version\";\r\nimport App from \"./containers/App\";\r\nimport \"./index.css\";\r\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\r\nimport getQuestUpdates, { LogUpdate } from \"./mechanics/gameTick/quests\";\r\nimport getRngState from \"./mechanics/gameTick/rngState\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { StoreState } from \"./stores\";\r\nimport { TaskStoreState } from \"./stores/task\";\r\nimport { TasksStoreState } from \"./stores/tasks\";\r\nimport configureStore from \"./utils/configureStore\";\r\nimport * as Random from \"./utils/random\";\r\nimport { TextManager } from \"./utils/textManager\";\r\nimport WorldMap from \"components/three/world/WorldMap\";\r\n//import \"threetest.ts\";\r\n\r\n\r\nlet interval: NodeJS.Timeout;\r\nconst initGame = async () => {\r\n    const axiosResult = await axios.get(\"lang/en-US.json\");\r\n    const texts = axiosResult.data as Record<string, string>;\r\n    TextManager.init(texts);\r\n    Random.init(\"GILLESROX2\");\r\n\r\n    const { store, persistor, isHydrated } = await configureStore();\r\n    if (!isHydrated) {\r\n        startNewGame(store);\r\n    } else {\r\n        continueGame(store);\r\n    }\r\n    runGame(store, persistor);\r\n};\r\n\r\n/**\r\n * Gets called when a player\r\n * @param store\r\n */\r\nconst startNewGame = (store: any) => {\r\n\r\n    store.dispatch(addLogEntry(\"test-game-welcome\"));\r\n    // todo: here is a good place to launch a tutorial or something\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\nconst continueGame = (store: any) => {\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\n// const stopGame = () => {\r\n//     clearTimeout(interval);\r\n// };\r\n\r\nconst runGame = (store: any, persistor: Persistor) => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App persistor={ persistor }/>\r\n        </Provider>,\r\n        document.getElementById(\"root\") as HTMLElement,\r\n    );\r\n    registerServiceWorker();\r\n\r\n    const processCompletedTasks = (tasks: TasksStoreState) => {\r\n        const handleCompletedTask = (task: TaskStoreState) => {\r\n            // Fire all callbacks\r\n            task.callbacks.forEach((action) => store.dispatch(action));\r\n        };\r\n\r\n        tasks.completed.forEach((task) => handleCompletedTask(task));\r\n    };\r\n\r\n    // store.dispatch(addGold(400));\r\n\r\n    // TODO: find something less ugly and hacky than this\r\n//    oracles.kill10b = theBigTree.getOracle(\"kill_10_boars\", store);\r\n  //  oracles[\"retrieve_magic_amulet\"] = backstabbed.getOracle(\"retrieve_magic_amulet\", store);\r\n    const gameLoop = () => {\r\n        const state: StoreState = store.getState();\r\n        const delta = Date.now() - state.engine.lastTick;\r\n\r\n        const logs: LogUpdate[] = [];\r\n        const resourcesUpdates = getProducedResources(delta, state);\r\n        const rngState = getRngState();\r\n        updateCombat(delta, store);\r\n        const { questUpdates, logUpdates } = getQuestUpdates(delta, state);\r\n        logs.push(...logUpdates);\r\n\r\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, questUpdates, logs));\r\n\r\n        processCompletedTasks(state.tasks);\r\n\r\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", LogChannel.common, { item: Item.teeth }));\r\n    };\r\n\r\n    interval = setInterval(gameLoop, 2500);\r\n};\r\n\r\ninitGame();\r\n"],"sourceRoot":""}