{"version":3,"sources":["actions/game.ts","stores/logEntry.tsx","actions/log.ts","utils/version.ts","actions/adventurers.ts","actions/items.ts","constants/version.tsx","constants/dragging.ts","definitions/structures/types.tsx","definitions/structures/alchemist.tsx","definitions/items/types.ts","utils/time.tsx","definitions/production/armour.tsx","definitions/structures/index.tsx","definitions/structures/armoursmith.tsx","definitions/structures/garden.tsx","definitions/structures/lumberMill.tsx","definitions/structures/mine.tsx","definitions/structures/quarry.tsx","definitions/structures/tannery.tsx","definitions/structures/tavern.tsx","definitions/structures/warehouse.tsx","definitions/production/weapons.tsx","definitions/structures/weaponsmith.tsx","definitions/structures/weaver.tsx","definitions/items/equipment.ts","definitions/items/deeds.ts","definitions/items/weapons.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","utils/textManager.ts","components/ui/AdventurerAvatar.tsx","components/ui/ItemIcon.tsx","constants/context.ts","components/ui/DraggableItemIcon.tsx","hoc/withAppContext.tsx","stores/quest.tsx","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/AdventurersBox.tsx","selectors/adventurers.tsx","actions/index.ts","actions/gold.ts","actions/resources.ts","actions/structures.ts","stores/structure.tsx","containers/AdventurersBox.tsx","components/log/SimpleLog.tsx","components/CheatBox.tsx","containers/CheatBox.tsx","actions/quests.ts","containers/log/SimpleLog.tsx","storeHelpers/index.tsx","utils/random.ts","definitions/encounters/types.ts","oracle/index.tsx","definitions/encounters/backstabbed.ts","definitions/quests/index.tsx","definitions/encounters/goblinHouse.ts","definitions/encounters/index.ts","definitions/encounters/theBigTree.ts","components/ui/DroppableAdventurerAvatar.tsx","components/partyScreen/PartyScreen.tsx","containers/partyScreen/PartyScreen.tsx","utils/soundManager.ts","components/world/QuestLineVisualization.tsx","components/partyScreen/RealWorldView.tsx","containers/partyScreen/RealWorldView.tsx","components/RealTownView.tsx","containers/RealTownView.tsx","definitions/resources.tsx","components/ui/items/ItemsBox.tsx","containers/ui/context/items/MaterialsCostBox.tsx","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","components/ui/Progressbar.tsx","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/ProductionStructureView.tsx","selectors/workers.tsx","stores/task.tsx","containers/structures/ProductionStructureView.tsx","components/structures/ResourceStructureView.tsx","containers/structures/ResourceStructureView.tsx","components/ui/DraggableAdventurerAvatar.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","components/ui/resources/ResourcesBox.tsx","components/structures/warehouse/WarehouseStructureView.tsx","containers/structures/warehouse/WarehouseStructureView.tsx","containers/structures/StructureDetailsView.tsx","components/StructureDetailsView.tsx","manifest/app.tsx","containers/Topbar.tsx","components/preloading/Preloader.tsx","components/Topbar.tsx","components/preloading/Indicator.tsx","containers/ui/context/ItemContext.tsx","components/App.tsx","components/ui/context/ItemContext.tsx","components/ui/context/ContextView.tsx","containers/App.tsx","mechanics/gameTick/producedResources.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","stores/engine.tsx","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/resources.tsx","stores/structures.tsx","reducers/structures.ts","stores/tasks.tsx","reducers/tasks.ts","reducers/index.ts","reducers/engine.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","index.tsx"],"names":["ActionType","LogChannel","addLogEntry","key","channel","arguments","length","undefined","common","context","type","asInt","semVer","parts","split","map","part","Number","Error","concat","forEach","numericVersion","i","convertSemVerToInt","moveItemInInventory","adventurerId","fromSlot","toSlot","addItemToInventory","item","addItemToWarehouse","addItem","DragSourceType","DragType","StructureType","ItemType","Item","alchemist","production","cost","gold","time","levels","displayName","workerCapacity","produces","formatDuration","unit","moment","format","trim","Structure","boots1","resources","wood","iron","ONE_MINUTE","chest","cowl","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","gunpowder","stone","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","EquipmentType","definitions_structures","itemType","deed","deeds","deedForLumbermill","structure","subText","iconImg","deedForWeaponsmith","equipment","basePath","WeaponType","weaponDefinitions","_weaponDefinitions","Object","defineProperty","equipmentType","feet","boots2","boots3","chainmailHood","head","clothGloves","hands","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","material","_Item$bolts$Item$buck","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","scales","spring","thread","questItem","questItemDefinitions","_questItemDefinitions","blueprints","crate","dynamite","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","torch","tusk","vase","vial","weeds","trinket","trinketDefinitions","_trinketDefinitions","magicAmulet","ring","weapon","weapons_weaponDefinitions","battleAxe","weaponType","axe","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","all","objectSpread","questItems","trinkets","weapons","getDefinition","TextManager","classCallCheck","this","createClass","value","texts","precompile","templates","compileAll","initialized","template","getTemplate","console","error","compile","name","get","_this","keys","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","itemArticleUndefined","articleTemplate","noun","AdventurerAvatar","props","adventurer","className","react","style","backgroundImage","avatarImg","onClick","id","ItemIcon","itemDefinition","warn","ContextType","DraggableItemIcon","_this$props","isDragging","connectDragSource","ui_ItemIcon","React","DragSource","beginDrag","inventorySlot","index","sourceId","sourceType","connect","monitor","dragSource","QuestStatus","withAppContext","WrappedComponent","_React$Component","WithContext","possibleConstructorReturn","getPrototypeOf","apply","inherits","AppContext","Consumer","assign","InventorySlot","isOver","canDrop","borderColor","connectDropTarget","children","DropTarget","drop","onDrop","getItem","empty","dropTarget","slots","_loop","contents","items","ui_DraggableItemIcon","onContextualObjectActivated","slot","inventory_InventorySlot","dragInfo","onDropItem","push","AdventurersBox","call","state","selectedAdventurer","_this2","generatePortrait","ui_AdventurerAvatar","setState","groupedAdventurers","group","adventurers","find","adventurerInfo","inventory_Inventory","inventory","onMoveItemInInventory","onMoveItemFromWarehouseToAdventurer","quest","quests","q","sigilImgPath","icon","getQuestTitle","title","generateRow","StructureState","selectAdventurersGroupedByQuest","createSelector","foundInParty","findAdventurerById","a","values","reduce","acc","val","foundAdventurers","party","status","active","toConsumableArray","filter","indexOf","store","dispatch","removeAction","removeItem","removeItemFromWarehouse","addAction","action","addGold","amount","subtractGold","addResources","finishBuildingStructure","upgradeStructure","increaseWorkers","workers","decreaseWorkers","NotBuilt","TabType","CheatBox","itemSelectRef","handleCheatGold","evt","onCheatGold","handleCheatWorkers","onCheatWorkers","handleCheatResources","onCheatResources","handleCheatItem","current","onCheatItem","handleChangeStructureState","checked","onCheatStructureState","Built","handleChangeGold","event","target","handleChangeWorkers","handleChangeResources","structures","structureDef","structureDefinitions","structureStore","levelDef","level","onChange","getStructureRow","getItemOption","getItemName","isNaN","label","getItemTypeOptions","width","ref","setStructureState","addWorkers","SimpleLog","selectedTabId","tabs","tabId","tabType","town","questNames","questName","logEntries","currentTab","t","lE","tab","handleTabClick","entry","logEntry","text","getLogEntryRow","log","advanceQuest","generator","adventurersOnQuest","storeIsRehydrated","rngState","randomInt","min","max","Math","ceil","floor","dirty","random","Encounter","Oracle","stat","sort","b","stats","questVars","oracles","QuestNodeType","backstabbed","getOracle","getTitle","oracle","getDescription","getOptions","fight","flight","answer","option","finder","getRandomAdventurer","goblinHouseOutside","investigate","leave","encounter","startEncounter","goblinHouseHallway","encounters","theBigTree","strongest","getAdventurerWithHighest","walkAround","lift","treeState","vars","updateQuestVars","goldAmount","definitions_quests","kill10Boars","nodes","x","y","nothing","boss","retrieveMagicAmulet","DroppableAdventurerAvatar","PartyScreen","getAvatars","selected","ui_DroppableAdventurerAvatar","handleAvatarClick","fromAdventurer","onMoveItemToOtherAdventurer","getBottomPart","getAdventurerInfo","questDefinition","questDefinitions","progress","questNode","message","actions","reverse","encounterDefinitions","currentEncounter","options","o","handleEncounterOptionClick","prevProps","attributes","toFixed","equipmentList","result","onDispatch","onUpdateEncounterResult","compose","MusicTrack","Sound","media","ownProps","onAdvanceQuest","fromAdventurerId","toAdventurerId","moveItemToOtherAdventurer","nodeIndex","updateEncounterResult","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","_ref","_ref2","slicedToArray","url","content","sound","play","track","hasOwnProperty","fade","nextMusic","playing","loop","QuestLineVisualization","questNodes","n","node","spanProps","createNodeVisualization","onSelectQuest","RealWorldView","selectedQuest","addMusicTrack","world","questLines","handleSelectQuest","containers_partyScreen_PartyScreen","playMusic","playMusicTrack","RealTownView","plasmaBeam","anim","handleStructureClick","onStructureClick","handleBackgroundClick","images","stop","ReactKonva","fontSize","fill","height","scale","image","imgSrc","shadowBlur","shadowColor","shadowEnabled","strokeWidth","drawHitFromCache","img","Resource","ItemsBox","itemsInInventory","listItems","listItemClass","itemDescription","itemsDescription","definitions_resources","_Resource$wood$Resour","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","Progressbar","UpDownValue","displayValue","upDisabled","onUp","downDisabled","onDown","ProductionStructureView","selectedItem","workersAssigned","structureDefinition","levelDefinition","handleSelectCraftingItem","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","createCraftTabs","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","costItemsContent","MaterialsCostBox","resources_ResourcesCostBox","display","ui_UpDownValue","workersFree","craftingTime","formatted","makeTimeString","productionDefinition","onCraft","createCraftingDetails","tasks","startTime","timeRemaining","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","running","removeResources","craftItem","ResourceStructureView","onWorkersDown","onWorkersUp","createWorkersRow","generatesText","accumulator","join","createGeneratesRow","spec","DraggableAdventurerAvatar","DroppableAdventurerSlot","AssignAdventurers","assignedAventurers","onRemoveAdventurer","ui_DroppableAdventurerSlot","onAddEventurer","availableSlots","slotsContent","QuestBoard","questListContent","availableQuests","iconImgPath","selectedQuestName","onQuestClick","canLaunch","getQuestDescription","tavern_AssignAdventurers","onAddAdventurer","onLaunchQuest","getQuestDetails","TavernStructureView","roomCount","available","roomContent","room","assigned","getQuestByAdventurer","ui_DraggableAdventurerAvatar","createRooms","QuestBoard_QuestBoard","handleQuestClick","handleAddAdventurer","handleRemoveAdventurer","handleLaunchQuest","launchQuest","deltaResources","delta","WarehouseStructureView","resourcesDelta","resourcesRef","resources_ResourcesBox","onMoveItemInWarehouse","onMoveItemFromAdventurer","_this3","classList","remove","setTimeout","add","action1","removeItemFromInventory","action2","moveItemInWarehouse","buildTask","view","Building","structures_ProductionStructureView","containers_structures_ResourceStructureView","structures_warehouse_WarehouseStructureView","tavern_TavernStructureView","getStructureView","manifest","MediaType","viewButtonText","appView","View","Town","onViewButtonClick","persistor","purge","window","location","reload","color","Indicator","itemsLoaded","itemsTotal","Preloader","loadMedia","promises","loadItem","catch","err","Promise","then","results","onLoadComplete","completed","asyncToGenerator","regenerator_default","mark","_callee","mediaType","_value","wrap","_context","prev","next","getType","loadImage","sent","Howl","src","abrupt","_x","complete","indicator","Indicator_Indicator","Image","resolve","reject","check","naturalWidth","removeEventListener","addEventListener","toLowerCase","endsWith","handleStartConstruction","startBuildingStructure","buildStructure","info","deedInfo","enoughGold","ContextView","context_ItemContext","resolution","App","containerRef","changeView","playSound","buttonClick","selectedStructure","World","selectStructure","closeStructureModal","handleMediaLoadComplete","addSounds","handleContextualObjectActivated","contextInfo","contextType","updateDimensions","bind","assertThisInitialized","selectedStructureView","structures_StructureDetailsView","StructureViewModal","posed","div","enter","opacity","transform","transition","duration","ease","exit","ModalBackground","contextView","Provider","Preloader_Preloader","containers_Topbar","react_pose_es","containers_RealTownView","partyScreen_RealWorldView","containers_AdventurersBox","containers_CheatBox","containers_log_SimpleLog","innerHeight","getMaxResources","getProducedResources","factor","resourceStructureDefinition","handleStructure","getQuestUpdates","qss","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","nextNode","encounterDefintions","getRngState","Random","isLocalhost","Boolean","hostname","match","register","navigator","URL","process","toString","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","generateRandomStats","strength","perception","endurance","charisma","intelligenge","agility","luck","generateRandomGear","second","combine","first","firstPart","secondPart","arms","body","testState","health","initialState","lastTick","Date","now","gameTick","lU","encounterResults","reward","questsToUpdate","questToUpdate","_initialState","updateStructureState","structureState","createTask","combineReducers","element","findIndex","engine","GameActionType","StructureActionType","_ref3","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","configureStore","initial","_args","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","getState","initGame","axiosResult","axios","data","init","seed","seedrandom","continueGame","startNewGame","runGame","ReactDOM","es","esm","backend","HTML5Backend","containers_App","document","getElementById","registerServiceWorker","processCompletedTasks","handleCompletedTask","setInterval","resourcesUpdates","_getQuestUpdates"],"mappings":"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b,GAAckC,QACpBxD,IAAK,2BACN,CACCsD,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAcgB,UACpBA,UAAWxB,GAAUS,aACtB,CACC+B,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,QACpBxD,IAAK,0BACN,CACCsD,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAcmC,QA6FxBC,oBAzFyC,CACzCnb,YAAa,4BACb8a,MAAO,CAAC,CACJC,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,QACpBxD,IAAK,oBACN,CACCsD,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,QACpBxD,IAAK,oBACN,CACCsD,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,QACpBxD,IAAK,4BACN,CACCsD,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,QACpBxD,IAAK,0BACN,CACCsD,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAcgB,UACpBA,UAAWxB,GAAU4B,YACtB,CACCY,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GAAckC,SACrB,CACCF,EAAG,EACHC,EAAG,EACHjd,KAAMgb,GA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","file":"static/js/main.7de17fba.chunk.js","sourcesContent":["// tslint:disable:object-literal-sort-keys\nimport { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\nimport { State as seedrandomStateType } from \"seedrandom\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    gameTick = \"gameTick\",\n}\nexport interface GameTickAction {\n    type: ActionType;\n    delta: number;\n    rngState: seedrandomStateType | null;\n    resources: ResourceStoreState;\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\n// export type IncrementResource = IncrementResource // | others\n\n// tslint:disable: align\nexport function gameTick(delta: number,\n    rngState: seedrandomStateType | null,\n    resources: ResourceStoreState,\n    quests: QuestUpdate[],\n    log: LogUpdate[],\n): GameTickAction {\n    return {\n        type: ActionType.gameTick,\n        delta,\n        rngState,\n        resources,\n        quests,\n        log,\n    };\n}\n","\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry {\n    time: number;\n    key: string;\n    channel: LogChannel;\n    context?: any;\n}\n","// tslint:disable: object-literal-sort-keys\nimport { LogChannel } from \"stores/logEntry\";\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddLogEntryAction extends Action {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n}\n\nexport function addLogEntry(key: string, channel: LogChannel = LogChannel.common, context?: any): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        key,\n        channel,\n        context,\n    };\n}\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","import { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n}\n\nexport interface Action {\n    type: ActionType;\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends Action {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends Action {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n","import { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface MoveItemInWarehouseAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.4\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurer,\n    warehouse,\n    tavern,\n}\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","\nexport enum ItemType {\n    deed,\n    equipment,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","import * as moment from \"moment\";\nimport \"moment-duration-format\";\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\n\nexport const formatDuration = (time: number, unit: moment.DurationInputArg2 = \"milliseconds\" ): string => {\n    return moment.duration(time, unit)\n        .format(\"d [days] h [hours] m [min] s [sec]\", {\n        trim: \"both\",\n    });\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { ProductionStructureDefinition,\n    ResourceStructureDefinition,\n    WarehouseStructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport { weaver } from \"./weaver\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n}\n\nexport type StructureDefinition = WarehouseStructureDefinition |\nResourceStructureDefinition | ProductionStructureDefinition;\n\nexport default {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            gunpowder: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            gunpowder: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            gunpowder: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nexport const weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.equipment;\nconst basePath = \"/img/items/equipment/\";\n\nexport enum EquipmentType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface EquipmentDefinition extends ItemDefinition {\n    equipmentType: EquipmentType;\n}\n\nconst weaponDefinitions: Record<string, EquipmentDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default weaponDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \" Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n    },\n};\nexport default weaponDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import deeds from \"./deeds\";\nimport equipment from \"./equipment\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...equipment,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import * as Handlebars from \"handlebars\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: string, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: string) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: string) => {\n    const name = itemDefinitions[item].name;\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: string) => {\n    const name = itemDefinitions[item].name;\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\n\nexport interface Props  {\n    item: Item;\n    onClick?: () => void;\n}\n\nconst ItemIcon = (props: Props) => {\n    const { item  } =  props;\n    const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n    if (!itemDefinition) {\n// tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    return (\n        <div className=\"item-icon\"\n            onClick = { props.onClick }\n            style = {{\n                backgroundImage: `url(${itemDefinition.iconImg})`,\n            }}>\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextView\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport ItemIcon from \"./ItemIcon\";\n\nexport interface Props {\n    index: number;\n    item: Item;\n    sourceType: DragSourceType;\n    sourceId?: string;\n    onClick?: () => void;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface InventoryItemDragInfo {\n    item: Item;\n    inventorySlot?: number;\n    sourceId?: string;\n    sourceType: DragSourceType;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\n    beginDrag(props: Props) {\n        // Return the data describing the dragged item\n        return {\n            inventorySlot: props.index,\n            item: props.item,\n            sourceId: props.sourceId,\n            sourceType: props.sourceType,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableItemIcon extends React.Component<Props & CollectedProps > {\n\n    public render() {\n        const { item, onClick, isDragging, connectDragSource } = this.props;\n\n        if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }\n        return connectDragSource(\n            <div>\n                <ItemIcon\n                item={ item }\n                onClick= { onClick }\n            />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\n","import { AppContext, AppContextProps } from \"components/App\";\nimport * as React from \"react\";\n\n// export const withAppContext = <P extends {}>(Component: React.ComponentType<P>) =>\n// class WithContext extends React.Component<P & AppContextProps> {\n//     public render() {\n//         return (\n//             <AppContext.Consumer>\n//                 {(context: any) => <Component {...this.props as P} {...context} />}\n//             </AppContext.Consumer>\n//         );\n//     }\n// };\n// export const withAppContext = <P extends object>(\n//     Component: React.ComponentType<P>\n//   ): React.FC<P & AppContextProps> => (props: AppContextProps) => {\n//     return <AppContext.Consumer>\n//         {(context: any) => <Component {...props as P} {...context} />}\n//     </AppContext.Consumer>;\n// };\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends React.Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n}","import { Encounter } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];        // list of adventurer ids\n    progress: number;       // Which questnode the party is at currently\n    questVars: any;\n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    log: string[];          // Quest log as strings.\n                            // todo: deprecate\n    icon: string;\n\n    currentEncounter: Encounter | null;\n    reward?: QuestReward;\n}\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props)  {\n        return props.empty;\n    },\n};\n\nexport interface Props {\n    empty: boolean;\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The InventorySlot displays a slot in which an item can be placed.\n */\nclass InventorySlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        const isActive = isOver && canDrop;\n\n        let borderColor = \"#1b8417\";\n        if (isActive) {\n            borderColor = \"#e2bc23\";\n        } else if (canDrop) {\n            borderColor = \"#7ea752\";\n        }\n\n        return connectDropTarget(\n            <div style={{ borderColor }} className=\"inventory-item\">\n                { this.props.children }\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(InventorySlot);\n","import {AppContextProps} from \"components/App\";\nimport DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport itemDefinitions from \"definitions/items\";\nimport {Item} from \"definitions/items/types\";\nimport {withAppContext} from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props & AppContextProps) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            /*if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }*/\n\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n       };\n\n        if (item) {\n            const handleClick = () => {\n                props.onContextualObjectActivated(\n                    ContextType.item,\n                    itemDefinitions[item],\n                );\n           };\n\n            contents = <DraggableItemIcon\n                index={i}\n                sourceId={props.sourceId}\n                sourceType={props.sourceType}\n                item={item}\n                onClick={() => handleClick()}\n            >\n            </DraggableItemIcon>;\n       }\n\n        const slot = <InventorySlot\n            key= {`inventory-slot-${i}`}\n            empty={contents === undefined}\n            onDrop={handleDrop}>\n                {contents}\n        </InventorySlot>;\n        slots.push(slot);\n   }\n    return <div className=\"inventory\">\n        {slots}\n    </div>;\n};\nexport default withAppContext(Inventory);\n","// TODO: Better name than this\n\nimport { DragSourceType } from \"constants/dragging\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/adventurersbox.css\";\nimport AdventurerAvatar from \"./ui/AdventurerAvatar\";\nimport Inventory from \"./ui/inventory/Inventory\";\n\nexport interface DispatchProps {\n    onMoveItemInInventory?: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemFromWarehouseToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n}\n\nexport interface StateProps {\n    quests: QuestStoreState[];\n    groupedAdventurers: Record<string, AdventurerStoreState[]>; // keyed by party\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n    selectedAdventurer: string|null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n/**\n * Adventurers grouped by quest\n */\nclass AdventurersBox extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedAdventurer: null,\n        };\n    }\n\n    public render() {\n\n        const generateRow = (group: string, adventurers: AdventurerStoreState[]): JSX.Element => {\n            // group is either the string \"solo\" or a partyId\n            const selectedAdventurer = adventurers\n                .find((adventurer) => adventurer.id === this.state.selectedAdventurer);\n            let adventurerInfo = null;\n            if (selectedAdventurer) {\n                const handleDropItem = (item: Item, fromSlot: number,\n                                        toSlot: number, sourceType: DragSourceType): void => {\n                    switch (sourceType) {\n                        case DragSourceType.adventurer:\n                            if (this.props.onMoveItemInInventory) {\n                                this.props.onMoveItemInInventory(selectedAdventurer.id, fromSlot, toSlot);\n                            }\n                            break;\n                        case DragSourceType.warehouse:\n                            if (this.props.onMoveItemFromWarehouseToAdventurer) {\n                                this.props.onMoveItemFromWarehouseToAdventurer(selectedAdventurer.id,\n                                    item, fromSlot, toSlot);\n                            }\n                            break;\n                    }\n                };\n                adventurerInfo = <div className=\"adventurer-info\">\n                    <div>{ selectedAdventurer.name } </div>\n                    <div className=\"adventurer-info-container\">\n                        <div className=\"equipment\">\n                            <br />\n                            [ TODO: GEAR ]\n                        </div>\n                        <Inventory\n                            items = { selectedAdventurer.inventory }\n                            sourceId = { selectedAdventurer.id }\n                            sourceType = { DragSourceType.adventurer}\n                            onDropItem = { handleDropItem }\n                        />\n                    </div>\n                </div>;\n            }\n\n            const quest = this.props.quests.find((q) => q.name === group);\n            let name = \"\";\n            let sigilImgPath = \"\";\n            if (quest) {\n                sigilImgPath = `img/sigils/${ quest.icon }`;\n                name = TextManager.getQuestTitle(quest.name);\n            }\n            return <li key = { group } className = { \"group\" }>\n                <div\n                    className = \"sigil\"\n                    style = { { backgroundImage: `url(${sigilImgPath})`} }\n                ></div>\n                <span className = \"title\" title = { name }> { name } </span>\n                <ul className = \"adventurer-portraits\">\n                { adventurers.map((adventurer) => generatePortrait(adventurer)) }\n                </ul>\n                { adventurerInfo }\n            </li>;\n        };\n\n        const generatePortrait = (adventurer: AdventurerStoreState) => {\n            const handleClick = () => {\n                const selectedAdventurer = this.state.selectedAdventurer === adventurer.id ? null : adventurer.id;\n                this.setState({\n                    selectedAdventurer,\n                });\n            };\n            const className = adventurer.id === this.state.selectedAdventurer ? \"selected\" : undefined;\n            return <li key={ adventurer.id } className={ className } >\n                <AdventurerAvatar adventurer= { adventurer } onClick={ handleClick } />\n            </li>;\n        };\n\n        const generateRows = () => {\n            const rows = Object.keys(this.props.groupedAdventurers)\n                .map((group) => generateRow(group, this.props.groupedAdventurers[group]));\n            return rows;\n        };\n\n        return (\n            <div className=\"adventurers-box\">\n                <h3>Adventurers</h3>\n                <ul>\n                { generateRows() }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default AdventurersBox;\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n    const adventurersOnQuest = (quest: QuestStoreState): AdventurerStoreState[] => {\n        const party: string[] = quest.party;\n        return party.map((id: string) => findAdventurerById(id)!);\n    };\n\n    const findAdventurerById = (id: string): AdventurerStoreState | undefined => {\n        return adventurers.find((a) => a.id === id);\n    };\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n","\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface ModifyWorkersAction extends Action {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface ModifyGoldAction extends Action {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddResources {\n    type: ActionType;\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface Action {\n    type: ActionType;\n    structure: Structure;\n}\nexport interface StructureStateAction extends Action {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends Action {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): Action {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): Action {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): Action {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import { addItemToInventory, moveItemInInventory } from \"actions/adventurers\";\nimport { removeItemFromWarehouse } from \"actions/items\";\nimport AdventurersBox, { DispatchProps, Props, StateProps } from \"components/AdventurersBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectAdventurersGroupedByQuest } from \"selectors/adventurers\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n\n    return {\n        groupedAdventurers: selectAdventurersGroupedByQuest(store),\n        quests: store.quests,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onMoveItemFromWarehouseToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\n            const removeAction = removeItemFromWarehouse(fromSlot);\n            dispatch(removeAction);\n\n            const addAction = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(addAction);\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurersBox);\n","\nimport * as React from \"react\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/simplelog.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface StateProps  {\n    logEntries: LogEntry[];\n    questNames: string[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nenum TabType {\n    all,\n    town,\n    quest,\n}\n\ninterface TabDefinition {\n    label: string;\n    tabType: TabType;\n    tabId: string;\n    context?: string;\n}\n\ninterface LocalState {\n    selectedTabId: string;\n}\n\nclass SimpleLog extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedTabId: \"all\",\n        };\n    }\n\n    public render() {\n\n        const tabs: TabDefinition[] = [{\n            label: TextManager.get(\"common-log-tab-all\"),\n            tabId: \"all\",\n            tabType: TabType.all,\n        }, {\n            label: TextManager.get(\"common-log-tab-town\"),\n            tabId: \"town\",\n            tabType: TabType.town,\n        }];\n\n        this.props.questNames.forEach((questName) => {\n            tabs.push({\n                context: questName,\n                label: TextManager.getQuestTitle(questName),\n                tabId: `quest-${questName}`,\n                tabType: TabType.quest,\n            });\n        });\n\n        let logEntries: LogEntry[] = [];\n        const currentTab = tabs.find((t) => t.tabId === this.state.selectedTabId)!;\n        switch (currentTab.tabType) {\n            case TabType.all:\n                // All the things\n                logEntries = this.props.logEntries;\n                break;\n\n            case TabType.town:\n                // Only town\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.town);\n                break;\n\n            case TabType.quest:\n                // Only the selected quest\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.context === currentTab.context);\n                break;\n        }\n\n        const getLogEntryRow = (logEntry: LogEntry) => {\n            const text = TextManager.get(logEntry.key, logEntry.context);\n            return <div className = \"entry\" key={ logEntry.time }>\n                { text }\n            </div>;\n        };\n\n        return <div className = \"log\">\n            <ul className = \"tabs\">\n                {\n                    tabs.map((tab) => {\n                        return <li\n                            key = { tab.tabId }\n                            className = { this.state.selectedTabId === tab.tabId ? \"active\" : \"\" }\n                            onClick = { () => this.handleTabClick(tab.tabId) }\n                        >\n                            { tab.label }\n                        </li>;\n                    })\n                }\n            </ul>\n            <div className = \"log-entries\">\n                { logEntries.map((entry) => getLogEntryRow(entry))}\n            </div>\n        </div>;\n    }\n\n    private handleTabClick(tabId: string) {\n        this.setState({\n            selectedTabId: tabId,\n        });\n    }\n}\n\nexport default SimpleLog;\n","// TODO: Better name than this\n\nimport { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport structureDefinitions, { Structure  } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/cheatbox.css\";\n\nexport interface DispatchProps {\n    onCheatGold?: (amount: number) => void;\n    onCheatWorkers?: (amount: number) => void;\n    onCheatResources?: (amount: ResourceStoreState) => void;\n    onCheatItem?: (item: Item) => void;\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n    gold: number;\n    workers: number;\n    resources: number;\n}\n\n/*\ngiive gold\ngive workers\nset building state\n*/\ntype AllProps = Props & StateProps & DispatchProps;\nclass CheatBox extends React.Component<AllProps, LocalState> {\n\n    private itemSelectRef: React.RefObject<HTMLSelectElement>;\n    /**\n     *\n     */\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            gold: 50,\n            resources: 50,\n            workers: 10,\n        };\n\n        this.itemSelectRef = React.createRef();\n    }\n\n    public render() {\n\n        const getStructureRow = (structure: Structure) => {\n            const structureDef = structureDefinitions[structure];\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            const levelDef = structureDef.levels[structureStore.level];\n\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <div\n                className=\"label-dropdown\"\n                key={structure}\n            >\n                <label title={structure}>\n                    { `${displayName}` }\n                </label>\n                <input\n                    key={structure}\n                    type=\"checkbox\"\n                    checked={this.props.structures[structure].state === StructureState.Built }\n                    onChange={ () => this.handleChangeStructureState(structure, this.props.structures[structure].state !== StructureState.Built)}\n                />\n            </div>;\n        };\n\n        const structures = Object.keys(this.props.structures)\n            .map((structure) => getStructureRow(structure as Structure));\n\n        const getItemTypeOptions = (type: ItemType) => {\n            return Object.keys(Item)\n                // tslint:disable-next-line: triple-equals\n                .filter((item: string) => getDefinition(item as Item).itemType === type)\n                .map((item: string) => getItemOption(item as Item));\n        };\n\n        const getItemOption = (item: Item) => {\n            return <option value = { item } key = { item }>\n                { TextManager.getItemName(item) }\n            </option>;\n        };\n\n        const items = Object.keys(ItemType)\n            .filter((val: any) => !isNaN(val))\n            .map((type: string) => {\n            return <optgroup label = { ItemType[type] } key = { type }>\n                { getItemTypeOptions(type as unknown as ItemType) }\n            </optgroup>;\n        });\n\n        return (\n            <div className=\"cheat-box\">\n                <h3>CHEATS</h3>\n                <div className=\"label-numberbox-button\">\n                    <label>Gold</label>\n                    <input type=\"number\"\n                        value= {this.state.gold}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeGold }>\n                    </input>\n                    <button onClick= { this.handleCheatGold }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Workers</label>\n                    <input type=\"number\"\n                        value= {this.state.workers}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeWorkers }>\n                    </input>\n                    <button onClick= { this.handleCheatWorkers }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Resources</label>\n                    <input type=\"number\"\n                        value= {this.state.resources}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeResources }>\n                    </input>\n                    <button onClick= { this.handleCheatResources }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Items</label>\n                    <select style={{ width: \"150px\"}} ref = { this.itemSelectRef }>\n                        { items }\n                    </select>\n                    <button onClick= { this.handleCheatItem }>Add</button>\n                </div>\n                { structures }\n            </div>\n        );\n    }\n\n    private handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const amount = this.state.gold;\n        if (this.props.onCheatGold) { this.props.onCheatGold(amount); }\n    }\n\n    private handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const amount = this.state.workers;\n        if (this.props.onCheatWorkers) { this.props.onCheatWorkers(amount); }\n    }\n\n    private handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const amount: ResourceStoreState = {\n            food: this.state.resources,\n            iron: this.state.resources,\n            leather: this.state.resources,\n            wood: this.state.resources,\n        };\n\n        if (this.props.onCheatResources) { this.props.onCheatResources(amount); }\n    }\n\n    private handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const item = this.itemSelectRef.current!.value as Item;\n        if (this.props.onCheatItem) { this.props.onCheatItem(item); }\n    }\n\n    private handleChangeStructureState = (structure: Structure, checked: boolean) => {\n        if (this.props.onCheatStructureState) {\n            this.props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\n        }\n    }\n\n    private handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.value);\n        this.setState({\n            gold: amount,\n        });\n    }\n\n    private handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.value);\n        this.setState({\n            workers: amount,\n        });\n    }\n\n    private handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.checked);\n        this.setState({\n            resources: amount,\n        });\n    }\n}\n\nexport default CheatBox;\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport CheatBox, { DispatchProps, Props, StateProps } from \"components/CheatBox\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => dispatch(addGold(amount)),\n        onCheatItem: (item: Item) => dispatch(addItemToWarehouse(item)),\n        onCheatResources: (amount: ResourceStoreState) => dispatch(addResources(amount)),\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => dispatch(addWorkers(amount)),\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)\n    (CheatBox);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",\n    advanceQuest = \"advanceQuest\",\n    updateQuestVars = \"updateQuestVars\",\n    updateEncounterResult = \"updateEncounterResult\",\n    startEncounter = \"startEncounter\",\n    updateQuests = \"updateQuests\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface QuestAction extends Action {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface StartEncounterAction extends QuestAction {\n    encounter: Encounter;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Move to the next node */\nexport function advanceQuest(quest: string): QuestAction {\n    return {\n        type: ActionType.advanceQuest,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\nexport function startEncounter(quest: string, encounter: Encounter): StartEncounterAction {\n    return {\n        type: ActionType.startEncounter,\n        questName: quest,\n        encounter,\n    };\n}\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n","import { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport SimpleLog, { DispatchProps, Props, StateProps } from \"components/log/SimpleLog\";\nimport { StoreState } from \"stores\";\nimport { QuestStatus } from \"stores/quest\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        logEntries: store.log,\n        questNames: store.quests.filter((q) => q.status === QuestStatus.active).map((q) => q.name),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)\n    (SimpleLog);\n","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (store: StoreState, quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(store, id)!);\n};\n\nexport const findAdventurerById = (store: StoreState, id: string): AdventurerStoreState | undefined => {\n    return store.adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nexport interface EncounterDefinition {\n    name: Encounter;\n    getOracle: (questName: string, store: StoreState) => Oracle;\n    chance?: number;    // number from 0 to 1, undefined means: 1\n    getTitle: (oracle: Oracle) => string;\n    getDescription: (oracle: Oracle) => string;\n    getOptions: (oracle: Oracle) => Record<string, string>;\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => string;\n}\n\nexport enum Encounter {\n    backstabbed = \"backstabbed\",\n    goblinHouseHallway = \"goblinHouseHallway\",\n    goblinHouseOutside = \"goblinHouseOutside\",\n    theBigTree = \"theBigTree\",\n}\n","import { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { randomInt } from \"utils/random\";\n\n/**\n * The Oracle is a helper class for retrieving relevant data during encounters\n */\nexport class Oracle {\n    public readonly questName: string;\n    public readonly store: StoreState;\n\n    constructor(questName: string, store: StoreState) {\n        this.questName = questName;\n        this.store = store;\n    }\n\n    /**\n     * Returns the questVars of the quest that this encounter is part of\n     */\n    public get questVars(): any {\n        return this.quest.questVars;\n    }\n\n    /**\n     * Returns the quest that this encounter is part of\n     */\n    public get quest(): QuestStoreState {\n        return this.store.quests.find((q) => q.name === this.questName)!;\n    }\n\n    /**\n     * Returns all adventurers on this quest\n     */\n    public get adventurers(): AdventurerStoreState[] {\n        return adventurersOnQuest(this.store, this.quest);\n    }\n\n    /**\n     * Returns the adventurer in the encounter with highest given stat\n     * @param stat\n     */\n    public getAdventurerWithHighest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (b.stats[stat] - a.stats[stat]))[0];\n    }\n\n    /**\n     * Returns the adventurer in the encounter with lowest given stat\n     * @param stat\n     */\n    public getAdventurerWithLowest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (a.stats[stat] - b.stats[stat]))[0];\n    }\n\n    /**\n     * Returns a random adventurer in the party\n     */\n    public getRandomAdventurer(): AdventurerStoreState {\n        return this.adventurers[randomInt(0, this.adventurers.length)];\n    }\n}\n\nexport const oracles: any = {\n    // This will be the global store to hold all oracles, keyed by quest\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addItemToInventory } from \"actions/adventurers\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Item } from \"../items/types\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const backstabbed: EncounterDefinition = {\n    name: Encounter.backstabbed,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getTitle: (oracle: Oracle) => \"Backstabbed\",\n    getDescription: (oracle: Oracle) => {\n        return \"A group of rogues emerges from the bushes, knives drawn.\";\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            fight: \"Fight the brigands\",\n            flight: \"Run away!\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        switch (option) {\n            case \"flight\":\n                return \"You run away like a pussy\";\n            case \"fight\":\n                const finder = oracle.getRandomAdventurer();\n                dispatch(addItemToInventory(finder.id, Item.deedForWeaponsmith));\n                return `The party fights off the rogues. One of them drops a document. ${finder.name} picks it up`;\n            default:\n                throw new Error(`Unhandled option '${option}`);\n        }\n    },\n};\n","import { Encounter } from \"../encounters/types\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum QuestNodeType {\n    nothing = 0,    // Nothing much going on here\n    encounter = 1,\n    combat = 2,     // Not implemented\n    boss = 3,\n}\n\nexport interface QuestDefinition {\n    displayName: string;\n    nodes: QuestNode[];\n}\n\nexport interface QuestNode {\n    x: number;\n    y: number;\n    type: QuestNodeType;\n    encounter?: Encounter; // TODO: or array of encounters\n    log?: string;      // this text will appear in the log upon entering the node. only at 'nothing' nodes\n}\n\nconst kill10Boars: QuestDefinition = {\n    displayName: \"Kill 10 boars\",\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node0\",\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node1\",\n    // }, {\n    //     x: 0,\n    //     y: 3,\n    //     type: QuestNodeType.nothing,\n    //     log: \"In the distance, a forest looms\",\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.goblinHouseOutside,\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node4\",\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"The party spots a boss\",\n    }, {\n        x: 2,\n        y: 3,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst retrieveMagicAmulet: QuestDefinition = {\n    displayName: \"Retrieve the magic amulet\",\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Papa loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Mama loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Look at 'em sway with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"gettin' so gay with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.theBigTree,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 3,\n        y: 1,\n        type: QuestNodeType.boss,\n    }],\n};\n\nexport default {\n    kill10Boars,\n    retrieveMagicAmulet,\n};\n","// tslint:disable:object-literal-sort-keys\nimport { advanceQuest, startEncounter, updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const goblinHouseOutside: EncounterDefinition = {\n    name: Encounter.goblinHouseOutside,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getTitle: (oracle: Oracle) => \"As you make your way along the forest you notice a small house just of the road, smoke rises from the chimney\",\n    getDescription: (oracle: Oracle) => {\n        return \"quest-kill10Boars-encounter-goblinHouseOutside-description\";\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Investigate\",\n            leave: \"Keep walking\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"investigate\":\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\nexport const goblinHouseHallway: EncounterDefinition = {\n    name: Encounter.goblinHouseHallway,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getTitle: (oracle: Oracle) => \"The party stands inside the hallway.\",\n    getDescription: (oracle: Oracle) => {\n        return \"\";\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Go inside the house\",\n            leave: \"Leave the premise\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"leave\":\n                // const nextEncounter = startEncounter(quest.name, goblinhouseInside)\n                const action = advanceQuest(oracle.questName);\n                dispatch(action);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party escapes the house unscathed`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\n// todo: other goblinHouse encounters\n","import { backstabbed } from \"./backstabbed\";\nimport { goblinHouseHallway, goblinHouseOutside } from \"./goblinHouse\";\nimport { theBigTree } from \"./theBigTree\";\n\nexport default {\n    backstabbed,\n    goblinHouseHallway,\n    goblinHouseOutside,\n    theBigTree,\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addGold } from \"actions/gold\";\nimport { updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { randomInt } from \"utils/random\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\nexport interface QuestVars {\n    treeState: string;\n}\n\nexport const theBigTree: EncounterDefinition = {\n    name: Encounter.theBigTree,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getTitle: (oracle: Oracle) => \"The big tree\",\n    getDescription: (oracle: Oracle) => {\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     return `A huge tree blocks the way. ${pyromancer.name} offers to burn it`;\n        // }\n        return \"A huge tree blocks the way\";\n    },\n    getOptions: (oracle: Oracle) => {\n        //const store = oracle.store;\n        const strongest = oracle.getAdventurerWithHighest(\"strength\");\n        //        const strongest = { name: \"<<NAME>>\" };\n        const options: Record<string, string> = {\n            walkAround: \"Walk around the tree\",\n            lift: `Lift the tree (${strongest.name})`,\n        };\n        // todo: should be 'type' or 'class'\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     options.burn = \"Burn it down (${pyromancer.name}\";\n        // }\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"lift\":\n                const strongest = oracle.getAdventurerWithHighest(\"strength\");\n                questVars.treeState = \"lifted\";\n\n                const action = updateQuestVars(quest.name, questVars);\n                dispatch(action);\n\n                const goldAmount = randomInt(2, 5);\n                const goldAction = addGold(goldAmount);\n                dispatch(goldAction);\n\n                // tslint:disable-next-line:max-line-length\n                return `${strongest.name} heaves and lifts the heavy tree, moving it aside. Underneath your party finds ${goldAmount} gold coins`;\n\n                // if(random() < strongest.stats.strenth) {\n                //     questState.bigTreeState = \"lifted\";\n                //     giveGold(3);\n                //     return \"${strongest.name} heaves and lifts the heavy tree,\n                // moving it aside. Underneath your party finds 3 gold coins\";\n                // }\n                // else {\n                //     strongest.loseHealth(20);\n                //     if(strongest.isDead){\n                //         return \"${strongest.name} attempted to lift the\n                // tree but it is too heavy, causing him to die\".\n                //     }\n                //     return \"%{strongest.name} attempted to lift the tree but it is too heavy, losing 20 hp\";\n                // }\n            // case \"burn\":\n            //     const pyrommancer = store.adventurers.find(a => a.type == \"pyromancer\")\n            //     questState.bigTreeState = \"burned\";\n            //     return \"${pyromancer.name} cackles as you sets the tree ablaze.\n            // The party steps over the smouldering ashes and continues\"\n            // }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps} from \"./AdventurerAvatar\";\nimport \"./css/droppableadventureravatar.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props extends AdventurerAvatarProps {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nclass DroppableAdventurerAvatar extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n\n        return connectDropTarget(\n            <div className=\"droppable-adventurer-avatar\">\n                <AdventurerAvatar\n                    adventurer = { this.props.adventurer }\n                    onClick = { this.props.onClick }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(DroppableAdventurerAvatar);\n","\nimport { DragSourceType } from \"constants/dragging\";\nimport encounterDefinitions from \"definitions/encounters\";\nimport { EncounterDefinition } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\nimport questDefinitions, { QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { AppContextProps } from \"../App\";\nimport { InventoryItemDragInfo } from \"../ui/DraggableItemIcon\";\nimport DroppableAdventurerAvatar from \"../ui/DroppableAdventurerAvatar\";\nimport Inventory from \"../ui/inventory/Inventory\";\nimport \"./css/partyscreen.css\";\n\nexport interface StateProps {\n    adventurers: AdventurerStoreState[];\n    store: StoreState;\n}\n\nexport interface Props {\n    quest: QuestStoreState;\n}\n\nexport interface DispatchProps {\n    onDispatch: Dispatch<AnyAction>;\n    onAdvanceQuest: (quest: string) => void;\n    onUpdateEncounterResult: (nodeIndex: number, result: string) => void;\n    onMoveItemInInventory?: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToOtherAdventurer?: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => void;\n}\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n\n// export default\nclass PartyScreen extends React.Component<AllProps, LocalState> {\n\n    // This Component has local state, so it's a class\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            selectedAdventurer: null,\n        };\n    }\n\n    public render() {\n        const questDefinition: QuestDefinition = questDefinitions[this.props.quest.name];\n\n        return (\n        <div className=\"partyscreen\">\n            <div className=\"header\">\n                { questDefinition.displayName }\n            </div>\n            <div className=\"avatars\">\n                { this.getAvatars() }\n            </div>\n            { this.getBottomPart() }\n         </div>\n     );\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (prevProps.quest !== this.props.quest) {\n            // The active quest has changed, so it doesn't make sense to keep any adventurer selected\n            this.setState({\n                selectedAdventurer: null,\n            });\n        }\n    }\n\n    private getAdventurerInfo(adventurer: AdventurerStoreState): any {\n        if (!adventurer) {\n            return null;\n        }\n        const attributes = Object.keys(adventurer.stats).map((stat) => {\n            const value: number = adventurer.stats[stat];\n            return <div key= { `${adventurer.id}-${stat}`} > <b>{ stat }</b>: { value.toFixed(1) } </div>;\n        });\n        const equipmentList = Object.keys(adventurer.equipment).map((equipment) => {\n            return <div key= { `${adventurer.id}-${equipment}`} ><b>{ equipment }</b>: { adventurer.equipment[equipment] }  </div>;\n        });\n\n        const handleDropItem = (item: Item, fromSlot: number, toSlot: number): void => {\n            // TODO: what if the source is NOT adventurer?\n            if (this.props.onMoveItemInInventory) {\n                this.props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\n            }\n        };\n\n        return (\n        <div className=\"adventurer-container\">\n            <div className=\"left\">\n                <div className=\"name\">\n                    <b>{ adventurer.name }</b>\n                </div>\n                <div className=\"attributes\">\n                    { attributes }\n                </div>\n                <div className=\"equipment\">\n                    { equipmentList }\n                </div>\n            </div>\n            <div className=\"right\">\n                <Inventory sourceType = { DragSourceType.adventurer }\n                    items = { adventurer.inventory }\n                    onDropItem = { handleDropItem }\n                />\n            </div>\n        </div>\n        );\n    }\n\n    private handleAvatarClick(adventurerId: string | null): void {\n        if (this.state.selectedAdventurer === adventurerId) {\n            adventurerId = null;\n        }\n        this.setState({\n            selectedAdventurer: adventurerId,\n        });\n    }\n\n    private handleEncounterOptionClick(encounter: EncounterDefinition, option: string, oracle: any): any {\n        const result = encounter.answer(option, oracle, this.props.onDispatch);\n\n        /*if (!isEqual(questVars, this.props.quest.questVars)){\n            this.props.onUpdateQuestVars(questVars);\n        }*/\n        this.props.onUpdateEncounterResult(this.props.quest.progress, result);\n       // this.props.onAdvanceQuest(this.props.quest.name);\n    }\n\n    private getAvatars = () => {\n        return this.props.adventurers.map((adventurer: AdventurerStoreState) => {\n            const handleDropItem = (dragInfo: InventoryItemDragInfo) => {\n                const fromAdventurer = this.state.selectedAdventurer!; // The adventurer that has the item\n                if (adventurer.id === fromAdventurer) {\n                    // Dropping on yourself.. nothing happens\n                    return;\n                }\n\n                if (this.props.onMoveItemToOtherAdventurer) {\n                    const {\n                        inventorySlot: fromSlot,\n                    } = dragInfo;\n                    this.props.onMoveItemToOtherAdventurer(fromAdventurer, fromSlot!, adventurer.id);\n                }\n            };\n\n            const selected = this.state.selectedAdventurer === adventurer.id;\n            return <DroppableAdventurerAvatar\n                key = { `${adventurer.id}-avatar` }\n                className = { (selected ? \" selected\" : \"\") }\n                adventurer = { adventurer }\n                onClick = { () => this.handleAvatarClick(adventurer.id) }\n                onDrop = { handleDropItem }\n            />;\n        });\n    }\n\n    private getBottomPart = () => {\n\n        if (this.state.selectedAdventurer) {\n            const adventurer: AdventurerStoreState = this.props.adventurers\n                .find((a) => a.id === this.state.selectedAdventurer)!;\n            return this.getAdventurerInfo(adventurer);\n        } else {\n            const quest = this.props.quest;\n            const questDefinition: QuestDefinition = questDefinitions[quest.name];\n            const progress: number = Math.floor(quest.progress);\n            const questNode: QuestNode = questDefinition.nodes[progress];\n\n            let message = <p></p>;\n            let actions = <p></p>;\n\n            switch (questNode.type) {\n                case QuestNodeType.nothing: {\n                    const log = [ ...quest.log].reverse();\n                    message = <div> {\n                        log.map((entry) => {\n                            return <p> { entry } </p>;\n                        })\n                    } </div>;\n                    break;\n                }\n                case QuestNodeType.encounter: {\n                    // if (quest.encounterResults[quest.progress]) {\n                    //     message = <p> { quest.encounterResults[quest.progress] } </p>;\n                    //     break;\n                    // }\n                    const store = this.props.store;\n                    const encounter = encounterDefinitions[quest.currentEncounter!];\n                    const oracle = encounter.getOracle(quest.name, store);\n\n                    message = <div><p> {encounter.getTitle(oracle)} </p>\n                        <p> {encounter.getDescription(oracle)}</p></div>;\n\n                    const options = encounter.getOptions(oracle);\n\n                    actions = <ul>\n                        { Object.keys(options).map((o) => <li key={ o }>\n                            <button onClick= { () => this.handleEncounterOptionClick(encounter, o, oracle) }>\n                                { o }\n                            </button>{ options[o]}\n                        </li>)}\n                    </ul>;\n\n                    break;\n                }\n                case QuestNodeType.boss: {\n                    message = <p> { \"Boss fight!\" } </p>;\n                    break;\n                }\n            }\n\n            return (\n            <div className=\"questlog\">\n                { message }\n                <div className=\"actions\">\n                    { actions}\n                </div>\n            </div>);\n        }\n    }\n}\n\nexport default (PartyScreen);\n","\nimport { moveItemInInventory, moveItemToOtherAdventurer } from \"actions/adventurers\";\nimport { updateEncounterResult } from \"actions/quests\";\nimport { advanceQuest } from \"actions/quests\";\nimport PartyScreen, { DispatchProps, Props, StateProps } from \"components/partyScreen/PartyScreen\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const adventurers = adventurersOnQuest(store, ownProps.quest);\n\n    return {\n        adventurers,\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n            dispatch(advanceQuest(quest));\n        },\n        onDispatch: dispatch,\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onMoveItemToOtherAdventurer: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => {\n            const action = moveItemToOtherAdventurer(fromAdventurerId, fromSlot, toAdventurerId);\n            dispatch(action);\n        },\n        onUpdateEncounterResult: (nodeIndex: number, result: string) => {\n            const action = updateEncounterResult(ownProps.quest.name, nodeIndex, result);\n            dispatch(action);\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(PartyScreen) as React.ComponentType<Props>;\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\n\nexport class SoundManager {\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(1, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, 1, 500);\n\n        currentMusicTrack = track;\n    }\n}\n","\nimport questDefinitions, { QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/questlinevisualization.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n    quest: QuestStoreState;\n    selected: boolean;\n    onSelectQuest: (questName: string) => void;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    // onAdvanceQuest: (questName: string) => void;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface StateProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n/**\n * Shows quest line\n * @param props\n */\nexport default function(props: AllProps) {\n    const { quest } = props;\n    const questDefinition: QuestDefinition = questDefinitions[quest.name];\n\n    const createNodeVisualization = (node: QuestNode, index: number) => {\n        const progress: number = Math.floor(quest.progress);\n        const className = progress === index ? \"active\" : \"\";\n        const spanProps = {\n            className,\n            key: `node_${index}`,\n        };\n        switch (node.type) {\n            case QuestNodeType.encounter:\n                return <span title=\"encounter\" { ...spanProps }>*</span>;\n            case QuestNodeType.boss:\n                return <span title=\"boss\" { ...spanProps }>#</span>;\n            case QuestNodeType.nothing:\n            default:\n                return <span { ...spanProps }>-</span>;\n            }\n    };\n\n    const questNodes = questDefinition.nodes.map((n, i) => createNodeVisualization(n, i));\n\n    return <div className=\"questlinevisualization\">\n        <div className=\"questname\"> { TextManager.getQuestTitle(quest.name) } </div>\n        { questNodes }\n        { props.selected ? <span className=\"selected\">selected</span> : <button className=\"select\"\n            onClick={ () => props.onSelectQuest(quest.name)}>select</button> }\n    </div>;\n}\n","\nimport PartyScreen from \"containers/partyScreen/PartyScreen\";\nimport * as React from \"react\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport QuestLineVisualization from \"../world/QuestLineVisualization\";\nimport \"./css/realworldview.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface DispatchProps {\n    onAdvanceQuest: (questName: string) => void;\n}\n\nexport interface StateProps {\n    quests: QuestStoreState[];\n}\n\ninterface LocalState {\n    selectedQuest: string | null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n/**\n * Temporary wrapper around PartyScreen. Shows quest line\n * @param props\n */\nexport default class RealWorldView extends React.Component<AllProps, LocalState> {\n\n    // This Component has local state, so it's a class\n    constructor(props: Props & StateProps & DispatchProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\n\n    }\n\n    public render() {\n        const selectedQuest = this.props.quests.find((q) => q.name === this.state.selectedQuest);\n        const activeQuests = this.props.quests.filter((q) => q.status === QuestStatus.active );\n        const questLines = activeQuests.map((q) => {\n            return <QuestLineVisualization key={ q.name }\n                selected={q === selectedQuest}\n                quest={q}\n                onSelectQuest={() => this.handleSelectQuest(q.name)}\n            />;\n        });\n\n        return <div className=\"realworldview\">\n            <fieldset className=\"progress\">\n                <legend>Quest progress</legend>\n                {questLines}\n            </fieldset>\n            { selectedQuest && <PartyScreen quest= { selectedQuest } /> }\n        </div>;\n    }\n\n    public handleSelectQuest(questName: string) {\n        this.setState({\n            selectedQuest: questName,\n        });\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n    }\n\n    private playMusic() {\n       SoundManager.playMusicTrack(MusicTrack.world);\n    }\n\n}\n","\nimport { advanceQuest } from \"actions/quests\";\nimport RealWorldView,\n    { DispatchProps, Props, StateProps } from \"components/partyScreen/RealWorldView\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n            dispatch(advanceQuest(quest));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)\n    (RealWorldView);\n","import structureDefinitions, { Structure  } from \"definitions/structures\";\nimport Konva from \"konva\";\nimport * as React from \"react\";\nimport { Image, Layer, Stage, Text } from \"react-konva\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport { AppContextProps } from \"./App\";\nimport \"./css/townView.css\";\nimport SmokeEmitter from \"./effects/SmokeEmitter\";\n\n// It's actually not the *real* town view hihi\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n\n}\n\nexport interface Props {\n    onStructureClick?: (structure: Structure | null) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n    // tasks: TaskStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {}\n\ntype AllProps = Props & DispatchProps & StateProps & AppContextProps;\n\nclass RealTownView extends React.Component<AllProps, LocalState> {\n\n    private plasmaBeam?: Konva.Rect = undefined;\n    private anim?: Konva.Animation = undefined;\n\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            images: {},\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n\n        /*        const period = 500;\n        if (this.plasmaBeam) {\n            this.plasmaBeam.filters([Konva.Filters.Brighten]);\n            //this.plasmaBeam.cache(null);\n            this.anim = new Konva.Animation((frame: any) => {\n                if (this.plasmaBeam){\n                const freq = 2; // speed\n                const brightness = (Math.sin((frame.time / period) * freq) + 1) / 2;   // fluctuate between 0 and 1\n                this.plasmaBeam.brightness(brightness);\n                //this.plasmaBeam.cache(null);\n                this.plasmaBeam.fillPatternOffsetX(this.plasmaBeam.fillPatternOffsetX() - 150);\n                }\n            }, this.plasmaBeam.getLayer());\n\n            this.anim.start();\n        }*/\n    }\n\n    public componentWillUnmount() {\n        if (this.anim) { this.anim.stop(); }\n        delete this.anim;\n    }\n\n    // public changeSize(node: Konva.Node) {\n    //     node.to({\n    //         scaleX: Math.random() + 2.8,\n    //         scaleY: Math.random() + 2.8,\n    //         duration: 10,\n    //     });\n    // }\n\n    public render() {\n        const structures = Object.keys(Structure).map((structure, index) => {\n            const structureDef = structureDefinitions[structure];\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            if (structureStore.state === StructureState.NotBuilt) {\n                return null;\n            }\n            const levelDef = structureDef.levels[structureStore.level];\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <Text name= { structure }\n                key = { structure }\n                text = { `${displayName} (level ${structureStore.level + 1})` }\n                x = { 100 }\n                y = { 50 * index + 100 }\n                fontSize = { 40 }\n                fill = { \"white\" }\n                onClick = { this.handleStructureClick }\n            />;\n        });\n        // tslint:disable-next-line:no-console\n        console.log(`rendered the town`); // TODO: remove\n\n        return (\n            <Stage width={1024} height={768} scale= { {x: 0.4, y: 0.4} }>\n            <Layer name=\"background\" onClick = { this.handleBackgroundClick } >\n                <Image image={ this.imgSrc(\"img/town/sky.jpg\") }></Image>\n            </Layer>\n            <Layer name=\"town\">\n                {/* <Rect\n                    x={20}\n                    y={20}\n                    width={50}\n                    height={50}\n                    fill={ \"white\"}\n\n                    // onClick={this.handleClick}\n                /> */}\n                {/* <Rect\n                     PLASMA BEAM\n                    x={20}\n                    y={20}\n                    width={1500}\n                    height={256}\n                    fillPatternImage = { this.imgSrc(\"img/town/effects/plasma_beam_heavy_green.png\") }\n                    fillPatternOffset = { { x: 20, y: 0 }}\n                    globalCompositeOperation = \"lighter\"\n                    shadowBlur={5}\n                    ref = { (node: Konva.Rect) => this.plasmaBeam = node }\n                /> */}\n                   <Image\n                        name = \"warehouse\"\n                        image={ this.imgSrc(\"img/town/tavern.png\") }\n                        x = { 15 }\n                        y = { 1057 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        shadowColor = \"red\"\n                        shadowEnabled = { true }\n                        strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        // ref={ (node) => { this.convaImages.tavern = node!; }}\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n\n                    <Image\n                        name = { Structure.warehouse }\n                        image={ this.imgSrc(\"img/town/lighthouse.png\") }\n                        // onClick = { this.handleStructureClick }\n\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    <Image\n                        name = \"lumberMill\"\n                        image = { this.imgSrc(\"img/town/mill.png\") }\n                        x = { 947 }\n                        y = { 1384 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        // shadowColor = \"red\"\n                        // shadowEnabled = { true }\n                        // strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    { structures }\n\n                    </Layer>\n                    {/* <SmokeEmitter\n                        emitterX = { 190 }\n                        emitterY = { 510 }\n                        smokeImg = { this.imgSrc(\"img/town/effects/smoke.png\") }\n                    /> */}\n\n            </Stage>\n        );\n    }\n\n    public handleStructureClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick( Structure[evt.target.name()]); }\n    }\n\n    public handleBackgroundClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick(null); }\n    }\n\n    private imgSrc(url: string): HTMLImageElement {\n        const result = this.props.media.find((m) => m.url === url);\n        if (result === undefined) {\n            throw Error(`Could not find image with url ${url}`);\n        } else {\n            return result.content as HTMLImageElement;\n        }\n    }\n\n    private playMusic() {\n        SoundManager.playMusicTrack(MusicTrack.town);\n    }\n}\n\nconst drawHitFromCache = (img: Konva.Image) => {\n    if (img) {\n       // img.cache(null);\n       // img.drawHitFromCache(0.5);\n    }\n};\n\nexport default RealTownView;\n","\nimport RealTownView, { DispatchProps, Props, StateProps } from \"components/RealTownView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        structures: store.structures,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealTownView) as React.ComponentType<Props>;\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n    gunpowder = \"gunpowder\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n    [Resource.gunpowder]: {\n        resource: Resource.gunpowder,\n        iconImg: \"/img/resources/gunpowder.png\",\n    },\n};\n","import \"components/ui/css/common/icon.css\";\nimport itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const listItems = props.items.map((item: Item) => {\n        let listItemClass = \"item\";\n        if (itemsInInventory && itemsInInventory.indexOf(item) === -1) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className = { listItemClass } key = { item }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${itemDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getItemName(item) }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    ownProps.items.forEach((item: Item) => {\n        if (store.items.indexOf(item) > -1) {\n            itemsInInventory.push(item);\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    return time - (.1 * time * workers);\n};\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps { }\nexport interface Props extends DispatchProps {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nexport default function(props: Props) {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{ props.label }</div>\n            <div className=\"progressbar-info\" style= {{ width: `${progress * 100}%`}}>  </div>\n        </div>\n    );\n}\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddAction extends Action {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: () => void;\n    onDown?: () => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = () => {\n        if (props.onUp && !props.upDisabled) { props.onUp(); }\n    };\n\n    const handleDown = () => {\n        if (props.onDown && !props.downDisabled) { props.onDown(); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import * as React from \"react\";\nimport MaterialsCostBox from \"containers/ui/context/items/MaterialsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"utils/textManager\";\nimport { formatDuration } from \"utils/time\";\nimport { AppContextProps } from \"../App\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport \"./css/productionstructureview.css\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Item[];  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n\ninterface LocalState {\n    selectedItem: Item|null;\n    workersAssigned: number;\n}\n\nexport default class ProductionStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedItem: null,\n            workersAssigned: 0,\n        };\n    }\n\n    // public componentDidUpdate(prevProps: AllProps, prevState: LocalState) {\n    //     console.log(\"cdu\" + prevProps.workersFree);\n    // }\n\n    public componentWillMount() {\n// tslint:disable-next-line: no-console\n        console.log(\"component will mount\" + this.props.type);\n    }\n    public componentWillUnmount() {\n// tslint:disable-next-line: no-console\n        console.log(\"component will unmount\" + this.props.type);\n    }\n\n    public render() {\n        const structureDefinition  = structureDefinitions[this.props.type] as ProductionStructureDefinition;\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${this.props.type}\n                with type ProductionStructureDefinition.`);\n        }\n        const level: number = this.props.level || 0;\n        const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.get(levelDefinition.displayName);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style={{float: \"right\"}}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade } >\n                        { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const createCraftTabs = () => {\n            const selectedItem = this.state.selectedItem;\n\n            return levelDefinition.produces.map((produces) => {\n                return <li\n                    key={ `craft${produces.item}`}\n                    onClick={ () => handleSelectCraftingItem(produces.item) }\n                    className={ selectedItem === produces.item ? \"selected\" : \"\" }\n                >\n                    <ItemIcon item= { produces.item } />\n                    { TextManager.getItemName(produces.item) }\n                </li>;\n            });\n        };\n\n        const createCraftingDetails = () => {\n            const item = this.state.selectedItem;\n            if (!item) { return null; }\n\n            const produces = levelDefinition.produces.find((p) => p.item === item)!;\n            const playerResources = this.props.resources || {};\n            const costResources = produces.cost.resources!;\n            const missingAtLeastOneResource = Object.keys(costResources)\n                .some((resource) => costResources[resource] > playerResources[resource]);\n\n            let missingAtLeastOneItem = false;\n            const costMaterials = produces.cost.materials;\n            if (costMaterials) {\n                missingAtLeastOneItem = costMaterials\n                    .some((i: Item) => this.props.items.indexOf(i) === -1);\n            }\n\n            const disabled = missingAtLeastOneResource || missingAtLeastOneItem || this.state.workersAssigned < 1;\n            // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n            const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n            const makeTimeString = (time: number): string => {\n                if (this.state.workersAssigned === 0) {\n                    return \"\";\n                }\n                const craftingTime = calculateProductionTime(time, this.state.workersAssigned);\n                const formatted = formatDuration(craftingTime);\n                return ` Crafting time: ${formatted}`;\n            };\n\n            const handleClick = (productionDefinition: ProductionDefinition) => {\n                if (this.props.onCraft) {\n                    this.props.onCraft(productionDefinition, this.state.workersAssigned);\n                    this.setState({\n                        workersAssigned: 0,\n                    });\n                }\n            };\n\n            const handleUp = () => {\n                this.setState({\n                    workersAssigned: this.state.workersAssigned + 1,\n                });\n            };\n\n            const handleDown = () => {\n                this.setState({\n                    workersAssigned: this.state.workersAssigned - 1,\n                });\n            };\n\n            let costItemsContent = null;\n            if (costMaterials) {\n                costItemsContent = <MaterialsCostBox items = { costMaterials } />;\n            }\n            return (\n                <div className = \"crafting-details\">\n                    Craft a { TextManager.getItemName(itemDefinition.item) }\n                    <div className = \"crafting-costs\">\n                        <fieldset>\n                            <ResourcesCostBox resources = { costResources } />\n                        </fieldset>\n                        <fieldset>\n                            { costItemsContent }\n                        </fieldset>\n                    </div>\n                    <div style={ { display: \"flex \"}}>\n                        <UpDownValue\n                            value={ this.state.workersAssigned }\n                            label={ \"Workers: \" }\n                            onUp={ handleUp }\n                            onDown={ handleDown }\n                            upDisabled={\n                                this.state.workersAssigned >= this.props.workersFree ||\n                                this.state.workersAssigned >= MAX_WORKERS_CRAFTING\n                            }\n                            downDisabled={ this.state.workersAssigned < 1 }\n                        />\n                        &nbsp;\n                        { makeTimeString(produces.cost.time || 0) }\n                    </div>\n                    <div>\n                        <button\n                            disabled={ disabled }\n                            onClick={ () => handleClick(produces) }>\n                            Craft\n                        </button>\n                    </div>\n                </div>\n            );\n        };\n\n        const handleSelectCraftingItem = (item: Item) => {\n            /* todo: setting state on the App causes this Component to be remounted. it's react-poses fault\n            https://github.com/Popmotion/popmotion/issues/820\n            this.props.onContextualObjectActivated(\n                ContextType.item,\n                itemDefinitions[item],\n            );*/\n\n            this.setState({\n                selectedItem: item,\n            });\n        };\n\n        const createProgressbars = () => {\n            const tasks = this.props.tasks || [];\n            return tasks.map((t) => <Progressbar\n                key = { `${t.name}${t.startTime}` }\n                label = { `${t.name} (${formatDuration(t.timeRemaining)})` }\n                progress = { t.progress }/>,\n            );\n        };\n\n        return (\n            // TODO: abstract some stuff to generic StructureView\n            <details open = { true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            { createCraftTabs() }\n                        </ul>\n                        { createCraftingDetails() }\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        { createProgressbars() }\n                    </fieldset>\n                </section>\n            </details>\n        );\n    }\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { Item } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    const items: Item[] = [];\n    store.items.forEach((i) => {\n        // Creating a dense array. Typescript won't allow me to use .filter\n        if (i !== null) {\n            items.push(i);\n        }\n    });\n    return {\n        gold: store.gold,\n        items,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", LogChannel.town, {\n                level,\n                structure: ownProps.type,\n            }));\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(ProductionStructureView) as React.ComponentType<Props>;\n","import structureDefinitions, {  Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport UpDownValue from \"../ui/UpDownValue\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onWorkersUp?: () => void;\n    onWorkersDown?: () => void;\n}\n\nexport interface Props  {\n    type: Structure;\n}\n\nexport interface StateProps {\n    level?: number;\n    workers?: number;\n    workersFree?: number;\n    gold?: number;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ResourceStructureView = (props: AllProps) => {\n\n    const structureDefinition = structureDefinitions[props.type] as ResourceStructureDefinition;\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n    const level: number = props.level || 0;\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.get(levelDefinition.displayName);\n\n    const createWorkersRow = () => {\n\n        const handleUp = () => {\n            if (props.onWorkersUp) { props.onWorkersUp(); }\n        };\n        const handleDown = () => {\n            if (props.onWorkersDown) { props.onWorkersDown(); }\n        };\n\n        const upDisabled = props.workers === levelDefinition.workerCapacity || (props.workersFree || 0) < 1;\n        const downDisabled = props.workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value = { props.workers }\n            max = { levelDefinition.workerCapacity }\n            upDisabled = { upDisabled }\n            downDisabled = { downDisabled }\n            onDown = { handleDown }\n            onUp = { handleUp }\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const gold = props.gold || 0;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick = { handleClick }\n                disabled= { !canUpgrade } >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${props.workers} = ${generates[value] * (props.workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            { \"Generates (every minute): \" }\n            <br/>\n            { generatesText }\n        </div>;\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <details open = { true } className = \"structureview\">\n            <summary>{ displayName }</summary>\n            <section>\n                { createWorkersRow() }\n                { createUpgradeRow() }\n                { createGeneratesRow() }\n            </section>\n        </details>\n    );\n};\n\nexport default ResourceStructureView;\n","import { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport ResourceStructureView,  { DispatchProps, Props, StateProps } from \"../../components/structures/ResourceStructureView\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n    if (!structureStore) { throw new Error(`No structure '${ownProps.type}' found in the store!`); }\n    return {\n        gold: store.gold,\n        level: structureStore.level,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", LogChannel.town, {\n                level,\n                structure: ownProps.type,\n            }));\n        },\n        onWorkersDown: () => {\n            dispatch(decreaseWorkers(ownProps.type));\n        },\n        onWorkersUp: () => {\n            dispatch(increaseWorkers(ownProps.type));\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResourceStructureView);\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\nimport \"./css/draggableadventureravatar.css\";\n\nexport interface Props {\n    sourceId?: string;\n    onClick?: () => void;\n    disabled?: boolean;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface AdventurerAvatarDragInfo {\n    adventurer: AdventurerStoreState;\n    sourceId?: string;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\n    beginDrag(props: Props & AdventurerAvatarProps) {\n        // Return the data describing the dragged item\n        return {\n            adventurer: props.adventurer,\n            sourceId: props.sourceId,\n            sourceType: DragSourceType.adventurer,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableAdventurerAvatar extends React.Component<Props & CollectedProps & AdventurerAvatarProps> {\n\n    public render() {\n        const { isDragging, connectDragSource, disabled } = this.props;\n        let className = \"draggable-adventurer-avatar\";\n        if (disabled) {\n            className += \" disabled\";\n        }\n        if (isDragging) {\n            className += \" dragging\";\n        }\n\n        /*if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }*/\n        return connectDragSource(\n            <div className = { className }>\n                <AdventurerAvatar\n                    // Copy all props down to AdventurerAvatar\n                    { ...this.props }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\n","import * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/droppableadventurerslot.css\";\nimport { DragType } from \"constants/dragging\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/*\n * Can drop adventurers on this */\nclass DroppableAdventurerSlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n        let className = \"droppable-adventurer-slot\";\n\n        if (isOver) {\n            className += \" active-drop\";\n        } else if (canDrop) {\n            className += \" can-drop\";\n        }\n\n        return connectDropTarget(\n            <div className = { className }>\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ADVENTURER,\n    dropTarget,\n    collect,\n)(DroppableAdventurerSlot);\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAddEventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (index: number) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = <AdventurerAvatar adventurer = { adventurer } displayName = { false } onClick = { () => props.onRemoveAdventurer(i) }/> ;\n                className = \"has-adventurer\";\n            } else {\n                content = <DroppableAdventurerSlot onDrop = { (item: AdventurerAvatarDragInfo) => { props.onAddEventurer(item, i); }} />;\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return <ul className = \"assign-adventurers\">\n        { slotsContent() }\n    </ul>;\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\n\nconst availableSlots = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface DispatchProps {\n    onQuestClick: (questName: string) => void;\n    onRemoveAdventurer: (index: number) => void;\n    onAddAdventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onLaunchQuest: () => void;\n}\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName: string | null;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n}\n\ntype AllProps = Props & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n}\n\nexport default class QuestBoard extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n    }\n\n    public render() {\n        const questListContent: JSX.Element[] = this.props.availableQuests.map((q) => {\n            const iconImgPath = `img/sigils/${ q.icon }`;\n            const className = \"quest\" + ((q.name === this.props.selectedQuestName) ? \" selected\" : \"\");\n            return <li key={ q.name } className = { className } onClick = { () => { this.props.onQuestClick(q.name); } }>\n                <div\n                    className = \"icon\"\n                    style={{backgroundImage: `url(${iconImgPath})`}}\n                ></div>\n                <div className = \"title\">{ TextManager.getQuestTitle(q.name) } </div>\n            </li>;\n        });\n\n        const getQuestDetails = () => {\n            if (!this.props.selectedQuestName) {\n                return null;\n            }\n            const quest = this.props.availableQuests.find((q) => q.name === this.props.selectedQuestName);\n            if (!quest) {\n                return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n            }\n\n            // Need a full party to launch\n            const canLaunch = this.props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n            return <div className=\"quest-details\">\n                { TextManager.getQuestDescription(this.props.selectedQuestName) }\n                <AssignAdventurers\n                    availableSlots = { availableSlots }\n                    assignedAventurers = { this.props.assignedAventurers }\n                    onRemoveAdventurer = { this.props.onRemoveAdventurer }\n                    onAddEventurer = { this.props.onAddAdventurer } />\n                <button disabled = { !canLaunch } onClick = { () => this.props.onLaunchQuest() }>\n                    { TextManager.get(\"structure-tavern-button-launch-quest\") }\n                </button>\n            </div>;\n        };\n\n        // quest board, expanded quest info + assign adventurers + launch button\n        return <div className = \"quest-board\">\n            <h2> { TextManager.get(\"structure-tavern-title-quest-board\") } </h2>\n            <ul className = \"quest-list\">\n                { questListContent }\n            </ul>\n            { getQuestDetails() }\n        </div>;\n    }\n}\n","import * as React from \"react\";\nimport { AppContextProps } from \"components/App\";\nimport DraggableAdventurerAvatar, { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition } from \"definitions/structures/types\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/tavernstructureview.css\";\nimport QuestBoard from \"./QuestBoard\";\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n    selectedQuestName: string | null;\n    assignedAventurers: AdventurerStoreState[];\n}\n\nconst SOURCE_ID = \"tavern\";\n\nexport default class TavernStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            assignedAventurers: [],\n            selectedQuestName: null,\n        };\n    }\n\n    public render() {\n        const structureDefinition  = structureDefinitions[Structure.tavern] as TavernStructureDefinition;\n        const level: number = this.props.level || 0;\n        const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.get(levelDefinition.displayName);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const roomCount = levelDefinition.rooms;\n        const createRooms = () => {\n\n            const roomContent: JSX.Element[] = [];\n            for (let i = 0; i < roomCount; i++) {\n                const adventurer = this.props.adventurers.find((a) => a.room === i);\n                let content = null;\n                if (adventurer) {\n                    let name = adventurer.name;\n\n                    const assigned = this.state.assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n                    const party = this.getQuestByAdventurer(adventurer.id);\n                    if (party) {\n                        name += \" (on a quest)\";\n                    }\n                    content = [<DraggableAdventurerAvatar\n                        disabled = { assigned || party != null }\n                        adventurer = { adventurer }\n                        className = \"adventurer-icon\"\n                        sourceId = { SOURCE_ID }\n                        key = { `avatar:${adventurer.id}` }\n                    />,\n                    name,\n                    /*\n                    <button\n                        className = \"boot\"\n                        key = { `boot:${adventurer.id}` }\n                    >\n                        Boot\n                    </button>,*/\n                ];\n                } else {\n                    content = \"(empty room)\";\n                }\n\n                roomContent.push(<div key = { `room${i}` } className = \"room\">\n                    { content }\n                </div>);\n            }\n\n            return <div className = \"rooms\">\n                <h2>Rooms</h2>\n                { roomContent }\n            </div>;\n        };\n\n        const availableQuests = this.props.quests.filter((q) => q.status === QuestStatus.available );\n\n        return (\n            <details open = { true } className = \"tavernstructureview\">\n                <summary>{ displayName }</summary>\n                {\n                    createUpgradeRow()\n                }\n                <section>\n                    { createRooms() }\n                    <QuestBoard\n                        availableQuests = { availableQuests }\n                        selectedQuestName = { this.state.selectedQuestName }\n                        assignedAventurers = { this.state.assignedAventurers }\n                        onQuestClick = { (name: string) => this.handleQuestClick(name) }\n                        onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => this.handleAddAdventurer(item, index) }\n                        onRemoveAdventurer = { (index: number) => this.handleRemoveAdventurer(index) }\n                        onLaunchQuest = { () => this.handleLaunchQuest() }\n                    />\n                </section>\n            </details>\n        );\n    }\n\n    private handleQuestClick(name: string) {\n        if (this.state.selectedQuestName === name) {\n            this.setState( { selectedQuestName: null });\n        } else {\n            this.setState( { selectedQuestName: name });\n        }\n\n        // Unassign all adventurers\n        this.setState({\n            assignedAventurers: [],\n        });\n    }\n\n    private handleAddAdventurer(item: AdventurerAvatarDragInfo, index: number) {\n        if (item.sourceId === SOURCE_ID) {\n            const assignedAventurers = [ ...this.state.assignedAventurers];\n            assignedAventurers[index] = item.adventurer;\n            this.setState({\n                assignedAventurers,\n            });\n        }\n    }\n\n    /**\n     * Removes an assigned adventurer from a slot\n     * @param index\n     */\n    private handleRemoveAdventurer(index: number): void {\n        const assignedAventurers = [ ...this.state.assignedAventurers];\n        delete assignedAventurers[index];\n        this.setState({\n            assignedAventurers,\n        });\n    }\n\n    private handleLaunchQuest(): void {\n        const assignedAventurers = this.state.assignedAventurers;\n        const selectedQuestName = this.state.selectedQuestName!;\n        this.props.onLaunchQuest(selectedQuestName, assignedAventurers);\n    }\n\n    /**\n     * Returns the party the adventurer is in. undefined if not in any party\n     * @param adventurerId\n     */\n    private getQuestByAdventurer(adventurerId: string): QuestStoreState | undefined {\n        return Object.values(this.props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    }\n}\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", LogChannel.town, {\n                level,\n                structure: Structure.tavern,\n            }));\n        },\n    };\n}\n\n// todo: I'm not sure if this Container needs an AppContext. If not. remove it later\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(TavernStructureView) as React.ComponentType<Props>;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n    deltaResources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox is used in the Warehouse to show a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n        resources,\n        deltaResources,\n    } = props;\n\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        const amount = props.resources[resource]!;\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        let delta;\n        if (deltaResources[resource]) {\n            delta = <span className = \"animate-up\">\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\n            </span>;\n        }\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { amount.toFixed(1) }\n            </div>\n            <div className = \"max\" >\n                { ` / ${props.maxResources[resource]}` }\n            </div>\n            <div className = \"delta\">\n                { delta }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesBox from \"components/ui/resources/ResourcesBox\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { Item } from \"definitions/items/types\";\nimport structureDefinitions, {  Structure  } from \"definitions/structures\";\nimport { StructureDefinition, StructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport { AppContextProps } from \"../../App\";\nimport Inventory from \"../../ui/inventory/Inventory\";\nimport \"./css/warehousestructureview.css\";\n\nexport interface DispatchProps {\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props  {\n}\n\nexport interface StateProps  {\n    level: number;\n    workers: number;\n    workersFree: number;\n    gold: number;\n    items: Array<Item|null>;\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n\nconst warehouse = DragSourceType.warehouse;\n\nclass WarehouseStructureView extends React.Component<AllProps, null> {\n    private resourcesDelta: ResourceStoreState;\n    private resourcesRef: HTMLFieldSetElement | null;\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.resourcesDelta = {};\n        this.resourcesRef = null;\n    }\n\n    public render() {\n        const props = this.props;\n        const structureDefinition = structureDefinitions[Structure.warehouse] as StructureDefinition;\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\n        }\n        const level: number = props.level;\n        const levelDefinition: StructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.get(levelDefinition.displayName);\n\n        const createUpgradeRow = () => {\n            const gold = props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const handleDropItem = (item: Item, fromSlot: number,\n                                toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            switch (sourceType) {\n                case warehouse:\n                    if (props.onMoveItemInWarehouse) {\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\n                    }\n                    break;\n                case DragSourceType.adventurer:\n                    if (props.onMoveItemFromAdventurer) {\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n        return (\n            <details open = { true } className = \"warehouse-structureview\">\n                <summary>{ displayName }</summary>\n                {\n                    createUpgradeRow()\n                }\n                <fieldset className=\"resources\" ref = { (ref) => { this.resourcesRef = ref; }}>\n                    <legend>Resources</legend>\n                    <ResourcesBox\n                        resources = { props.resources }\n                        maxResources = { props.maxResources }\n                        deltaResources = { this.resourcesDelta }\n                    />\n                </fieldset>\n\n                <Inventory\n                    sourceType = { warehouse }\n                    items = { props.items }\n                    onDropItem = { handleDropItem }\n                />\n            </details>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<AllProps>) {\n        Object.keys(prevProps.resources).forEach((resource: string) => {\n            this.resourcesDelta[resource] = this.props.resources[resource]! - prevProps.resources[resource]!;\n        });\n\n        if (this.resourcesRef) {\n            this.resourcesRef.classList.remove(\"animate\");\n            setTimeout(() => {\n                if (this.resourcesRef) {\n                    this.resourcesRef.classList.add(\"animate\");\n                }\n            }, 200);\n        }\n    }\n}\n\nexport default WarehouseStructureView;\n","import { removeItemFromInventory } from \"actions/adventurers\";\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse, moveItemInWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { upgradeStructure } from \"actions/structures\";\nimport WarehouseStructureView,\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\nimport { Item } from \"definitions/items/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StoreState } from \"../../../stores\";\nimport { StructureStoreState } from \"../../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\n    const structureDefinition = structureDefinitions[Structure.warehouse] as WarehouseStructureDefinition;\n    const level: number = structureStore.level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\n    return {\n        gold: store.gold,\n        items: store.items,\n        level,\n        maxResources: levelDefinition.maxResources,\n        resources: store.resources,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number) {\n            const action1 = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToWarehouse(item, toSlot);\n            dispatch(action2);\n        },\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", LogChannel.town, {\n                level,\n                structure: Structure.warehouse,\n            }));\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(WarehouseStructureView) as React.ComponentType<Props>;\n","import { addGold } from \"actions/gold\";\nimport { addResources } from \"actions/resources\";\nimport StructureDetailsView, { DispatchProps, Props, StateProps } from \"components/StructureDetailsView\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>): DispatchProps {\n    return {\n        onCheatGold: (amount: number) => dispatch(addGold(amount)),\n        onCheatResources: (amount: ResourceStoreState) => dispatch(addResources(amount)),\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(StructureDetailsView);\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport ResourceStructureView from \"containers/structures/ResourceStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst getStructureView = (structure: Structure) => {\n    const structureDefinition: StructureDefinition = structureDefinitions[structure as string];\n    switch (structureDefinition.type) {\n        case StructureType.production: {\n            return <ProductionStructureView type = { structure }/>;\n        }\n        case StructureType.resource: {\n            return <ResourceStructureView type = { structure }/>;\n        }\n        case StructureType.warehouse: {\n            return <WarehouseStructureView />;\n        }\n        case StructureType.tavern: {\n            return <TavernStructureView />;\n        }\n        default: {\n            return <div> { structure } </div>;\n        }\n    }\n};\n\nexport default function(props: AllProps) {\n    let view;\n    const structureState: StructureStoreState = props.structures[props.structure];\n    if (structureState.state === StructureState.Building) {\n        const progress = props.buildTask ? props.buildTask.progress : 1 ;\n        view = <div>\n            <Progressbar label = \"Building...\" progress= { progress } />\n        </div>;\n    } else {\n        view = getStructureView(props.structure) ;\n    }\n\n    return <fieldset className=\"structure-details\">\n        <legend>Structure</legend>\n        { view }\n    </fieldset>;\n}\n","export const manifest = [\n    \"img/town/effects/plasma_beam_heavy_green.png\",\n    \"img/town/effects/smoke.png\",\n    \"img/town/sky.jpg\",\n    \"img/town/lighthouse.png\",\n    \"img/town/tavern.png\",\n    \"img/town/mill.png\",\n    \"sound/fx/button-click.ogg\",\n    \"sound/music/Soliloquy.mp3\",\n    \"sound/music/TheLoomingBattle.ogg\",\n\n];\n","import Topbar, { StateProps } from \"components/Topbar\";\nimport { connect } from \"react-redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { StoreState } from \"../stores\";\n\nfunction mapStateToProps(store: StoreState): StateProps {\n    return {\n        gold: store.gold,\n        workers: store.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nexport default connect<StateProps, null, null, StoreState>(mapStateToProps)(Topbar);\n","import { Howl } from \"howler\";\nimport * as React from \"react\";\nimport Indicator from \"./Indicator\";\n\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\nexport interface Props {\n    manifest: string[];\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\n}\n\nexport enum MediaType {\n    image,\n    sound,\n}\n\nexport interface MediaItem {\n    url: string;\n    mediaType: MediaType;\n    content?: HTMLImageElement | Howl;\n    sound?: Howl;\n}\n\ninterface State {\n    itemsLoaded: number;\n    completed: boolean;\n}\n\nexport default class Preloader extends React.Component<Props, State> {\n//    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            completed: false,\n            itemsLoaded: 0,\n        };\n    }\n\n    public componentDidMount() {\n        // this.mounted = true;\n        this.loadMedia();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        // const { images } = this.props;\n        // const oldImages = new Set(prevProps.images);\n\n        // let hasChanged = false;\n        // for (let i = 0; i < images.length; i += 1) {\n        //     const image = images[i];\n        //     if (!oldImages.has(image)) {\n        //         hasChanged = true;\n        //         break;\n        //     }\n        // }\n\n        // if (hasChanged) {\n        //     this.loadImages();\n        // }\n        // todo: implement\n    }\n\n    public componentWillUnmount() {\n        // this.mounted = false;\n        // if (this.autoResolveTimeout) {\n        //     clearTimeout(this.autoResolveTimeout);\n        // }\n    }\n\n    public render() {\n//        console.log(`loaded: ${this.state.itemsLoaded} `);\n        const { children, manifest } = this.props;\n        const complete = this.state.completed;\n\n        const indicator = <Indicator\n            itemsLoaded = { this.state.itemsLoaded }\n            itemsTotal = { manifest.length }\n        />;\n\n        return complete ? children : indicator;\n\n    }\n\n    protected loadMedia = () => {\n        // todo: what if props get set at runtime\n        this.setState({\n            itemsLoaded: 0,\n        });\n\n        const promises = this.props.manifest\n            .map((url) => this.loadItem(url)\n            // tslint:disable-next-line:no-console\n            .catch((err) => console.error(err)));\n\n        Promise.all(promises).then((results) => {\n            if (this.props.onLoadComplete) {\n                this.props.onLoadComplete(media);\n            }\n            this.setState({\n                completed: true,\n            });\n        });\n    }\n\n    protected loadItem = async (url: string): Promise<MediaItem> => {\n        if (media.some((m) => m.url === url)) {\n            // tslint:disable-next-line:no-console\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\n        }\n        const mediaType = getType(url);\n        let item;\n        if (mediaType === MediaType.image) {\n            // try {\n            const value = await loadImage(url);\n            // console.log(`loaded ${url}`); // tODO: remove\n            item = {\n                content: value,\n                mediaType,\n                url,\n            } ;\n            // } catch (e) {\n            //     throw Error(`Could not load image with url '${url}'`);\n            // }\n        }\n        if (mediaType === MediaType.sound) {\n            const value = new Howl({\n                src: [ url ],\n            });\n            item = {\n                content: value,\n                mediaType,\n                url,\n            };\n        }\n        if (item) {\n            media.push(item);\n            this.setState({\n                itemsLoaded: this.state.itemsLoaded + 1,\n            });\n            return item;\n        } else {\n            throw new Error(`Unknown error while trying to load ${url}`);\n        }\n    }\n}\n\nconst media: MediaItem[] = [];\n\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\n    const image = new Image();\n    image.src = url;\n\n    return new Promise((resolve, reject) => {\n        if (image.naturalWidth) {\n            resolve(image);\n        } else if (image.complete) {\n            reject(null);\n        } else {\n            image.addEventListener(\"load\", check);\n            image.addEventListener(\"error\", check);\n        }\n        function check() {\n            if (image.naturalWidth) {\n                resolve(image);\n            } else {\n                reject(null);\n            }\n            image.removeEventListener(\"load\", check);\n            image.removeEventListener(\"error\", check);\n        }\n    });\n};\n\nconst getType = (url: string): MediaType => {\n    url = url.toLowerCase();\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\n        return MediaType.image;\n    }\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\n        return MediaType.sound;\n    }\n    throw Error(`Could not determine type for ${url}`);\n};\n","\nimport * as React from \"react\";\nimport { Persistor } from \"redux-persist\";\nimport { TextManager } from \"utils/textManager\";\nimport { View } from \"./App\";\nimport \"./css/topbar.css\";\n\nexport interface Props {\n    appView: View;\n    persistor: Persistor;\n}\nexport interface DispatchProps {\n    onViewButtonClick: () => void;\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n}\n\nexport default function(props: Props & StateProps & DispatchProps) {\n    const handleViewClick = () => {\n        props.onViewButtonClick();\n    };\n    const handleResetClick = () => {\n        props.persistor.purge();\n        window.location.reload();\n    };\n    const viewButtonText = props.appView === View.Town ? TextManager.get(`common-view-button-world`) :\n        TextManager.get(`common-view-button-town`);\n\n    return (\n        <div className=\"topbar\">\n            <div className=\"topbar-left\">\n                <button onClick= { () => handleViewClick() }> { viewButtonText } </button>\n                { ` | `}\n                <button onClick= { () => handleResetClick() } style={ { color: \"red\" } }> Restart! </button>\n            </div>\n            <div className=\"topbar-right\">\n                <span>\n                    workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n                </span>\n                <span>\n                    gold: <b>{ props.gold }</b>\n                </span>\n            </div>\n        </div>\n    );\n}\n","import * as React from \"react\";\n\nexport interface Props {\n    itemsLoaded?: number;\n    itemsTotal?: number;\n}\n\n/**\n * Loading indicator\n */\nexport default class Indicator extends React.Component<Props> {\n    public render() {\n        const { itemsLoaded, itemsTotal } = this.props;\n        return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\n    }\n}\n","\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/context/ItemContext\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const structureDefinition = structureDefinitions[structure];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","// tslint:disable: object-literal-sort-keys\n\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport AdventurersBox from \"containers/AdventurersBox\";\nimport CheatBox from \"containers/CheatBox\";\nimport SimpleLog from \"containers/log/SimpleLog\";\nimport RealWorldView from \"containers/partyScreen/RealWorldView\";\nimport RealTownView from \"containers/RealTownView\";\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\nimport { manifest } from \"manifest/app\";\nimport * as React from \"react\";\nimport posed, { PoseGroup } from \"react-pose\";\nimport { Persistor } from \"redux-persist\";\nimport { Sound, SoundManager } from \"utils/soundManager\";\nimport Topbar from \"../containers/Topbar\";\nimport { Structure } from \"../definitions/structures\";\nimport \"./css/app.css\";\nimport Preloader, { MediaItem, MediaType } from \"./preloading/Preloader\";\nimport ContextView from \"./ui/context/ContextView\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface StateProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\nexport enum View {\n    Town,\n    World,\n}\n\nexport interface Props {\n    persistor: Persistor;\n}\n\ninterface LocalState {\n    view: View;\n    media: MediaItem[];\n    selectedStructure: Structure | null;\n    contextType: ContextType | null;\n    contextInfo: ContextInfo | null;\n}\n\nconst resolution = {\n    height: 972,\n    width: 648,\n};\n\n// Sharing context within the entire App\nexport interface AppContextProps {\n    onContextualObjectActivated: (type: ContextType, info: ContextInfo) => void;\n    media: MediaItem[];\n}\nexport const AppContext = React.createContext<AppContextProps | null>(null);\n\nexport default class App extends React.Component<Props & StateProps & DispatchProps, LocalState> {\n    private containerRef: React.RefObject<HTMLDivElement>;\n\n    // This Component has local state, so it\"s a class\n    constructor(props: Props & StateProps & DispatchProps) {\n        super(props);\n\n        this.state = {\n            contextInfo: null,\n            contextType: null,\n            media: [],\n            selectedStructure: null,\n            view: View.Town,\n        };\n        this.containerRef = React.createRef();\n\n        this.updateDimensions = this.updateDimensions.bind(this);\n    }\n\n    public render() {\n        const selectedStructureView = this.state.selectedStructure ?\n        <StructureDetailsView structure = { this.state.selectedStructure }/> : null;\n\n        const StructureViewModal = posed.div({\n            enter: {\n                opacity: 1,\n                transform: \"scale(1)\",\n                transition: {\n                     duration: 200,\n                     ease: \"easeInOut\",\n                },\n            },\n            exit: {\n                opacity: 0,\n                transform: \"scale(0.5)\",\n                transition: {\n                    duration: 150,\n                    ease: \"easeInOut\",\n                },\n            },\n        });\n        const ModalBackground = posed.div({\n            enter: { opacity: 1 },\n            exit: { opacity: 0 },\n        });\n\n        const getMainView = () => {\n            if (this.state.view === View.Town) {\n\n                return <RealTownView\n                    onStructureClick = { this.selectStructure }\n                // onContextualObjectActivated = { this.handleContextualObjectActivated }\n                // media = { this.state.media }\n                />;\n            } else {\n                return <RealWorldView/>;\n            }\n\n        };\n\n        const contextView = this.state.contextType == null || this.state.contextInfo == null ? null :\n        <ContextView type = { this.state.contextType }  info = { this.state.contextInfo }/>;\n\n        const getAdventurersBox = () => {\n            return <AdventurersBox />;\n        };\n\n        return <AppContext.Provider value = {{\n            media: this.state.media,\n            onContextualObjectActivated: this.handleContextualObjectActivated,\n        }}>\n            <div className=\"app\" \n                ref = { this.containerRef }\n                style = {{\n                    width: resolution.width,\n                    height: resolution.height,\n                }}\n            >\n                <Preloader\n                    manifest = { manifest }\n                    onLoadComplete = { this.handleMediaLoadComplete }\n                >\n                <Topbar\n                    appView={ this.state.view }\n                    onViewButtonClick={ () => this.changeView() }\n                    persistor={ this.props.persistor }\n                />\n                { <PoseGroup>\n                    { !!selectedStructureView && [\n                        <StructureViewModal key=\"structure-modal\" className=\"structure-modal\">\n                            { selectedStructureView }\n                        </StructureViewModal>,\n                        <ModalBackground key=\"structure-modal-bg\" className=\"structure-modal-background\" onClick= { () => this.closeStructureModal() } />,\n                        ]\n                    }\n                </PoseGroup>}\n                { getMainView()  }\n                <div className=\"app-right\">\n                    { contextView }\n                    { getAdventurersBox() }\n                <CheatBox />\n                </div>\n                <SimpleLog/>\n                </Preloader>\n            </div>\n        </AppContext.Provider>;\n    }\n\n    public componentDidMount() {\n        window.addEventListener(\"resize\", this.updateDimensions);\n        this.updateDimensions();\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n\n    private updateDimensions() {\n        if(this.containerRef.current) {\n            if (window.innerHeight < resolution.height){\n                this.containerRef.current.style.transform = `scale(${window.innerHeight / resolution.height}) translateX(-50%)`;\n\n            } else {\n                this.containerRef.current.style.transform = `scale(1) translateX(-50%)`;\n            }\n        }\n    }\n\n    private changeView = () => {\n        SoundManager.playSound(Sound.buttonClick);\n\n        if (this.state.view === View.Town) {\n            this.setState({\n                selectedStructure: null,\n                view: View.World,\n            });\n        } else {\n            this.setState({ view: View.Town });\n        }\n    }\n\n    private selectStructure = (structure: Structure | null) => {\n        this.setState({\n            selectedStructure: structure,\n        });\n    }\n\n    private closeStructureModal = () => {\n        this.setState({\n            selectedStructure: null,\n        });\n    }\n\n    private handleMediaLoadComplete = (media: MediaItem[]) => {\n\n        const sounds = media.filter((m) => m.mediaType === MediaType.sound);\n        SoundManager.loadMedia(sounds);\n\n        SoundManager.addSounds({\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\n        });\n\n        this.setState({\n            media,\n        });\n    }\n\n    private handleContextualObjectActivated = (type: ContextType, info: ContextInfo) => {\n        this.setState({\n             contextInfo: info,\n             contextType: type,\n        });\n    }\n\n}\n","\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = structureDefinitions[deedInfo.structure];\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport ItemContext from \"containers/ui/context/ItemContext\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\n\nexport interface Props {\n    type: ContextType;\n    info: ContextInfo;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\n/**\n * The ContextView shows the player contextual information about the item she clicked\n * @param props\n */\nexport default function(props: Props & DispatchProps) {\n    const info = props.info;\n    let content;\n\n    switch (props.type) {\n        case ContextType.item:\n        default:\n            content = <ItemContext info= { props.info } />;\n    }\n\n    const name = TextManager.getItemName(info.item);\n    return (\n        <fieldset>\n            <legend> { name } </legend>\n            { content }\n        </fieldset>\n    );\n}\n","\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        // onCheatGold: (amount: number) => dispatch(addGold(amount)),\n        // onCheatResources: (amount: ResourceStoreState) => dispatch(addResources(amount)),\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import structureDefinitions, { Structure } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { StoreState } from \"stores\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\n\n /*\n  * Calculates how many resources are generated by the in the town.\n  * Will return a ResourceStoreState with the amount of each resource to add  */\nconst getProducedResources = (delta: number, store: StoreState): ResourceStoreState => {\n    const structures: StructuresStoreState = store.structures;\n    const result: ResourceStoreState = {};\n    const factor = delta / RESOURCE_INTERVAL;\n    // this function can run at different intervals\n    // faster or slower than once a minute\n    // we will multiply the resource amount by the factor to normalize\n    const maxResources = getMaxResources(store);\n\n    const handleStructure = (structure: string) => {\n        const structureDefinition: StructureDefinition = structureDefinitions[structure];\n\n        if (structureDefinition.type === StructureType.resource) {\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\n            const level: number = structures[structure].level;\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\n\n            // Store all the resources that this structure will generate this tick into `result`\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\n                return accumulator;\n            }, result);\n        }\n    };\n\n    // Calculate what each structure generates. Stores in `result`.\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\n\n    // Check if the warehouse can actually hold it\n    // todo: [10/07/2019] move to reducer\n    Object.keys(result).forEach((resource: string) => {\n        if (result[resource]) {\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\n            }\n        }\n//        console.log(`Adding: ${resource} ${result[resource]}`);\n    });\n\n    return result;\n};\n\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\n    const structureDefinition = structureDefinitions[Structure.warehouse] as WarehouseStructureDefinition;\n    const level: number = store.structures[Structure.warehouse].level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    return levelDefinition.maxResources;\n};\n\nexport default getProducedResources;\n","import encounterDefintions from \"definitions/encounters\";\nimport { Encounter } from \"definitions/encounters/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { oracles } from \"oracle\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nexport interface QuestUpdate {\n    name: string;\n    currentEncounter: Encounter | null;\n    progress: number;\n}\n\nexport interface LogUpdate {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n}\n\ninterface QuestGameTickResponse {\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: StoreState): QuestGameTickResponse => {\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the user has to do something to move the quest along\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n\n    store.quests.forEach((qss: QuestStoreState) => {\n        if (qss.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[qss.name];\n        const currentProgress = qss.progress;\n        const currentNodeIndex =  Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            let currentEncounter = qss.currentEncounter;\n\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n                    const encounter = encounterDefintions[nextNode.encounter!];\n                    const oracle = oracles[qss.name];\n                    nextProgress = currentNodeIndex + i;\n                    currentEncounter = nextNode.encounter!;\n                    // Start encounter(encounter)\n\n                    // Add quest to log\n                    log.push({\n                        channel: LogChannel.quest,\n                        context: qss.name,\n                        key: encounter.getDescription(oracle),\n                    });\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    currentEncounter = null;\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            context: qss.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                currentEncounter,\n                name: qss.name,\n                progress: nextProgress,\n            });\n        }\n    });\n\n    return {\n        log,\n        quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Action, ActionType,\n    InventoryAction, MoveItemInInventoryAction,\n    MoveItemToOtherAdventurerAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { Item } from \"definitions/items/types\";\nimport { Reducer } from \"redux\";\nimport { AdventurerStoreState, EquipmentStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\nconst generateRandomGear = (): EquipmentStoreState => {\n\n    const second = [\"Burning Damnation\",\n        \"Fury\", \"Some old guy\", \"the Depths\", \"Frozen Hells\",\n        \"Broken bones\", \"the Claw\", \"Resilience\", \"Shattered Damnation\", \"the Seer\" ];\n    const combine = (first: string[]): string => {\n        const firstPart = first[Math.floor(Math.random() * first.length)];\n        const secondPart = second[Math.floor(Math.random() * second.length)];\n        return `${firstPart} of ${secondPart}`;\n    };\n    return {\n        arms: combine([\"Fists\", \"Grips\", \"Hands\", \"Handguards\", \"Gauntlets\"]),\n        body: combine([\"Breastplate\", \"Mithril Vest\", \"Titanium Armor\", \"Primitive Armor\", \"Scaled Raiment\"]),\n        feet: combine([\"Sabatons\", \"Footguards\", \"Warboots\", \"Slippers\"]),\n        head: combine([\"Helmet\", \"Headguard\", \"Obsidian Crown\", \"Scaled Hood\"]),\n    };\n\n};\n\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `/img/avatars/andy-victorovych-a1.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `/img/avatars/andy-victorovych-a2.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, null, null, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"ec6f1050\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `/img/avatars/andy-victorovych-a3.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `/img/avatars/andy-victorovych-a4.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"96c686c3\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `/img/avatars/andy-victorovych-a5.jpg`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `/img/avatars/andy-victorovych-a6.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `/img/avatars/andy-victorovych-a7.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `/img/avatars/andy-victorovych-a8.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `/img/avatars/andy-victorovych-a9.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"12c613d4\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `/img/avatars/andy-victorovych-a10.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], Action> = (\n    state: AdventurerStoreState[] = testState, action: Action) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null) {\n                        toSlot = inventory.findIndex((val) => val === null || val === undefined);\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\n\nexport interface EngineStoreState {\n    lastTick: number;\n}\n\nexport const initialState: EngineStoreState = {\n    lastTick: Date.now(),\n};\n","\nimport { GameTickAction } from \"actions/game\";\nimport { Action, ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\nimport { Item } from \"definitions/items/types\";\nimport { Reducer } from \"redux\";\n\nconst testState = [\n    null,\n    null,\n    null,\n    Item.dagger,\n    Item.deedForWeaponsmith,\n];\n\n// Items in warehouse\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\n                                                 action: Action| GameTickAction) => {\n    switch (action.type) {\n        case ActionType.addItem: {\n            // toSlot is optional\n            const { item } = (action as AddAction);\n            let { toSlot } = (action as AddAction);\n            if (toSlot === undefined) {\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\n                if (toSlot === -1) {\n                    // Still not found. Add at end\n                    // todo: [07/07/2019] GAME DESIGN\n                    return [ ...state, item ];\n                }\n            }\n            return state.map((element, index) => index === toSlot ? item : element);\n        }\n\n        case ActionType.moveItemInWarehouse: {\n            const {\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInWarehouseAction);\n\n            return state.map((element, index) => {\n                // todo: items switch places\n                if (index === fromSlot) { return null; }\n                if (index === toSlot) { return state[fromSlot]; }\n                return element;\n            });\n        }\n        case ActionType.removeItem: {\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\n\n            return state.map((element, index) => index !== fromSlot ? element : null);\n        }\n    }\n\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const { key, channel, context } = (action as AddLogEntryAction);\n            const time = Date.now();\n            return [{\n                    channel,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n    console.log(action.log)\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, StartEncounterAction, UpdateEncounterResultAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    log: [],\n    icon: \"sigil1.png\",\n    currentEncounter: null,\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    log: [],\n    icon: \"sigil2.png\",\n    currentEncounter: null,\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState,\n                                                   action: AnyAction| GameTickAction) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.advanceQuest:\n            return advanceQuest(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        case ActionType.startEncounter:\n            return startEncounter(state, action as StartEncounterAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (state: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n            };\n        }\n        return qss;\n    });\n};\n\nconst advanceQuest = (state: QuestStoreState[], action: QuestAction) => {\n    // deprecated\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            const nextNode = questDefinition.nodes[Math.floor(progress)];\n            let log = qss.log;\n\n            if (nextNode.type === QuestNodeType.nothing) {\n                if (nextNode.log) {\n                    log = [\n                        ...log,\n                        nextNode.log,\n                    ];\n                }\n            }\n\n            return {\n                ...qss,\n                progress,\n                log,\n            };\n        }\n        return qss;\n    });\n};\n\nconst startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                currentEncounter: action.encounter,\n            };\n        }\n        return qss;\n    }); };\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n    [Resource.gunpowder]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    gunpowder: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: { level: 0, workers: 0, state: StructureState.NotBuilt },\n};\n","import { Action, ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, Action> = (state: StructuresStoreState = initialState,\n                                                                  action: Action) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { Action as AnyTaskAction, ActionType, AddAction} from \"actions/tasks\";\nimport { Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyTaskAction | GameTickAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\n// import { version } from \"./version\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    engine,\n    gold,\n    items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType as GameActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { EngineStoreState, initialState } from \"stores/engine\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case GameActionType.gameTick:\n            return {\n                ...state,\n                lastTick: Date.now(),\n            };\n    }\n    return state;\n};\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { Action as StructureAction,\n    ActionType as StructureActionType } from \"actions/structures\";\nimport structureDefinitions from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n\n        case StructureActionType.startBuildingStructure:\n            // Started building a structure\n            const structureDefinition = structureDefinitions[(action as StructureAction).structure];\n            const cost = structureDefinition.cost.gold || 0;\n            return state - cost;\n    }\n    return state;\n};\n","\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { ActionType, AddResources } from \"../actions/resources\";\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\n                                                       action: AnyAction| GameTickAction) => {\n\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\n        // todo: Check if warehouse can hold it\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\n            return accumulator;\n        }, {});\n    };\n\n    switch (action.type) {\n        case ActionType.addResources: {\n            const resourcesToAdd = (action as AddResources).resources;\n            return addResources(resourcesToAdd);\n        }\n        case ActionType.removeResources: {\n            const resourcesToRemove = (action as AddResources).resources;\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\n                return accumulator;\n            }, {});\n        }\n\n        case GameActionType.gameTick: {\n            const resourcesToAdd = (action as GameTickAction).resources;\n            return addResources(resourcesToAdd);\n        }\n    }\n    return state;\n};\n","import { ActionType, GameTickAction } from \"actions/game\";\nimport { Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, GameTickAction> = (state: seedrandomStateType = initialState,\n                                                                       action: GameTickAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { Action, ActionType, ModifyWorkersAction } from \"actions\";\nimport { Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: Action) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import axios from \"axios\";\nimport * as React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Persistor } from \"redux-persist\";\nimport { gameTick } from \"./actions/game\";\nimport { addLogEntry } from \"./actions/log\";\nimport version from \"./constants/version\";\nimport App from \"./containers/App\";\nimport \"./index.css\";\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\nimport getQuestUpdates from \"./mechanics/gameTick/quests\";\nimport getRngState from \"./mechanics/gameTick/rngState\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { StoreState } from \"./stores\";\nimport { TaskStoreState } from \"./stores/task\";\nimport { TasksStoreState } from \"./stores/tasks\";\nimport configureStore from \"./utils/configureStore\";\nimport * as Random from \"./utils/random\";\nimport { TextManager } from \"./utils/textManager\";\n\nlet interval: NodeJS.Timeout;\nconst initGame = async () => {\n    const axiosResult = await axios.get(\"lang/en-US.json\");\n    const texts = axiosResult.data as Record<string, string>;\n    TextManager.init(texts);\n    Random.init(\"GILLESROX2\");\n\n    const { store, persistor, isHydrated } = await configureStore();\n    if (!isHydrated) {\n        startNewGame(store);\n    } else {\n        continueGame(store);\n    }\n    runGame(store, persistor);\n};\n\n/**\n * Gets called when a player\n * @param store\n */\nconst startNewGame = (store: any) => {\n\n    store.dispatch(addLogEntry(\"test-game-welcome\"));\n    // todo: here is a good place to launch a tutorial or something\n\n    // tslint:disable-next-line:no-console\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\n};\n\nconst continueGame = (store: any) => {\n    // tslint:disable-next-line:no-console\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\n};\n\nconst stopGame = () => {\n    clearTimeout(interval);\n};\n\nconst runGame = (store: any, persistor: Persistor) => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <DndProvider backend={ HTML5Backend }>\n                <App persistor={ persistor }/>\n            </DndProvider>\n        </Provider>,\n        document.getElementById(\"root\") as HTMLElement,\n    );\n    registerServiceWorker();\n\n    // TODO: Check HMR: https://github.com/wmonk/create-react-app-typescript/pull/312#issuecomment-385617913\n\n    const processCompletedTasks = (tasks: TasksStoreState) => {\n        const handleCompletedTask = (task: TaskStoreState) => {\n            // Fire all callbacks\n            task.callbacks.forEach((action) => store.dispatch(action));\n        };\n\n        tasks.completed.forEach((task) => handleCompletedTask(task));\n    };\n\n    // store.dispatch(addGold(400));\n\n    // TODO: find something less ugly and hacky than this\n//    oracles.kill10b = theBigTree.getOracle(\"kill_10_boars\", store);\n  //  oracles[\"retrieve_magic_amulet\"] = backstabbed.getOracle(\"retrieve_magic_amulet\", store);\n    const gameLoop = () => {\n        const state: StoreState = store.getState();\n        const delta = Date.now() - state.engine.lastTick;\n\n        const resourcesUpdates = getProducedResources(delta, state);\n        const rngState = getRngState();\n        const { quests, log } = getQuestUpdates(delta, state);\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, quests, log));\n\n        processCompletedTasks(state.tasks);\n\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", { item: \"sword\" }));\n\n    };\n\n    interval = setInterval(gameLoop, 2500);\n};\n\ninitGame();\n"],"sourceRoot":""}