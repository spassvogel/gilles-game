{"version":3,"sources":["actions/game.ts","stores/logEntry.tsx","actions/log.ts","utils/version.ts","actions/adventurers.ts","actions/items.ts","constants/version.tsx","constants/dragging.ts","definitions/structures/types.tsx","definitions/structures/alchemist.tsx","definitions/items/types.ts","utils/time.tsx","definitions/production/armour.tsx","definitions/structures/index.tsx","definitions/structures/armoursmith.tsx","definitions/structures/garden.tsx","definitions/structures/lumberMill.tsx","definitions/structures/mine.tsx","definitions/structures/quarry.tsx","definitions/structures/tannery.tsx","definitions/structures/tavern.tsx","definitions/structures/warehouse.tsx","definitions/production/weapons.tsx","definitions/structures/weaponsmith.tsx","definitions/structures/weaver.tsx","definitions/production/questItems.tsx","definitions/structures/workshop.tsx","definitions/items/deeds.ts","definitions/items/equipment.ts","definitions/items/weapons.ts","definitions/items/materials.ts","definitions/items/questItems.ts","definitions/items/trinkets.ts","definitions/items/index.ts","utils/textManager.ts","constants/context.ts","constants/icons.ts","components/ui/AdventurerAvatar.tsx","components/ui/ItemIcon.tsx","stores/quest.tsx","components/ui/DraggableItemIcon.tsx","hoc/withAppContext.tsx","components/ui/inventory/InventorySlot.tsx","components/ui/inventory/Inventory.tsx","components/AdventurersBox.tsx","selectors/adventurers.tsx","components/log/SimpleLog.tsx","containers/AdventurersBox.tsx","components/widgets/SquareIconButton.tsx","components/widgets/Tab.tsx","components/widgets/Tabstrip.tsx","stores/structure.tsx","selectors/quests.tsx","containers/log/SimpleLog.tsx","utils/soundManager.ts","components/RealTownView.tsx","containers/RealTownView.tsx","actions/gold.ts","actions/resources.ts","definitions/resources.tsx","components/ui/items/ItemsBox.tsx","containers/ui/context/items/ItemsCostBox.tsx","components/ui/resources/ResourcesCostBox.tsx","containers/ui/resources/ResourcesCostBox.tsx","mechanics/crafting.ts","components/ui/Progressbar.tsx","actions/structures.ts","actions/tasks.ts","components/ui/UpDownValue.tsx","components/structures/ProductionStructureView.tsx","selectors/workers.tsx","stores/task.tsx","containers/structures/ProductionStructureView.tsx","components/structures/ResourceStructureView.tsx","containers/structures/ResourceStructureView.tsx","actions/quests.ts","components/ui/DraggableAdventurerAvatar.tsx","definitions/encounters/types.ts","definitions/quests/index.tsx","components/ui/DroppableAdventurerSlot.tsx","components/structures/tavern/AssignAdventurers.tsx","components/structures/tavern/QuestBoard.tsx","containers/structures/tavern/QuestBoard.tsx","components/structures/tavern/TavernStructureView.tsx","containers/structures/tavern/TavernStructureView.tsx","components/ui/resources/ResourcesBox.tsx","components/structures/warehouse/WarehouseStructureView.tsx","containers/structures/warehouse/WarehouseStructureView.tsx","components/StructureDetailsView.tsx","components/ui/window/Window.tsx","hoc/withWindow.tsx","containers/structures/StructureDetailsView.tsx","utils/random.ts","components/ui/DroppableAdventurerAvatar.tsx","components/ui/EquipmentSlot.tsx","components/ui/AdventurerInfo.tsx","containers/ui/AdventurerInfo.ts","storeHelpers/index.tsx","oracle/index.tsx","definitions/encounters/backstabbed.ts","definitions/encounters/goblinHouse.ts","definitions/encounters/index.ts","definitions/encounters/theBigTree.ts","components/ui/window/windows/PartyWindow.tsx","containers/windows/PartyWindow.tsx","components/world/QuestLineVisualization.tsx","components/partyScreen/RealWorldView.tsx","containers/world/RealWorldView.tsx","hoc/withPopup.tsx","actions/index.ts","manifest/app.tsx","components/preloading/Preloader.tsx","components/ui/window/windows/CheatWindow.tsx","constants/resources.ts","containers/windows/CheatWindow.tsx","components/ui/window/windows/Menu.tsx","components/topbar/Resourcebar.tsx","containers/topbar/Resourcebar.ts","containers/Topbar.tsx","components/topbar/Topbar.tsx","components/preloading/Indicator.tsx","containers/ui/context/ItemContext.tsx","components/App.tsx","components/ui/context/ItemContext.tsx","components/ui/context/ContextView.tsx","containers/App.tsx","mechanics/gameTick/producedResources.ts","mechanics/gameTick/quests.ts","mechanics/gameTick/rngState.ts","registerServiceWorker.ts","reducers/adventurers.ts","stores/engine.tsx","reducers/items.ts","reducers/log.ts","reducers/quests.ts","stores/resources.tsx","stores/structures.tsx","reducers/structures.ts","stores/tasks.tsx","reducers/tasks.ts","reducers/index.ts","reducers/engine.ts","reducers/gold.ts","reducers/resources.ts","reducers/rngState.ts","reducers/workers.ts","utils/configureStore.ts","index.tsx"],"names":["ActionType","LogChannel","addLogEntry","key","context","channel","arguments","length","undefined","common","channelContext","type","asInt","semVer","parts","split","map","part","Number","Error","concat","forEach","numericVersion","i","convertSemVerToInt","moveItemInInventory","adventurerId","fromSlot","toSlot","addItemToInventory","item","removeItemFromInventory","addItemToWarehouse","addItem","removeItemFromWarehouse","removeItem","DragSourceType","DragType","StructureType","ItemType","Item","alchemist","production","cost","gold","time","levels","displayName","workerCapacity","produces","formatDuration","unit","moment","format","trim","Structure","boots1","resources","wood","iron","ONE_MINUTE","chest","cowl","armoursmith","garden","resource","generates","food","lumberMill","mine","quarry","stone","tannery","leather","tavern","rooms","warehouse","maxResources","fabric","crossbow","longbow","poisonedDagger","materials","poisonVial","dagger","sword","khopesh","weaponsmith","weaver","torch","sandwich","workshop","all","EquipmentType","itemType","deed","deeds","deedForLumbermill","structure","subText","iconImg","deedForWeaponsmith","equipment","basePath","WeaponType","weaponDefinitions","_weaponDefinitions","Object","defineProperty","equipmentType","feet","boots2","boots3","chainmailHood","head","clothGloves","hands","druidChest","druidHands","druidFeet","druidHead","druidLegs","legs","fedora","greaves1","greaves2","hornedHelmet","leatherGloves","nomadHelmet","pants1","pants2","plateChest1","plateChest2","plateChest3","plateChest4","plateGloves1","plateGloves2","plateHelmet","platePants","plateShoulders1","shoulders","plateShoulders2","robe","shoulders1","shoulders2","shoulders3","vest","material","_Item$arrowheads$Item","arrowheads","bolts","buckle","chain","cogs","gem","ingot","nails","ribbon","rope","gunpowder","scales","spring","thread","questItem","questItemDefinitions","_questItemDefinitions","blueprints","crate","dynamite","eye","feather","heart","horn","letters","lockPicks","oil","orcFinger","plans","purpleGems","runestone","teeth","tooth","tusk","vase","vial","weeds","trinket","trinketDefinitions","_trinketDefinitions","magicAmulet","ring","weapon","weapons_weaponDefinitions","battleAxe","weaponType","axe","brassKnuckles","melee","cleaver","knife","club","flail","greatswordOfGwai","unique","bow","mace","morningStar","ravenStaff","staff","savageStaff","spear","poleArm","warhammer","hammer","objectSpread","questItems","trinkets","weapons","getDefinition","TextManager","classCallCheck","this","createClass","value","texts","precompile","templates","compileAll","initialized","template","getTemplate","console","error","textEntry","get","compile","name","_this","keys","Handlebars","article","itemDefinitions","itemArticleAuto","itemArticleDefined","ContextType","IconSize","itemArticleUndefined","getItemName","articleTemplate","noun","AdventurerAvatar","props","adventurer","className","react","style","backgroundImage","avatarImg","onClick","id","getClassName","size","smallest","small","medium","big","biggest","ItemIcon","itemDefinition","React","AppContext","ref","warn","event","showContext","originRect","currentTarget","getBoundingClientRect","onContextualObjectActivated","QuestStatus","DraggableItemIcon","_this$props","isDragging","connectDragSource","ui_ItemIcon","DragSource","beginDrag","inventorySlot","index","sourceId","sourceType","connect","monitor","dragSource","withAppContext","WrappedComponent","_React$Component","WithContext","possibleConstructorReturn","getPrototypeOf","apply","inherits","Consumer","assign","InventorySlot","isOver","canDrop","connectDropTarget","children","DropTarget","drop","onDrop","getItem","empty","dropTarget","slots","_loop","contents","items","ui_DraggableItemIcon","slot","inventory_InventorySlot","iconSize","dragInfo","onDropItem","push","AdventurersBox","call","state","selectedAdventurer","_this2","generatePortrait","ui_AdventurerAvatar","setState","groupedAdventurers","group","adventurers","find","adventurerInfo","inventory_Inventory","inventory","adventurerInventory","onMoveItemInInventory","onMoveItemFromWarehouseToAdventurer","quest","quests","q","sigilImgPath","icon","getQuestTitle","title","generateRow","ChannelType","getAdventurers","getQuests","selectAdventurersGroupedByQuest","createSelector","foundInParty","findAdventurerById","a","values","reduce","acc","val","foundAdventurers","party","status","active","toConsumableArray","filter","indexOf","selectAdventurersInTown","adventurersOnQuest","store","dispatch","removeAction","addAction","action","SquareIconButton","e","text","Tab","Tabstrip","initialSelectedTab","_useState","useState","_useState2","slicedToArray","activeTab","setActiveTab","Children","child","cloneElement","handleTabClick","tabId","onTabSelected","react_default","createElement","StructureState","SimpleLog","expanded","selectedTabId","channels","label","tabType","town","questNames","questName","logEntries","currentTab","t","lE","Tabs","tab","widgets_Tab","widgets_Tabstrip","handleTabSelected","widgets_SquareIconButton","handleToggleExpand","entry","logEntry","getLogEntryRow","getLog","log","selectActiveQuests","selectLastQuestLogEntry","l","MusicTrack","Sound","media","NotBuilt","musicTracks","currentMusicTrack","sounds","SoundManager","m","soundList","entries","_ref","_ref2","url","content","sound","play","track","hasOwnProperty","fade","nextMusic","playing","loop","RealTownView","plasmaBeam","anim","handleStructureClick","evt","onStructureClick","target","handleBackgroundClick","images","addMusicTrack","playMusic","stop","structures","structureDef","structureDefinitions","structureStore","levelDef","level","ReactKonva","x","y","fontSize","fill","width","height","scale","image","imgSrc","shadowBlur","shadowColor","shadowEnabled","strokeWidth","node","drawHitFromCache","result","playMusicTrack","img","compose","ownProps","addGold","amount","subtractGold","addResources","Resource","ItemsBox","itemsInInventory","aggregate","accumulator","current","listItems","listItemClass","itemDescription","itemsDescription","tmpWarehouse","found","findIndex","_tmpWarehouse$splice","splice","removed","definitions_resources","_Resource$wood$Resour","ResourcesBox","sufficientResources","resourceDescription","resourceDescriptions","getResourceName","ResourcesCostBox","calculateProductionTime","workers","Progressbar","min","max","progress","UpDownValue","displayValue","upDisabled","onUp","downDisabled","onDown","ProductionStructureView","selectedItem","workersAssigned","structureDefinition","levelDefinition","open","nextLevel","nextLevelCost","canUpgrade","upgradeText","float","onUpgrade","disabled","createUpgradeRow","stopPropagation","createCraftTabs","p","playerResources","costResources","missingAtLeastOneResource","some","missingAtLeastOneItem","costMaterials","costItemsContent","ItemsCostBox","resources_ResourcesCostBox","display","ui_UpDownValue","workersFree","craftingTime","formatted","makeTimeString","onCraft","createCraftingDetails","tasks","ui_Progressbar","startTime","timeRemaining","finishBuildingStructure","upgradeStructure","increaseWorkers","decreaseWorkers","startTask","taskType","origin","callbacks","start","TaskType","selectFreeWorkers","running","productionDefinition","removeResources","craftItem","ResourceStructureView","onWorkersDown","onWorkersUp","createWorkersRow","generatesText","join","createGeneratesRow","advanceQuest","startEncounter","encounter","spec","Encounter","QuestNodeType","DraggableAdventurerAvatar","kill10Boars","nodes","nothing","goblinHouseOutside","backstabbed","boss","retrieveMagicAmulet","requiredItems","theBigTree","DroppableAdventurerSlot","AssignAdventurers","assignedAventurers","onRemoveAdventurer","ui_DroppableAdventurerSlot","onAddEventurer","availableSlots","slotsContent","QuestBoard","selectedQuest","questListContent","availableQuests","iconImgPath","selectedQuestName","onQuestClick","questDefinition","fullParty","enoughItems","checkEnoughItems","canLaunch","getQuestDescription","tavern_AssignAdventurers","onAddAdventurer","onLaunchQuest","getQuestDetails","_this3","every","amountRequired","TavernStructureView","roomCount","available","roomContent","room","assigned","getQuestByAdventurer","ui_DraggableAdventurerAvatar","createRooms","tavern_QuestBoard","handleQuestClick","handleAddAdventurer","handleRemoveAdventurer","handleLaunchQuest","launchQuest","deltaResources","delta","toFixed","WarehouseStructureView","resourcesDelta","resourcesRef","getStructureName","adventurerContent","adventurersInTown","onMoveItemToAdventurer","adventurersArea","handleAdventurerTabSelected","resources_ResourcesBox","onMoveItemInWarehouse","onMoveItemFromAdventurer","prevProps","classList","remove","setTimeout","add","action1","action2","moveItemInWarehouse","StructureDetails","view","Building","buildTask","structures_ProductionStructureView","containers_structures_ResourceStructureView","structures_warehouse_WarehouseStructureView","tavern_TavernStructureView","getStructureView","Window","BackButton","backEnabled","onBack","CloseButton","closeEnabled","onClose","withWindow","WithWindow","window_Window","generator","onCheatGold","onCheatResources","StructureDetailsView","DroppableAdventurerAvatar","def","borderColor","AdventurerInfo","attributes","stats","stat","getEquipmentSlot","itemRef","adventurerEquipment","ui_EquipmentSlot","onRemoveItemFromInventory","onAssignEquipment","handleDropItemEquipment","equipmentList","assignEquipment","storeIsRehydrated","rngState","randomInt","Math","ceil","floor","dirty","random","Oracle","sort","b","questVars","oracles","getOracle","getDescription","oracle","getOptions","fight","flight","answer","option","finder","getRandomAdventurer","investigate","leave","goblinHouseHallway","strongest","getAdventurerWithHighest","walkAround","lift","treeState","vars","updateQuestVars","goldAmount","PartyWindow","getAvatars","selected","ui_DroppableAdventurerAvatar","handleAvatarClick","fromAdventurer","onMoveItemToOtherAdventurer","getBottomPart","getAdventurerInfo","getQuestDefinition","questNode","message","actions","lastLog","getTextEntry","getEncounterDefinition","currentEncounter","descriptionTextEntry","descriptionText","options","o","handleEncounterOptionClick","containers_ui_AdventurerInfo","onDispatch","onUpdateEncounterResult","Component","onAdvanceQuest","fromAdventurerId","toAdventurerId","moveItemToOtherAdventurer","nodeIndex","updateEncounterResult","QuestLineVisualization","questDefinitions","questNodes","n","spanProps","createNodeVisualization","onSelectQuest","RealWorldView","world","questLines","handleSelectQuest","window","containers_windows_PartyWindow","onOpenWindow","Placement","manifest","MediaType","CheatWindow","itemSelectRef","handleCheatGold","handleCheatWorkers","onCheatWorkers","handleCheatResources","handleCheatItem","onCheatItem","handleChangeStructureState","checked","onCheatStructureState","Built","handleChangeGold","handleChangeWorkers","handleChangeResources","onChange","getStructureRow","getItemOption","isNaN","getItemTypeOptions","resourceOrder","setStructureState","addWorkers","Menu","containers_windows_CheatWindow","Resourcebar","createItem","withRouter","containers_topbar_Resourcebar","windows_Menu","Indicator","itemsLoaded","itemsTotal","Preloader","loadMedia","promises","loadItem","catch","err","Promise","then","results","onLoadComplete","completed","asyncToGenerator","regenerator_default","mark","_callee","mediaType","_value","wrap","_context","prev","next","getType","loadImage","sent","Howl","src","abrupt","_x","complete","indicator","Indicator_Indicator","Image","resolve","reject","check","naturalWidth","removeEventListener","addEventListener","toLowerCase","endsWith","View","handleStartConstruction","startBuildingStructure","buildStructure","info","deedInfo","enoughGold","ContextView","context_ItemContext","withPopup","_React$useState","placement","bottom","_React$useState2","setPlacement","containerRect","referenceRect","popupElement","popupRect","top","opacity","left","offset","querySelector","transform","right","resolution","App","containerRef","selectStructure","structures_StructureDetailsView","handleWindowOpened","handleMediaLoadComplete","addSounds","buttonClick","handleContextualObjectActivated","selectedContext","contextInfo","contextType","contextRect","handleAppClick","activeWindows","handleWindowClose","handleWindowBack","slice","selectedStructure","handleResize","bind","assertThisInitialized","handleViewButtonClick","playSound","ContextPopup","_this$state$selectedC","context_ContextView","getActiveWindow","Provider","esm","backend","HTML5Backend","react_router_dom","Preloader_Preloader","containers_Topbar","react_router","from","to","path","component","persistor","purge","location","reload","color","containers_RealTownView","world_RealWorldView","containers_AdventurersBox","containers_log_SimpleLog","topWindow","commonWindowProps","innerHeight","parentBox","getMaxResources","getProducedResources","factor","resourceStructureDefinition","handleStructure","getQuestUpdates","qss","currentProgress","currentNodeIndex","progressIncrease","nextProgress","nodesPassed","nextNode","encounterDefintions","getRngState","Random","isLocalhost","Boolean","hostname","match","register","navigator","URL","process","toString","swUrl","fetch","response","headers","serviceWorker","ready","registration","unregister","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","generateRandomStats","strength","perception","endurance","charisma","intelligenge","agility","luck","testState","health","initialState","lastTick","Date","now","gameTick","lU","encounterResults","reward","questsToUpdate","questToUpdate","_initialState","updateStructureState","structureState","createTask","combineReducers","element","_ref5","engine","GameActionType","StructureActionType","_ref3","resourcesToAdd","resourcesToRemove","workersToAdd","workersToRemove","task","end","persistConfig","storage","version","persistedReducer","persistReducer","rootReducer","configureStore","initial","_args","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistStore","isHydrated","getState","initGame","axiosResult","axios","data","init","seed","seedrandom","continueGame","startNewGame","runGame","ReactDOM","es","containers_App","document","getElementById","registerServiceWorker","processCompletedTasks","handleCompletedTask","setInterval","resourcesUpdates","_getQuestUpdates"],"mappings":"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HC,EAAG,EACH3c,KAAMukB,GAAcH,UACpBA,UAAWE,GAAUO,aACtB,CACCnI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,QACpB/K,IAAK,0BACN,CACC8C,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcO,QAmGxBC,oBA/FyC,CACzCC,cAAe,CACXnjB,EAAKiD,MACLjD,EAAKiD,MACLjD,EAAKiD,MACLjD,EAAKkD,SACLlD,EAAKkD,UAET2f,MAAO,CAAC,CACJhI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,QACpB/K,IAAK,oBACN,CACC8C,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,QACpB/K,IAAK,oBACN,CACC8C,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,QACpB/K,IAAK,4BACN,CACC8C,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,QACpB/K,IAAK,0BACN,CACC8C,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcH,UACpBA,UAAWE,GAAUW,YACtB,CACCvI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CACCjI,EAAG,EACHC,EAAG,EACH3c,KAAMukB,GAAcI,SACrB,CA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","file":"static/js/main.5f447ab5.chunk.js","sourcesContent":["// tslint:disable:object-literal-sort-keys\nimport { LogUpdate, QuestUpdate } from \"mechanics/gameTick/quests\";\nimport { State as seedrandomStateType } from \"seedrandom\";\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    gameTick = \"gameTick\",\n}\nexport interface GameTickAction {\n    type: ActionType;\n    delta: number;\n    rngState: seedrandomStateType | null;\n    resources: ResourceStoreState;\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\n// export type IncrementResource = IncrementResource // | others\n\n// tslint:disable: align\nexport function gameTick(delta: number,\n    rngState: seedrandomStateType | null,\n    resources: ResourceStoreState,\n    quests: QuestUpdate[],\n    log: LogUpdate[],\n): GameTickAction {\n    return {\n        type: ActionType.gameTick,\n        delta,\n        rngState,\n        resources,\n        quests,\n        log,\n    };\n}\n","import { TextEntry } from \"constants/text\";\n\nexport enum LogChannel {\n    common,         // Only visible in 'all'\n    town,           // Visible in 'all' and town\n    quest,          // Visible in 'all' and the appropriate quest tab\n}\n\nexport interface LogEntry extends TextEntry {\n    time: number;\n    channel: LogChannel;\n    channelContext?: string;\n}\n","// tslint:disable: object-literal-sort-keys\nimport { LogChannel } from \"stores/logEntry\";\n\nexport enum ActionType {\n    addLogEntry = \"addLogEntry\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddLogEntryAction extends Action {\n    key: string;\n    channel: LogChannel;\n    context?: any;\n    channelContext?: string;\n}\n\nexport function addLogEntry(key: string, context?: any, channel: LogChannel = LogChannel.common, channelContext?: string): AddLogEntryAction {\n    return {\n        type: ActionType.addLogEntry,\n        key,\n        channel,\n        channelContext,\n        context,\n    };\n}\n","// tslint:disable:no-bitwise\n\n/**\n * Convert a sematic versioning string into an 32-bit integer.\n *\n * Make sure the input string is compatible with the standard found\n * at semver.org. Since this only uses 10-bit per major/minor/patch version,\n * the highest possible SemVer string would be 1023.1023.1023.\n * @param  {string} semVer SemVer string\n * @return {number}         Numeric version\n */\nexport const convertSemVerToInt = (semVer: string): number => {\n    // Split a given version string into three parts.\n    const parts = semVer.split(\".\").map((part) => Number(part));\n    // Check if we got exactly three parts, otherwise throw an error.\n    if (parts.length !== 3) {\n        throw new Error(`Received invalid version string: ${semVer}`);\n    }\n    // Make sure that no part is larger than 1023 or else it\n    // won't fit into a 32-bit integer.\n    parts.forEach((part: number) => {\n        if (part >= 1024) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let numericVersion = 0;\n    // Shift all parts either 0, 10 or 20 bits to the left.\n    for (let i = 0; i < 3; i++) {\n        numericVersion |= parts[i] << i * 10;\n    }\n    return numericVersion;\n};\n\n/**\n * Converts a 32-bit integer into a semantic versioning (SemVer) compatible string.\n * @param  {number} version Numeric version\n * @return {string}   SemVer string\n */\nexport const convertIntToSemVer = (version: number) => {\n    // Works by shifting the numeric version to the right and then masking it\n    // with 0b1111111111 (or 1023 in decimal).\n    return `${version & 1023}.${version >> 10 & 1023}.${version >> 20 & 1023}`;\n};\n","import { EquipmentType } from \"definitions/items/equipment\";\nimport { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    moveItemInInventory = \"moveItemInInventory\",\n    moveItemToOtherAdventurer = \"moveItemToOtherAdventurer\",\n    moveItemFromWarehouseToAdventurer = \"moveItemFromWarehouseToAdventurer\",\n    addItemToInventory = \"addItemToInventory\",\n    removeItemFromInventory = \"removeItemFromInventory\",\n    assignEquipment = \"assignEquipment\",\n}\n\nexport interface Action {\n    type: ActionType;\n    adventurerId: string;\n}\n\nexport interface InventoryAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface MoveItemInInventoryAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface RemoveItemFromInventoryAction extends Action {\n    fromSlot: number;\n}\n\nexport interface MoveItemToOtherAdventurerAction extends Action {\n    fromSlot: number;\n    toSlot?: number;\n    toAdventurerId: string;\n}\n\nexport interface EquipmentAction extends Action {\n    item: Item;\n    equipmentType: EquipmentType;\n}\n\nexport function moveItemInInventory(adventurerId: string, fromSlot: number, toSlot: number):\n    MoveItemInInventoryAction {\n    return {\n        type: ActionType.moveItemInInventory,\n        adventurerId,\n        fromSlot,\n        toSlot,\n    };\n}\n\n/**\n * Moves the an item from one adventurers' inventory to another\n * @param fromAdventurerId adventurer whose inventory to take the item from\n * @param fromSlot index of the inventory item\n * @param toAdventurerId player who to give the item to\n */\nexport function moveItemToOtherAdventurer(fromAdventurerId: string,\n                                          fromSlot: number,\n                                          toAdventurerId: string, toSlot?: number): MoveItemToOtherAdventurerAction {\n    return {\n        type: ActionType.moveItemToOtherAdventurer,\n        adventurerId: fromAdventurerId,\n        fromSlot,\n        toAdventurerId,\n        toSlot,\n    };\n}\n\n// If slot is not provided, will take the first empty slot\nexport function addItemToInventory(adventurerId: string, item: Item, toSlot?: number): InventoryAction {\n    return {\n        type: ActionType.addItemToInventory,\n        adventurerId,\n        item,\n        toSlot,\n    };\n}\n\nexport function removeItemFromInventory(adventurerId: string, fromSlot: number): RemoveItemFromInventoryAction {\n    return {\n        type: ActionType.removeItemFromInventory,\n        adventurerId,\n        fromSlot,\n    };\n}\n\nexport function assignEquipment(adventurerId: string, type: EquipmentType, item: Item): EquipmentAction {\n    return {\n        type: ActionType.assignEquipment,\n        adventurerId,\n        item,\n        equipmentType: type,\n    };\n}\n","import { Item } from \"definitions/items/types\";\n\n// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addItem = \"addItem\",\n    moveItemInWarehouse = \"moveItemInWarehouse\",\n    removeItem = \"removeItem\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface MoveItemInWarehouseAction extends Action {\n    fromSlot: number;\n    toSlot: number;\n}\n\nexport interface AddAction extends Action {\n    item: Item;\n    toSlot?: number;\n}\n\nexport interface RemoveItemFromWarehouseAction extends Action {\n    fromSlot: number;\n}\n\n// Adds one Item to the warehouse\n// slot is optional, will take the first empty slot if not provided\nexport function addItemToWarehouse(item: Item, toSlot?: number): AddAction {\n    return {\n        type: ActionType.addItem,\n        item,\n        toSlot,\n    };\n}\n\n// When an Item is moved from one slot to the other in the warehouse\nexport function moveItemInWarehouse(fromSlot: number, toSlot: number): MoveItemInWarehouseAction {\n    return {\n        type: ActionType.moveItemInWarehouse,\n        fromSlot,\n        toSlot,\n    };\n}\nexport function removeItemFromWarehouse(fromSlot: number): RemoveItemFromWarehouseAction {\n    return {\n        type: ActionType.removeItem,\n        fromSlot,\n    };\n}\n","import { convertSemVerToInt } from \"utils/version\";\n\n// <MAJOR>.<MINOR>.<RELEASE>\n\nconst version = \"0.0.4\";\n\nexport default version;\nexport const asInt: number = convertSemVerToInt(version);\n","\n// Things that can be dragged\nexport const DragType = {\n    ADVENTURER: \"adventurer\",   // Adventurer avatar\n    ITEM: \"item\",               // A game 'item' (equipment, etc)\n};\n\n// Source, where it comes from\nexport enum DragSourceType {\n    adventurerInventory,\n    warehouse,\n    tavern,\n    adventurerEquipment,\n}\n","import { CostStoreState } from \"reducers\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { ProductionDefinition } from \"../production/types\";\n\nexport enum StructureType {\n    resource,\n    production,\n    tavern,\n    warehouse,\n}\n\nexport interface StructureDefinition {\n    type: StructureType;\n    cost: CostStoreState;\n    levels: StructureLevelDefinition[];\n}\n\nexport interface StructureLevelDefinition {\n    displayName: string;          // At this moment we can potentially support different names depending on the level\n                                  // of the structure. But this is not implemented because I feel it can cause confusion\n                                  // todo: REMOVE\n    cost: CostStoreState;                 // in gold\n    workerCapacity: number;       // number of workers that can work at this structure at this level\n}\n\nexport interface ResourceStructureDefinition extends StructureDefinition {\n    levels: ResourceStructureLevelDefinition[];\n}\n\nexport interface ResourceStructureLevelDefinition extends StructureLevelDefinition {\n    generates: ResourceStoreState;\n}\n\nexport interface ProductionStructureDefinition extends StructureDefinition {\n    levels: ProductionStructureLevelDefinition[];\n}\n\nexport interface ProductionStructureLevelDefinition extends StructureLevelDefinition {\n    produces: ProductionDefinition[];\n}\n\nexport interface WarehouseStructureDefinition extends StructureDefinition {\n    levels: WarehouseStructureLevelDefinition[];\n}\n\nexport interface WarehouseStructureLevelDefinition extends StructureLevelDefinition {\n    maxResources: ResourceStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface TavernStructureDefinition extends StructureDefinition {\n    levels: TavernStructureLevelDefinition[];\n}\n\nexport interface TavernStructureLevelDefinition extends StructureLevelDefinition {\n    rooms: number;\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\nconst alchemist: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-alchemist-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [],\n    }, {\n        // level 2:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-alchemist-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        produces: [],\n    }],\n};\n\nexport default alchemist;\n","\nexport enum ItemType {\n    deed,\n    equipment,\n    material,\n    questItem,\n    trinket,\n    weapon,\n}\n\n// the string must correspond to a named export in /items/index.tsx\nexport enum Item {\n    // deeds\n    deedForLumbermill = \"deedForLumbermill\",\n    deedForWeaponsmith = \"deedForWeaponsmith\",\n\n    // equipment\n    boots1 = \"boots1\",\n    boots2 = \"boots2\",\n    boots3 = \"boots3\",\n    chainmailHood = \"chainmailHood\",\n    chest = \"chest\",\n    clothGloves = \"clothGloves\",\n    cowl = \"cowl\",\n    fedora = \"fedora\",\n    druidChest = \"druidChest\",\n    druidFeet = \"druidFeet\",\n    druidHands = \"druidHands\",\n    druidHead = \"druidHead\",\n    druidLegs = \"druidLegs\",\n    greaves1 = \"greaves1\",\n    greaves2 = \"greaves2\",\n    hornedHelmet = \"hornedHelmet\",\n    leatherGloves = \"leatherGloves\",\n    nomadHelmet = \"nomadHelmet\",\n    pants1 = \"pants1\",\n    pants2 = \"pants2\",\n    plateChest1 = \"plateChest1\",\n    plateChest2 = \"plateChest2\",\n    plateChest3 = \"plateChest3\",\n    plateChest4 = \"plateChest4\",\n    plateGloves1 = \"plateGloves1\",\n    plateGloves2 = \"plateGloves2\",\n    plateHelmet = \"plateHelmet\",\n    platePants = \"platePants\",\n    plateShoulders1 = \"plateShoulders1\",\n    plateShoulders2 = \"plateShoulders2\",\n    robe = \"robe\",\n    shoulders1 = \"shoulders1\",\n    shoulders2 = \"shoulders2\",\n    shoulders3 = \"shoulders3\",\n    vest = \"vest\",\n\n    // materials\n    arrowheads = \"arrowheads\",\n    bolts = \"bolts\",\n    buckle = \"buckle\",\n    chain = \"chain\",\n    cogs = \"cogs\",\n    gem = \"gem\",\n    gunpowder = \"gunpowder\",\n    ingot = \"ingot\",\n    nails = \"nails\",\n    poisonVial = \"poisonVial\",\n    ribbon = \"ribbon\",\n    rope = \"rope\",\n    scales = \"scales\",\n    spring = \"spring\",\n    thread = \"thread\",\n\n    // quest-items\n    blueprints = \"blueprints\",\n    crate = \"crate\",\n    dynamite = \"dynamite\",\n    eye = \"eye\",\n    feather = \"feather\",\n    food = \"food\",\n    heart = \"heart\",\n    horn = \"horn\",\n    key = \"key\",\n    letters = \"letters\",\n    lockPicks = \"lockPicks\",\n    oil = \"oil\",\n    orcFinger = \"orcFinger\",\n    plans = \"plans\",\n    purpleGems = \"purpleGems\",\n    runestone = \"runestone\",\n    sandwich = \"sandwich\",\n    teeth = \"teeth\",\n    tooth = \"tooth\",\n    torch = \"torch\",\n    tusk = \"tusk\",\n    vase = \"vase\",\n    vial = \"vial\",\n    weeds = \"weeds\",\n\n    // trinkets\n    ring = \"ring\",\n    magicAmulet = \"magicAmulet\",\n\n    // weapons\n    battleAxe = \"battleAxe\",\n    brassKnuckles = \"brassKnuckles\",\n    cleaver = \"cleaver\",\n    club = \"club\",\n    crossbow = \"crossbow\",\n    dagger = \"dagger\",\n    flail = \"flail\",\n    greatswordOfGwai = \"greatswordOfGwai\",\n    khopesh = \"khopesh\",\n    longbow = \"longbow\",\n    mace = \"mace\",\n    morningStar = \"morningStar\",\n    poisonedDagger = \"poisonedDagger\",\n    ravenStaff = \"ravenStaff\",\n    savageStaff = \"savageStaff\",\n    spear = \"spear\",\n    sword = \"sword\",\n    warhammer = \"warhammer\",\n}\n\nexport interface ItemDefinition {\n    item: Item;\n    itemType: ItemType;\n    subText?: string;           // todo: deprecate, store subtext in language file. use name to retrieve\n    iconImg: string;\n//    articleUndefined?: string;  // Key to text\n    unique?: boolean;           // Indicate that this item is unique.\n                                // Not actually enforced by anything,\n                                // but used to generate the article ('a' or 'the')\n}\n","import * as moment from \"moment\";\nimport \"moment-duration-format\";\n\nexport const ONE_SECOND = 1000;\nexport const TWO_SECONDS = 2000;\nexport const THREE_SECONDS = 3000;\nexport const FOUR_SECONDS = 4000;\n// ...\nexport const TEN_SECONDS = 10000;\nexport const TWENTY_SECONDS = 20000;\nexport const THIRTY_SECONDS = 30000;\n\nexport const ONE_MINUTE = 60000;\nexport const TWO_MINUTES = 120000;\nexport const THREE_MINUTES = 180000;\nexport const FOUR_MINUTES = 240000;\n\nexport const HALF_HOUR = ONE_MINUTE * 30;\nexport const ONE_HOUR = ONE_MINUTE * 60;\n\nexport const formatDuration = (time: number, unit: moment.DurationInputArg2 = \"milliseconds\" ): string => {\n    return moment.duration(time, unit)\n        .format(\"d [days] h [hours] m [min] s [sec]\", {\n        trim: \"both\",\n    });\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const boots1: ProductionDefinition = {\n    item: Item.boots1,\n    cost: {\n        resources: { wood: 2, iron: 15 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const chest: ProductionDefinition = {\n    item: Item.chest,\n    cost: {\n        resources: { wood: 10, iron: 45},\n        time: time.ONE_HOUR,\n    },\n};\nexport const cowl: ProductionDefinition = {\n    item: Item.cowl,\n    cost: {\n        resources: { iron: 15 },\n        time: time.ONE_HOUR,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport alchemist from \"./alchemist\";\nimport armoursmith from \"./armoursmith\";\nimport garden from \"./garden\";\nimport lumberMill from \"./lumberMill\";\nimport mine from \"./mine\";\nimport quarry from \"./quarry\";\nimport tannery from \"./tannery\";\nimport tavern from \"./tavern\";\nimport { ProductionStructureDefinition,\n    ResourceStructureDefinition,\n    WarehouseStructureDefinition } from \"./types\";\nimport warehouse from \"./warehouse\";\nimport weaponsmith from \"./weaponsmith\";\nimport weaver from \"./weaver\";\nimport workshop from \"./workshop\";\n\nexport enum Structure {\n    alchemist = \"alchemist\",\n    armoursmith = \"armoursmith\",\n    garden = \"garden\",\n    lumberMill = \"lumberMill\",\n    mine = \"mine\",\n    quarry = \"quarry\",\n    tavern = \"tavern\",\n    tannery = \"tannery\",\n    warehouse = \"warehouse\",\n    weaponsmith = \"weaponsmith\",\n    weaver = \"weaver\",\n    workshop = \"workshop\",\n}\n\nexport type StructureDefinition = WarehouseStructureDefinition |\nResourceStructureDefinition | ProductionStructureDefinition;\n\nconst all = {\n    alchemist,\n    armoursmith,\n    garden,\n    lumberMill,\n    mine,\n    quarry,\n    tavern,\n    tannery,\n    warehouse,\n    weaponsmith,\n    weaver,\n    workshop,\n};\n\nexport default all;\n\nexport function getDefinition(structure: string): StructureDefinition {\n    return all[structure];\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { boots1, chest, cowl } from \"../production/armour\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst armoursmith: ProductionStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.production,\n    levels: [{\n        // level 1:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ boots1 ],\n    }, {\n        // level 2:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [ boots1, chest ],\n    }, {\n        // level 3:\n        displayName: \"structure-armoursmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [ boots1, chest, cowl],\n    }],\n};\nexport default armoursmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst garden: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        displayName: \"structure-garden-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { food: 2 },\n    }, {\n        displayName: \"structure-garden-name\",\n        // level 2:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { food: 2 },\n    }, {\n        // level 3:\n        displayName: \"structure-garden-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { food: 2 },\n    }],\n};\n\nexport default garden;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst lumberMill: ResourceStructureDefinition = {\n    type: StructureType.resource,\n    cost: {\n        gold: 31,\n        time: 5000,\n    },\n    levels: [{\n        // level 0:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 1:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { wood: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-lumber-mill-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { wood: 2 },\n    }],\n};\n\nexport default lumberMill;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst mine: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-mine-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { iron: 2 },\n    }, {\n        displayName: \"structure-mine-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { iron: 2 },\n    }],\n};\nexport default mine;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst quarry: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-quarry-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { stone: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { stone: 4 },\n    }, {\n        // level 3:\n        displayName: \"structure-quarry-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { stone: 6 },\n    }],\n};\n\nexport default quarry;\n","// tslint:disable:object-literal-sort-keys\n\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst tannery: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-tannery-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { leather: 2 },\n    }, {\n        // level 2:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        generates: { leather: 5 },\n    }, {\n        // level 3:\n        displayName: \"structure-tannery-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        generates: { leather: 7 },\n    }],\n};\n\nexport default tannery;\n","// tslint:disable:object-literal-sort-keys\n\nimport { StructureType, TavernStructureDefinition } from \"./types\";\n\nconst tavern: TavernStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.tavern,\n    levels: [{\n        displayName: \"structure-tavern-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n             gold: 0,\n        },\n        rooms: 10,\n    }, {\n        // level 2:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        rooms: 12,\n    }, {\n        // level 3:\n        displayName: \"structure-tavern-name\",\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        rooms: 15,\n    }],\n};\n\nexport default tavern;\n","// tslint:disable:object-literal-sort-keys\n\nimport {  StructureType, WarehouseStructureDefinition } from \"./types\";\n\nconst warehouse: WarehouseStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.warehouse,\n    levels: [{\n        displayName: \"structure-warehouse-name\",\n        // level 1:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        maxResources: {\n            fabric: 200,\n            food: 200,\n            iron: 200,\n            leather: 200,\n            stone: 200,\n            wood: 200,\n        },\n    }, {\n        // level 2:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        maxResources: {\n            fabric: 500,\n            food: 500,\n            iron: 500,\n            leather: 500,\n            stone: 500,\n            wood: 500,\n        },\n    }, {\n        // level 3:\n        displayName: \"structure-warehouse-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        maxResources: {\n            fabric: 1000,\n            food: 1000,\n            iron: 1000,\n            leather: 1000,\n            stone: 1000,\n            wood: 1000,\n        },\n    }],\n};\n\nexport default warehouse;\n","// tslint:disable:object-literal-sort-keys\n\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const crossbow: ProductionDefinition = {\n    item: Item.crossbow,\n    cost: {\n        resources: { wood: 20, iron: 5 },\n        time: time.HALF_HOUR,\n    },\n};\nexport const longbow: ProductionDefinition = {\n    item: Item.longbow,\n    cost: {\n        resources: { wood: 40, iron: 5},\n        time: time.ONE_HOUR,\n    },\n};\nexport const poisonedDagger: ProductionDefinition = {\n    item: Item.poisonedDagger,\n    cost: {\n        resources: { wood: 50, iron: 15},\n        materials: [ Item.poisonVial ],\n        time: time.ONE_HOUR,\n    },\n};\nexport const dagger: ProductionDefinition = {\n    item: Item.dagger,\n    cost: {\n        resources: { wood: 10, iron: 10},\n        time: time.ONE_HOUR,\n    },\n};\nexport const sword: ProductionDefinition = {\n    item: Item.sword,\n    cost: {\n        resources: { wood: 10, iron: 30},\n        time:  time.ONE_HOUR,\n    },\n};\nexport const khopesh: ProductionDefinition = {\n    item: Item.khopesh,\n    cost: {\n        resources: { wood: 15, iron: 40},\n        time:  time.TWO_MINUTES,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { crossbow, dagger, khopesh, longbow, poisonedDagger, sword } from \"../production/weapons\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst weaponsmith: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [crossbow, dagger],\n    }, {\n        // level 2:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [crossbow, dagger, longbow],\n    }, {\n        // level 3:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh],\n    }, {\n        // level 4:\n        displayName: \"structure-weaponsmith-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [crossbow, dagger, longbow, sword, khopesh, poisonedDagger],\n    }],\n};\nexport default weaponsmith;\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStructureDefinition, StructureType } from \"./types\";\n\nconst weaver: ResourceStructureDefinition = {\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    type: StructureType.resource,\n    levels: [{\n        displayName: \"structure-weaver-name\",\n        // level 0:\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        generates: { fabric: 2 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 1:\n        workerCapacity: 5,\n        cost: {\n             gold: 30,\n        },\n        generates: { fabric: 5 },\n    }, {\n        displayName: \"structure-weaver-name\",\n        // level 2:\n        workerCapacity: 10,\n        cost: {\n             gold: 50,\n        },\n        generates: { fabric: 7 },\n    }],\n};\n\nexport default weaver;\n","// tslint:disable:object-literal-sort-keys\n// todo: maybe 'quest items' is not the right name\nimport * as time from \"utils/time\";\nimport { Item } from \"../items/types\";\nimport { ProductionDefinition } from \"./types\";\n\nexport const torch: ProductionDefinition = {\n    item: Item.torch,\n    cost: {\n        resources: { wood: 2, fabric: 1 },\n        time: time.ONE_MINUTE,\n    },\n};\n\nexport const sandwich: ProductionDefinition = {\n    item: Item.sandwich,\n    cost: {\n        resources: { food: 1 },\n        time: time.ONE_MINUTE / 2,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { sandwich, torch } from \"definitions/production/questItems\";\nimport { ProductionStructureDefinition, StructureType } from \"./types\";\n\nconst workshop: ProductionStructureDefinition = {\n    type: StructureType.production,\n    cost: {\n        gold: 40,\n        time: 4000,\n    },\n    levels: [{\n        // level 1:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 2,\n        cost: {\n            gold: 0,\n        },\n        produces: [ torch, sandwich ],\n    }, {\n        // level 2:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 5,\n        cost: {\n            gold: 30,\n        },\n        produces: [],\n    }, {\n        // level 3:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 10,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }, {\n        // level 4:\n        displayName: \"structure-workshop-name\",\n        workerCapacity: 14,\n        cost: {\n            gold: 50,\n        },\n        produces: [],\n    }],\n};\nexport default workshop;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"../structures\";\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.deed;\n\nexport interface DeedDefinition extends ItemDefinition {\n    structure: Structure;\n}\n\nexport const deedForLumbermill: DeedDefinition = {\n    item: Item.deedForLumbermill,\n    structure: Structure.lumberMill,\n    itemType,\n    subText: \"It allows for the construction of a lumber mill\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport const deedForWeaponsmith: DeedDefinition = {\n    item: Item.deedForWeaponsmith,\n    structure: Structure.weaponsmith,\n    itemType,\n    subText: \"It allows for the construction of a weaponsmith\",\n    iconImg: \"/img/items/deeds/deed.png\",\n};\n\nexport default {\n    deedForLumbermill,\n    deedForWeaponsmith,\n};\n","// tslint:disable:object-literal-sort-keys\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.equipment;\nconst basePath = \"/img/items/equipment/\";\n\nexport enum EquipmentType {\n    feet,\n    hands,\n    chest,\n    legs,\n    head,\n    shoulders,\n}\n\nexport interface EquipmentDefinition extends ItemDefinition {\n    equipmentType: EquipmentType;\n}\n\nconst weaponDefinitions: Record<string, EquipmentDefinition> = {\n    [Item.boots1]: {\n        item: Item.boots1,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"These boots are made for questin'\",\n        iconImg: `${basePath}boots_1.png`,\n    },\n    [Item.boots2]: {\n        item: Item.boots2,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_2.png`,\n    },\n    [Item.boots3]: {\n        item: Item.boots3,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}boots_3.png`,\n    },\n    [Item.chainmailHood]: {\n        item: Item.chainmailHood,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chainmail_hood.png`,\n    },\n    [Item.chest]: {\n        item: Item.chest,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}chest_1.png`,\n    },\n    [Item.clothGloves]: {\n        item: Item.clothGloves,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cloth_gloves.png`,\n    },\n    [Item.cowl]: {\n        item: Item.cowl,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}cowl.png`,\n    },\n    [Item.druidChest]: {\n        item: Item.druidHands,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-chest.png`,\n    },\n    [Item.druidFeet]: {\n        item: Item.druidFeet,\n        equipmentType: EquipmentType.feet,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-feet.png`,\n    },\n    [Item.druidHands]: {\n        item: Item.druidHands,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-hands.png`,\n    },\n    [Item.druidHead]: {\n        item: Item.druidHead,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-head.png`,\n    },\n    [Item.druidLegs]: {\n        item: Item.druidLegs,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}druid-legs.png`,\n    },\n    [Item.fedora]: {\n        item: Item.fedora,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"I study the blade\",\n        iconImg: `${basePath}fedora.png`,\n    },\n    [Item.greaves1]: {\n        item: Item.greaves1,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_1.png`,\n    },\n    [Item.greaves2]: {\n        item: Item.greaves2,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}greaves_2.png`,\n    },\n    [Item.hornedHelmet]: {\n        item: Item.hornedHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}horned_helmet.png`,\n    },\n    [Item.leatherGloves]: {\n        item: Item.leatherGloves,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}leather_gloves.png`,\n    },\n    [Item.nomadHelmet]: {\n        item: Item.nomadHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}nomad_helmet.png`,\n    },\n    [Item.pants1]: {\n        item: Item.pants1,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_1.png`,\n    },\n    [Item.pants2]: {\n        item: Item.pants2,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}pants_2.png`,\n    },\n    [Item.plateChest1]: {\n        item: Item.plateChest1,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_1.png`,\n    },\n    [Item.plateChest2]: {\n        item: Item.plateChest2,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_2.png`,\n    },\n    [Item.plateChest3]: {\n        item: Item.plateChest3,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_3.png`,\n    },\n    [Item.plateChest4]: {\n        item: Item.plateChest4,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_chest_4.png`,\n    },\n    [Item.plateGloves1]: {\n        item: Item.plateGloves1,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_1.png`,\n    },\n    [Item.plateGloves2]: {\n        item: Item.plateGloves2,\n        equipmentType: EquipmentType.hands,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_gloves_2.png`,\n    },\n    [Item.plateHelmet]: {\n        item: Item.plateHelmet,\n        equipmentType: EquipmentType.head,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_helmet_1.png`,\n    },\n    [Item.platePants]: {\n        item: Item.platePants,\n        equipmentType: EquipmentType.legs,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_pants1.png`,\n    },\n    [Item.plateShoulders1]: {\n        item: Item.plateShoulders1,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_1.png`,\n    },\n    [Item.plateShoulders2]: {\n        item: Item.plateShoulders2,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}plate_shoulders_2.png`,\n    },\n    [Item.robe]: {\n        item: Item.robe,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}robe_1.png`,\n    },\n    [Item.shoulders1]: {\n        item: Item.shoulders1,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_1.png`,\n    },\n    [Item.shoulders2]: {\n        item: Item.shoulders2,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_2.png`,\n    },\n    [Item.shoulders3]: {\n        item: Item.shoulders3,\n        equipmentType: EquipmentType.shoulders,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}shoulders_3.png`,\n    },\n    [Item.vest]: {\n        item: Item.vest,\n        equipmentType: EquipmentType.chest,\n        itemType,\n        subText: \"\",\n        iconImg: `${basePath}vest_1.png`,\n    },\n};\n\nexport default weaponDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.weapon;\nconst basePath = \"/img/items/weapons/\";\n\nexport enum WeaponType {\n    axe,\n    bow,\n    club,\n    crossbow,\n    fist,\n    flail,\n    hammer,\n    melee,\n    knife,\n    staff,\n    sword,\n    poleArm,\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface WeaponDefinition extends ItemDefinition {\n    weaponType: WeaponType;\n}\n\nconst weaponDefinitions: Record<string, WeaponDefinition> = {\n    [Item.battleAxe]: {\n        item: Item.battleAxe,\n        itemType,\n        weaponType: WeaponType.axe,\n        subText: \"It's an axe for battle\",\n        iconImg: `${basePath}battle_axe.png`,\n    },\n    [Item.brassKnuckles]: {\n        item: Item.brassKnuckles,\n        itemType,\n        weaponType: WeaponType.melee,\n        subText: \" Brass knuckles are pieces of metal shaped to fit around the knuckles.\",\n        iconImg: `${basePath}brass_knuckles.png`,\n    },\n    [Item.crossbow]: {\n        item: Item.crossbow,\n        itemType,\n        weaponType: WeaponType.crossbow,\n        subText: \"Shoots and reloads fast\",\n        iconImg: `${basePath}crossbow.png`,\n    },\n    [Item.cleaver]: {\n        item: Item.cleaver,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"A cleaver is a large knife that varies in its shape but usually resembles a rectangular-bladed hatchet.\",\n        iconImg: `${basePath}cleaver.png`,\n    },\n    [Item.club]: {\n        item: Item.club,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A club is among the simplest of all weapons: a short staff or stick, usually made of wood, wielded as a weapon\",\n        iconImg: `${basePath}club.png`,\n    },\n    [Item.dagger]: {\n        item: Item.dagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}dagger.png`,\n    },\n    [Item.flail]: {\n        item: Item.flail,\n        itemType,\n        weaponType: WeaponType.flail,\n        subText: \"A flail is a weapon consisting of a striking head attached to a handle by a flexible rope, strap, or chain. \",\n        iconImg: `${basePath}flail.png`,\n    },\n    [Item.greatswordOfGwai]: {\n        item: Item.greatswordOfGwai,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Finer steel was seldom forged\",\n        iconImg: `${basePath}greatsword-gwai.png`,\n        unique: true,\n    },\n    [Item.khopesh]: {\n        item: Item.khopesh,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"Dafuq is this. Can I get garlic sauce with that?\",\n        iconImg: `${basePath}khopesh.png`,\n    },\n    [Item.longbow]: {\n        item: Item.longbow,\n        itemType,\n        weaponType: WeaponType.bow,\n        subText: \"A deadly killer from long range\",\n        iconImg: `${basePath}longbow.png`,\n    },\n    [Item.mace]: {\n        item: Item.mace,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A mace is a blunt weapon, a type of club or virge that uses a heavy head on the end of a handle to deliver powerful blows.\",\n        iconImg: `${basePath}mace.png`,\n    },\n    [Item.morningStar]: {\n        item: Item.morningStar,\n        itemType,\n        weaponType: WeaponType.club,\n        subText: \"A morning star is any of several medieval club-like weapons consisting of a shaft with an attached ball adorned with one or more spikes.\",\n        iconImg: `${basePath}morning-star.png`,\n    },\n    [Item.poisonedDagger]: {\n        item: Item.poisonedDagger,\n        itemType,\n        weaponType: WeaponType.knife,\n        subText: \"Excellent for ritual sacrifice and cheese platters\",\n        iconImg: `${basePath}poisoned-dagger.png`,\n    },\n    [Item.ravenStaff]: {\n        item: Item.ravenStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Kaa, kaa!\",\n        iconImg: `${basePath}raven-staff.png`,\n    },\n    [Item.savageStaff]: {\n        item: Item.savageStaff,\n        itemType,\n        weaponType: WeaponType.staff,\n        subText: \"Savage dude\",\n        iconImg: `${basePath}savage-staff.png`,\n    },\n    [Item.spear]: {\n        item: Item.spear,\n        itemType,\n        weaponType: WeaponType.poleArm,\n        subText: \"A spear is a pole weapon consisting of a shaft, usually of wood, with a pointed head. \",\n        iconImg: `${basePath}sword.png`,\n    },\n    [Item.sword]: {\n        item: Item.sword,\n        itemType,\n        weaponType: WeaponType.sword,\n        subText: \"An elegant weapon for a more civilized age\",\n        iconImg: `${basePath}sword.png`,\n    },\n    [Item.warhammer]: {\n        item: Item.warhammer,\n        itemType,\n        weaponType: WeaponType.hammer,\n        subText: \"A war hammer is a late medieval weapon of war intended for close combat action, whose design resembles the hammer\",\n        iconImg: `${basePath}warhammer.png`,\n    },\n};\nexport default weaponDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemType } from \"./types\";\n\nconst itemType = ItemType.material;\nconst basePath = \"/img/items/materials/\";\n\nexport default {\n    [Item.arrowheads]: {\n        item: Item.arrowheads,\n        itemType,\n        iconImg: `${basePath}arrowheads.png`,\n    },\n    [Item.bolts]: {\n        item: Item.bolts,\n        itemType,\n        iconImg: `${basePath}bolts.png`,\n    },\n    [Item.buckle]: {\n        item: Item.buckle,\n        itemType,\n        iconImg: `${basePath}buckle.png`,\n    },\n    [Item.chain]: {\n        item: Item.chain,\n        itemType,\n        iconImg: `${basePath}chain.png`,\n    },\n    [Item.cogs]: {\n        item: Item.cogs,\n        itemType,\n        iconImg: `${basePath}cogs.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.ingot]: {\n        item: Item.ingot,\n        itemType,\n        iconImg: `${basePath}ingot.png`,\n    },\n    [Item.nails]: {\n        item: Item.nails,\n        itemType,\n        iconImg: `${basePath}nails.png`,\n    },\n    [Item.poisonVial]: {\n        item: Item.poisonVial,\n        itemType,\n        iconImg: `${basePath}poison-vial.png`,\n    },\n    [Item.ribbon]: {\n        item: Item.ribbon,\n        itemType,\n        iconImg: `${basePath}ribbon.png`,\n    },\n    [Item.rope]: {\n        item: Item.rope,\n        itemType,\n        iconImg: `${basePath}rope.png`,\n    },\n    [Item.gem]: {\n        item: Item.gem,\n        itemType,\n        iconImg: `${basePath}gem.png`,\n    },\n    [Item.gunpowder]: {\n        item: Item.gunpowder,\n        itemType,\n        iconImg: `${basePath}gunpowder.png`,\n    },\n    [Item.scales]: {\n        item: Item.scales,\n        itemType,\n        iconImg: `${basePath}scales.png`,\n    },\n    [Item.spring]: {\n        item: Item.spring,\n        itemType,\n        iconImg: `${basePath}spring.png`,\n    },\n    [Item.thread]: {\n        item: Item.thread,\n        itemType,\n        iconImg: `${basePath}thread.png`,\n    },\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.questItem;\nconst basePath = \"/img/items/quest-items/\";\n\nconst questItemDefinitions: Record<string, ItemDefinition> = {\n    [Item.blueprints]: {\n        item: Item.blueprints,\n        itemType,\n        iconImg: `${basePath}blueprints.png`,\n    },\n    [Item.crate]: {\n        item: Item.crate,\n        itemType,\n        iconImg: `${basePath}crate.png`,\n    },\n    [Item.dynamite]: {\n        item: Item.dynamite,\n        itemType,\n        iconImg: `${basePath}dynamite.png`,\n    },\n    [Item.eye]: {\n        item: Item.eye,\n        itemType,\n        iconImg: `${basePath}eye.png`,\n    },\n    [Item.feather]: {\n        item: Item.feather,\n        itemType,\n        iconImg: `${basePath}feather.png`,\n    },\n    [Item.food]: {\n        item: Item.food,\n        itemType,\n        iconImg: `${basePath}food.png`,\n    },\n    [Item.heart]: {\n        item: Item.heart,\n        itemType,\n        iconImg: `${basePath}heart.png`,\n    },\n    [Item.horn]: {\n        item: Item.horn,\n        itemType,\n        iconImg: `${basePath}horn.png`,\n    },\n    [Item.key]: {\n        item: Item.key,\n        itemType,\n        iconImg: `${basePath}key.png`,\n    },\n    [Item.letters]: {\n        item: Item.letters,\n        itemType,\n        iconImg: `${basePath}letters.png`,\n    },\n    [Item.lockPicks]: {\n        item: Item.lockPicks,\n        itemType,\n        iconImg: `${basePath}lock-picks.png`,\n    },\n    [Item.oil]: {\n        item: Item.oil,\n        itemType,\n        iconImg: `${basePath}oil.png`,\n    },\n    [Item.orcFinger]: {\n        item: Item.orcFinger,\n        itemType,\n        iconImg: `${basePath}orc-finger.png`,\n    },\n    [Item.plans]: {\n        item: Item.plans,\n        itemType,\n        iconImg: `${basePath}plans.png`,\n    },\n    [Item.purpleGems]: {\n        item: Item.purpleGems,\n        itemType,\n        iconImg: `${basePath}purple-gems.png`,\n    },\n    [Item.runestone]: {\n        item: Item.runestone,\n        itemType,\n        iconImg: `${basePath}runestone.png`,\n    },\n    [Item.sandwich]: {\n        item: Item.sandwich,\n        itemType,\n        iconImg: `${basePath}sandwich.png`,\n    },\n    [Item.teeth]: {\n        item: Item.teeth,\n        itemType,\n        iconImg: `${basePath}teeth.png`,\n    },\n    [Item.tooth]: {\n        item: Item.tooth,\n        itemType,\n        iconImg: `${basePath}tooth.png`,\n    },\n    [Item.torch]: {\n        item: Item.torch,\n        itemType,\n        iconImg: `${basePath}torch.png`,\n    },\n    [Item.tusk]: {\n        item: Item.tusk,\n        itemType,\n        iconImg: `${basePath}tusk.png`,\n    },\n    [Item.vase]: {\n        item: Item.vase,\n        itemType,\n        iconImg: `${basePath}vase.png`,\n    },\n    [Item.vial]: {\n        item: Item.vial,\n        itemType,\n        iconImg: `${basePath}vial.png`,\n    },\n    [Item.weeds]: {\n        item: Item.weeds,\n        itemType,\n        iconImg: `${basePath}weeds.png`,\n    },\n};\n\nexport default questItemDefinitions;\n","// tslint:disable:object-literal-sort-keys\n\nimport { Item, ItemDefinition, ItemType } from \"./types\";\n\nconst itemType = ItemType.trinket;\nconst basePath = \"/img/items/trinkets/\";\n\nconst trinketDefinitions: Record<string, ItemDefinition> = {\n    [Item.magicAmulet]: {\n        item: Item.magicAmulet,\n        itemType,\n        iconImg: `${basePath}magic_amulet.png`,\n    },\n    [Item.ring]: {\n        item: Item.ring,\n        itemType,\n        iconImg: `${basePath}ring.png`,\n    },\n};\n\nexport default trinketDefinitions;\n","import deeds from \"./deeds\";\nimport equipment from \"./equipment\";\nimport materials from \"./materials\";\nimport questItems from \"./questItems\";\nimport trinkets from \"./trinkets\";\nimport { Item, ItemDefinition } from \"./types\";\nimport weapons from \"./weapons\";\n\nconst all = {\n    ...deeds,\n    ...equipment,\n    ...materials,\n    ...questItems,\n    ...trinkets,\n    ...weapons,\n};\n\nexport default all;\n\nexport function getDefinition(item: Item): ItemDefinition {\n    return all[item];\n}\n","import { TextEntry } from \"constants/text\";\nimport itemDefinitions, { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { Resource } from \"definitions/resources\";\nimport * as Handlebars from \"handlebars\";\nimport { Structure } from \"definitions/structures\";\n\nexport abstract class TextManager {\n\n    public static init(texts: Record<string, string>, precompile = true) {\n        this.texts = texts;\n        this.templates = {};\n        if (precompile) {\n            this.compileAll();\n        }\n        this.initialized = true;\n    }\n\n//    public static addTexts(texts: Record<string, string>)\n    public static get(key: string, context?: any): string {\n        if (!this.initialized) {\n            throw new Error(`Error ${this} not initialized!`);\n        }\n        const template = this.getTemplate(key);\n        if (!template) {\n            // tslint:disable-next-line: no-console\n            console.error(`Key '${key}' not found in TextManager`);\n            return `<<'${key}' missing>>`;\n        }\n        return template(context);\n    }\n\n    public static getTextEntry(textEntry: TextEntry): string {\n        return this.get(textEntry.key, textEntry.context);\n    }\n\n    public static getTemplate(key: string) {\n        let template = this.templates[key];\n        if (!template && this.texts[key]) {\n            // Template not found but key is defined. Needs to be compiled\n            this.compile(key, this.texts[key]);\n            template = this.templates[key];\n        }\n        return template;\n    }\n\n    public static getQuestTitle(name: string) {\n        return this.get(`quest-${name}-title`);\n    }\n\n    public static getQuestDescription(name: string) {\n        return this.get(`quest-${name}-description`);\n    }\n\n    public static getResourceName(type: Resource) {\n        return this.get(`resource-${type}-name`);\n    }\n\n    public static getItemName(item: Item): string {\n        const itemType = ItemType[getDefinition(item).itemType];\n        return this.get(`item-${itemType}-${item}-name`);\n    }\n\n    public static getStructureName(structure: Structure): string {\n        return this.get(`structure-${structure}-name`);\n    }\n\n    private static initialized = false;\n    private static texts: Record<string, string>;\n    private static templates: Record<string, Handlebars.TemplateDelegate<any>>;\n\n    private static compileAll() {\n        Object.keys(this.texts).forEach((key: string) =>  {\n            this.compile(key, this.texts[key]);\n        });\n    }\n\n    private static compile(key: string, value: string) {\n        const template = Handlebars.compile(value);\n        this.templates[key] = template;\n    }\n}\n\nHandlebars.registerHelper(\"item:name\", (item: Item, article?: string) => {\n    if (!itemDefinitions[item]) {\n        return new Handlebars.SafeString(`<<ITEM DEFINITION NOT FOUND: ${item}>>`);\n    }\n    switch (article) {\n        case \"aA\":  // article Auto\n            return itemArticleAuto(item);\n        case \"aD\":  // article Defined \"a sword\"\n            return itemArticleDefined(item);\n        case \"aU\":  // article Defined \"the sword\"\n            return itemArticleDefined(item);\n        default:\n            // No article\n            const name = itemDefinitions[item].name;\n            return new Handlebars.SafeString(name);\n    }\n});\nHandlebars.registerHelper(\"structure:name\", (structure: string) => {\n    const name = TextManager.get(`structure-${structure}-name`);\n    return new Handlebars.SafeString(name);\n});\n\nconst itemArticleAuto = (item: Item) => {\n    return itemArticleUndefined(item);\n};\n\nconst itemArticleUndefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-undefined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n\nconst itemArticleDefined = (item: Item) => {\n    const name = TextManager.getItemName(item);\n    const articleTemplate = TextManager.getTemplate(\"common-article-defined\");\n    return new Handlebars.SafeString(`${articleTemplate({ noun: name})}`);\n};\n","import { ItemDefinition } from \"definitions/items/types\";\n\n// Things that can be shown on the ContextView\nexport enum ContextType {\n    item,\n}\n\nexport type ContextInfo = ItemDefinition;\n","export enum IconSize {\r\n    smallest,\r\n    small,\r\n    medium,\r\n    big,\r\n    biggest,\r\n}\r\n\r\nexport const getClassName = (size?: IconSize): string => {\r\n    switch (size) {\r\n        case IconSize.smallest:\r\n            return \"common-icon-smallest\";\r\n        case IconSize.small:\r\n            return \"common-icon-small\";\r\n        case IconSize.medium:\r\n            return \"common-icon-medium\";\r\n        case IconSize.big:\r\n            return \"common-icon-big\";\r\n        case IconSize.biggest:\r\n            return \"common-icon-biggest\";\r\n    }\r\n    return getClassName(IconSize.medium);\r\n};\r\n","import * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/adventureravatar.css\";\n\nexport interface Props {\n    adventurer: AdventurerStoreState;\n    className?: string;\n    displayName?: boolean;\n    onClick?: (adventurerId: string) => void;\n}\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nconst AdventurerAvatar = (props: Props) => {\n    const {\n        adventurer,\n    } = props;\n\n    const className = (props.className || \"\") + \" avatar\";\n\n    const handleClick = () => {\n        if (props.onClick) {\n            props.onClick(props.adventurer.id);\n        }\n    };\n    return (\n        <div className = { className }\n            style={{ backgroundImage: `url(${adventurer.avatarImg})` }}\n            onClick={ () => handleClick() }>\n            <div className=\"sizer\"/>\n            {\n                props.displayName && <div className=\"name\">\n                    { adventurer.name }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default AdventurerAvatar;\n","import { AppContext } from \"components/App\";\nimport \"components/ui/css/common/icon.css\";\nimport { ContextType } from \"constants/context\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport { getDefinition } from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport \"./css/itemicon.css\";\n\nexport interface Props {\n    item: Item;\n    onClick?: (event: React.MouseEvent) => void;\n    size?: IconSize;\n    showContext?: boolean;\n}\n\nconst ItemIcon: React.FC<Props> = (props) => {\n    const { item } = props;\n    const itemDefinition = getDefinition(item);\n    const context = React.useContext(AppContext)!;\n    const ref = React.useRef(null);\n\n    if (!itemDefinition) {\n        // tslint:disable-next-line: no-console\n        console.warn(`could not find definition for ${item}`);\n    }     // todo: [10/07/2019] assert\n\n    const handleClick = (event: React.MouseEvent) => {\n        if (props.showContext !== false) {\n            const origin = (event.currentTarget as HTMLElement);\n            const originRect = origin.getBoundingClientRect();\n            context.onContextualObjectActivated(\n                ContextType.item,\n                getDefinition(item),\n                ref,\n                originRect,\n            );\n        }\n\n        if (props.onClick) {\n            props.onClick(event);\n        }\n    };\n\n    const className = \"item-icon \" + getClassName(props.size);\n\n    return (\n        <div className = { className }\n            onClick = { handleClick }\n            style = {{\n                backgroundImage: `url(${itemDefinition.iconImg})`,\n            }}>\n        </div>\n    );\n};\n\nexport default ItemIcon;\n","import { Encounter } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\n\nexport enum QuestStatus {\n    unavailable,\n    available,  // on the quest board\n    active,\n    completed,\n    // todo: failed?\n}\n\nexport interface QuestReward {\n    gold?: number;\n    items?: Item[];\n}\n\nexport interface QuestStoreState {\n    name: string;\n    status: QuestStatus;\n    party: string[];        // list of adventurer ids\n    progress: number;       // Which questnode the party is at currently\n    questVars: any;\n    encounterResults: string[];   // Store what option the place chose during an encounter // OBSOLETE\n    icon: string;\n\n    currentEncounter: Encounter | null;\n    reward?: QuestReward;\n}\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport ItemIcon from \"./ItemIcon\";\n\nexport interface Props {\n    index: number;\n    item: Item;\n    sourceType: DragSourceType;\n    sourceId?: string;\n    size?: IconSize;\n    onClick?: (event: React.MouseEvent) => void;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface InventoryItemDragInfo {\n    item: Item;\n    inventorySlot?: number;\n    sourceId?: string;\n    sourceType: DragSourceType;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst source: DragSourceSpec<Props, InventoryItemDragInfo> = {\n    beginDrag(props: Props) {\n        // Return the data describing the dragged item\n        return {\n            inventorySlot: props.index,\n            item: props.item,\n            sourceId: props.sourceId,\n            sourceType: props.sourceType,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableItemIcon extends React.Component<Props & CollectedProps > {\n\n    public render() {\n        const { item, onClick, isDragging, connectDragSource, size } = this.props;\n\n        const handleClick = (event: React.MouseEvent) => {\n            if (onClick) {\n                onClick(event);\n            }\n        };\n        if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }\n        return connectDragSource(\n            <div>\n                <ItemIcon\n                    item = { item }\n                    onClick = { handleClick }\n                    size = { size }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props, CollectedProps>(DragType.ITEM, source, collect)(DraggableItemIcon);\n","import { AppContext } from \"components/App\";\nimport { MediaItem } from \"components/preloading/Preloader\";\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport * as React from \"react\";\n\n// Sharing context within the entire App\nexport interface AppContextProps {\n    onContextualObjectActivated: (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => void;\n    onOpenWindow: (window: React.ReactElement) => void;\n    media: MediaItem[];\n}\n\nexport const withAppContext = <TWrappedComponentProps extends AppContextProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    type WrappedComponentPropsExceptProvided = Exclude<keyof TWrappedComponentProps, keyof AppContextProps>;\n    type ForwardedProps = Pick<TWrappedComponentProps, WrappedComponentPropsExceptProvided>;\n    return class WithContext extends React.Component<ForwardedProps> {\n        public render() {\n            return (\n                <AppContext.Consumer>\n                    {(context: any) => <WrappedComponent {...this.props } {...context} />}\n                </AppContext.Consumer>\n            );\n        }\n    };\n};\n","import { DragType } from \"constants/dragging\";\nimport { getClassName, IconSize } from \"constants/icons\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props)  {\n        return props.empty;\n    },\n};\n\nexport interface Props {\n    empty: boolean;\n    onDrop: (item: any) => void;\n    size?: IconSize;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The InventorySlot displays a slot in which an item can be placed.\n */\nclass InventorySlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        const isActive = isOver && canDrop;\n\n        let borderColor = \"#1b8417\";\n        if (isActive) {\n            borderColor = \"#e2bc23\";\n        } else if (canDrop) {\n            borderColor = \"#7ea752\";\n        }\n        const className = \"inventory-item \" + getClassName(this.props.size);\n\n        return connectDropTarget(\n            <div className = { className }>\n                { this.props.children }\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(InventorySlot);\n","import DraggableItemIcon, {InventoryItemDragInfo} from \"components/ui/DraggableItemIcon\";\nimport { ContextType } from \"constants/context\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { IconSize } from \"constants/icons\";\nimport itemDefinitions from \"definitions/items\";\nimport {Item} from \"definitions/items/types\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport \"./css/inventory.css\";\nimport InventorySlot from \"./InventorySlot\";\n\nexport interface Props {\n    items: Array<Item|null>;\n    sourceId?: string;   // who does this inventory belong to?\n    sourceType: DragSourceType;\n    iconSize?: IconSize;\n    onDropItem: (item: Item, fromSlot: number, toSlot: number, sourceType: DragSourceType, sourceId?: string) => void;\n}\n\n/**\n * Inventory is used to show Items. They can be dragged about\n * @param props\n */\nconst Inventory = (props: Props & AppContextProps) => {\n    const slots = [];\n    for (let i = 0; i < props.items.length; i++) {\n        let contents;\n        const item = props.items[i];\n        const handleDrop = (dragInfo: InventoryItemDragInfo) => {\n            /*if (dragInfo.inventorySlot === i && dragInfo.sourceType === props.sourceType && dragInfo.sourceId === props.sourceId) {\n                // TODO: Swap items?!\n                return;\n            }*/\n\n            if (props.onDropItem) {\n                const {inventorySlot: fromSlot} = dragInfo;\n                props.onDropItem(dragInfo.item, fromSlot!, i, dragInfo.sourceType, dragInfo.sourceId);\n           }\n        };\n\n        if (item) {\n            contents = <DraggableItemIcon\n                index = { i }\n                sourceId = { props.sourceId }\n                sourceType = { props.sourceType }\n                item = { item }\n            >\n            </DraggableItemIcon>;\n       }\n\n        const slot = <InventorySlot\n            key = { `inventory-slot-${i}` }\n            empty = { contents === undefined }\n            size = { props.iconSize }\n            onDrop = { handleDrop }\n        >\n                { contents }\n        </InventorySlot>;\n        slots.push(slot);\n   }\n    return <div className = \"inventory\">\n        {slots}\n    </div>;\n};\nexport default withAppContext(Inventory); // todo: we don't need appcontext\n","// TODO: Better name than this\r\n\r\nimport { DragSourceType } from \"constants/dragging\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport { QuestStoreState } from \"stores/quest\";\r\nimport { TextManager } from \"utils/textManager\";\r\nimport \"./css/adventurersbox.css\";\r\nimport AdventurerAvatar from \"./ui/AdventurerAvatar\";\r\nimport Inventory from \"./ui/inventory/Inventory\";\r\n\r\nexport interface DispatchProps {\r\n    onMoveItemInInventory?: (adventurerId: string, fromSlot: number, toSlot: number) => void;\r\n    onMoveItemFromWarehouseToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\r\n}\r\n\r\nexport interface StateProps {\r\n    quests: QuestStoreState[];\r\n    groupedAdventurers: Record<string, AdventurerStoreState[]>; // keyed by party\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface Props {\r\n}\r\n\r\ninterface LocalState {\r\n    selectedAdventurer: string|null;\r\n}\r\n\r\ntype AllProps = Props & StateProps & DispatchProps;\r\n\r\n/**\r\n * Adventurers grouped by quest\r\n */\r\nclass AdventurersBox extends React.Component<AllProps, LocalState> {\r\n\r\n    constructor(props: AllProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedAdventurer: null,\r\n        };\r\n    }\r\n\r\n    public render() {\r\n\r\n        const generateRow = (group: string, adventurers: AdventurerStoreState[]): JSX.Element => {\r\n            // group is either the string \"solo\" or a partyId\r\n            const selectedAdventurer = adventurers\r\n                .find((adventurer) => adventurer.id === this.state.selectedAdventurer);\r\n            let adventurerInfo = null;\r\n            if (selectedAdventurer) {\r\n                const handleDropItem = (item: Item, fromSlot: number,\r\n                                        toSlot: number, sourceType: DragSourceType): void => {\r\n                    switch (sourceType) {\r\n                        case DragSourceType.adventurerInventory:\r\n                            if (this.props.onMoveItemInInventory) {\r\n                                this.props.onMoveItemInInventory(selectedAdventurer.id, fromSlot, toSlot);\r\n                            }\r\n                            break;\r\n                        case DragSourceType.warehouse:\r\n                            if (this.props.onMoveItemFromWarehouseToAdventurer) {\r\n                                this.props.onMoveItemFromWarehouseToAdventurer(selectedAdventurer.id,\r\n                                    item, fromSlot, toSlot);\r\n                            }\r\n                            break;\r\n                    }\r\n                };\r\n                adventurerInfo = <div className=\"adventurer-info\">\r\n                    <div>{ selectedAdventurer.name } </div>\r\n                    <div className=\"adventurer-info-container\">\r\n                        <div className=\"equipment\">\r\n                            <br />\r\n                            [ TODO: GEAR ]\r\n                        </div>\r\n                        <Inventory\r\n                            items = { selectedAdventurer.inventory }\r\n                            sourceId = { selectedAdventurer.id }\r\n                            sourceType = { DragSourceType.adventurerInventory}\r\n                            onDropItem = { handleDropItem }\r\n                        />\r\n                    </div>\r\n                </div>;\r\n            }\r\n\r\n            const quest = this.props.quests.find((q) => q.name === group);\r\n            let name = \"\";\r\n            let sigilImgPath = \"\";\r\n            if (quest) {\r\n                sigilImgPath = `img/sigils/${ quest.icon }`;\r\n                name = TextManager.getQuestTitle(quest.name);\r\n            }\r\n            return <li key = { group } className = { \"group\" }>\r\n                <div\r\n                    className = \"sigil\"\r\n                    style = { { backgroundImage: `url(${sigilImgPath})`} }\r\n                ></div>\r\n                <span className = \"title\" title = { name }> { name } </span>\r\n                <ul className = \"adventurer-portraits\">\r\n                { adventurers.map((adventurer) => generatePortrait(adventurer)) }\r\n                </ul>\r\n                { adventurerInfo }\r\n            </li>;\r\n        };\r\n\r\n        const generatePortrait = (adventurer: AdventurerStoreState) => {\r\n            const handleClick = () => {\r\n                const selectedAdventurer = this.state.selectedAdventurer === adventurer.id ? null : adventurer.id;\r\n                this.setState({\r\n                    selectedAdventurer,\r\n                });\r\n            };\r\n            const className = adventurer.id === this.state.selectedAdventurer ? \"selected\" : undefined;\r\n            return <li key={ adventurer.id } className={ className } >\r\n                <AdventurerAvatar adventurer= { adventurer } onClick={ handleClick } />\r\n            </li>;\r\n        };\r\n\r\n        const generateRows = () => {\r\n            const rows = Object.keys(this.props.groupedAdventurers)\r\n                .map((group) => generateRow(group, this.props.groupedAdventurers[group]));\r\n            return rows;\r\n        };\r\n\r\n        return (\r\n            <div className=\"adventurers-box\">\r\n                <h3>Adventurers</h3>\r\n                <ul>\r\n                { generateRows() }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdventurersBox;\r\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getAdventurers = (state: StoreState): AdventurerStoreState[] => state.adventurers;\nconst getQuests = (state: StoreState): QuestStoreState[] => state.quests;\n\nconst groupAdventurersByQuest = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): Record<string, AdventurerStoreState[]> => {\n    const foundInParty: AdventurerStoreState[] = []; // store the adventurers in parties in a temp array\n\n    const adventurersOnQuest = (quest: QuestStoreState): AdventurerStoreState[] => {\n        const party: string[] = quest.party;\n        return party.map((id: string) => findAdventurerById(id)!);\n    };\n\n    const findAdventurerById = (id: string): AdventurerStoreState | undefined => {\n        return adventurers.find((a) => a.id === id);\n    };\n\n    const groupedAdventurers = Object.values(quests).reduce((acc, val: QuestStoreState) => {\n        const foundAdventurers = adventurersOnQuest(val);\n        if (val.status === QuestStatus.active) {\n            // Only active quests\n            acc[val.name] = foundAdventurers;\n        }\n        foundInParty.push(...foundAdventurers);\n        return acc;\n    }, {});\n\n    // Add a special group called 'solo' for those adventurers not in a party\n    const soloKey = \"solo\";\n    groupedAdventurers[soloKey] = adventurers.filter((a) => foundInParty.indexOf(a) === -1);\n\n    return groupedAdventurers;\n};\n\nconst getAdventurersInTown = (adventurers: AdventurerStoreState[], quests: QuestStoreState[]): AdventurerStoreState[] => {\n    // Get an array of all adventurer ids on any active quest\n    const adventurersOnQuest = quests.reduce<string[]>((acc, val: QuestStoreState) => {\n        if (val.status === QuestStatus.active) {\n            acc.push(...val.party);\n        }\n        return acc;\n    }, []);\n\n    return adventurers.filter((a) => adventurersOnQuest.indexOf(a.id) === -1);\n};\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersGroupedByQuest = createSelector([\n    getAdventurers,\n    getQuests],\n    groupAdventurersByQuest,\n);\n\n/** Returns an object keyed by active quests whose value is a list of AdventurerStoreState */\nexport const selectAdventurersInTown = createSelector([\n    getAdventurers,\n    getQuests],\n    getAdventurersInTown,\n);\n","import SquareIconButton from \"components/widgets/SquareIconButton\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport * as React from \"react\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/simplelog.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface StateProps  {\n    logEntries: LogEntry[];\n    questNames: string[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nenum ChannelType {\n    all,\n    town,\n    quest,\n}\n\ninterface ChannelDefinition {\n    label: string;\n    tabType: ChannelType;\n    tabId: string;\n    channelContext?: string;\n}\n\ninterface LocalState {\n    selectedTabId: string;\n    expanded: boolean;\n}\n\nclass SimpleLog extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            expanded: false,\n            selectedTabId: \"all\",\n        };\n    }\n\n    public render() {\n\n        const channels: ChannelDefinition[] = [{\n            label: TextManager.get(\"common-log-tab-all\"),\n            tabId: \"all\",\n            tabType: ChannelType.all,\n        }, {\n            label: TextManager.get(\"common-log-tab-town\"),\n            tabId: \"town\",\n            tabType: ChannelType.town,\n        }];\n\n        this.props.questNames.forEach((questName) => {\n            channels.push({\n                channelContext: questName,\n                label: TextManager.getQuestTitle(questName),\n                tabId: `quest-${questName}`,\n                tabType: ChannelType.quest,\n            });\n        });\n\n        let logEntries: LogEntry[] = [];\n        const currentTab = channels.find((t) => t.tabId === this.state.selectedTabId)!;\n        switch (currentTab.tabType) {\n            case ChannelType.all:\n                // All the things\n                logEntries = this.props.logEntries;\n                break;\n\n            case ChannelType.town:\n                // Only town\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.town);\n                break;\n\n            case ChannelType.quest:\n                // Only the selected quest\n                logEntries = this.props.logEntries.filter((lE) => lE.channel === LogChannel.quest && lE.channelContext === currentTab.channelContext);\n                break;\n        }\n\n        const getLogEntryRow = (logEntry: LogEntry) => {\n            const text = TextManager.get(logEntry.key, logEntry.context);\n            return <div className = \"entry\" key={ logEntry.time }>\n                { text }\n            </div>;\n        };\n\n        const Tabs = channels.map((tab) => {\n            return <Tab id = { tab.tabId } key = { tab.tabId } >{ tab.label }</Tab>;\n        });\n\n        return <div className = { `log ${this.state.expanded ? \"expanded\" : \"\"}` }>\n            <div className = \"tab-bar\">\n                <Tabstrip className = \"tabs\"  onTabSelected = { (tabId: string) => this.handleTabSelected(tabId) } >\n                    { Tabs }\n                </Tabstrip>\n                <SquareIconButton className = \"expand-button\" onClick = { () => this.handleToggleExpand() } text = { this.state.expanded ? \"▼\" : \"▲\" }/>\n            </div>\n            <div className = \"log-entries\">\n                { logEntries.map((entry) => getLogEntryRow(entry))}\n            </div>\n        </div>;\n    }\n\n    private handleTabSelected(tabId: string) {\n        this.setState({\n            selectedTabId: tabId,\n        });\n    }\n\n    private handleToggleExpand() {\n        this.setState({\n            expanded: !this.state.expanded,\n        });\n    }\n}\n\nexport default SimpleLog;\n","import { addItemToInventory, moveItemInInventory } from \"actions/adventurers\";\nimport { removeItemFromWarehouse } from \"actions/items\";\nimport AdventurersBox, { DispatchProps, Props, StateProps } from \"components/AdventurersBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectAdventurersGroupedByQuest } from \"selectors/adventurers\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n\n    return {\n        groupedAdventurers: selectAdventurersGroupedByQuest(store),\n        quests: store.quests,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onMoveItemFromWarehouseToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\n            const removeAction = removeItemFromWarehouse(fromSlot);\n            dispatch(removeAction);\n\n            const addAction = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(addAction);\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurersBox);\n","import * as React from \"react\";\nimport \"./css/squareiconbutton.css\";\n\nexport interface Props {\n    text: string; /* temp */\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n}\n\ntype AllProps = Props;\n\nconst SquareIconButton = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = props.className || \"\";\n    return <div className = { `ui-button widgets-squareiconbutton ${className}` } onClick = { handleClick }>\n        { props.text }\n    </div>;\n};\n\nexport default SquareIconButton;\n","import * as React from \"react\";\nimport \"./css/tabstrip.css\";\n\nexport interface Props {\n    id: string;\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    active?: boolean;\n    children?: any;\n}\n\ntype AllProps = Props;\n\nconst Tab = (props: AllProps) => {\n    const handleClick = (e: React.MouseEvent<HTMLLIElement>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n    const className = ((props.active) ? \"active\" : \"\") + (props.className || \"\");\n    return <li className = { `widget-tab ${className}` } onClick = { handleClick } >\n        { props.children }\n    </li>;\n};\n\nexport default Tab;\n","import React, { useState } from \"react\";\nimport \"./css/tabstrip.css\";\nimport { Props as TabProps } from \"./Tab\";\n\nexport interface Props {\n    className?: string;\n    onClick?: React.MouseEventHandler<Element>;\n    onTabSelected?: (tabId: string) => void;\n    children?: any;\n}\n\ntype AllProps = Props;\nconst Tabstrip = (props: AllProps) => {\n    let initialSelectedTab = null;\n    if (props.children && props.children.length) {\n        initialSelectedTab = props.children[0].props.id;\n    }\n    const [activeTab, setActiveTab] = useState<string|null>(initialSelectedTab);\n    const className = props.className || \"\";\n\n    const children = React.Children.map(props.children, (child: React.ReactElement<TabProps>) => {\n        const clone: React.ReactElement<TabProps> = React.cloneElement(child, {\n            active: child.props.id === activeTab,\n            onClick: () => { handleTabClick(child.props.id); },\n        });\n        return clone;\n    });\n\n    const handleTabClick = (tabId: string) => {\n        setActiveTab(tabId);\n        if (props.onTabSelected) {\n            props.onTabSelected(tabId);\n        }\n    };\n\n    const handleClick = (e: React.MouseEvent<Element>) => {\n        if (props.onClick) {\n            props.onClick(e);\n        }\n    };\n\n    return <ul className = { `widget-tabstrip ${className}` } onClick = { handleClick } >\n        { children }\n    </ul>;\n};\n\nexport default Tabstrip;\n","\nexport enum StructureState {\n    NotBuilt,\n    Building,\n    Built,\n}\n\nexport interface StructureStoreState {\n    level: number;\n    workers: number;\n    state: StructureState;\n}\nexport const initialState: StructureStoreState = {\n    level: 0,\n    state: StructureState.NotBuilt,\n    workers: 0,\n};\n","import { TextEntry } from \"constants/text\";\nimport { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { LogChannel, LogEntry } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nconst getQuests = (state: StoreState) => state.quests;\nconst getLog = (state: StoreState) => state.log;\n\nconst activeQuests = (quests: QuestStoreState[]) => {\n    // returns the names of the active quests\n    return quests.filter((q) => q.status === QuestStatus.active).map((q) => q.name);\n};\n\nexport const selectActiveQuests = createSelector([\n    getQuests],\n    activeQuests,\n);\n\n/**\n * Returns the most recent log entry for a given quest\n */\nexport const selectLastQuestLogEntry = (state: StoreState, questName: string) => createSelector([\n    getLog],\n    (log: LogEntry[]): TextEntry | undefined => {\n        const questLog = log.find((l) => l.channel === LogChannel.quest && l.channelContext === questName);\n        return questLog;\n    },\n)(state);\n","import SimpleLog, { DispatchProps, Props, StateProps } from \"components/log/SimpleLog\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectActiveQuests } from \"selectors/quests\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        logEntries: store.log,\n        questNames: selectActiveQuests(store),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n    };\n};\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(SimpleLog);\n","import { MediaItem } from \"components/preloading/Preloader\";\nimport { Howl } from \"howler\";\n\nexport enum MusicTrack {\n    town,\n    world,\n}\n\nexport enum Sound {\n    buttonClick,\n}\n\nlet media: MediaItem[];\n\nconst musicTracks: { [key: number]: Howl; } = {};\nlet currentMusicTrack: MusicTrack|null = null;\n\nconst sounds: { [key: number]: Howl; } = {};\n\nexport class SoundManager {\n    public static loadMedia(m: MediaItem[]) {\n        media = m;\n    }\n\n    public static addSounds(soundList: Record<Sound, string>) {\n        Object.entries(soundList).forEach(([key, value]) => {\n            sounds[key] = media.find((m) => m.url === value)!.content;\n        });\n    }\n\n    public static playSound(sound: Sound) {\n        const howl = sounds[sound];\n        howl.play();\n    }\n\n    public static addMusicTrack(track: MusicTrack, url: string) {\n        const sound = media.find((m) => m.url === url);\n        if (!sound) {\n            throw new Error(`No sound found at ${url}`);\n        }\n        if (!musicTracks.hasOwnProperty(track)) {\n            musicTracks[track] = sound.content as Howl;\n        }\n    }\n\n    /**\n     * Fades out currently playing music and fades new music in\n     * @param track\n     */\n    public static playMusicTrack(track: MusicTrack) {\n        if (currentMusicTrack !== null) {\n            const currentMusic: Howl = musicTracks[currentMusicTrack];\n            currentMusic.fade(1, 0, 500);\n        }\n        const nextMusic = musicTracks[track];\n        if (!nextMusic.playing()) {\n            nextMusic.loop(true);\n            nextMusic.play();\n        }\n        nextMusic.fade(0, 1, 500);\n\n        currentMusicTrack = track;\n    }\n}\n","import structureDefinitions, { Structure  } from \"definitions/structures\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport Konva from \"konva\";\nimport * as React from \"react\";\nimport { Image, Layer, Stage, Text } from \"react-konva\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/townView.css\";\nimport SmokeEmitter from \"./effects/SmokeEmitter\";\n\n// It's actually not the *real* town view hihi\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n\n}\n\nexport interface Props {\n    onStructureClick?: (structure: Structure | null) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n    // tasks: TaskStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {}\n\ntype AllProps = Props & DispatchProps & StateProps & AppContextProps;\n\nclass RealTownView extends React.Component<AllProps, LocalState> {\n\n    private plasmaBeam?: Konva.Rect = undefined;\n    private anim?: Konva.Animation = undefined;\n\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            images: {},\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.town, \"sound/music/Soliloquy.mp3\");\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n\n        /*        const period = 500;\n        if (this.plasmaBeam) {\n            this.plasmaBeam.filters([Konva.Filters.Brighten]);\n            //this.plasmaBeam.cache(null);\n            this.anim = new Konva.Animation((frame: any) => {\n                if (this.plasmaBeam){\n                const freq = 2; // speed\n                const brightness = (Math.sin((frame.time / period) * freq) + 1) / 2;   // fluctuate between 0 and 1\n                this.plasmaBeam.brightness(brightness);\n                //this.plasmaBeam.cache(null);\n                this.plasmaBeam.fillPatternOffsetX(this.plasmaBeam.fillPatternOffsetX() - 150);\n                }\n            }, this.plasmaBeam.getLayer());\n\n            this.anim.start();\n        }*/\n    }\n\n    public componentWillUnmount() {\n        if (this.anim) { this.anim.stop(); }\n        delete this.anim;\n    }\n\n    // public changeSize(node: Konva.Node) {\n    //     node.to({\n    //         scaleX: Math.random() + 2.8,\n    //         scaleY: Math.random() + 2.8,\n    //         duration: 10,\n    //     });\n    // }\n\n    public render() {\n        const structures = Object.keys(Structure).map((structure, index) => {\n            const structureDef = structureDefinitions[structure];\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            if (structureStore.state === StructureState.NotBuilt) {\n                return null;\n            }\n            const levelDef = structureDef.levels[structureStore.level];\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <Text name= { structure }\n                key = { structure }\n                text = { `${displayName} (level ${structureStore.level + 1})` }\n                x = { 100 }\n                y = { 50 * index + 100 }\n                fontSize = { 40 }\n                fill = { \"white\" }\n                onClick = { this.handleStructureClick }\n            />;\n        });\n        // tslint:disable-next-line:no-console\n        console.log(`rendered the town`); // TODO: remove\n\n        return (\n            <Stage width={1024} height={768} scale= { {x: 0.4, y: 0.4} }>\n            <Layer name=\"background\" onClick = { this.handleBackgroundClick } >\n                <Image image={ this.imgSrc(\"img/town/sky.jpg\") }></Image>\n            </Layer>\n            <Layer name=\"town\">\n                {/* <Rect\n                    x={20}\n                    y={20}\n                    width={50}\n                    height={50}\n                    fill={ \"white\"}\n\n                    // onClick={this.handleClick}\n                /> */}\n                {/* <Rect\n                     PLASMA BEAM\n                    x={20}\n                    y={20}\n                    width={1500}\n                    height={256}\n                    fillPatternImage = { this.imgSrc(\"img/town/effects/plasma_beam_heavy_green.png\") }\n                    fillPatternOffset = { { x: 20, y: 0 }}\n                    globalCompositeOperation = \"lighter\"\n                    shadowBlur={5}\n                    ref = { (node: Konva.Rect) => this.plasmaBeam = node }\n                /> */}\n                   <Image\n                        name = \"warehouse\"\n                        image={ this.imgSrc(\"img/town/tavern.png\") }\n                        x = { 15 }\n                        y = { 1057 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        shadowColor = \"red\"\n                        shadowEnabled = { true }\n                        strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        // ref={ (node) => { this.convaImages.tavern = node!; }}\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n\n                    <Image\n                        name = { Structure.warehouse }\n                        image={ this.imgSrc(\"img/town/lighthouse.png\") }\n                        // onClick = { this.handleStructureClick }\n\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    <Image\n                        name = \"lumberMill\"\n                        image = { this.imgSrc(\"img/town/mill.png\") }\n                        x = { 947 }\n                        y = { 1384 }\n                        // stroke = \"blue\"\n                        shadowBlur={15}\n                        // shadowColor = \"red\"\n                        // shadowEnabled = { true }\n                        // strokeWidth = { 30 }\n                        // onClick = { this.handleStructureClick }\n                        // draggable\n                        // onDragEnd= { this.handleDragEnd }\n                        ref={ (node: Konva.Image) => { drawHitFromCache(node); }}\n                    />\n                    { structures }\n\n                    </Layer>\n                    {/* <SmokeEmitter\n                        emitterX = { 190 }\n                        emitterY = { 510 }\n                        smokeImg = { this.imgSrc(\"img/town/effects/smoke.png\") }\n                    /> */}\n\n            </Stage>\n        );\n    }\n\n    public handleStructureClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick( Structure[evt.target.name()]); }\n    }\n\n    public handleBackgroundClick = (evt: Konva.KonvaEventObject<PointerEvent>) => {\n        if (this.props.onStructureClick) { this.props.onStructureClick(null); }\n    }\n\n    private imgSrc(url: string): HTMLImageElement {\n        const result = this.props.media.find((m) => m.url === url);\n        if (result === undefined) {\n            throw Error(`Could not find image with url ${url}`);\n        } else {\n            return result.content as HTMLImageElement;\n        }\n    }\n\n    private playMusic() {\n        SoundManager.playMusicTrack(MusicTrack.town);\n    }\n}\n\nconst drawHitFromCache = (img: Konva.Image) => {\n    if (img) {\n       // img.cache(null);\n       // img.drawHitFromCache(0.5);\n    }\n};\n\nexport default RealTownView;\n","\nimport RealTownView, { DispatchProps, Props, StateProps } from \"components/RealTownView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        structures: store.structures,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealTownView) as React.ComponentType<Props>;\n","// tslint:disable:object-literal-sort-keys\nexport enum ActionType {\n    addGold = \"addGold\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface ModifyGoldAction extends Action {\n    amount: number;\n}\n\nexport function addGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount,\n    };\n}\nexport function subtractGold(amount: number): ModifyGoldAction {\n    return {\n        type: ActionType.addGold,\n        amount: -amount,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { ResourceStoreState } from \"stores/resources\";\n\nexport enum ActionType {\n    addResources = \"addResources\",\n    removeResources = \"removeResources\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddResources {\n    type: ActionType;\n    resources: ResourceStoreState;\n}\n\nexport function addResource(resource: string, value: number): AddResources {\n    return addResources({\n        [resource]: value,\n    });\n}\n\nexport function addResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.addResources,\n        resources,\n    };\n}\n\nexport function removeResources(resources: ResourceStoreState): AddResources {\n    return {\n        type: ActionType.removeResources,\n        resources,\n    };\n}\n","// tslint:disable: object-literal-sort-keys\nexport enum Resource {\n    wood = \"wood\",\n    iron = \"iron\",\n    stone = \"stone\",\n    leather = \"leather\",\n    fabric = \"fabric\",\n    food = \"food\",\n}\n\nexport interface ResourceDefinition {\n    resource: Resource;\n    iconImg: string;\n}\n\nexport default {\n    [Resource.wood]: {\n        resource: Resource.wood,\n        iconImg: \"/img/resources/wood.png\",\n    },\n    [Resource.iron]: {\n        resource: Resource.iron,\n        iconImg: \"/img/resources/iron.png\",\n    },\n    [Resource.stone]: {\n        resource: Resource.stone,\n        iconImg: \"/img/resources/stone.png\",\n    },\n    [Resource.leather]: {\n        resource: Resource.leather,\n        iconImg: \"/img/resources/leather.png\",\n    },\n    [Resource.fabric]: {\n        resource: Resource.fabric,\n        iconImg: \"/img/resources/fabric.png\",\n    },\n    [Resource.food]: {\n        resource: Resource.food,\n        iconImg: \"/img/resources/food.png\",\n    },\n};\n","import \"components/ui/css/common/icon.css\";\nimport itemsDescription from \"definitions/items\";\nimport { Item } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/itemsbox.css\";\n\nexport interface Props {\n    className?: string;\n    items: Item[];\n}\n\nexport interface StateProps {\n    itemsInInventory?: Item[]; // Items that are in `items` array and also in inventory\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ItemsBox displays a list of items, to be used as requirements for something\n */\nconst ItemsBox = (props: AllProps) => {\n    const { itemsInInventory } = props;\n    const className = (props.className || \"\") + \" itemsbox\";\n    const aggregate = props.items.reduce((accumulator: object, current: Item) => {\n        if (!accumulator[current]) {\n            accumulator[current] = 0;\n        }\n        accumulator[current]++;\n        return accumulator;\n    }, {});\n\n    const listItems = Object.keys(aggregate).map((key: string) => {\n        const item = key as Item;\n        const amount = aggregate[key] as number;\n        let listItemClass = \"item\";\n\n        // Check if we have enough\n        const amountInInventory = itemsInInventory ? itemsInInventory.filter((i) => i === item).length : 0;\n        if (amount > amountInInventory) {\n            listItemClass += \" missing\";\n        }\n        const itemDescription = itemsDescription[item];\n        return <li className = { listItemClass } key = { item }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage: `url(${itemDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { `${TextManager.getItemName(item)} (${ amount })` }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ItemsBox;\n","import ItemsBox, { Props, StateProps } from \"components/ui/items/ItemsBox\";\nimport { Item } from \"definitions/items/types\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const itemsInInventory: Item[] = [];\n    const tmpWarehouse = [ ... store.items];\n    ownProps.items.forEach((item: Item) => {\n        const found = tmpWarehouse.findIndex((i) => i === item);\n        if (found > -1) {\n            // Remove the item from tmpWarehouse and add to itemsInInventory\n            const [ removed ] = tmpWarehouse.splice(found, 1);\n            if (removed) {\n                itemsInInventory.push(removed);\n            }\n        }\n    });\n    return {\n        itemsInInventory,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ItemsBox);\n","import { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcesbox.css\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox displays a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n    } = props;\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(props.resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon\" style = {{\n                backgroundImage: `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { props.resources[resource] }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import ResourcesCostBox, { Props, StateProps } from \"components/ui/resources/ResourcesCostBox\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState, ownProps: Props): StateProps => {\n    const sufficientResources: Record<string, boolean> = {};\n    Object.keys(ownProps.resources).forEach((resource: string) => {\n        sufficientResources[resource] = store.resources[resource]! >= ownProps.resources[resource]!;\n    });\n    return {\n        sufficientResources,\n    };\n};\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(ResourcesCostBox);\n","export const MAX_WORKERS_CRAFTING = 6;\n\n/**\n * Calculates the production time for productionDefinition with given amount of workers\n * @param productionDefinition\n * @param workers\n */\nexport const calculateProductionTime = (time: number, workers: number): number => {\n    if (workers > MAX_WORKERS_CRAFTING) {\n        throw new Error(`Cannot possibly have more than ${MAX_WORKERS_CRAFTING} on one item!`);\n    }\n    return time - (.1 * time * workers);\n};\n","import * as React from \"react\";\nimport \"./css/progressbar.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps { }\nexport interface Props extends DispatchProps {\n    progress?: number;     // between 0 and 1\n    label?: string;\n}\n\nconst Progressbar = (props: Props) => {\n    const progress: number = clamp(props.progress || 0, 0, 1);\n\n    return (\n        <div className=\"progressbar\">\n            <div className=\"progressbar-label\">{ props.label }</div>\n            <div className=\"progressbar-info\" style= {{ width: `${progress * 100}%`}}>  </div>\n        </div>\n    );\n};\n\nexport default Progressbar;\n\nfunction clamp(val: number, min: number, max: number): number {\n    return val > max ? max : val < min ? min : val;\n}\n","// tslint:disable:object-literal-sort-keys\n\nimport { Structure } from \"definitions/structures\";\nimport { StructureState } from \"stores/structure\";\n\nexport enum ActionType {\n    upgradeStructure = \"upgradeStructure\",\n    increaseWorkers = \"increaseWorkers\",\n    decreaseWorkers = \"decreaseWorkers\",\n    startBuildingStructure = \"startBuildingStructure\",\n    finishBuildingStructure = \"finishBuildingStructure\",\n    setStructureState = \"setStructureState\",\n}\n\nexport interface Action {\n    type: ActionType;\n    structure: Structure;\n}\nexport interface StructureStateAction extends Action {\n    state: StructureState;\n}\n\nexport interface WorkerCountAction extends Action {\n    workers: number;\n}\n\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// export interface SetStructureAmount {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: string,\n//     amount: number\n// }\n// export interface UpgradeStructure {\n//     type: constants.SET_STRUCTURE_AMOUNT;\n//     structure: StructureType\n// }\n\n// export type IncrementSomething = IncrementStructure | IncrementResource; // UNUSED?\n// export type StructureAction = SetStructureAmount | UpgradeStructure;\n\n// export function setStructureAmount(structure:string, amount:number): SetStructureAmount {\n//     return {\n//         type: constants.SET_STRUCTURE_AMOUNT,\n//         structure,\n//         amount\n//     }\n// }\n\nexport function startBuildingStructure(structure: Structure): Action {\n    return {\n        type: ActionType.startBuildingStructure,\n        structure,\n    };\n}\n\nexport function finishBuildingStructure(structure: Structure): Action {\n    return {\n        type: ActionType.finishBuildingStructure,\n        structure,\n    };\n}\n\nexport function upgradeStructure(structure: Structure): Action {\n    return {\n        type: ActionType.upgradeStructure,\n        structure,\n    };\n}\n\n// Increases workers used by given structure by given amount\nexport function increaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.increaseWorkers,\n        structure,\n        workers,\n    };\n}\n\n// Decreases workers used by given structure by given amount\nexport function decreaseWorkers(structure: Structure, workers: number = 1): WorkerCountAction {\n    return {\n        type: ActionType.decreaseWorkers,\n        structure,\n        workers,\n    };\n}\n\nexport function setStructureState(structure: Structure, state: StructureState): StructureStateAction {\n    return {\n        type: ActionType.setStructureState,\n        structure,\n        state,\n    };\n}\n","// tslint:disable:object-literal-sort-keys\nimport { AnyAction } from \"redux\";\nimport { TaskType } from \"stores/task\";\n\nexport enum ActionType {\n    start = \"startTask\",\n    update = \"updateTasks\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface AddAction extends Action {\n    taskType: TaskType;\n    name: string;\n    origin: string;\n    time: number;\n    callbacks: AnyAction[];\n}\n\nexport function startTask(taskType: TaskType,\n                          name: string, origin: string, time: number, callbacks: AnyAction[]): AddAction {\n    return {\n        type: ActionType.start,\n        taskType,\n        name,\n        origin,\n        time,\n        callbacks,\n    };\n}\n","// Todo: come up with a less retarded name\nimport * as React from \"react\";\nimport \"./css/updownvalue.css\";\n\nexport interface DispatchProps {\n    onUp?: (e: React.MouseEvent) => void;\n    onDown?: (e: React.MouseEvent) => void;\n}\nexport interface Props extends DispatchProps {\n    label?: string;\n    value?: number;\n    max?: number;\n    upDisabled?: boolean;\n    downDisabled?: boolean;\n}\n\nconst UpDownValue = (props: Props) => {\n    const handleUp = (e: React.MouseEvent) => {\n        if (props.onUp && !props.upDisabled) { props.onUp(e); }\n    };\n\n    const handleDown = (e: React.MouseEvent) => {\n        if (props.onDown && !props.downDisabled) { props.onDown(e); }\n    };\n\n    let displayValue;\n    if (props.max == null) {\n        displayValue = props.value;\n    } else {\n        displayValue = <span>\n            { props.value } / <span className=\"max\">{ props.max }</span>\n        </span>;\n    }\n    return (\n        <div className=\"updownvalue\">\n            <label> { props.label }</label>\n            { displayValue }\n            <i className= { \"arrow up\" + (props.upDisabled ? \" disabled\" : \"\" )}\n                onClick= { handleUp }\n            ></i>\n            <i className={\"arrow down\" + (props.downDisabled ? \" disabled\" : \"\")}\n                onClick= { handleDown }\n            ></i>\n        </div>\n    );\n};\n\nexport default UpDownValue;\n","import MaterialsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport ResourcesCostBox from \"containers/ui/resources/ResourcesCostBox\";\nimport itemDefinitions from \"definitions/items\";\nimport { Item, ItemDefinition } from \"definitions/items/types\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { ProductionStructureDefinition, ProductionStructureLevelDefinition } from \"definitions/structures/types\";\nimport { calculateProductionTime, MAX_WORKERS_CRAFTING } from \"mechanics/crafting\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TaskStoreState } from \"stores/task\";\nimport { TextManager } from \"utils/textManager\";\nimport { formatDuration } from \"utils/time\";\nimport ItemIcon from \"../ui/ItemIcon\";\nimport Progressbar from \"../ui/Progressbar\";\nimport UpDownValue from \"../ui/UpDownValue\";\nimport \"./css/productionstructureview.css\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onCraft?: (productionDefinition: ProductionDefinition, workers: number) => void;\n}\n\nexport interface StateProps {\n    resources: ResourceStoreState;\n    items: Array<Item | null>;  // items in inventory\n    level: number;\n    workersFree: number;\n    gold: number;\n    tasks: TaskStoreState[];\n}\n\nexport interface Props {\n    type: Structure;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedItem: Item|null;\n    workersAssigned: number;\n}\n\nexport default class ProductionStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedItem: null,\n            workersAssigned: 0,\n        };\n    }\n\n    // public componentDidUpdate(prevProps: AllProps, prevState: LocalState) {\n    //     console.log(\"cdu\" + prevProps.workersFree);\n    // }\n\n    public componentWillMount() {\n// tslint:disable-next-line: no-console\n        console.log(\"component will mount\" + this.props.type);\n    }\n    public componentWillUnmount() {\n// tslint:disable-next-line: no-console\n        console.log(\"component will unmount\" + this.props.type);\n    }\n\n    public render() {\n        const structureDefinition  = structureDefinitions[this.props.type] as ProductionStructureDefinition;\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${this.props.type}\n                with type ProductionStructureDefinition.`);\n        }\n        const level: number = this.props.level || 0;\n        const levelDefinition: ProductionStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.get(levelDefinition.displayName);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style={{float: \"right\"}}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade } >\n                        { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const createCraftTabs = () => {\n            const selectedItem = this.state.selectedItem;\n\n            return levelDefinition.produces.map((produces) => {\n                const handleSelectCraftingItem = (e: React.MouseEvent) => {\n                    e.stopPropagation();\n\n                    this.setState({\n                        selectedItem: produces.item,\n                    });\n                };\n\n                return <li\n                    key = { `craft${produces.item}`}\n                    onClick = { handleSelectCraftingItem }\n                    className = { selectedItem === produces.item ? \"selected\" : \"\" }\n                >\n                    <ItemIcon item= { produces.item }  />\n                    { TextManager.getItemName(produces.item) }\n                </li>;\n            });\n        };\n\n        const createCraftingDetails = () => {\n            const item = this.state.selectedItem;\n            if (!item) { return null; }\n\n            const produces = levelDefinition.produces.find((p) => p.item === item)!;\n            const playerResources = this.props.resources || {};\n            const costResources = produces.cost.resources!;\n            const missingAtLeastOneResource = Object.keys(costResources)\n                .some((resource) => costResources[resource] > playerResources[resource]);\n\n            let missingAtLeastOneItem = false;\n            const costMaterials = produces.cost.materials;\n            if (costMaterials) {\n                missingAtLeastOneItem = costMaterials\n                    .some((i: Item) => this.props.items.indexOf(i) === -1);\n            }\n\n            const disabled = missingAtLeastOneResource || missingAtLeastOneItem || this.state.workersAssigned < 1;\n            // TODO: [10/07/2019] Perhaps each item can have a number of minimum workers?\n\n            const itemDefinition: ItemDefinition = itemDefinitions[item];\n\n            const makeTimeString = (time: number): string => {\n                if (this.state.workersAssigned === 0) {\n                    return \"\";\n                }\n                const craftingTime = calculateProductionTime(time, this.state.workersAssigned);\n                const formatted = formatDuration(craftingTime);\n                return ` Crafting time: ${formatted}`;\n            };\n\n            const handleClick = (e: React.MouseEvent) => {\n                e.stopPropagation();\n\n                if (this.props.onCraft) {\n                    this.props.onCraft(produces, this.state.workersAssigned);\n                    this.setState({\n                        workersAssigned: 0,\n                    });\n                }\n            };\n\n            const handleUp = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned + 1,\n                });\n            };\n\n            const handleDown = (e: React.MouseEvent) => {\n                e.stopPropagation();\n                this.setState({\n                    workersAssigned: this.state.workersAssigned - 1,\n                });\n            };\n\n            let costItemsContent = null;\n            if (costMaterials) {\n                costItemsContent = <MaterialsCostBox items = { costMaterials } />;\n            }\n            return (\n                <div className = \"crafting-details\">\n                    Craft a { TextManager.getItemName(itemDefinition.item) }\n                    <div className = \"crafting-costs\">\n                        <fieldset>\n                            <ResourcesCostBox resources = { costResources } />\n                        </fieldset>\n                        <fieldset>\n                            { costItemsContent }\n                        </fieldset>\n                    </div>\n                    <div style={ { display: \"flex \"}}>\n                        <UpDownValue\n                            value = { this.state.workersAssigned }\n                            label ={ \"Workers: \" }\n                            onUp = { handleUp }\n                            onDown = { handleDown }\n                            upDisabled={\n                                this.state.workersAssigned >= this.props.workersFree ||\n                                this.state.workersAssigned >= MAX_WORKERS_CRAFTING\n                            }\n                            downDisabled={ this.state.workersAssigned < 1 }\n                        />\n                        &nbsp;\n                        { makeTimeString(produces.cost.time || 0) }\n                    </div>\n                    <div>\n                        <button\n                            disabled = { disabled }\n                            onClick = { handleClick }>\n                            Craft\n                        </button>\n                    </div>\n                </div>\n            );\n        };\n\n        const createProgressbars = () => {\n            const tasks = this.props.tasks || [];\n            return tasks.map((t) => <Progressbar\n                key = { `${t.name}${t.startTime}` }\n                label = { `${t.name} (${formatDuration(t.timeRemaining)})` }\n                progress = { t.progress }/>,\n            );\n        };\n\n        return (\n            // TODO: abstract some stuff to generic StructureView\n            <details open = { true } className = \"productionstructureview\">\n                <summary>{displayName}</summary>\n                <section>\n                    { createUpgradeRow() }\n                    <div>craft:</div>\n                    {/* { createCraftRows() } */}\n                    <div className=\"crafting-area\">\n                        <ul className=\"vertical-tab-bar\">\n                            { createCraftTabs() }\n                        </ul>\n                        { createCraftingDetails() }\n                    </div>\n                    <fieldset>\n                        <legend>Currently crafting:</legend>\n                        { createProgressbars() }\n                    </fieldset>\n                </section>\n            </details>\n        );\n    }\n}\n","import { createSelector } from \"reselect\";\nimport { StoreState } from \"stores\";\nimport { StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst getStructures = (state: StoreState) => state.structures;\nconst getWorkers = (state: StoreState) => state.workers;\n\nconst calculateFreeWorkers = (structures: StructuresStoreState, workers: number) => {\n    // Add up all the workers used by all structures in town\n    const workersUsed = Object.keys(structures).map((name) => structures[name])\n        .reduce((acc: number, value: StructureStoreState) => acc += value.workers, 0);\n\n    return workers - workersUsed;\n};\n\nexport const selectFreeWorkers = createSelector([\n    getStructures,\n    getWorkers],\n    calculateFreeWorkers,\n);\n","import { AnyAction } from \"redux\";\n\nexport enum TaskType {\n    buildStructure,\n    craftItem,\n}\n\nexport interface TaskStoreState {\n    type: TaskType;\n    name: string;\n    origin: string;\n    startTime: number;        // time the task was scheduled\n    lastTick: number;         // time of last tick\n    timeRemaining: number;\n    progress: number;         // value between 0 and 1 indicating progress\n    callbacks: AnyAction[];\t  // actions to dispatch on complete\n}\n","import ProductionStructureView,\n    { DispatchProps, Props, StateProps } from \"../../components/structures/ProductionStructureView\";\n\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { removeResources } from \"actions/resources\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport { ProductionDefinition } from \"definitions/production/types\";\nimport { calculateProductionTime } from \"mechanics/crafting\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { TaskType } from \"stores/task\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n\n    const tasks = store.tasks.running.filter((val) => val.origin === `${ownProps.type}.craft`);\n    return {\n        gold: store.gold,\n        items: store.items,\n        level: structureStore.level,\n        resources: store.resources,\n        tasks,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onCraft: (productionDefinition: ProductionDefinition, workers: number) => {\n            const craftingTime = calculateProductionTime(productionDefinition.cost.time || 0, workers);\n            dispatch(removeResources(productionDefinition.cost.resources || {}));\n            dispatch(increaseWorkers(ownProps.type, workers));\n\n            const callbacks = [\n                addItemToWarehouse(productionDefinition.item),\n                decreaseWorkers(ownProps.type, workers),\n            ];\n            const start = startTask(TaskType.craftItem,\n                productionDefinition.item,\n                `${ownProps.type}.craft`,\n                craftingTime,\n                callbacks);\n            dispatch(start);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // TODO: [07/07/2019] time to upgarde??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ProductionStructureView);\n","import structureDefinitions, {  Structure  } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport UpDownValue from \"../ui/UpDownValue\";\n\nexport interface DispatchProps {\n    onUpgrade?: (cost: number, level: number) => void;\n    onWorkersUp?: () => void;\n    onWorkersDown?: () => void;\n}\n\nexport interface Props  {\n    type: Structure;\n}\n\nexport interface StateProps {\n    level?: number;\n    workers?: number;\n    workersFree?: number;\n    gold?: number;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst ResourceStructureView = (props: AllProps) => {\n\n    const structureDefinition = structureDefinitions[props.type] as ResourceStructureDefinition;\n    if (!structureDefinition) {\n        throw new Error(`No definition found for structure ${props.type} with type ResourceStructureDefinition.`);\n    }\n    const level: number = props.level || 0;\n    const levelDefinition: ResourceStructureLevelDefinition = structureDefinition.levels[level];\n    const displayName = TextManager.get(levelDefinition.displayName);\n\n    const createWorkersRow = () => {\n\n        const handleUp = () => {\n            if (props.onWorkersUp) { props.onWorkersUp(); }\n        };\n        const handleDown = () => {\n            if (props.onWorkersDown) { props.onWorkersDown(); }\n        };\n\n        const upDisabled = props.workers === levelDefinition.workerCapacity || (props.workersFree || 0) < 1;\n        const downDisabled = props.workers === 0;\n        return <UpDownValue\n            label=\"workers:\"\n            value = { props.workers }\n            max = { levelDefinition.workerCapacity }\n            upDisabled = { upDisabled }\n            downDisabled = { downDisabled }\n            onDown = { handleDown }\n            onUp = { handleUp }\n        />;\n    };\n\n    const createUpgradeRow = () => {\n        const gold = props.gold || 0;\n        const nextLevel = structureDefinition.levels[level + 1];\n        const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n        const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n        const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n        };\n        return <div>\n            <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n            <button\n                style={{float: \"right\"}}\n                onClick = { handleClick }\n                disabled= { !canUpgrade } >\n                    { upgradeText }\n            </button>\n        </div>;\n    };\n\n    const createGeneratesRow = () => {\n        const generates = levelDefinition.generates;\n        const generatesText = Object.keys(generates).reduce((accumulator: string[], value: string) => {\n            // For values that are not 0\n            if (generates[value]) {\n                // tslint:disable-next-line:max-line-length\n                accumulator.push(`${generates[value]} x ${props.workers} = ${generates[value] * (props.workers || 0)} ${value}`);\n            }\n            return accumulator;\n        }, []).join(\",\");\n        return <div>\n            { \"Generates (every minute): \" }\n            <br/>\n            { generatesText }\n        </div>;\n    };\n\n    return (\n        // TODO: abstract some stuff to generic StructureView\n        <details open = { true } className = \"structureview\">\n            <summary>{ displayName }</summary>\n            <section>\n                { createWorkersRow() }\n                { createUpgradeRow() }\n                { createGeneratesRow() }\n            </section>\n        </details>\n    );\n};\n\nexport default ResourceStructureView;\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { decreaseWorkers, increaseWorkers, upgradeStructure } from \"actions/structures\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport ResourceStructureView,  { DispatchProps, Props, StateProps } from \"../../components/structures/ResourceStructureView\";\nimport { StoreState } from \"../../stores\";\nimport { StructureStoreState } from \"../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[ownProps.type];\n    if (!structureStore) { throw new Error(`No structure '${ownProps.type}' found in the store!`); }\n    return {\n        gold: store.gold,\n        level: structureStore.level,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(ownProps.type)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: ownProps.type,\n            }, LogChannel.town));\n        },\n        onWorkersDown: () => {\n            dispatch(decreaseWorkers(ownProps.type));\n        },\n        onWorkersUp: () => {\n            dispatch(increaseWorkers(ownProps.type));\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResourceStructureView);\n","import { Encounter } from \"definitions/encounters/types\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum ActionType {\n    launchQuest = \"launchQuest\",\n    advanceQuest = \"advanceQuest\",\n    updateQuestVars = \"updateQuestVars\",\n    updateEncounterResult = \"updateEncounterResult\",\n    startEncounter = \"startEncounter\",\n    updateQuests = \"updateQuests\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface QuestAction extends Action {\n    questName: string;\n}\n\nexport interface QuestVarsAction extends QuestAction {\n    vars: any;\n}\n\nexport interface QuestLaunchAction extends QuestAction {\n    assignedAventurers: AdventurerStoreState[];\n}\n\nexport interface StartEncounterAction extends QuestAction {\n    encounter: Encounter;\n}\n\nexport interface UpdateEncounterResultAction extends QuestAction {\n    nodeIndex: number;\n    result: string;\n}\n\nexport function launchQuest(questName: string, assignedAventurers: AdventurerStoreState[]): QuestLaunchAction {\n    return {\n        type: ActionType.launchQuest,\n        questName,\n        assignedAventurers,\n    };\n}\n\n/** Move to the next node */\nexport function advanceQuest(quest: string): QuestAction {\n    return {\n        type: ActionType.advanceQuest,\n        questName: quest,\n    };\n}\n\nexport function updateQuestVars(quest: string, vars: any): QuestVarsAction {\n    return {\n        type: ActionType.updateQuestVars,\n        questName: quest,\n        vars,\n    };\n}\n\nexport function startEncounter(quest: string, encounter: Encounter): StartEncounterAction {\n    return {\n        type: ActionType.startEncounter,\n        questName: quest,\n        encounter,\n    };\n}\n\nexport function updateEncounterResult(quest: string, nodeIndex: number, result: string): UpdateEncounterResultAction {\n    return {\n        type: ActionType.updateEncounterResult,\n        questName: quest,\n        nodeIndex,\n        result,\n    };\n}\n","import { DragSourceType, DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor, DragSourceSpec } from \"react-dnd\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps } from \"./AdventurerAvatar\";\nimport \"./css/draggableadventureravatar.css\";\n\nexport interface Props {\n    sourceId?: string;\n    onClick?: () => void;\n    disabled?: boolean;\n}\n\ninterface CollectedProps {\n    isDragging: boolean;\n    connectDragSource: ConnectDragSource;\n}\n\nexport interface AdventurerAvatarDragInfo {\n    adventurer: AdventurerStoreState;\n    sourceId?: string;\n}\n\n/**\n * Specifies the drag source contract.\n * Only `beginDrag` function is required.\n */\nconst spec: DragSourceSpec<Props & AdventurerAvatarProps, AdventurerAvatarDragInfo> = {\n    beginDrag(props: Props & AdventurerAvatarProps) {\n        // Return the data describing the dragged item\n        return {\n            adventurer: props.adventurer,\n            sourceId: props.sourceId,\n            sourceType: DragSourceType.adventurerInventory,\n        };\n    },\n};\n\n/**\n * Specifies which props to inject into your component.\n */\nfunction collect(connect: DragSourceConnector, monitor: DragSourceMonitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n    };\n}\n\nclass DraggableAdventurerAvatar extends React.Component<Props & CollectedProps & AdventurerAvatarProps> {\n\n    public render() {\n        const { isDragging, connectDragSource, disabled } = this.props;\n        let className = \"draggable-adventurer-avatar\";\n        if (disabled) {\n            className += \" disabled\";\n        }\n        if (isDragging) {\n            className += \" dragging\";\n        }\n\n        /*if (isDragging) {\n            // TODO: can show some sort of empty state?\n            return null;\n        }*/\n        return connectDragSource(\n            <div className = { className }>\n                <AdventurerAvatar\n                    // Copy all props down to AdventurerAvatar\n                    { ...this.props }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DragSource<Props & AdventurerAvatarProps, CollectedProps>(DragType.ADVENTURER, spec, collect)(DraggableAdventurerAvatar);\n","import { TextEntry } from \"constants/text\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nexport interface EncounterDefinition {\n    name: Encounter;\n    getOracle: (questName: string, store: StoreState) => Oracle;\n    chance?: number;    // number from 0 to 1, undefined means: 1\n    getDescription: (oracle: Oracle) => TextEntry;\n    getOptions: (oracle: Oracle) => Record<string, string>;\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => string;\n}\n\nexport enum Encounter {\n    backstabbed = \"backstabbed\",\n    goblinHouseHallway = \"goblinHouseHallway\",\n    goblinHouseOutside = \"goblinHouseOutside\",\n    theBigTree = \"theBigTree\",\n}\n","import { Item } from \"definitions/items/types\";\nimport { Encounter } from \"../encounters/types\";\n\n// tslint:disable:object-literal-sort-keys\n\nexport enum QuestNodeType {\n    nothing = 0,    // Nothing much going on here\n    encounter = 1,\n    combat = 2,     // Not implemented\n    boss = 3,\n}\n\nexport interface QuestDefinition {\n    nodes: QuestNode[];\n    requiredItems?: Item[];\n}\n\nexport interface QuestNode {\n    x: number;\n    y: number;\n    type: QuestNodeType;\n    encounter?: Encounter; // TODO: or array of encounters\n    log?: string;      // this text will appear in the log upon entering the node. only at 'nothing' nodes\n}\n\nconst kill10Boars: QuestDefinition = {\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node0\",\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node1\",\n    // }, {\n    //     x: 0,\n    //     y: 3,\n    //     type: QuestNodeType.nothing,\n    //     log: \"In the distance, a forest looms\",\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.goblinHouseOutside,\n    }, {\n        x: 0,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"quest-kill10Boars-node4\",\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 1,\n        y: 3,\n        type: QuestNodeType.nothing,\n        log: \"The party spots a boss\",\n    }, {\n        x: 2,\n        y: 3,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst retrieveMagicAmulet: QuestDefinition = {\n    requiredItems: [\n        Item.torch,\n        Item.torch,\n        Item.torch,\n        Item.sandwich,\n        Item.sandwich,\n    ],\n    nodes: [{\n        x: 0,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Papa loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Mama loves mambo\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"Look at 'em sway with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n        log: \"gettin' so gay with it\",\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 0,\n        y: 2,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.theBigTree,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 1,\n        y: 1,\n        type: QuestNodeType.nothing,\n    }, {\n        x: 2,\n        y: 1,\n        type: QuestNodeType.encounter,\n        encounter: Encounter.backstabbed,\n    }, {\n        x: 3,\n        y: 1,\n        type: QuestNodeType.boss,\n    }],\n};\n\nconst all = {\n    kill10Boars,\n    retrieveMagicAmulet,\n};\n\nexport default all;\n\nexport function getDefinition(quest: string): QuestDefinition {\n    return all[quest];\n}\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/droppableadventurerslot.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/*\n * Can drop adventurers on this */\nclass DroppableAdventurerSlot extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            isOver,\n            canDrop,\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n        let className = \"droppable-adventurer-slot\";\n\n        if (isOver) {\n            className += \" active-drop\";\n        } else if (canDrop) {\n            className += \" can-drop\";\n        }\n\n        return connectDropTarget(\n            <div className = { className }>\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ADVENTURER,\n    dropTarget,\n    collect,\n)(DroppableAdventurerSlot);\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport DroppableAdventurerSlot from \"components/ui/DroppableAdventurerSlot\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport \"./css/assignadventurers.css\";\n\nexport interface DispatchProps {\n    onAddEventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onRemoveAdventurer: (index: number) => void;\n}\n\nexport interface Props {\n    availableSlots: number;\n    assignedAventurers: AdventurerStoreState[];\n}\n\n/*\n * Displays a number of slots to drag adventurers to */\nconst AssignAdventurers = (props: Props & DispatchProps) => {\n    const slotsContent = () => {\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < props.availableSlots; i++) {\n            let content;\n            let className = \"\";\n            const hasAdventurer = !!props.assignedAventurers[i];\n\n            if (hasAdventurer) {\n                const adventurer = props.assignedAventurers[i];\n                content = <AdventurerAvatar adventurer = { adventurer } displayName = { false } onClick = { () => props.onRemoveAdventurer(i) }/> ;\n                className = \"has-adventurer\";\n            } else {\n                content = <DroppableAdventurerSlot onDrop = { (item: AdventurerAvatarDragInfo) => { props.onAddEventurer(item, i); }} />;\n            }\n            slots.push(<li key = { `slot${i}`} className = { className }> { content } </li>);\n        }\n        return slots;\n    };\n\n    return <ul className = \"assign-adventurers\">\n        { slotsContent() }\n    </ul>;\n};\n\nexport default AssignAdventurers;\n","import { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport ItemsCostBox from \"containers/ui/context/items/ItemsCostBox\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition, QuestDefinition } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport AssignAdventurers from \"./AssignAdventurers\";\nimport \"./css/questboard.css\";\n\nconst availableSlots = 5;\nconst minimumCountAdventurers = 3;  // we need this many adventurers to start the quest\n\nexport interface StateProps {\n    items: Array<Item | null>;  // items in inventory\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {}\n\nexport interface Props {\n    availableQuests: QuestStoreState[];\n    selectedQuestName: string | null;       // name of selected quest\n    assignedAventurers: AdventurerStoreState[];\n\n    onQuestClick: (questName: string) => void;\n    onRemoveAdventurer: (index: number) => void;\n    onAddAdventurer: (item: AdventurerAvatarDragInfo, index: number) => void;\n    onLaunchQuest: () => void;\n}\n\ntype AllProps = Props & DispatchProps & StateProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n}\n\nexport default class QuestBoard extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n    }\n\n    public render() {\n        const questListContent: JSX.Element[] = this.props.availableQuests.map((q) => {\n            const iconImgPath = `img/sigils/${ q.icon }`;\n            const className = \"quest\" + ((q.name === this.props.selectedQuestName) ? \" selected\" : \"\");\n            return <li key={ q.name } className = { className } onClick = { () => { this.props.onQuestClick(q.name); } }>\n                <div\n                    className = \"icon\"\n                    style={{backgroundImage: `url(${iconImgPath})`}}\n                ></div>\n                <div className = \"title\">{ TextManager.getQuestTitle(q.name) } </div>\n            </li>;\n        });\n\n        const getQuestDetails = () => {\n            if (!this.props.selectedQuestName) {\n                return null;\n            }\n            const quest = this.props.availableQuests.find((q) => q.name === this.props.selectedQuestName);\n            if (!quest) {\n                return <div> { TextManager.get(\"structure-tavern-quest-launched\") } </div>;\n            }\n            const questDefinition = getDefinition(quest.name);\n\n            // Need a full party to launch\n            const fullParty = this.props.assignedAventurers.filter((a) => a !== null).length >= minimumCountAdventurers;\n            // Check if we have the required items\n            const enoughItems = this.checkEnoughItems(questDefinition);\n\n            const canLaunch = fullParty && enoughItems;\n\n            return <div className=\"quest-details\">\n                { TextManager.getQuestDescription(this.props.selectedQuestName) }\n                <AssignAdventurers\n                    availableSlots = { availableSlots }\n                    assignedAventurers = { this.props.assignedAventurers }\n                    onRemoveAdventurer = { this.props.onRemoveAdventurer }\n                    onAddEventurer = { this.props.onAddAdventurer } />\n                <ItemsCostBox items = { questDefinition.requiredItems || [] }/>\n                <button disabled = { !canLaunch } onClick = { () => this.props.onLaunchQuest() }>\n                    { TextManager.get(\"structure-tavern-button-launch-quest\") }\n                </button>\n            </div>;\n        };\n\n        // quest board, expanded quest info + assign adventurers + launch button\n        return <div className = \"quest-board\">\n            <h2> { TextManager.get(\"structure-tavern-title-quest-board\") } </h2>\n            <ul className = \"quest-list\">\n                { questListContent }\n            </ul>\n            { getQuestDetails() }\n        </div>;\n    }\n\n    /**\n     * Returns true if all the items required by the quest are in the inventory\n     */\n    public checkEnoughItems(questDefinition: QuestDefinition): boolean {\n        if (!questDefinition.requiredItems) {\n            return true;\n        }\n        return questDefinition.requiredItems.every((item: Item) => {\n            const amountRequired = (questDefinition.requiredItems)!.filter((i) => i === item).length;\n            return this.props.items.filter((i) => i === item).length >= amountRequired;\n        });\n    }\n}\n","import QuestBoard, { Props, StateProps } from \"components/structures/tavern/QuestBoard\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        items: store.items,\n    };\n}\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(QuestBoard);\n","import DraggableAdventurerAvatar, { AdventurerAvatarDragInfo } from \"components/ui/DraggableAdventurerAvatar\";\nimport QuestBoard from \"containers/structures/tavern/QuestBoard\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { TavernStructureDefinition, TavernStructureLevelDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/tavernstructureview.css\";\n\n// The UI for the tavern\nexport interface DispatchProps {\n    onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\nexport interface StateProps {\n    gold: number;\n    level: number;\n    adventurers: AdventurerStoreState[];\n    quests: QuestStoreState[];\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\n// tslint:disable-next-line:no-empty-interface\ninterface LocalState {\n    selectedQuestName: string | null;\n    assignedAventurers: AdventurerStoreState[];\n}\n\nconst SOURCE_ID = \"tavern\";\n\nexport default class TavernStructureView extends React.Component<AllProps, LocalState> {\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            assignedAventurers: [],\n            selectedQuestName: null,\n        };\n    }\n\n    public render() {\n        const structureDefinition  = structureDefinitions[Structure.tavern] as TavernStructureDefinition;\n        const level: number = this.props.level || 0;\n        const levelDefinition: TavernStructureLevelDefinition = structureDefinition.levels[level];\n        const displayName = TextManager.get(levelDefinition.displayName);\n\n        const createUpgradeRow = () => {\n            const gold = this.props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (this.props.onUpgrade) { this.props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const roomCount = levelDefinition.rooms;\n        const createRooms = () => {\n\n            const roomContent: JSX.Element[] = [];\n            for (let i = 0; i < roomCount; i++) {\n                const adventurer = this.props.adventurers.find((a) => a.room === i);\n                let content = null;\n                if (adventurer) {\n                    let name = adventurer.name;\n\n                    const assigned = this.state.assignedAventurers.indexOf(adventurer) > -1; // assigned to a quest in the QuestBoard\n                    const party = this.getQuestByAdventurer(adventurer.id);\n                    if (party) {\n                        name += \" (on a quest)\";\n                    }\n                    content = [<DraggableAdventurerAvatar\n                        disabled = { assigned || party != null }\n                        adventurer = { adventurer }\n                        className = \"adventurer-icon\"\n                        sourceId = { SOURCE_ID }\n                        key = { `avatar:${adventurer.id}` }\n                    />,\n                    name,\n                    /*\n                    <button\n                        className = \"boot\"\n                        key = { `boot:${adventurer.id}` }\n                    >\n                        Boot\n                    </button>,*/\n                ];\n                } else {\n                    content = \"(empty room)\";\n                }\n\n                roomContent.push(<div key = { `room${i}` } className = \"room\">\n                    { content }\n                </div>);\n            }\n\n            return <div className = \"rooms\">\n                <h2>Rooms</h2>\n                { roomContent }\n            </div>;\n        };\n\n        const availableQuests = this.props.quests.filter((q) => q.status === QuestStatus.available );\n\n        return (\n            <details open = { true } className = \"tavernstructureview\">\n                <summary>{ displayName }</summary>\n                { createUpgradeRow() }\n                <section>\n                    { createRooms() }\n                    <QuestBoard\n                        availableQuests = { availableQuests }\n                        selectedQuestName = { this.state.selectedQuestName }\n                        assignedAventurers = { this.state.assignedAventurers }\n                        onQuestClick = { (name: string) => this.handleQuestClick(name) }\n                        onAddAdventurer = { (item: AdventurerAvatarDragInfo, index: number) => this.handleAddAdventurer(item, index) }\n                        onRemoveAdventurer = { (index: number) => this.handleRemoveAdventurer(index) }\n                        onLaunchQuest = { () => this.handleLaunchQuest() }\n                    />\n                </section>\n            </details>\n        );\n    }\n\n    private handleQuestClick(name: string) {\n        if (this.state.selectedQuestName === name) {\n            this.setState( { selectedQuestName: null });\n        } else {\n            this.setState( { selectedQuestName: name });\n        }\n\n        // Unassign all adventurers\n        this.setState({\n            assignedAventurers: [],\n        });\n    }\n\n    private handleAddAdventurer(item: AdventurerAvatarDragInfo, index: number) {\n        if (item.sourceId === SOURCE_ID) {\n            const assignedAventurers = [ ...this.state.assignedAventurers];\n            assignedAventurers[index] = item.adventurer;\n            this.setState({\n                assignedAventurers,\n            });\n        }\n    }\n\n    /**\n     * Removes an assigned adventurer from a slot\n     * @param index\n     */\n    private handleRemoveAdventurer(index: number): void {\n        const assignedAventurers = [ ...this.state.assignedAventurers];\n        delete assignedAventurers[index];\n        this.setState({\n            assignedAventurers,\n        });\n    }\n\n    private handleLaunchQuest(): void {\n        const assignedAventurers = this.state.assignedAventurers;\n        const selectedQuestName = this.state.selectedQuestName!;\n        this.props.onLaunchQuest(selectedQuestName, assignedAventurers);\n    }\n\n    /**\n     * Returns the party the adventurer is in. undefined if not in any party\n     * @param adventurerId\n     */\n    private getQuestByAdventurer(adventurerId: string): QuestStoreState | undefined {\n        return Object.values(this.props.quests).find((quest) => {\n            return quest.party.indexOf(adventurerId) > -1;\n        });\n    }\n}\n","import { subtractGold } from \"actions/gold\";\nimport { addLogEntry } from \"actions/log\";\nimport { launchQuest } from \"actions/quests\";\nimport { upgradeStructure } from \"actions/structures\";\nimport TavernStructureView, { DispatchProps, Props, StateProps } from \"components/structures/tavern/TavernStructureView\";\nimport { Structure } from \"definitions/structures\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StructureStoreState } from \"stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.tavern];\n    return {\n        adventurers: store.adventurers,\n        gold: store.gold,\n        level: structureStore.level,\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onLaunchQuest: (questName: string, assignedAventurers: AdventurerStoreState[]) => {\n            dispatch(launchQuest(questName, assignedAventurers));\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.tavern));  // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.tavern,\n            }, LogChannel.town));\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(TavernStructureView);\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport { Resource } from \"definitions/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\n\nexport interface Props {\n    className?: string;\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n    deltaResources: ResourceStoreState;\n}\n\nexport interface StateProps {\n    sufficientResources?: Record<Resource, boolean>;\n}\n\ntype AllProps = Props & StateProps;\n\n/**\n * The ResourcesBox is used in the Warehouse to show a list of resources\n */\nconst ResourcesBox = (props: AllProps) => {\n    const {\n        sufficientResources,\n        resources,\n        deltaResources,\n    } = props;\n\n    const className = (props.className || \"\") + \" resourcesbox\";\n    const listItems = Object.keys(resources).map((resource: string) => {\n        let listItemClass = \"resource\";\n        if (sufficientResources && !sufficientResources[resource]) {\n             listItemClass += \" insufficient\";\n        }\n        const resourceDescription = resourceDescriptions[resource];\n        const amount = props.resources[resource]!;\n        if (!resourceDescription) {\n            throw new Error(`No resource description found for ${resource}`);\n        }\n\n        let delta;\n        if (deltaResources[resource]) {\n            delta = <span className = \"animate-up\">\n                { `+ ${deltaResources[resource]!.toFixed(2)}`  }\n            </span>;\n        }\n        return <li className = { listItemClass } key = { resource }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${resourceDescription.iconImg})`,\n            }}></div>\n            <div className = \"name\">\n                { TextManager.getResourceName(resource as Resource) }\n            </div>\n            <div className = \"amount\" >\n                { amount.toFixed(1) }\n            </div>\n            <div className = \"max\" >\n                { ` / ${props.maxResources[resource]}` }\n            </div>\n            <div className = \"delta\">\n                { delta }\n            </div>\n        </li>;\n    });\n\n    return (\n        <ul className = { className } >\n            { listItems }\n        </ul>\n    );\n};\n\nexport default ResourcesBox;\n","import AdventurerAvatar from \"components/ui/AdventurerAvatar\";\nimport Inventory from \"components/ui/inventory/Inventory\";\nimport ResourcesBox from \"components/ui/resources/ResourcesBox\";\nimport Tab from \"components/widgets/Tab\";\nimport Tabstrip from \"components/widgets/Tabstrip\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { Item } from \"definitions/items/types\";\nimport structureDefinitions, {  Structure  } from \"definitions/structures\";\nimport { StructureDefinition } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/warehousestructureview.css\";\n\nexport interface DispatchProps {\n    onMoveItemInWarehouse: (fromSlot: number, toSlot: number) => void;\n    onMoveItemFromAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => void;\n    onUpgrade?: (cost: number, level: number) => void;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props  {\n}\n\nexport interface StateProps  {\n    level: number;\n    workers: number;\n    workersFree: number;\n    gold: number;\n    items: Array<Item|null>;\n    adventurersInTown: AdventurerStoreState[];\n    resources: ResourceStoreState;\n    maxResources: ResourceStoreState;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\nconst warehouse = DragSourceType.warehouse;\n\nclass WarehouseStructureView extends React.Component<AllProps, LocalState> {\n    private resourcesDelta: ResourceStoreState;\n    private resourcesRef: HTMLFieldSetElement | null;\n\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedAdventurer: null,\n        };\n\n        this.resourcesDelta = {};\n        this.resourcesRef = null;\n    }\n\n    public render() {\n        const props = this.props;\n        const structureDefinition = structureDefinitions[Structure.warehouse] as StructureDefinition;\n        if (!structureDefinition) {\n            throw new Error(`No definition found for structure ${Structure.warehouse} with type StructureDefinition.`);\n        }\n        const level: number = props.level;\n        const displayName = TextManager.getStructureName(Structure.warehouse);\n\n        const createUpgradeRow = () => {\n            const gold = props.gold;\n            const nextLevel = structureDefinition.levels[level + 1];\n            const nextLevelCost = (nextLevel != null ? nextLevel.cost.gold || 0 : -1);\n            const canUpgrade = nextLevel != null && gold >= nextLevelCost;\n            const upgradeText = `Upgrade! (${nextLevelCost < 0 ? \"max\" : nextLevelCost + \" gold\"})`;\n\n            const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n                if (props.onUpgrade) { props.onUpgrade(nextLevelCost, level + 1); }\n            };\n            return <div>\n                <label>level:</label>{ (level + 1) + \" / \" + structureDefinition.levels.length }\n                <button\n                    style = {{ float: \"right\" }}\n                    onClick = { handleClick }\n                    disabled= { !canUpgrade }\n                >\n                    { upgradeText }\n                </button>\n            </div>;\n        };\n\n        const handleDropItemWarehouse = (item: Item, fromSlot: number,\n                                         toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            switch (sourceType) {\n                case warehouse:\n                    if (props.onMoveItemInWarehouse) {\n                        props.onMoveItemInWarehouse(fromSlot, toSlot);\n                    }\n                    break;\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemFromAdventurer) {\n                        props.onMoveItemFromAdventurer(sourceId!, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        const handleAdventurerTabSelected = (tabId: string) => {\n            this.setState({\n                selectedAdventurer: tabId,\n            });\n        };\n\n        const handleDropItemAdventurer = (item: Item, fromSlot: number,\n                                          toSlot: number, sourceType: DragSourceType, sourceId?: string): void => {\n            const adventurerId = this.state.selectedAdventurer!;\n            switch (sourceType) {\n                case DragSourceType.adventurerInventory:\n                    if (props.onMoveItemInInventory) {\n                        props.onMoveItemInInventory(adventurerId, fromSlot, toSlot);\n                    }\n                    break;\n                case warehouse:\n                    if (props.onMoveItemToAdventurer) {\n                        props.onMoveItemToAdventurer(adventurerId, item, fromSlot, toSlot);\n                    }\n                    break;\n            }\n        };\n\n        let adventurerContent = null;\n        if (this.state.selectedAdventurer) {\n            const adventurer = props.adventurersInTown.find((a) => a.id === this.state.selectedAdventurer)!;\n            adventurerContent = <Inventory\n                sourceType = { warehouse }\n                items = { adventurer.inventory }\n                onDropItem = { handleDropItemAdventurer }\n            />;\n        }\n\n        const adventurersArea = <>\n            <Tabstrip className = \"adventurers-tabstrip\" onTabSelected = { (tabId: string) => handleAdventurerTabSelected(tabId) } >\n            { props.adventurersInTown.map((a) => {\n                return <Tab id = { a.id } key = { a.id }>\n                    <AdventurerAvatar adventurer = { a } className = \"common-icon-small\"/>\n                </Tab>;\n            }) }\n            </Tabstrip>\n            <div className = \"adventurer-info\">\n                { adventurerContent }\n            </div>\n        </>;\n\n        return (\n            <details open = { true } className = \"warehouse-structureview\">\n                <summary>{ displayName }</summary>\n                { createUpgradeRow() }\n                <fieldset className=\"resources\" ref = { (ref) => { this.resourcesRef = ref; }}>\n                    <legend>Resources</legend>\n                    <ResourcesBox\n                        resources = { props.resources }\n                        maxResources = { props.maxResources }\n                        deltaResources = { this.resourcesDelta }\n                    />\n                </fieldset>\n\n                <Inventory\n                    sourceType = { warehouse }\n                    items = { props.items }\n                    onDropItem = { handleDropItemWarehouse }\n                />\n                { adventurersArea }\n\n            </details>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<AllProps>) {\n        Object.keys(prevProps.resources).forEach((resource: string) => {\n            this.resourcesDelta[resource] = this.props.resources[resource]! - prevProps.resources[resource]!;\n        });\n\n        if (this.resourcesRef) {\n            this.resourcesRef.classList.remove(\"animate\");\n            setTimeout(() => {\n                if (this.resourcesRef) {\n                    this.resourcesRef.classList.add(\"animate\");\n                }\n            }, 200);\n        }\n    }\n}\n\nexport default WarehouseStructureView;\n","import { addItemToInventory, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\nimport { subtractGold } from \"actions/gold\";\nimport { addItemToWarehouse, moveItemInWarehouse, removeItemFromWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { upgradeStructure } from \"actions/structures\";\nimport WarehouseStructureView,\n    { DispatchProps, Props, StateProps } from \"components/structures/warehouse/WarehouseStructureView\";\nimport { Item } from \"definitions/items/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { selectAdventurersInTown } from \"selectors/adventurers\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { StoreState } from \"../../../stores\";\nimport { StructureStoreState } from \"../../../stores/structure\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const structureStore: StructureStoreState = store.structures[Structure.warehouse];\n    const structureDefinition = structureDefinitions[Structure.warehouse] as WarehouseStructureDefinition;\n    const level: number = structureStore.level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    const adventurersInTown = selectAdventurersInTown(store);   // todo: refreshes too much. fix\n\n    if (!structureStore) { throw new Error(`No structure '${Structure.warehouse}' found in the store!`); }\n    return {\n        adventurersInTown,\n        gold: store.gold,\n        items: store.items,\n        level,\n        maxResources: levelDefinition.maxResources,\n        resources: store.resources,\n        workers: structureStore.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onMoveItemFromAdventurer(adventurerId: string, item: Item, fromSlot: number, toSlot: number) {\n            const action1 = removeItemFromInventory(adventurerId, fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToWarehouse(item, toSlot);\n            dispatch(action2);\n        },\n        onMoveItemInWarehouse(fromSlot: number, toSlot: number) {\n            dispatch(moveItemInWarehouse(fromSlot, toSlot));\n        },\n        // Moves item within an adventurers' inventory\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        // Moves item from warehouse to an adventurer\n        onMoveItemToAdventurer: (adventurerId: string, item: Item, fromSlot: number, toSlot: number) => {\n            const action1 = removeItemFromWarehouse(fromSlot);\n            dispatch(action1);\n\n            const action2 = addItemToInventory(adventurerId, item, toSlot);\n            dispatch(action2);\n        },\n        onUpgrade: (cost: number, level: number) => {\n            dispatch(subtractGold(cost));\n            dispatch(upgradeStructure(Structure.warehouse)); // Todo: [07/07/2019] time??\n\n            level++;\n            dispatch(addLogEntry(\"log-town-upgrade-structure-complete\", {\n                level,\n                structure: Structure.warehouse,\n            }, LogChannel.town));\n        },\n    };\n}\n\n// export default compose(\n//     connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n// //    withAppContext,\n// )(WarehouseStructureView) as React.ComponentType<Props>;\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(WarehouseStructureView);\n","\nimport ProductionStructureView from \"containers/structures/ProductionStructureView\";\nimport ResourceStructureView from \"containers/structures/ResourceStructureView\";\nimport TavernStructureView from \"containers/structures/tavern/TavernStructureView\";\nimport WarehouseStructureView from \"containers/structures/warehouse/WarehouseStructureView\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { StructureDefinition, StructureType } from \"definitions/structures/types\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TaskStoreState } from \"stores/task\";\nimport \"./css/structuredetails.css\";\nimport Progressbar from \"./ui/Progressbar\";\n\nexport interface Props {\n    structure: Structure;\n}\n\nexport interface StateProps  {\n    structures: StructuresStoreState;\n    buildTask: TaskStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n\nconst getStructureView = (structure: Structure) => {\n    const structureDefinition: StructureDefinition = structureDefinitions[structure as string];\n    switch (structureDefinition.type) {\n        case StructureType.production: {\n            return <ProductionStructureView type = { structure }/>;\n        }\n        case StructureType.resource: {\n            return <ResourceStructureView type = { structure }/>;\n        }\n        case StructureType.warehouse: {\n            return <WarehouseStructureView />;\n        }\n        case StructureType.tavern: {\n            return <TavernStructureView />;\n        }\n        default: {\n            return <div> { structure } </div>;\n        }\n    }\n};\n\nconst StructureDetails = (props: AllProps) => {\n    let view;\n    const structureState: StructureStoreState = props.structures[props.structure];\n    if (structureState.state === StructureState.Building) {\n        const progress = props.buildTask ? props.buildTask.progress : 1 ;\n        view = <div>\n            <Progressbar label = \"Building...\" progress= { progress } />\n        </div>;\n    } else {\n        view = getStructureView(props.structure) ;\n    }\n\n    return <fieldset className=\"structure-details\">\n        <legend>Structure</legend>\n        { view }\n    </fieldset>;\n};\n\nexport default StructureDetails;\n","import \"components/ui/css/common/icon.css\";\nimport \"components/ui/resources/css/resourcesbox.css\";\nimport SquareIconButton from \"components/widgets/SquareIconButton\";\nimport * as React from \"react\";\n\nexport interface Props {\n    title: string;\n    backEnabled?: boolean;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n}\n\ntype AllProps = Props;\n\n/**\n *\n */\nconst Window: React.FunctionComponent<AllProps> = (props) => {\n\n    const handleClose = (e: React.MouseEvent) => {\n        if (props.onClose) {\n            props.onClose();\n        }\n    };\n    const handleBack = (e: React.MouseEvent) => {\n        if (props.onBack) {\n            props.onBack();\n        }\n    };\n\n    let BackButton = null;\n    if (props.backEnabled !== false) {\n         BackButton = <SquareIconButton className = \"back-button\" onClick = { handleBack } text = \"<\"/>;\n\n    }\n\n    let CloseButton = null;\n    if (props.closeEnabled !== false) {\n        CloseButton = <SquareIconButton className = \"close-button\" onClick = { handleClose } text = \"x\"/>;\n    }\n\n    return <div className = \"window\">\n        <div className = \"header\">\n            { BackButton }\n            <h3>{ props.title }</h3>\n            { CloseButton }\n        </div>\n        { props.children }\n    </div>;\n};\n\nexport default Window;\n","import \"components/ui/window/css/window.css\";\nimport Window, { Props } from \"components/ui/window/Window\";\nimport * as React from \"react\";\n\nexport const withWindow = <TWrappedComponentProps extends Props>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n    return class WithWindow extends React.Component<TWrappedComponentProps> {\n\n        constructor(props: TWrappedComponentProps) {\n            super(props);\n        }\n\n        public render() {\n            return <Window { ...this.props } >\n                <WrappedComponent { ...this.props } />\n            </Window>;\n        }\n    };\n};\n","import { addGold } from \"actions/gold\";\nimport { addResources } from \"actions/resources\";\nimport StructureDetailsView, { DispatchProps, Props, StateProps } from \"components/StructureDetailsView\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const buildTask = store.tasks.running.filter((val) =>\n        val.origin === `town` && val.name === `${ownProps.structure}.build`)[0];\n\n    return {\n        buildTask,\n        structures: store.structures,\n    };\n}\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>): DispatchProps {\n    return {\n        onCheatGold: (amount: number) => dispatch(addGold(amount)),\n        onCheatResources: (amount: ResourceStoreState) => dispatch(addResources(amount)),\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(StructureDetailsView) as React.ComponentType<Props & WindowProps>;\n","import seedrandom from \"seedrandom\";\n\nlet generator: seedrandom.prng;\nexport function init(seed: string) {\n    dirty = true;\n    generator = seedrandom(seed, {state: true});\n}\n\nexport function random(): number {\n    if (!generator) { throw new Error(\"Call init() before random()\"); }\n    dirty = true;\n    return generator();\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport function randomInt(min: number = 0, max: number = 10) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(random() * (max - min + 1)) + min;\n}\n\nexport function state(): seedrandom.State {\n    dirty = false;\n    return generator.state();\n}\n\nexport let dirty = false;\n","import { DragType } from \"constants/dragging\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport AdventurerAvatar, { Props as AdventurerAvatarProps} from \"./AdventurerAvatar\";\nimport \"./css/droppableadventureravatar.css\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        return true; // todo: can't drop on yourself\n    },\n};\n\nexport interface Props extends AdventurerAvatarProps {\n    onDrop: (item: any) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The AdventurerAvatar displays the avatar of an adventurer in the party screen\n */\nclass DroppableAdventurerAvatar extends React.Component<Props & DropSourceProps> {\n    public render() {\n        const {\n            connectDropTarget,\n        } = this.props;\n        // const isActive = isOver && canDrop;\n\n        return connectDropTarget(\n            <div className=\"droppable-adventurer-avatar\">\n                <AdventurerAvatar\n                    adventurer = { this.props.adventurer }\n                    onClick = { this.props.onClick }\n                />\n            </div>,\n        );\n    }\n}\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(DroppableAdventurerAvatar);\n","// todo: hooks!\n// https://github.com/react-dnd/react-dnd/pull/1244\nimport { DragType } from \"constants/dragging\";\nimport { getDefinition } from \"definitions/items\";\nimport { EquipmentDefinition, EquipmentType } from \"definitions/items/equipment\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport * as React from \"react\";\nimport { ConnectDropTarget, DropTarget, DropTargetConnector, DropTargetMonitor, DropTargetSpec } from \"react-dnd\";\nimport \"./css/equipmentslot.css\";\nimport { InventoryItemDragInfo } from \"./DraggableItemIcon\";\n\nconst dropTarget: DropTargetSpec<Props> = {\n    drop(props: Props, monitor: DropTargetMonitor) {\n        props.onDrop(monitor.getItem());\n    },\n    canDrop(props: Props, monitor: DropTargetMonitor)  {\n        const item = monitor.getItem().item;\n        const def = getDefinition(item);\n        // Can only drop the right equipment type\n        if (def.itemType !== ItemType.equipment) {\n            return false;\n        }\n        const equipmentDef = def as EquipmentDefinition;\n        return equipmentDef.equipmentType === props.type;\n    },\n};\n\nexport interface Props {\n    type: EquipmentType;\n    onDrop: (item: InventoryItemDragInfo) => void;\n}\n\nexport interface DropSourceProps {\n    canDrop: boolean;\n    isOver: boolean;\n    connectDropTarget: ConnectDropTarget;\n}\n\nconst collect = (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n    canDrop: monitor.canDrop(),\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n});\n\n/**\n * The EquipmentSlot displays a slot in which an item can be placed.\n */\nconst EquipmentSlot = (props: React.PropsWithChildren<Props & DropSourceProps>) => {\n    const {\n        isOver,\n        canDrop,\n        connectDropTarget,\n    } = props;\n    const isActive = isOver && canDrop;\n    let borderColor = \"grey\";\n    if (isActive) {\n        borderColor = \"green\";\n    } else if (canDrop) {\n        borderColor = \"orange\";\n    }\n\n    return connectDropTarget(\n        <div  className = \"equipment-slot\" style = { { borderColor }}>\n            { props.children }\n        </div>,\n    );\n};\n\nexport default DropTarget<Props, DropSourceProps>(\n    DragType.ITEM,\n    dropTarget,\n    collect,\n)(EquipmentSlot);\n","import { AppContext } from \"components/App\";\r\nimport { ContextType } from \"constants/context\";\r\nimport { DragSourceType } from \"constants/dragging\";\r\nimport { getDefinition } from \"definitions/items\";\r\nimport { EquipmentType } from \"definitions/items/equipment\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport { AdventurerStoreState } from \"stores/adventurer\";\r\nimport \"./css/adventurerinfo.css\";\r\nimport DraggableItemIcon, { InventoryItemDragInfo } from \"./DraggableItemIcon\";\r\nimport EquipmentSlot from \"./EquipmentSlot\";\r\nimport Inventory from \"./inventory/Inventory\";\r\nimport { IconSize } from \"constants/icons\";\r\n\r\nexport interface Props {\r\n    adventurer: AdventurerStoreState;\r\n}\r\n\r\nexport interface DispatchProps {\r\n    onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => void;\r\n    onRemoveItemFromInventory: (adventurerId: string, fromSlot: number) => void;\r\n    onAssignEquipment: (adventurerId: string, type: EquipmentType, item: Item) => void;\r\n}\r\n\r\ntype AllProps = Props & DispatchProps;\r\n\r\nconst AdventurerInfo = (props: AllProps) => {\r\n\r\n    const context = React.useContext(AppContext)!;\r\n    const adventurer = props.adventurer;\r\n    const attributes = Object.keys(adventurer.stats).map((stat) => {\r\n        const value: number = adventurer.stats[stat];\r\n        return <div key = { `${adventurer.id}-${stat}`} > <b>{ stat }</b>: { value.toFixed(1) } </div>;\r\n    });\r\n    // const equipmentList = Object.keys(getEquipment(.map((equipment) =) {\r\n    //     return <div key = { `${adventurer.id}-${equipment}` } ><b>{ equipment }</b>: { getEquipment(equipment] }  </di)>;\r\n    // });\r\n\r\n    const handleDropItemEquipment = (type: EquipmentType, dragInfo: InventoryItemDragInfo) => {\r\n        const item = dragInfo.item;\r\n        props.onRemoveItemFromInventory(adventurer.id, dragInfo.inventorySlot!);\r\n        props.onAssignEquipment(adventurer.id, type, item);\r\n    };\r\n\r\n    const getEquipmentSlot = (type: EquipmentType) => {\r\n        // returns EquipmentSlot\r\n        const item: Item | undefined = adventurer.equipment[EquipmentType[type]];\r\n        let contents = null;\r\n\r\n        if (item) {\r\n            const itemRef: React.RefObject<any> = React.createRef();\r\n            const handleClick = (event: React.MouseEvent) => {\r\n                const origin = (event.currentTarget as HTMLElement);\r\n                const originRect = origin.getBoundingClientRect();\r\n                context.onContextualObjectActivated(\r\n                    ContextType.item,\r\n                    getDefinition(item),\r\n                    itemRef,\r\n                    originRect,\r\n                );\r\n                event.stopPropagation();\r\n            };\r\n\r\n            contents = <DraggableItemIcon\r\n                index = { type }\r\n                sourceId = { adventurer.id }\r\n                sourceType = { DragSourceType.adventurerEquipment }\r\n                item = { item }\r\n                onClick = { handleClick }\r\n                ref = { itemRef }\r\n                size = { IconSize.medium }\r\n            >\r\n            </DraggableItemIcon>;\r\n        }\r\n\r\n        return <EquipmentSlot\r\n            onDrop = { (dragInfo: InventoryItemDragInfo) => handleDropItemEquipment(type, dragInfo) }\r\n            type = { type }>\r\n                { contents }\r\n        </EquipmentSlot>;\r\n    };\r\n\r\n    const equipmentList = <ul>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.head) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.shoulders) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.chest) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.hands) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.legs) }\r\n        </li>\r\n        <li>\r\n            { getEquipmentSlot(EquipmentType.feet) }\r\n        </li>\r\n    </ul>;\r\n\r\n    const handleDropItemInventory = (item: Item, fromSlot: number, toSlot: number): void => {\r\n        // TODO: what if the source is NOT adventurer?\r\n        if (props.onMoveItemInInventory) {\r\n            props.onMoveItemInInventory(adventurer.id, fromSlot, toSlot);\r\n        }\r\n    };\r\n    return (\r\n        <div className = \"adventurer-info\">\r\n            <div className = \"left\">\r\n                <div className = \"name\">\r\n                    <b>{ adventurer.name }</b>\r\n                </div>\r\n                <div className = \"attributes\">\r\n                    { attributes }\r\n                </div>\r\n                <div className = \"equipment\">\r\n                    { equipmentList }\r\n                </div>\r\n            </div>\r\n            <div className = \"right\">\r\n                <Inventory\r\n                    sourceType = { DragSourceType.adventurerInventory }\r\n                    sourceId = { adventurer.id }\r\n                    items = { adventurer.inventory }\r\n                    onDropItem = { handleDropItemInventory }\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdventurerInfo;\r\n","import { assignEquipment, moveItemInInventory, removeItemFromInventory } from \"actions/adventurers\";\r\nimport AdventurerInfo, { DispatchProps, Props } from \"components/ui/AdventurerInfo\";\r\nimport { EquipmentType } from \"definitions/items/equipment\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { AnyAction, Dispatch } from \"redux\";\r\nimport { StoreState } from \"stores\";\r\n\r\n// todo: perhaps not use container, just pass dispatch callbacks as props?\r\nconst mapStateToProps = (store: StoreState) => {\r\n\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\r\n    return {\r\n        // Equipment gets assigned to a slot\r\n        onAssignEquipment: (adventurerId: string, type: EquipmentType, item: Item) => {\r\n            const action = assignEquipment(adventurerId, type, item);\r\n            dispatch(action);\r\n        },\r\n        // Moves item within an adventurers' inventory\r\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\r\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\r\n            dispatch(action);\r\n        },\r\n        // Removes an item from an adventurers' inventory\r\n        onRemoveItemFromInventory: (adventurerId: string, fromSlot) => {\r\n            const action = removeItemFromInventory(adventurerId, fromSlot);\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect<object, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(AdventurerInfo);\r\n","import { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\n\n// export const adventurersInParty = (store: StoreState, partyId: string): AdventurerStoreState[] => {\n//     const party: PartyStoreState = store.parties[partyId];\n//     return party.adventurers.map((id: string) => findAdventurerById(store, id)!);\n// };\n\nexport const adventurersOnQuest = (store: StoreState, quest: QuestStoreState): AdventurerStoreState[] => {\n    return quest.party.map((id: string) => findAdventurerById(store, id)!);\n};\n\nexport const findAdventurerById = (store: StoreState, id: string): AdventurerStoreState | undefined => {\n    return store.adventurers.find((a) => a.id === id);\n};\n\nexport const storeIsRehydrated = (store: StoreState): boolean => {\n    // Returns a value indicating whether this store is fresh or rehydrated\n    // Probably I should find a more solid way to do this\n    return !!store.rngState;\n};\n","import { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { randomInt } from \"utils/random\";\n\n/**\n * The Oracle is a helper class for retrieving relevant data during encounters\n */\nexport class Oracle {\n    public readonly questName: string;\n    public readonly store: StoreState;\n\n    constructor(questName: string, store: StoreState) {\n        this.questName = questName;\n        this.store = store;\n    }\n\n    /**\n     * Returns the questVars of the quest that this encounter is part of\n     */\n    public get questVars(): any {\n        return this.quest.questVars;\n    }\n\n    /**\n     * Returns the quest that this encounter is part of\n     */\n    public get quest(): QuestStoreState {\n        return this.store.quests.find((q) => q.name === this.questName)!;\n    }\n\n    /**\n     * Returns all adventurers on this quest\n     */\n    public get adventurers(): AdventurerStoreState[] {\n        return adventurersOnQuest(this.store, this.quest);\n    }\n\n    /**\n     * Returns the adventurer in the encounter with highest given stat\n     * @param stat\n     */\n    public getAdventurerWithHighest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (b.stats[stat] - a.stats[stat]))[0];\n    }\n\n    /**\n     * Returns the adventurer in the encounter with lowest given stat\n     * @param stat\n     */\n    public getAdventurerWithLowest(stat: string): AdventurerStoreState { // todo: refactor 'stat' into enum\n        return adventurersOnQuest(this.store, this.quest)\n            .concat().sort((a, b) => (a.stats[stat] - b.stats[stat]))[0];\n    }\n\n    /**\n     * Returns a random adventurer in the party\n     */\n    public getRandomAdventurer(): AdventurerStoreState {\n        return this.adventurers[randomInt(0, this.adventurers.length)];\n    }\n}\n\nexport const oracles: any = {\n    // This will be the global store to hold all oracles, keyed by quest\n};\n","// tslint:disable:object-literal-sort-keys\nimport { addItemToInventory } from \"actions/adventurers\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Item } from \"../items/types\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const backstabbed: EncounterDefinition = {\n    name: Encounter.backstabbed,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-backstabbed-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            fight: \"Fight the brigands\",\n            flight: \"Run away!\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        switch (option) {\n            case \"flight\":\n                return \"You run away like a pussy\";\n            case \"fight\":\n                const finder = oracle.getRandomAdventurer();\n                dispatch(addItemToInventory(finder.id, Item.deedForWeaponsmith));\n                return `The party fights off the rogues. One of them drops a document. ${finder.name} picks it up`;\n            default:\n                throw new Error(`Unhandled option '${option}`);\n        }\n    },\n};\n","// tslint:disable:object-literal-sort-keys\nimport { startEncounter, updateQuestVars, advanceQuest } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface QuestVars {\n}\n\nexport const goblinHouseOutside: EncounterDefinition = {\n    name: Encounter.goblinHouseOutside,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseOutside-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Investigate\",\n            leave: \"Keep walking\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"investigate\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            case \"leave\": {\n                const nextEncounter = startEncounter(quest.name, Encounter.goblinHouseHallway);\n                // const action = updateQuestVars(quest.name, questVars);\n                dispatch(nextEncounter);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party coutiously opens the door and goes inside`;\n            }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\nexport const goblinHouseHallway: EncounterDefinition = {\n    name: Encounter.goblinHouseHallway,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        return { key: \"encounter-goblinHouseHallway-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        const options: Record<string, string> = {\n            investigate: \"Go inside the house\",\n            leave: \"Leave the premise\",\n        };\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { store, questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"leave\":\n                // const nextEncounter = startEncounter(quest.name, goblinhouseInside)\n                const action = advanceQuest(oracle.questName);\n                dispatch(action);\n\n                // tslint:disable-next-line:max-line-length\n                return `The party escapes the house unscathed`;\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n\n// todo: other goblinHouse encounters\n","import { backstabbed } from \"./backstabbed\";\nimport { goblinHouseHallway, goblinHouseOutside } from \"./goblinHouse\";\nimport { theBigTree } from \"./theBigTree\";\nimport { EncounterDefinition } from \"./types\";\n\nconst all = {\n    backstabbed,\n    goblinHouseHallway,\n    goblinHouseOutside,\n    theBigTree,\n};\n\nexport default all;\n\nexport function getDefinition(encounter: string): EncounterDefinition {\n    return all[encounter];\n}\n","// tslint:disable:object-literal-sort-keys\nimport { addGold } from \"actions/gold\";\nimport { updateQuestVars } from \"actions/quests\";\nimport { Oracle } from \"oracle\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { randomInt } from \"utils/random\";\nimport { Encounter, EncounterDefinition } from \"./types\";\n\nexport interface QuestVars {\n    treeState: string;\n}\n\nexport const theBigTree: EncounterDefinition = {\n    name: Encounter.theBigTree,\n    getOracle: (questName: string, store: StoreState) => {\n        return new Oracle(questName, store);\n    },\n    getDescription: (oracle: Oracle) => {\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     return `A huge tree blocks the way. ${pyromancer.name} offers to burn it`;\n        // }\n        return { key: \"encounter-thebigtree-description\" };\n    },\n    getOptions: (oracle: Oracle) => {\n        //const store = oracle.store;\n        const strongest = oracle.getAdventurerWithHighest(\"strength\");\n        //        const strongest = { name: \"<<NAME>>\" };\n        const options: Record<string, string> = {\n            walkAround: \"Walk around the tree\",\n            lift: `Lift the tree (${strongest.name})`,\n        };\n        // todo: should be 'type' or 'class'\n        // const pyromancer = store.adventurers.find((a) => a.name === \"pyromancer\");\n        // if (pyromancer) {\n        //     options.burn = \"Burn it down (${pyromancer.name}\";\n        // }\n        return options;\n    },\n    answer: (option: string, oracle: Oracle, dispatch: Dispatch<AnyAction>) => {\n        const { questVars, quest } = oracle;\n        switch (option) {\n            case \"walkAround\":\n                return \"Your party walks around the tree\";\n\n            case \"lift\":\n                const strongest = oracle.getAdventurerWithHighest(\"strength\");\n                questVars.treeState = \"lifted\";\n\n                const action = updateQuestVars(quest.name, questVars);\n                dispatch(action);\n\n                const goldAmount = randomInt(2, 5);\n                const goldAction = addGold(goldAmount);\n                dispatch(goldAction);\n\n                // tslint:disable-next-line:max-line-length\n                return `${strongest.name} heaves and lifts the heavy tree, moving it aside. Underneath your party finds ${goldAmount} gold coins`;\n\n                // if(random() < strongest.stats.strenth) {\n                //     questState.bigTreeState = \"lifted\";\n                //     giveGold(3);\n                //     return \"${strongest.name} heaves and lifts the heavy tree,\n                // moving it aside. Underneath your party finds 3 gold coins\";\n                // }\n                // else {\n                //     strongest.loseHealth(20);\n                //     if(strongest.isDead){\n                //         return \"${strongest.name} attempted to lift the\n                // tree but it is too heavy, causing him to die\".\n                //     }\n                //     return \"%{strongest.name} attempted to lift the tree but it is too heavy, losing 20 hp\";\n                // }\n            // case \"burn\":\n            //     const pyrommancer = store.adventurers.find(a => a.type == \"pyromancer\")\n            //     questState.bigTreeState = \"burned\";\n            //     return \"${pyromancer.name} cackles as you sets the tree ablaze.\n            // The party steps over the smouldering ashes and continues\"\n            // }\n            default:\n                throw new Error(`Unhandled option ${option}`);\n        }\n    },\n};\n","import { InventoryItemDragInfo } from \"components/ui/DraggableItemIcon\";\nimport DroppableAdventurerAvatar from \"components/ui/DroppableAdventurerAvatar\";\nimport Inventory from \"components/ui/inventory/Inventory\";\nimport { DragSourceType } from \"constants/dragging\";\nimport { TextEntry } from \"constants/text\";\nimport AdventurerInfo from \"containers/ui/AdventurerInfo\";\nimport { getDefinition as getEncounterDefinition } from \"definitions/encounters\";\nimport { EncounterDefinition } from \"definitions/encounters/types\";\nimport { Item } from \"definitions/items/types\";\nimport { getDefinition as getQuestDefinition, QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport React from \"react\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { AdventurerStoreState } from \"stores/adventurer\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/partywindow.css\";\n\nexport interface StateProps {\n    adventurers: AdventurerStoreState[];\n    store: StoreState;\n    lastLog?: TextEntry;\n}\n\nexport interface Props {\n    quest: QuestStoreState;\n}\n\nexport interface DispatchProps {\n    onDispatch: Dispatch<AnyAction>;\n    onAdvanceQuest: (quest: string) => void;\n    onUpdateEncounterResult: (nodeIndex: number, result: string) => void;\n    onMoveItemInInventory?: (adventurerId: string, fromSlot: number, toSlot: number) => void;\n    onMoveItemToOtherAdventurer?: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => void;\n}\n\ninterface LocalState {\n    selectedAdventurer: string | null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n\n// export default\nclass PartyWindow extends React.Component<AllProps, LocalState> {\n\n    // This Component has local state, so it's a class\n    constructor(props: AllProps) {\n        super(props);\n        this.state = {\n            selectedAdventurer: null,\n        };\n    }\n\n    public render() {\n        return (\n            <div className = \"partywindow\">\n                <div className = \"avatars\">\n                    { this.getAvatars() }\n                </div>\n                { this.getBottomPart() }\n            </div>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (prevProps.quest !== this.props.quest) {\n            // The active quest has changed, so it doesn't make sense to keep any adventurer selected\n            this.setState({\n                selectedAdventurer: null,\n            });\n        }\n    }\n\n    private getAdventurerInfo(adventurer: AdventurerStoreState): any {\n        if (!adventurer) {\n            return null;\n        }\n        return <AdventurerInfo adventurer = { adventurer } />;\n    }\n\n    private handleAvatarClick(adventurerId: string | null): void {\n        if (this.state.selectedAdventurer === adventurerId) {\n            adventurerId = null;\n        }\n        this.setState({\n            selectedAdventurer: adventurerId,\n        });\n    }\n\n    private handleEncounterOptionClick(encounter: EncounterDefinition, option: string, oracle: any): any {\n        const result = encounter.answer(option, oracle, this.props.onDispatch);\n\n        /*if (!isEqual(questVars, this.props.quest.questVars)){\n            this.props.onUpdateQuestVars(questVars);\n        }*/\n        this.props.onUpdateEncounterResult(this.props.quest.progress, result);\n       // this.props.onAdvanceQuest(this.props.quest.name);\n    }\n\n    private getAvatars = () => {\n        return this.props.adventurers.map((adventurer: AdventurerStoreState) => {\n            const handleDropItem = (dragInfo: InventoryItemDragInfo) => {\n                const fromAdventurer = this.state.selectedAdventurer!; // The adventurer that has the item\n                if (adventurer.id === fromAdventurer) {\n                    // Dropping on yourself.. nothing happens\n                    return;\n                }\n\n                if (this.props.onMoveItemToOtherAdventurer) {\n                    const {\n                        inventorySlot: fromSlot,\n                    } = dragInfo;\n                    this.props.onMoveItemToOtherAdventurer(fromAdventurer, fromSlot!, adventurer.id);\n                }\n            };\n\n            const selected = this.state.selectedAdventurer === adventurer.id;\n            return <DroppableAdventurerAvatar\n                key = { `${adventurer.id}-avatar` }\n                className = { (selected ? \" selected\" : \"\") }\n                adventurer = { adventurer }\n                onClick = { () => this.handleAvatarClick(adventurer.id) }\n                onDrop = { handleDropItem }\n            />;\n        });\n    }\n\n    private getBottomPart = () => {\n\n        if (this.state.selectedAdventurer) {\n            const adventurer: AdventurerStoreState = this.props.adventurers\n                .find((a) => a.id === this.state.selectedAdventurer)!;\n            return this.getAdventurerInfo(adventurer);\n        } else {\n            const quest = this.props.quest;\n            const questDefinition: QuestDefinition = getQuestDefinition(quest.name);\n            const progress: number = Math.floor(quest.progress);\n            const questNode: QuestNode = questDefinition.nodes[progress];\n\n            let message = <p></p>;\n            let actions = <p></p>;\n\n            switch (questNode.type) {\n                case QuestNodeType.nothing: {\n                    message = <div> {\n                        this.props.lastLog && TextManager.getTextEntry(this.props.lastLog)\n                    } </div>;\n                    break;\n                }\n                case QuestNodeType.encounter: {\n                    // if (quest.encounterResults[quest.progress]) {\n                    //     message = <p> { quest.encounterResults[quest.progress] } </p>;\n                    //     break;\n                    // }\n                    const store = this.props.store;\n                    const encounter = getEncounterDefinition(quest.currentEncounter!);\n                    const oracle = encounter.getOracle(quest.name, store);\n                    const descriptionTextEntry = encounter.getDescription(oracle);\n                    const descriptionText = TextManager.getTextEntry(descriptionTextEntry);\n\n                    message = <div><p> { descriptionText } </p></div>;\n\n                    const options = encounter.getOptions(oracle);\n\n                    actions = <ul>\n                        { Object.keys(options).map((o) => <li key={ o }>\n                            <button onClick= { () => this.handleEncounterOptionClick(encounter, o, oracle) }>\n                                { o }\n                            </button>{ options[o]}\n                        </li>)}\n                    </ul>;\n\n                    break;\n                }\n                case QuestNodeType.boss: {\n                    message = <p> { \"Boss fight!\" } </p>;\n                    break;\n                }\n            }\n\n            return (\n            <div className=\"questlog\">\n                { message }\n                <div className=\"actions\">\n                    { actions}\n                </div>\n            </div>);\n        }\n    }\n}\n\nexport default PartyWindow;\n","import { moveItemInInventory, moveItemToOtherAdventurer } from \"actions/adventurers\";\nimport { updateEncounterResult } from \"actions/quests\";\nimport { advanceQuest } from \"actions/quests\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport PartyWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/PartyWindow\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { selectLastQuestLogEntry } from \"selectors/quests\";\nimport { adventurersOnQuest } from \"storeHelpers\";\nimport { StoreState } from \"../../stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    const adventurers = adventurersOnQuest(store, ownProps.quest);\n    const lastLog = selectLastQuestLogEntry(store, ownProps.quest.name);\n    return {\n        adventurers,\n        lastLog,\n        store, // needed for the oracle, causes update all the time :/\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n            dispatch(advanceQuest(quest));\n        },\n        onDispatch: dispatch,\n        onMoveItemInInventory: (adventurerId: string, fromSlot: number, toSlot: number) => {\n            const action = moveItemInInventory(adventurerId, fromSlot, toSlot);\n            dispatch(action);\n        },\n        onMoveItemToOtherAdventurer: (fromAdventurerId: string, fromSlot: number, toAdventurerId: string) => {\n            const action = moveItemToOtherAdventurer(fromAdventurerId, fromSlot, toAdventurerId);\n            dispatch(action);\n        },\n        onUpdateEncounterResult: (nodeIndex: number, result: string) => {\n            const action = updateEncounterResult(ownProps.quest.name, nodeIndex, result);\n            dispatch(action);\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(PartyWindow) as React.ComponentType<Props & WindowProps>;\n","\nimport questDefinitions, { QuestDefinition, QuestNode, QuestNodeType } from \"definitions/quests\";\nimport * as React from \"react\";\nimport { QuestStoreState } from \"stores/quest\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/questlinevisualization.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n    quest: QuestStoreState;\n    selected: boolean;\n    onSelectQuest: (questName: string) => void;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    // onAdvanceQuest: (questName: string) => void;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface StateProps {\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\n/**\n * Shows quest line\n * @param props\n */\nexport default function(props: AllProps) {\n    const { quest } = props;\n    const questDefinition: QuestDefinition = questDefinitions[quest.name];\n\n    const createNodeVisualization = (node: QuestNode, index: number) => {\n        const progress: number = Math.floor(quest.progress);\n        const className = progress === index ? \"active\" : \"\";\n        const spanProps = {\n            className,\n            key: `node_${index}`,\n        };\n        switch (node.type) {\n            case QuestNodeType.encounter:\n                return <span title=\"encounter\" { ...spanProps }>*</span>;\n            case QuestNodeType.boss:\n                return <span title=\"boss\" { ...spanProps }>#</span>;\n            case QuestNodeType.nothing:\n            default:\n                return <span { ...spanProps }>-</span>;\n            }\n    };\n\n    const questNodes = questDefinition.nodes.map((n, i) => createNodeVisualization(n, i));\n\n    return <div className=\"questlinevisualization\">\n        <div className=\"questname\"> { TextManager.getQuestTitle(quest.name) } </div>\n        { questNodes }\n        { props.selected ? <span className=\"selected\">selected</span> : <button className=\"select\"\n            onClick={ () => props.onSelectQuest(quest.name)}>select</button> }\n    </div>;\n}\n","import PartyWindow from \"containers/windows/PartyWindow\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\nimport { MusicTrack, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport QuestLineVisualization from \"../world/QuestLineVisualization\";\nimport \"./css/realworldview.css\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\nexport interface DispatchProps {\n    onAdvanceQuest: (questName: string) => void;\n}\n\nexport interface StateProps {\n    quests: QuestStoreState[];\n}\n\ninterface LocalState {\n    selectedQuest: string | null;\n}\n\ntype AllProps = Props & StateProps & DispatchProps & AppContextProps;\n/**\n * Temporary wrapper around PartyScreen. Shows quest line\n * @param props\n */\nexport default class RealWorldView extends React.Component<AllProps, LocalState> {\n\n    // This Component has local state, so it's a class\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            selectedQuest: null,\n        };\n\n        SoundManager.addMusicTrack(MusicTrack.world, \"sound/music/TheLoomingBattle.ogg\");\n    }\n\n    public render() {\n        const selectedQuest = this.props.quests.find((q) => q.name === this.state.selectedQuest);\n        const activeQuests = this.props.quests.filter((q) => q.status === QuestStatus.active );\n        const questLines = activeQuests.map((q) => {\n            return <QuestLineVisualization key={ q.name }\n                selected={q === selectedQuest}\n                quest={q}\n                onSelectQuest={() => this.handleSelectQuest(q.name)}\n            />;\n        });\n\n        return <div className=\"realworldview\">\n            <fieldset className=\"progress\">\n                <legend>Quest progress</legend>\n                {questLines}\n            </fieldset>\n        </div>;\n    }\n\n    public handleSelectQuest(questName: string) {\n        this.setState({\n            selectedQuest: questName,\n        });\n        const quest = this.props.quests.find((q) => q.name === questName)!;\n        const title = TextManager.getQuestTitle(quest.name);\n        const window = <PartyWindow quest = { quest }  title = { title } />;\n        this.props.onOpenWindow(window);\n    }\n\n    public componentDidMount() {\n        this.playMusic();\n    }\n\n    private playMusic() {\n       SoundManager.playMusicTrack(MusicTrack.world);\n    }\n\n}\n","import RealWorldView,\n    { DispatchProps, Props, StateProps } from \"components/partyScreen/RealWorldView\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        quests: store.quests,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n        onAdvanceQuest: (quest: string) => {\n        },\n    };\n}\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withAppContext,\n)(RealWorldView) as React.ComponentType<Props>;\n","import \"components/ui/popup/css/popup.css\";\nimport * as React from \"react\";\n\nconst ARROW_SIZE = 8; // warning: sync to popup.css var\nconst PADDING = 8;\n\n// Sharing context within the entire App\nexport interface PopupProps {\n    containerRect: ClientRect;\n    referenceRect: ClientRect;\n    placement?: Placement;\n    children: any;\n}\n\nexport enum Placement {\n    bottom,\n    top,\n    left,\n    right,\n}\n\nexport const withPopup = <TWrappedComponentProps extends PopupProps>(WrappedComponent: React.ComponentType<TWrappedComponentProps>) => {\n\n    const WithPopup = (props: TWrappedComponentProps) => {\n\n        const ref = React.useRef<HTMLDivElement>(null);\n        const [ placement, setPlacement ] = React.useState<Placement>(props.placement || Placement.bottom);\n\n        const containerRect = props.containerRect;\n        const referenceRect = props.referenceRect;\n\n        React.useEffect(() => {\n            // Reposition if needed\n            const popupElement = ref.current!;\n            const popupRect = popupElement.getBoundingClientRect();\n\n            // Flip vertically\n            switch (placement) {\n                case Placement.top:\n                    if (popupRect.top - popupRect.height - ARROW_SIZE - PADDING < containerRect.top) {\n                        // Too high, place underneath\n                        setPlacement(Placement.bottom);\n                        return;\n                    }\n                case Placement.bottom:\n                    if (popupRect.top + popupRect.height + ARROW_SIZE + PADDING > containerRect.height ) {\n                        // Too low, place top\n                        setPlacement(Placement.top);\n                        return;\n                    }\n            }\n            popupElement.style.opacity = \"1\"; // animated through css\n\n            // Check left bounding edge\n            if (popupRect.left < containerRect.left + PADDING) {\n                const offset = containerRect.left - popupRect.left + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${offset}px)`;\n            }\n\n            // Check right bounding edge\n            if (popupRect.right > containerRect.right - PADDING) {\n                const offset = popupRect.right - containerRect.right + PADDING;\n                const contentElement = popupElement.querySelector(\".popup-content\") as HTMLElement;\n                contentElement.style.transform = `translateX(${-offset}px)`;\n            }\n        });\n\n        let x: number = 0;\n        let y: number = 0;\n        let className: string = \"\";\n\n        switch (placement) {\n            case Placement.bottom:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top + referenceRect.height;\n                className = \"popup-bottom\";\n                break;\n            case Placement.top:\n                x = referenceRect.left - containerRect.left + referenceRect.width / 2;\n                y = referenceRect.top - containerRect.top;\n                className = \"popup-top\";\n                break;\n        }\n\n        return (\n            <div className = { `popup ${className}` }\n                style = {{\n                    left: x,\n                    opacity: 0,\n                    top: y,\n                }}\n                ref = { ref }\n            >\n                <div className = \"popup-arrow\"></div>\n                <div className = \"popup-content\">\n                    <WrappedComponent {...props } />\n                </div>\n            </div>\n        );\n    }\n    return WithPopup;\n};\n// export const withPopup = <P extends object>(Component: React.ComponentType<P>): React.FC<P & PopupProps> => ({...props}: PopupProps) => {\n//     return     <div className = \"popup\" style = {{ background: \"pink\" }} >\n//          <Component {...props as P} />\n//     </div>\n// };\n","\nexport enum ActionType {\n    addWorkers = \"addWorkers\",\n}\n\nexport interface Action {\n    type: ActionType;\n}\n\nexport interface ModifyWorkersAction extends Action {\n    value: number;\n}\n\nexport function addWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value,\n    };\n}\nexport function subtractWorkers(value: number): ModifyWorkersAction {\n    return {\n        type: ActionType.addWorkers,\n        value: -value,\n    };\n}\n","export const manifest = [\n    \"img/town/effects/plasma_beam_heavy_green.png\",\n    \"img/town/effects/smoke.png\",\n    \"img/town/sky.jpg\",\n    \"img/town/lighthouse.png\",\n    \"img/town/tavern.png\",\n    \"img/town/mill.png\",\n    \"sound/fx/button-click.ogg\",\n    \"sound/music/Soliloquy.mp3\",\n    \"sound/music/TheLoomingBattle.ogg\",\n\n];\n","import { Howl } from \"howler\";\nimport * as React from \"react\";\nimport Indicator from \"./Indicator\";\n\n// https://medium.com/@jchiam/publishing-a-typescript-react-component-to-npm-d3cc15b8d0a2\nexport interface Props {\n    manifest: string[];\n    onLoadComplete?: (mediaItems: MediaItem[]) => void;\n}\n\nexport enum MediaType {\n    image,\n    sound,\n}\n\nexport interface MediaItem {\n    url: string;\n    mediaType: MediaType;\n    content?: HTMLImageElement | Howl;\n    sound?: Howl;\n}\n\ninterface State {\n    itemsLoaded: number;\n    completed: boolean;\n}\n\nexport default class Preloader extends React.Component<Props, State> {\n//    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            completed: false,\n            itemsLoaded: 0,\n        };\n    }\n\n    public componentDidMount() {\n        // this.mounted = true;\n        this.loadMedia();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        // const { images } = this.props;\n        // const oldImages = new Set(prevProps.images);\n\n        // let hasChanged = false;\n        // for (let i = 0; i < images.length; i += 1) {\n        //     const image = images[i];\n        //     if (!oldImages.has(image)) {\n        //         hasChanged = true;\n        //         break;\n        //     }\n        // }\n\n        // if (hasChanged) {\n        //     this.loadImages();\n        // }\n        // todo: implement\n    }\n\n    public componentWillUnmount() {\n        // this.mounted = false;\n        // if (this.autoResolveTimeout) {\n        //     clearTimeout(this.autoResolveTimeout);\n        // }\n    }\n\n    public render() {\n//        console.log(`loaded: ${this.state.itemsLoaded} `);\n        const { children, manifest } = this.props;\n        const complete = this.state.completed;\n\n        const indicator = <Indicator\n            itemsLoaded = { this.state.itemsLoaded }\n            itemsTotal = { manifest.length }\n        />;\n\n        return complete ? children : indicator;\n\n    }\n\n    protected loadMedia = () => {\n        // todo: what if props get set at runtime\n        this.setState({\n            itemsLoaded: 0,\n        });\n\n        const promises = this.props.manifest\n            .map((url) => this.loadItem(url)\n            // tslint:disable-next-line:no-console\n            .catch((err) => console.error(err)));\n\n        Promise.all(promises).then((results) => {\n            if (this.props.onLoadComplete) {\n                this.props.onLoadComplete(media);\n            }\n            this.setState({\n                completed: true,\n            });\n        });\n    }\n\n    protected loadItem = async (url: string): Promise<MediaItem> => {\n        if (media.some((m) => m.url === url)) {\n            // tslint:disable-next-line:no-console\n            console.warn(`Loading media with url ${url} more than once! Will overwrite.`);\n        }\n        const mediaType = getType(url);\n        let item;\n        if (mediaType === MediaType.image) {\n            // try {\n            const value = await loadImage(url);\n            // console.log(`loaded ${url}`); // tODO: remove\n            item = {\n                content: value,\n                mediaType,\n                url,\n            } ;\n            // } catch (e) {\n            //     throw Error(`Could not load image with url '${url}'`);\n            // }\n        }\n        if (mediaType === MediaType.sound) {\n            const value = new Howl({\n                src: [ url ],\n            });\n            item = {\n                content: value,\n                mediaType,\n                url,\n            };\n        }\n        if (item) {\n            media.push(item);\n            this.setState({\n                itemsLoaded: this.state.itemsLoaded + 1,\n            });\n            return item;\n        } else {\n            throw new Error(`Unknown error while trying to load ${url}`);\n        }\n    }\n}\n\nconst media: MediaItem[] = [];\n\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\n    const image = new Image();\n    image.src = url;\n\n    return new Promise((resolve, reject) => {\n        if (image.naturalWidth) {\n            resolve(image);\n        } else if (image.complete) {\n            reject(null);\n        } else {\n            image.addEventListener(\"load\", check);\n            image.addEventListener(\"error\", check);\n        }\n        function check() {\n            if (image.naturalWidth) {\n                resolve(image);\n            } else {\n                reject(null);\n            }\n            image.removeEventListener(\"load\", check);\n            image.removeEventListener(\"error\", check);\n        }\n    });\n};\n\nconst getType = (url: string): MediaType => {\n    url = url.toLowerCase();\n    if (url.endsWith(\"png\") || url.endsWith(\"jpg\") || url.endsWith(\"gif\")) {\n        return MediaType.image;\n    }\n    if (url.endsWith(\"mp3\") || url.endsWith(\"ogg\") || url.endsWith(\"wav\")) {\n        return MediaType.sound;\n    }\n    throw Error(`Could not determine type for ${url}`);\n};\n","import { getDefinition } from \"definitions/items\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport structureDefinitions, { Structure  } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { StructuresStoreState } from \"stores/structures\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/cheatbox.css\";\n\nexport interface DispatchProps {\n    onCheatGold?: (amount: number) => void;\n    onCheatWorkers?: (amount: number) => void;\n    onCheatResources?: (amount: number) => void;\n    onCheatItem?: (item: Item) => void;\n    onCheatStructureState?: (structure: Structure, state: StructureState) => void;\n}\n\nexport interface StateProps {\n    structures: StructuresStoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n    gold: number;\n    workers: number;\n    resources: number;\n}\n\ntype AllProps = Props & StateProps & DispatchProps;\nclass CheatWindow extends React.Component<AllProps, LocalState> {\n\n    private itemSelectRef: React.RefObject<HTMLSelectElement>;\n    /**\n     *\n     */\n    constructor(props: AllProps) {\n        super(props);\n\n        this.state = {\n            gold: 50,\n            resources: 50,\n            workers: 10,\n        };\n\n        this.itemSelectRef = React.createRef();\n    }\n\n    public render() {\n\n        const getStructureRow = (structure: Structure) => {\n            const structureDef = structureDefinitions[structure];\n            const structureStore: StructureStoreState = this.props.structures[structure];\n            const levelDef = structureDef.levels[structureStore.level];\n\n            const displayName = TextManager.get(levelDef.displayName);\n\n            return <div\n                className=\"label-dropdown\"\n                key={structure}\n            >\n                <label title={structure}>\n                    { `${displayName}` }\n                </label>\n                <input\n                    key={structure}\n                    type=\"checkbox\"\n                    checked={this.props.structures[structure].state === StructureState.Built }\n                    onChange={ () => this.handleChangeStructureState(structure, this.props.structures[structure].state !== StructureState.Built)}\n                />\n            </div>;\n        };\n\n        const structures = Object.keys(this.props.structures)\n            .map((structure) => getStructureRow(structure as Structure));\n\n        const getItemTypeOptions = (type: ItemType) => {\n            return Object.keys(Item)\n                // tslint:disable-next-line: triple-equals\n                .filter((item: string) => getDefinition(item as Item).itemType == type)\n                .map((item: string) => getItemOption(item as Item));\n        };\n\n        const getItemOption = (item: Item) => {\n            return <option value = { item } key = { item }>\n                { TextManager.getItemName(item) }\n            </option>;\n        };\n\n        const items = Object.keys(ItemType)\n            .filter((val: any) => !isNaN(val))\n            .map((type: string) => {\n            return <optgroup label = { ItemType[type] } key = { type }>\n                { getItemTypeOptions(type as unknown as ItemType) }\n            </optgroup>;\n        });\n\n        return (\n            <div className=\"cheat-box\">\n                <div className=\"label-numberbox-button\">\n                    <label>Gold</label>\n                    <input type=\"number\"\n                        value= {this.state.gold}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeGold }>\n                    </input>\n                    <button onClick= { this.handleCheatGold }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Workers</label>\n                    <input type=\"number\"\n                        value= {this.state.workers}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeWorkers }>\n                    </input>\n                    <button onClick= { this.handleCheatWorkers }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Resources</label>\n                    <input type=\"number\"\n                        value= {this.state.resources}\n                        style={{width: \"50px\"}}\n                        onChange={ this.handleChangeResources }>\n                    </input>\n                    <button onClick= { this.handleCheatResources }>Add</button>\n                </div>\n                <div className=\"label-numberbox-button\">\n                    <label>Items</label>\n                    <select style={{ width: \"150px\"}} ref = { this.itemSelectRef }>\n                        { items }\n                    </select>\n                    <button onClick= { this.handleCheatItem }>Add</button>\n                </div>\n                { structures }\n            </div>\n        );\n    }\n\n    private handleCheatGold = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const amount = this.state.gold;\n        if (this.props.onCheatGold) { this.props.onCheatGold(amount); }\n    }\n\n    private handleCheatWorkers = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const amount = this.state.workers;\n        if (this.props.onCheatWorkers) { this.props.onCheatWorkers(amount); }\n    }\n\n    private handleCheatResources = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        if (this.props.onCheatResources) { this.props.onCheatResources(this.state.resources); }\n    }\n\n    private handleCheatItem = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        const item = this.itemSelectRef.current!.value as Item;\n        if (this.props.onCheatItem) { this.props.onCheatItem(item); }\n    }\n\n    private handleChangeStructureState = (structure: Structure, checked: boolean) => {\n        if (this.props.onCheatStructureState) {\n            this.props.onCheatStructureState(structure, checked ? StructureState.Built : StructureState.NotBuilt);\n        }\n    }\n\n    private handleChangeGold = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.value);\n        this.setState({\n            gold: amount,\n        });\n    }\n\n    private handleChangeWorkers = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.value);\n        this.setState({\n            workers: amount,\n        });\n    }\n\n    private handleChangeResources = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const amount = Number(event.target.checked);\n        this.setState({\n            resources: amount,\n        });\n    }\n}\n\nexport default CheatWindow;\n","import { Resource } from \"definitions/resources\";\n\nexport const resourceOrder = [\n    Resource.food,\n    Resource.wood,\n    Resource.stone,\n    Resource.fabric,\n    Resource.leather,\n];\n","import { addWorkers } from \"actions\";\nimport { addGold } from \"actions/gold\";\nimport { addItemToWarehouse } from \"actions/items\";\nimport { addLogEntry } from \"actions/log\";\nimport { addResources } from \"actions/resources\";\nimport { setStructureState } from \"actions/structures\";\nimport { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow, { DispatchProps, Props, StateProps } from \"components/ui/window/windows/CheatWindow\";\nimport { resourceOrder } from \"constants/resources\";\nimport { Item } from \"definitions/items/types\";\nimport { Structure } from \"definitions/structures\";\nimport { withWindow } from \"hoc/withWindow\";\nimport { connect } from \"react-redux\";\nimport { AnyAction, compose, Dispatch } from \"redux\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructureState } from \"stores/structure\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n        structures: store.structures,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n    return {\n        onCheatGold: (amount: number) => {\n            dispatch(addGold(amount));\n            dispatch(addLogEntry(\"common-cheat-gold-added\", { amount }, LogChannel.common));\n        },\n        onCheatItem: (item: Item) => {\n            dispatch(addItemToWarehouse(item));\n            dispatch(addLogEntry(\"common-cheat-item-added\", { item }, LogChannel.common));\n        },\n        onCheatResources: (amount: number) => {\n            // Create ResourceStoreState where value of each resource is `amount`\n            const resources = resourceOrder.reduce((acc: ResourceStoreState, resource) => {\n                acc[resource] = amount;\n                return acc;\n            }, {});\n\n            dispatch(addResources(resources));\n            dispatch(addLogEntry(\"common-cheat-resources-added\", { amount }, LogChannel.common));\n        },\n        onCheatStructureState: (structure: Structure, state: StructureState) => dispatch(setStructureState(structure, state)),\n        onCheatWorkers: (amount: number) => {\n            dispatch(addWorkers(amount));\n            dispatch(addLogEntry(\"common-cheat-workers-added\", { amount }, LogChannel.common));\n        },\n    };\n};\n\nexport default compose(\n    connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps),\n    withWindow,\n)(CheatWindow) as React.ComponentType<Props & WindowProps>;\n","import { Props as WindowProps } from \"components/ui/window/Window\";\nimport CheatWindow from \"containers/windows/CheatWindow\";\nimport { AppContextProps, withAppContext } from \"hoc/withAppContext\";\nimport { withWindow } from \"hoc/withWindow\";\nimport * as React from \"react\";\nimport { compose } from \"redux\";\nimport \"./css/cheatbox.css\";\n\nexport interface DispatchProps {\n}\n\nexport interface StateProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface Props {\n}\n\ninterface LocalState {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & WindowProps;\nclass Menu extends React.Component<AllProps & AppContextProps, LocalState> {\n\n    constructor(props: AllProps & AppContextProps) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    public render() {\n\n        const handleClickCheats = () => {\n            const window = <CheatWindow title = \"Cheats\" />;\n            this.props.onOpenWindow(window);\n        };\n        return (\n            <div className=\"menu\">\n                <ul>\n                    <li onClick = { handleClickCheats }>Cheats!</li>\n                </ul>\n            </div>\n        );\n    }\n\n}\n\nexport default compose(\n    withWindow,\n    withAppContext,\n)(Menu) as React.ComponentType<AllProps>;\n","import \"components/ui/css/common/icon.css\";\nimport { resourceOrder } from \"constants/resources\";\nimport resourceDescriptions from \"definitions/resources\";\nimport * as React from \"react\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/resourcebar.css\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface Props {\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n    gold: number;\n    workers: number;    // total\n    workersFree: number;\n    resources: ResourceStoreState;\n}\n\nconst Resourcebar = (props: Props & StateProps & DispatchProps) => {\n\n    const createItem = (icon: string, amount: number, title: string) => {\n        return <li title = { title } key = { title }>\n            <div className = \"icon common-icon-smallest\" style = {{\n                backgroundImage:  `url(${icon})`,\n            }}></div>\n            <div className = \"amount\">\n                { amount.toFixed(0) }\n            </div>\n        </li>;\n    };\n\n    const resources = resourceOrder.map((resource) => {\n        const resourceDescription = resourceDescriptions[resource];\n        return createItem(resourceDescription.iconImg, props.resources[resource as string], TextManager.getResourceName(resource));\n    });\n\n    resources.push(\n        createItem(\"/img/resources/worker.png\", props.workersFree, \"workers\"),\n        createItem(\"/img/resources/gold.png\", props.gold, \"gold\"),\n    );\n\n// <span>\n//     workers: <b>{ props.workersFree + \" / \" + props.workers }</b>\n// </span>\n// <span>\n//     gold: <b>{ props.gold }</b>\n// </span>\n\n    return (\n        <ul className=\"resourcebar\">\n            { resources }\n        </ul>\n    );\n};\nexport default Resourcebar;\n","import Resourcebar, { Props, StateProps } from \"components/topbar/Resourcebar\";\nimport { connect } from \"react-redux\";\nimport { selectFreeWorkers } from \"selectors/workers\";\nimport { StoreState } from \"stores\";\n\nconst mapStateToProps = (store: StoreState): StateProps => {\n\n    return {\n        gold: store.gold,\n        resources: store.resources,\n        workers: store.workers,\n        workersFree: selectFreeWorkers(store),\n    };\n};\n\n// const mapDispatchToProps = (dispatch: Dispatch<AnyAction>): DispatchProps => {\n//     return {\n//     };\n// };\n\nexport default connect<StateProps, null, Props, StoreState>(mapStateToProps)(Resourcebar);\n","import Topbar, { Props, StateProps } from \"components/topbar/Topbar\";\nimport { withAppContext } from \"hoc/withAppContext\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { StoreState } from \"../stores\";\n\n// todo this container might not be strictly necessary\n// also withRouter is probably not necessary\nconst mapStateToProps = (store: StoreState): StateProps => {\n    return {\n    };\n};\n\nexport default compose(\n    connect<StateProps, null, Props, StoreState>(mapStateToProps),\n    withRouter,\n    withAppContext,\n)(Topbar) as React.ComponentType<Props>;\n","import Menu from \"components/ui/window/windows/Menu\";\nimport Resourcebar from \"containers/topbar/Resourcebar\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport \"./css/topbar.css\";\n\nexport interface Props {\n}\nexport interface DispatchProps {\n}\n\n// These are injected by mapStateToProps on the Container\nexport interface StateProps  {\n}\n\ntype AllProps = Props & StateProps & DispatchProps & RouteComponentProps & AppContextProps;\n\nexport default function(props: AllProps) {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const window = <Menu title = \"Menu\" />;\n        props.onOpenWindow(window);\n    };\n    return (\n        <div className = \"topbar\">\n            <div className = \"topbar-left\">\n                <Resourcebar />\n            </div>\n            <div className = \"topbar-right\">\n                <div className = \"hamburger\" onClick = { handleClick }>☰</div>\n            </div>\n        </div>\n    );\n}\n","import * as React from \"react\";\n\nexport interface Props {\n    itemsLoaded?: number;\n    itemsTotal?: number;\n}\n\n/**\n * Loading indicator\n */\nexport default class Indicator extends React.Component<Props> {\n    public render() {\n        const { itemsLoaded, itemsTotal } = this.props;\n        return <div> { `Loading (${Math.floor((itemsLoaded || 0) / (itemsTotal || 0 ) * 100)})%`} </div>;\n    }\n}\n","\nimport { connect } from \"react-redux\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { finishBuildingStructure, startBuildingStructure } from \"actions/structures\";\nimport { startTask } from \"actions/tasks\";\nimport ItemContext, { DispatchProps, Props, StateProps } from \"components/ui/context/ItemContext\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport { StoreState } from \"stores\";\nimport { TaskType } from \"stores/task\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return {\n        store,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return {\n\n        handleStartConstruction: (structure: Structure) => {\n            dispatch(startBuildingStructure(structure));\n\n            const callbacks = [ finishBuildingStructure(structure) ];\n            const structureDefinition = structureDefinitions[structure];\n            const time = structureDefinition.cost.time!;\n            const start = startTask(TaskType.buildStructure,\n                `${structure}.build`,\n                \"town\",\n                time,\n                callbacks);\n            dispatch(start);\n        },\n    };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(ItemContext);\n","// tslint:disable: object-literal-sort-keys\nimport { ContextInfo, ContextType } from \"constants/context\";\nimport AdventurersBox from \"containers/AdventurersBox\";\nimport SimpleLog from \"containers/log/SimpleLog\";\nimport RealTownView from \"containers/RealTownView\";\nimport StructureDetailsView from \"containers/structures/StructureDetailsView\";\nimport RealWorldView from \"containers/world/RealWorldView\";\nimport { AppContextProps } from \"hoc/withAppContext\";\nimport { Placement } from \"hoc/withPopup\";\nimport { manifest } from \"manifest/app\";\nimport * as React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { BrowserRouter as Router, Link, Redirect, Route } from \"react-router-dom\";\nimport { Persistor } from \"redux-persist\";\nimport { Sound, SoundManager } from \"utils/soundManager\";\nimport { TextManager } from \"utils/textManager\";\nimport Topbar from \"../containers/Topbar\";\nimport { Structure } from \"../definitions/structures\";\nimport \"./css/app.css\";\nimport Preloader, { MediaItem, MediaType } from \"./preloading/Preloader\";\nimport ContextView from \"./ui/context/ContextView\";\n\n// tslint:disable-next-line:no-empty-interface\nexport interface StateProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\nexport enum View {\n    Town,\n    World,\n}\n\nexport interface Props {\n    persistor: Persistor;\n}\n\ninterface LocalState {\n    media: MediaItem[];\n    selectedStructure: Structure | null;\n    selectedContext: SelectedContext | null;\n    containerRect: ClientRect | null;\n\n    activeWindows: React.ReactElement[];\n}\n\ninterface SelectedContext {\n    contextType: ContextType ;\n    contextInfo: ContextInfo;\n    contextRect: ClientRect;\n}\n\nconst resolution = {\n    height: 860, // 972,\n    width: 648,\n};\n\nexport const AppContext = React.createContext<AppContextProps | null>(null);\n\nexport default class App extends React.Component<Props & StateProps & DispatchProps, LocalState> {\n    private containerRef: React.RefObject<HTMLDivElement>;\n\n    // This Component has local state, so it\"s a class\n    constructor(props: Props & StateProps & DispatchProps) {\n        super(props);\n\n        this.state = {\n            selectedContext: null,\n            containerRect: null,\n            media: [],\n            selectedStructure: null,\n            activeWindows: [],\n        };\n        this.containerRef = React.createRef();\n        this.handleResize = this.handleResize.bind(this);\n    }\n\n    public render() {\n        const handleViewButtonClick = () => {\n            SoundManager.playSound(Sound.buttonClick);\n        };\n\n        const handleResetClick = () => {\n            this.props.persistor.purge();\n            window.location.reload();\n        };\n\n        const getAdventurersBox = () => {\n            return <AdventurersBox />;\n        };\n\n        // Router elements\n        const TownButton = () => <Link to=\"/town\">\n            <button onClick= { () => handleViewButtonClick() }> { TextManager.get(`common-view-button-town`) } </button>\n        </Link>;\n\n        const WorldButton = () => <Link to=\"/world\">\n            <button onClick= { () => handleViewButtonClick() }> { TextManager.get(`common-view-button-world`) } </button>\n        </Link>;\n\n        const TownView = ()  => <RealTownView onStructureClick = { this.selectStructure } />;\n        const WorldView = () => <RealWorldView/>;\n\n        // A contextual popup showing what you just clicked. Can be an Item\n        let ContextPopup = null;\n        if (this.state.selectedContext) {\n\n            const { contextType, contextInfo, contextRect } = this.state.selectedContext;\n\n            ContextPopup = <ContextView\n                type = { contextType }\n                info = { contextInfo }\n                containerRect = { this.state.containerRect! }\n                referenceRect = { contextRect }\n                placement = { Placement.bottom }\n            >\n            </ContextView>;\n        }\n\n        const Window = this.getActiveWindow();\n\n        return <AppContext.Provider value = {{\n            media: this.state.media,\n            onContextualObjectActivated: this.handleContextualObjectActivated,\n            onOpenWindow: this.handleWindowOpened,\n        }}>\n            <div className = \"app\"\n                ref = { this.containerRef }\n                style = {{\n                    width: resolution.width,\n                    height: resolution.height,\n                }}\n                onClick = { this.handleAppClick }\n            >\n                <DndProvider backend={ HTML5Backend }>\n                <Router>\n                    <Preloader\n                        manifest = { manifest }\n                        onLoadComplete = { this.handleMediaLoadComplete }\n                    >\n                    <Topbar/>\n                    <Redirect from=\"/\" to=\"town\" />\n                    <Route path=\"/world\" component = { TownButton } />\n                    <Route path=\"/town\" component = { WorldButton } />\n                    { ` | ` }\n                    <button onClick= { () => handleResetClick() } style={ { color: \"red\" } }> Restart! </button>\n                    <Route path=\"/town\" component = { TownView } />\n                    <Route path=\"/world\" component = { WorldView } />\n                <div className=\"app-right\">\n                    { getAdventurersBox() }\n                </div>\n                { Window }\n                { ContextPopup }\n                <SimpleLog/>\n                </Preloader>\n                </Router>\n                </DndProvider>\n            </div>\n        </AppContext.Provider>;\n    }\n\n    public componentDidMount() {\n        window.addEventListener(\"resize\", this.handleResize);\n        this.handleResize();\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleResize);\n    }\n\n    private getActiveWindow(): React.ReactElement | null {\n        if (!this.state.activeWindows.length) {\n            return null;\n        }\n\n        const topWindow = this.state.activeWindows[this.state.activeWindows.length - 1];\n        const commonWindowProps = {\n            onClose: this.handleWindowClose,\n            onBack: this.handleWindowBack,\n            backEnabled: this.state.activeWindows.length > 1,\n            closeEnabled: true,\n        };\n\n        const element = React.cloneElement(topWindow, commonWindowProps);\n        return element;\n    }\n\n    private handleResize() {\n        if (this.containerRef.current) {\n            if (window.innerHeight < resolution.height) {\n                this.containerRef.current.style.transform = `scale(${window.innerHeight / resolution.height}) translateX(-50%)`;\n\n            } else {\n                this.containerRef.current.style.transform = `scale(1) translateX(-50%)`;\n            }\n            const parentBox = this.containerRef.current.getBoundingClientRect();\n\n            this.setState({\n                containerRect: parentBox,\n                selectedContext: null, // this would be in the wrong place\n            });\n        }\n    }\n\n    private selectStructure = (structure: Structure | null) => {\n        if (structure) {\n            const displayName = TextManager.getStructureName(structure);\n\n            const window = <StructureDetailsView structure = { structure } title = { displayName }/>;\n            this.handleWindowOpened(window);\n        }\n    }\n\n    private handleMediaLoadComplete = (media: MediaItem[]) => {\n\n        const sounds = media.filter((m) => m.mediaType === MediaType.sound);\n        SoundManager.loadMedia(sounds);\n\n        SoundManager.addSounds({\n            [Sound.buttonClick]: \"sound/fx/button-click.ogg\",\n            // add more sounds here\n        });\n\n        this.setState({\n            media,\n        });\n    }\n\n    private handleContextualObjectActivated = (type: ContextType, info: ContextInfo, origin: React.RefObject<any>, originRect: ClientRect) => {\n\n        this.setState({\n            selectedContext: {\n                contextInfo: info,\n                contextType: type,\n                contextRect: originRect,\n            },\n        });\n    }\n\n    private handleAppClick = () => {\n        if (this.state.selectedContext) {\n            this.setState({\n                selectedContext: null,\n            });\n        }\n    }\n\n    private handleWindowOpened = (window: React.ReactElement) => {\n        this.setState({\n            activeWindows: [\n                ...this.state.activeWindows,\n                window,\n            ],\n        });\n    }\n\n    /**\n     * Closes all windows\n     */\n    private handleWindowClose = () => {\n        if (this.state.activeWindows.length) {\n            this.setState({\n                activeWindows: [],\n            });\n        }\n    }\n\n    /**\n     * Closes the top window of the stack\n     */\n    private handleWindowBack = () => {\n        if (this.state.activeWindows.length) {\n            this.setState({\n                activeWindows: this.state.activeWindows.slice(0, -1),\n            });\n        }\n    }\n}\n","\nimport { DeedDefinition } from \"definitions/items/deeds\";\nimport { ItemDefinition, ItemType } from \"definitions/items/types\";\nimport structureDefinitions, { Structure } from \"definitions/structures\";\nimport * as React from \"react\";\nimport { StoreState } from \"stores\";\nimport { StructureState } from \"stores/structure\";\n\nexport interface Props {\n    info: ItemDefinition;\n}\nexport interface StateProps {\n    store: StoreState;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n    handleStartConstruction: (structure: Structure) => void;\n}\n\nexport default function(props: Props & DispatchProps & StateProps) {\n    const info = props.info;\n    switch (info.itemType) {\n        case ItemType.deed:\n            const gold = props.store.gold;\n            const deedInfo = info as DeedDefinition;\n            const structureDefinition = structureDefinitions[deedInfo.structure];\n            const enoughGold = structureDefinition.cost.gold || 0 <= gold;\n            const structureStoreState = props.store.structures[deedInfo.structure];\n            const canBeBuilt = structureStoreState.state === StructureState.NotBuilt;\n            const disabled = !canBeBuilt || !enoughGold;\n            return <div>\n                <p> \" { info.subText } \" </p>\n                <button disabled={ disabled } onClick= { () => props.handleStartConstruction(deedInfo.structure) }>\n                    Start construction ({ structureDefinition.cost.gold } gold)\n                </button>\n            </div>;\n        default:\n            return (\n                <p> \" { info.subText } \" </p>\n            );\n    }\n}\n","import { ContextInfo, ContextType } from \"constants/context\";\nimport ItemContext from \"containers/ui/context/ItemContext\";\nimport { Item, ItemType } from \"definitions/items/types\";\nimport { PopupProps, withPopup } from \"hoc/withPopup\";\nimport * as React from \"react\";\nimport { TextManager } from \"utils/textManager\";\nimport \"./css/contextview.css\";\n\nexport interface Props {\n    type: ContextType | null;\n    info: ContextInfo | null;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface DispatchProps {\n}\n\ntype AllProps = Props & DispatchProps & PopupProps;\n/**\n * The ContextView shows the player contextual information about the item she clicked\n * @param props\n */\nclass ContextView extends React.Component<AllProps> {\n\n    public render() {\n        let { info } = this.props;\n        const { type } = this.props;\n\n        if (!info) {\n            info = {\n                iconImg: \"/img/items/deeds/deed.png\",\n                item: Item.deedForWeaponsmith,\n                itemType: ItemType.weapon,\n                subText: \"It allows for the construction of a weaponsmith\",\n            };\n        }\n        let content;\n\n        switch (type) {\n            case ContextType.item:\n            default:\n                content = <ItemContext info= { info } />;\n        }\n\n        const name = TextManager.getItemName(info.item);\n        return <div className = \"contextbox\">\n            <div>{ name } </div>\n            { content }\n        </div>;\n    }\n\n    public componentDidUpdate() {\n    //    // console.log(this.containerRef.current)\n    //     //console.log(this.props.origin)\n\n    //     if (this.containerRef.current && this.props.origin) {\n    //        // var rect = (this.props.origin as HTMLElement).getBoundingClientRect();\n    //        // console.log(rect)\n    //         const reference = this.props.origin as Element;\n\n    //         const popperInstance = new Popper(reference, this.containerRef.current\n    //             // popper options here\n    //         );\n    //     }\n    }\n}\n\nexport default withPopup<AllProps>(ContextView);\n","import App, { DispatchProps, Props, StateProps } from \"components/App\";\nimport { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { StoreState } from \"stores\";\n\nfunction mapStateToProps(store: StoreState, ownProps: Props): StateProps {\n    return { };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>, ownProps: Props): DispatchProps {\n    return { };\n}\n\nexport default connect<StateProps, DispatchProps, Props, StoreState>(mapStateToProps, mapDispatchToProps)(App);\n","import structureDefinitions, { Structure } from \"definitions/structures\";\nimport { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureDefinition, StructureType, WarehouseStructureDefinition, WarehouseStructureLevelDefinition } from \"definitions/structures/types\";\nimport { StoreState } from \"stores\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StructuresStoreState } from \"stores/structures\";\n\nconst RESOURCE_INTERVAL = 60000; // every minute constitutes a resource tick. todo: move to some other shared place\n\n /*\n  * Calculates how many resources are generated by the in the town.\n  * Will return a ResourceStoreState with the amount of each resource to add  */\nconst getProducedResources = (delta: number, store: StoreState): ResourceStoreState => {\n    const structures: StructuresStoreState = store.structures;\n    const result: ResourceStoreState = {};\n    const factor = delta / RESOURCE_INTERVAL;\n    // this function can run at different intervals\n    // faster or slower than once a minute\n    // we will multiply the resource amount by the factor to normalize\n    const maxResources = getMaxResources(store);\n\n    const handleStructure = (structure: string) => {\n        const structureDefinition: StructureDefinition = structureDefinitions[structure];\n\n        if (structureDefinition.type === StructureType.resource) {\n            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;\n            const level: number = structures[structure].level;\n            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];\n\n            // Store all the resources that this structure will generate this tick into `result`\n            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {\n                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;\n                accumulator[resource] = (accumulator[resource] || 0) + amount;\n                return accumulator;\n            }, result);\n        }\n    };\n\n    // Calculate what each structure generates. Stores in `result`.\n    Object.keys(structures).forEach((structure) => handleStructure(structure));\n\n    // Check if the warehouse can actually hold it\n    // todo: [10/07/2019] move to reducer\n    Object.keys(result).forEach((resource: string) => {\n        if (result[resource]) {\n            if (store.resources[resource]! + result[resource]! >= maxResources[resource]!) {\n                result[resource] = maxResources[resource]! - (store.resources[resource]!);\n            }\n        }\n//        console.log(`Adding: ${resource} ${result[resource]}`);\n    });\n\n    return result;\n};\n\n// Returns a ResourceStoreState with maximum stockpile of each resource the warehouse supports\nconst getMaxResources = (store: StoreState): ResourceStoreState => {\n    const structureDefinition = structureDefinitions[Structure.warehouse] as WarehouseStructureDefinition;\n    const level: number = store.structures[Structure.warehouse].level;\n    const levelDefinition: WarehouseStructureLevelDefinition = structureDefinition.levels[level];\n    return levelDefinition.maxResources;\n};\n\nexport default getProducedResources;\n","import { TextEntry } from \"constants/text\";\nimport encounterDefintions from \"definitions/encounters\";\nimport { Encounter } from \"definitions/encounters/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { oracles } from \"oracle\";\nimport { StoreState } from \"stores\";\nimport { LogChannel } from \"stores/logEntry\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\nexport interface QuestUpdate {\n    name: string;\n    currentEncounter: Encounter | null;\n    progress: number;\n}\n\nexport interface LogUpdate extends TextEntry {\n    key: string;\n    channel: LogChannel;\n    channelContext?: any;\n}\n\ninterface QuestGameTickResponse {\n    quests: QuestUpdate[];\n    log: LogUpdate[];\n}\n\nconst getQuestUpdates = (delta: number, store: StoreState): QuestGameTickResponse => {\n    // Moves the quest line progress. Only if currently at a 'nothing' node\n    // Otherwise the user has to do something to move the quest along\n\n    const speed = 4;    // in nodes per minute\n    const MS_PER_MINUTE = 60000;\n    const log: LogUpdate[] = [];\n    const quests: QuestUpdate[] = [];\n\n    store.quests.forEach((qss: QuestStoreState) => {\n        if (qss.status !== QuestStatus.active) {\n            return;\n        }\n        const questDefinition: QuestDefinition = questDefinitions[qss.name];\n        const currentProgress = qss.progress;\n        const currentNodeIndex =  Math.floor(currentProgress);\n        const currentNode = questDefinition.nodes[currentNodeIndex];\n\n        if (currentNode.type === QuestNodeType.nothing) {\n            // Currently at a 'nothing' node\n            const progressIncrease = (delta / MS_PER_MINUTE) * speed;\n            // todo: [15/07/2019] speed could be different for each party\n            let nextProgress = Math.min(currentProgress + progressIncrease, questDefinition.nodes.length - 1);\n            const nodesPassed = Math.floor(nextProgress) - currentNodeIndex;\n\n            let currentEncounter = qss.currentEncounter;\n\n            for (let i = 1; i <= nodesPassed; i++) {\n                // Loop through all the nodes we've passed since last tick\n                const nextNode = questDefinition.nodes[currentNodeIndex + i];\n                if (nextNode.type === QuestNodeType.encounter) {\n                    // We've hit an encounter node. set the progress to here and stop looking at other nodes\n                    const encounter = encounterDefintions[nextNode.encounter!];\n                    const oracle = oracles[qss.name];\n                    nextProgress = currentNodeIndex + i;\n                    currentEncounter = nextNode.encounter!;\n                    // Start encounter(encounter)\n\n                    // Add quest to log\n                    log.push({\n                        channel: LogChannel.quest,\n                        channelContext: qss.name,\n                        ...encounter.getDescription(oracle),\n                    });\n\n                    break;\n                } else if (nextNode.type === QuestNodeType.nothing) {\n                    currentEncounter = null;\n                    if (nextNode.log) {\n                        log.push({\n                            channel: LogChannel.quest,\n                            channelContext: qss.name,\n                            key: nextNode.log,\n                        });\n                    }\n                }\n            }\n            quests.push({\n                currentEncounter,\n                name: qss.name,\n                progress: nextProgress,\n            });\n        }\n    });\n\n    return {\n        log,\n        quests,\n    };\n};\n\nexport default getQuestUpdates;\n","import { State as seedrandomStateType } from \"seedrandom\";\nimport * as Random from \"utils/random\";\n\nconst getRngState = (): seedrandomStateType | null => {\n    if (Random.dirty) {\n        return Random.state();\n    }\n    return null;\n};\n\nexport default getRngState;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\",\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// tslint:disable:object-literal-sort-keys\nimport { Action, ActionType,\n    EquipmentAction, InventoryAction,\n    MoveItemInInventoryAction, MoveItemToOtherAdventurerAction, RemoveItemFromInventoryAction } from \"actions/adventurers\";\nimport { EquipmentType } from \"definitions/items/equipment\";\nimport { Item } from \"definitions/items/types\";\nimport { Reducer } from \"redux\";\nimport { AdventurerStoreState, EquipmentStoreState, StatsStoreState } from \"stores/adventurer\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\n\nconst generateRandomStats = (): StatsStoreState => {\n    return {\n        strength: Math.random() * 100,\n        perception: Math.random() * 100,\n        endurance: Math.random() * 100,\n        charisma: Math.random() * 100,\n        intelligenge: Math.random() * 100,\n        agility: Math.random() * 100,\n        luck: Math.random() * 100,\n    };\n};\n\nconst generateRandomGear = (): EquipmentStoreState => {\n\n    const second = [\"Burning Damnation\",\n        \"Fury\", \"Some old guy\", \"the Depths\", \"Frozen Hells\",\n        \"Broken bones\", \"the Claw\", \"Resilience\", \"Shattered Damnation\", \"the Seer\" ];\n    const combine = (first: string[]): string => {\n        const firstPart = first[Math.floor(Math.random() * first.length)];\n        const secondPart = second[Math.floor(Math.random() * second.length)];\n        return `${firstPart} of ${secondPart}`;\n    };\n    return {\n        /*\n        hands: combine([\"Fists\", \"Grips\", \"Hands\", \"Handguards\", \"Gauntlets\"]),\n        chest: combine([\"Breastplate\", \"Mithril Vest\", \"Titanium Armor\", \"Primitive Armor\", \"Scaled Raiment\"]),\n        feet: combine([\"Sabatons\", \"Footguards\", \"Warboots\", \"Slippers\"]),\n        head: combine([\"Helmet\", \"Headguard\", \"Obsidian Crown\", \"Scaled Hood\"]),\n        */\n    };\n\n};\n\n// Create a bunch of guys for debugging\nconst testState: AdventurerStoreState[] = [{\n    id: \"c4a5d270\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    health: Math.random() * 100,\n    room: 0,\n    name: \"Ximena Maddox\",\n    avatarImg: `/img/avatars/andy-victorovych-a1.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.deedForLumbermill, null, Item.crossbow, Item.dagger, Item.khopesh, null, Item.sword, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"2e655832\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Donte Houston\",\n    health: Math.random() * 100,\n    room: 1,\n    avatarImg: `/img/avatars/andy-victorovych-a2.jpg`,\n    // tslint:disable-next-line:max-line-length\n    inventory: [ Item.crossbow, null, null, null, null, null, null, null, null, null, null, null,  null,  null,  null,  null,  null,  null,  null,  null],\n}, {\n    id: \"ec6f1050\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Zackary Morris\",\n    health: Math.random() * 100,\n    room: 2,\n    avatarImg: `/img/avatars/andy-victorovych-a3.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"d299f98a\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 4,\n    avatarImg: `/img/avatars/andy-victorovych-a4.jpg`,\n    inventory: [ null, null, null, null, Item.khopesh, Item.hornedHelmet ],\n}, {\n    id: \"96c686c3\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Wayne Monroe\",\n    health: Math.random() * 100,\n    room: 5,\n    avatarImg: `/img/avatars/andy-victorovych-a5.jpg`,\n    inventory: [ null, null, null ],\n}, {\n    id: \"250d1a9d\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Mike Keith\",\n    health: Math.random() * 100,\n    room: 9,\n    avatarImg: `/img/avatars/andy-victorovych-a6.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"169384ef\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Karlee Nolan\",\n    health: Math.random() * 100,\n    room: 3,\n    avatarImg: `/img/avatars/andy-victorovych-a7.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"f22d66cb\",\n    stats: generateRandomStats(),\n    equipment: generateRandomGear(),\n    name: \"Gylbarde the Earnest\",\n    health: Math.random() * 100,\n    room: 8,\n    avatarImg: `/img/avatars/andy-victorovych-a8.jpg`,\n    inventory: [ null, null, null, null, null ],\n}, {\n    id: \"36c686c1\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Lanslet of the Water\",\n    health: Math.random() * 100,\n    room: 6,\n    avatarImg: `/img/avatars/andy-victorovych-a9.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}, {\n    id: \"12c613d4\",\n    equipment: generateRandomGear(),\n    stats: generateRandomStats(),\n    name: \"Tedric the Bold\",\n    health: Math.random() * 100,\n    room: 7,\n    avatarImg: `/img/avatars/andy-victorovych-a10.jpg`,\n    inventory: [ Item.greatswordOfGwai, null, null, null ],\n}];\n\n// TODO: To generate a random 11 digit number, use: Math.random().toString(36).substring(2)\n\nexport const adventurers: Reducer<AdventurerStoreState[], Action> = (\n    state: AdventurerStoreState[] = testState, action: Action) => {\n\n    switch (action.type) {\n        // Moves an  item from one inventory slot to another\n        case ActionType.moveItemInInventory: {\n            const {\n                adventurerId,\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInInventoryAction);\n            const adventurer = state.find((a) => a.id === adventurerId)!;\n            const inventory = adventurer.inventory.map((element, index) => {\n                if (index === fromSlot) { return adventurer.inventory[toSlot]; }\n                if (index === toSlot) { return adventurer.inventory[fromSlot]; }\n                return element;\n            });\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element === adventurer) {\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.moveItemToOtherAdventurer: {\n            // Moves an item from one adventurer to another\n            const {\n                adventurerId: fromAdventurerId,\n                fromSlot,\n                toAdventurerId,\n            } = (action as MoveItemToOtherAdventurerAction);\n\n            const fromAdventurer = state.find((a) => a.id === fromAdventurerId)!;\n            const item = fromAdventurer.inventory[fromSlot];\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === fromAdventurerId) {\n                    // Clear out the item from this adventurer\n                    const inventory = element.inventory.concat();\n                    inventory[fromSlot] = null;\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                } else if (element.id === toAdventurerId) {\n                    // Find first empty slot, add there\n                    const inventory = element.inventory.concat();\n                    const index = inventory.findIndex((slot) => slot === null);\n                    inventory[index] = item;\n                    // todo: what if there is no room?\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.addItemToInventory: {\n            const { item } = action as InventoryAction;\n\n            return state.map((element: AdventurerStoreState) => {\n                if (element.id === action.adventurerId) {\n                    const inventory = element.inventory.concat();\n                    let toSlot = (action as InventoryAction).toSlot;\n                    if (toSlot === null) {\n                        toSlot = inventory.findIndex((val) => val === null || val === undefined);\n                    }\n                    inventory[toSlot!] = item;\n                    // todo: check if no space\n                    return {\n                        ...element,\n                        inventory,\n                    };\n                }\n                return element;\n            });\n        }\n\n        case ActionType.removeItemFromInventory: {\n            const { fromSlot } = action as RemoveItemFromInventoryAction;\n\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    const inventory = adventurer.inventory.map((element, index) => index !== fromSlot ? element : null);\n                    return {\n                        ...adventurer,\n                        inventory,\n                    };\n                }\n                return adventurer;\n            });\n        }\n\n        case ActionType.assignEquipment: {\n            // Assigns equipment to an adventurer\n            const { equipmentType, item } = action as EquipmentAction;\n            return state.map((adventurer: AdventurerStoreState) => {\n                if (adventurer.id === action.adventurerId) {\n                    return {\n                        ...adventurer,\n                        equipment: {\n                            [EquipmentType[equipmentType]]: item,\n                        },\n                    };\n                }\n                return adventurer;\n            });\n        }\n    }\n    return state;\n};\n","// tslint:disable:object-literal-sort-keys\n\nexport interface EngineStoreState {\n    lastTick: number;\n}\n\nexport const initialState: EngineStoreState = {\n    lastTick: Date.now(),\n};\n","\nimport { GameTickAction } from \"actions/game\";\nimport { Action, ActionType, AddAction, MoveItemInWarehouseAction, RemoveItemFromWarehouseAction } from \"actions/items\";\nimport { Item } from \"definitions/items/types\";\nimport { Reducer } from \"redux\";\n\nconst testState = [\n    null,\n    null,\n    null,\n    Item.dagger,\n    Item.deedForWeaponsmith,\n];\n\n// Items in warehouse\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const items: Reducer<Array<Item|null>> = (state: Array<Item|null> = testState,\n                                                 action: Action| GameTickAction) => {\n    switch (action.type) {\n        case ActionType.addItem: {\n            // toSlot is optional\n            const { item } = (action as AddAction);\n            let { toSlot } = (action as AddAction);\n            if (toSlot === undefined) {\n                toSlot = state.findIndex((slot) => slot === null);  // find first empty element\n                if (toSlot === -1) {\n                    // Still not found. Add at end\n                    // todo: [07/07/2019] GAME DESIGN\n                    return [ ...state, item ];\n                }\n            }\n            return state.map((element, index) => index === toSlot ? item : element);\n        }\n\n        case ActionType.moveItemInWarehouse: {\n            const {\n                fromSlot,\n                toSlot,\n            } = (action as MoveItemInWarehouseAction);\n\n            return state.map((element, index) => {\n                // todo: items switch places\n                if (index === fromSlot) { return null; }\n                if (index === toSlot) { return state[fromSlot]; }\n                return element;\n            });\n        }\n        case ActionType.removeItem: {\n            const { fromSlot } = (action as RemoveItemFromWarehouseAction);\n\n            return state.map((element, index) => index !== fromSlot ? element : null);\n        }\n    }\n\n    return state;\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, AddLogEntryAction } from \"actions/log\";\nimport { LogUpdate } from \"mechanics/gameTick/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { LogEntry } from \"stores/logEntry\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const log: Reducer<LogEntry[]> = (state: LogEntry[] = [], action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addLogEntry:\n            const { key, channel, channelContext, context } = (action as AddLogEntryAction);\n            const time = Date.now();\n            return [{\n                    channel,\n                    channelContext,\n                    context,\n                    key,\n                    time,\n                },\n                ...state,\n            ];\n\n        case GameActionType.gameTick:\n            return gameTick(state, action as GameTickAction);\n    }\n    return state;\n};\n\nconst gameTick = (state: LogEntry[], action: GameTickAction): LogEntry[] => {\n    if (!action.log.length) {\n        return state;\n    }\n\n    // Add log entries\n    const logEntries = action.log.map((lU: LogUpdate): LogEntry => {\n        return {\n            ...lU,\n            time: Date.now(),\n        };\n    });\n    return [\n        ...logEntries,\n        ...state,\n    ];\n};\n","import { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { ActionType, QuestAction, QuestLaunchAction, QuestVarsAction, StartEncounterAction, UpdateEncounterResultAction } from \"actions/quests\";\nimport { Item } from \"definitions/items/types\";\nimport questDefinitions, { QuestDefinition, QuestNodeType } from \"definitions/quests\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { QuestStatus, QuestStoreState } from \"stores/quest\";\n\n// tslint:disable:object-literal-sort-keys\nconst initialState: QuestStoreState[] = [{\n    name: \"kill10Boars\",\n    status: QuestStatus.active,\n    party: [\n        \"c4a5d270\",\n        \"2e655832\",\n        \"ec6f1050\",\n        \"d299f98a\",\n    ],\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil1.png\",\n    currentEncounter: null,\n}, {\n    name: \"retrieveMagicAmulet\",\n    party: [],\n    status: QuestStatus.available,\n    progress: 0,\n    questVars: {},\n    encounterResults: [],\n    icon: \"sigil2.png\",\n    currentEncounter: null,\n    reward: {\n        gold: 4,\n        items: [ Item.deedForWeaponsmith ],\n    },\n}];\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const quests: Reducer<QuestStoreState[]> = (state: QuestStoreState[] = initialState,\n                                                   action: AnyAction | GameTickAction) => {\n    switch (action.type) {\n        case ActionType.launchQuest:\n            return launchQuest(state, action as QuestLaunchAction);\n\n        case ActionType.advanceQuest:\n            return advanceQuest(state, action as QuestAction);\n\n        case ActionType.updateQuestVars:\n            // Updates the questvars\n            return updateQuestVars(state, action as QuestVarsAction);\n\n        case ActionType.updateEncounterResult:\n            return updateEncounterResult(state, action as UpdateEncounterResultAction);\n\n        case ActionType.startEncounter:\n            return startEncounter(state, action as StartEncounterAction);\n\n        case GameActionType.gameTick:\n           return gameTick(state, action as GameTickAction);\n\n    }\n    return state;\n};\n\n// Launches quest. Sets state to active, assigns adventurers\nconst launchQuest = (state: QuestStoreState[], action: QuestLaunchAction) => {\n    const party = action.assignedAventurers\n        .filter((adventurer) => !!adventurer)\n        .map((adventurer) => adventurer.id);\n\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                status: QuestStatus.active,\n                party,\n            };\n        }\n        return qss;\n    });\n};\n\nconst advanceQuest = (state: QuestStoreState[], action: QuestAction) => {\n    // deprecated\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const progress = qss.progress + 1;\n            const questDefinition: QuestDefinition = questDefinitions[qss.name];\n            const nextNode = questDefinition.nodes[Math.floor(progress)];\n\n            return {\n                ...qss,\n                progress,\n            };\n        }\n        return qss;\n    });\n};\n\nconst startEncounter = (state: QuestStoreState[], action: StartEncounterAction) => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            return {\n                ...qss,\n                currentEncounter: action.encounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst gameTick = (state: QuestStoreState[], action: GameTickAction) => {\n    const questsToUpdate = action.quests;\n    if (!questsToUpdate.length) {\n        return state;\n    }\n\n    return state.map((qss) => {\n        const questToUpdate = questsToUpdate.find((q) => q.name === qss.name);\n        if (questToUpdate) {\n            const progress = questToUpdate.progress;\n            const currentEncounter = questToUpdate.currentEncounter;\n\n            return {\n                ...qss,\n                progress,\n                currentEncounter,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateQuestVars = (state: QuestStoreState[], action: QuestVarsAction)  => {\n    return state.map((qss) => {\n        if (qss.name === action.questName) {\n            const questVars = Object.assign({}, qss.questVars, action.vars);\n            return {\n                ...qss,\n                questVars,\n            };\n        }\n        return qss;\n    });\n};\n\nconst updateEncounterResult = (state: QuestStoreState[], action: UpdateEncounterResultAction)  => {\n    return state.map((qss: QuestStoreState) => {\n        if (qss.name === action.questName) {\n            const encounterResults = qss.encounterResults.concat();\n            encounterResults[action.nodeIndex] = action.result;\n            return {\n                ...qss,\n                encounterResults,\n            };\n        }\n        return qss;\n    });\n};\n\n// // Call this when the quest has progressed a node. Will return either `log` or a new array\n// // with all values of `log` and a new value appended\n// const addLogMessage = (log: string[],\n//                        currentNode: QuestNode, nextNode: QuestNode, quest: QuestStoreState): string[] => {\n//     if (currentNode.type === QuestNodeType.nothing && nextNode.type === QuestNodeType.nothing) {\n//         // Moved from a 'nothing' node to a 'nothing' node\n//         // There is no need to flood the log with unimportant messages\n//         return log;\n//     }\n//     switch (nextNode.type) {\n//         case QuestNodeType.nothing:\n//             return [\n//                 ...log,\n//                 \"The party trrrudges on\",\n//             ];\n//         case QuestNodeType.encounter:\n//             const encounter = nextNode.encounter!;\n//             const oracle = oracles[quest.name];\n//             console.log(encounter.getDescription(oracle))\n//             //return log;\n//             return [\n//                 ...log,\n//                 encounter.getDescription(oracle),\n//             ]\n//         default:\n//             return log;\n//     }\n// }\n","import { Resource } from \"definitions/resources\";\n\n// The keys should be the same as the enum Resource\nexport interface ResourceStoreState {\n    [Resource.wood]?: number;\n    [Resource.iron]?: number;\n    [Resource.stone]?: number;\n    [Resource.leather]?: number;\n    [Resource.fabric]?: number;\n    [Resource.food]?: number;\n}\n\nexport const initialState: ResourceStoreState = {\n    fabric: 0,\n    food: 0,\n    iron: 60,\n    leather: 0,\n    stone: 0,\n    wood: 40,\n};\n","import { Structure } from \"definitions/structures\";\nimport { StructureState, StructureStoreState } from \"./structure\";\n\nexport interface StructuresStoreState {\n    [Structure.alchemist]: StructureStoreState;\n    [Structure.armoursmith]: StructureStoreState;\n    [Structure.garden]: StructureStoreState;\n    [Structure.lumberMill]: StructureStoreState;\n    [Structure.mine]: StructureStoreState;\n    [Structure.quarry]: StructureStoreState;\n    [Structure.tavern]: StructureStoreState;\n    [Structure.tannery]: StructureStoreState;\n    [Structure.warehouse]: StructureStoreState;\n    [Structure.weaponsmith]: StructureStoreState;\n    [Structure.weaver]: StructureStoreState;\n    [Structure.workshop]: StructureStoreState;\n}\n\nexport const initialState: StructuresStoreState = {\n    [Structure.alchemist]: { level: 0, workers: 1, state: StructureState.NotBuilt  },\n    [Structure.armoursmith]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.garden]: { level: 0, workers: 0, state: StructureState.Built  }, // TODO: change back to NotBuilt\n    [Structure.lumberMill]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.mine]: { level: 0, workers: 0, state: StructureState.NotBuilt  },\n    [Structure.quarry]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.tavern]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.tannery]: { level: 0, workers: 0 , state: StructureState.NotBuilt },\n    [Structure.warehouse]: { level: 0, workers: 0, state: StructureState.Built},\n    [Structure.weaponsmith]: { level: 0, workers: 0, state: StructureState.Built },\n    [Structure.weaver]: { level: 0, workers: 0, state: StructureState.NotBuilt },\n    [Structure.workshop]: { level: 0, workers: 0, state: StructureState.NotBuilt },\n};\n","import { Action, ActionType, StructureStateAction, WorkerCountAction } from \"actions/structures\";\nimport { Structure } from \"definitions/structures\";\nimport { Reducer } from \"redux\";\nimport { StructureState, StructureStoreState } from \"stores/structure\";\nimport { initialState, StructuresStoreState } from \"../stores/structures\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const structures: Reducer<StructuresStoreState, Action> = (state: StructuresStoreState = initialState,\n                                                                  action: Action) => {\n    switch (action.type) {\n        case ActionType.startBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Building);\n        }\n        case ActionType.finishBuildingStructure: {\n            return updateStructureState(state, action.structure, StructureState.Built);\n        }\n        case ActionType.upgradeStructure: {\n            const level = state[action.structure].level + 1;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                level,\n            };\n            return    {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.increaseWorkers: {\n            const { workers: workersToAdd } = action as WorkerCountAction;\n            const workers = state[action.structure].workers + workersToAdd;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.decreaseWorkers: {\n            const { workers: workersToRemove } = action as WorkerCountAction;\n            const workers = state[action.structure].workers - workersToRemove;\n            const structureStore: StructureStoreState = {\n                ...state[action.structure],\n                workers,\n            };\n            return {\n                ...state,\n                [action.structure]: structureStore,\n            };\n        }\n        case ActionType.setStructureState: {\n            const { state: structureState } = action as StructureStateAction;\n            return updateStructureState(state, action.structure, structureState);\n        }\n\n    }\n    return state;\n};\n\nconst updateStructureState = (state: StructuresStoreState, structure: Structure, structureState: StructureState) => {\n    const structureStore: StructureStoreState = {\n        ...state[structure],\n        state: structureState,\n    };\n    return {\n        ...state,\n        [structure]: structureStore,\n    };\n};\n","import { TaskStoreState } from \"./task\";\n\nexport interface TasksStoreState {\n    running: TaskStoreState[];\n    completed: TaskStoreState[];\n}\nexport const initialState: TasksStoreState = {\n    completed: [],\n    running: [],\n};\n","// tslint:disable:object-literal-sort-keys\n\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { Action as AnyTaskAction, ActionType, AddAction} from \"actions/tasks\";\nimport { Reducer } from \"redux\";\nimport { TaskStoreState } from \"stores/task\";\nimport { initialState, TasksStoreState } from \"stores/tasks\";\n\n/**\n * Tasks reducer\n * @param state\n * @param action\n */\nexport const tasks: Reducer<TasksStoreState> = (state: TasksStoreState = initialState,\n                                                action: AnyTaskAction | GameTickAction ) => {\n    switch (action.type) {\n        case ActionType.start: {\n        // Adds a new task to the running tasks\n            const task: TaskStoreState = createTask(action as AddAction);\n            const running = state.running.concat(task);\n            return {\n                ...state,\n                running,\n            };\n        }\n        case GameActionType.gameTick: {\n            // Will update all tasks in `running`. If a running task expires it is placed in `complete`\n            // Note that completed tasks must be handled BEFORE the next call to ActionType.update, because\n            // this list is recreated every time\n            const now: number = Date.now();\n            const running: TaskStoreState[] = [];\n            const completed: TaskStoreState[] = [];\n            state.running.forEach((t) => {\n                const end = now + t.timeRemaining;\n                const progress = (now - t.startTime) / (end - t.startTime);\n                const timeRemaining = t.timeRemaining - (now - t.lastTick);\n                const task = {\n                    ...t,\n                    progress,\n                    lastTick: now,\n                    timeRemaining,\n                };\n                if (timeRemaining < 0) {\n                    completed.push(task);\n                } else {\n                    running.push(task);\n                }\n            });\n\n            return {\n                running,\n                completed,\n            };\n        }\n    }\n    return state;\n};\n\nconst createTask = (action: AddAction): TaskStoreState => {\n    return {\n        name: action.name,\n        origin: action.origin,\n        type: action.taskType,\n        callbacks: action.callbacks,\n        timeRemaining: action.time,\n        startTime: Date.now(),\n        lastTick: Date.now(),\n        progress: 0,\n    };\n};\n","import { Item } from \"definitions/items/types\";\nimport { combineReducers } from \"redux\";\nimport { ResourceStoreState } from \"stores/resources\";\nimport { StoreState } from \"../stores\";\nimport { adventurers } from \"./adventurers\";\nimport { engine } from \"./engine\";\nimport { gold } from \"./gold\";\nimport { items } from \"./items\";\nimport { log } from \"./log\";\nimport { quests } from \"./quests\";\nimport { resources } from \"./resources\";\nimport { rngState } from \"./rngState\";\nimport { structures } from \"./structures\";\nimport { tasks } from \"./tasks\";\n// import { version } from \"./version\";\nimport { workers } from \"./workers\";\n\n// todo: not sure where to place this actually\nexport interface CostStoreState {\n    gold?: number;\n    time?: number;\n    resources?: ResourceStoreState;\n    materials?: Item[];\n}\n\nexport default combineReducers<StoreState>({\n    adventurers,\n    engine,\n    gold,\n    items,\n    log,\n    quests,\n    resources,\n    rngState,\n    structures,\n    tasks,\n    // version,\n    workers,\n});\n","import { ActionType as GameActionType } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { EngineStoreState, initialState } from \"stores/engine\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const engine: Reducer<EngineStoreState> = (state: EngineStoreState = initialState, action: AnyAction) => {\n    switch (action.type) {\n        case GameActionType.gameTick:\n            return {\n                ...state,\n                lastTick: Date.now(),\n            };\n    }\n    return state;\n};\n","import { ActionType, ModifyGoldAction } from \"actions/gold\";\nimport { Action as StructureAction,\n    ActionType as StructureActionType } from \"actions/structures\";\nimport structureDefinitions from \"definitions/structures\";\nimport { AnyAction, Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const gold: Reducer<number> = (state: number = 0, action: AnyAction) => {\n    switch (action.type) {\n        case ActionType.addGold:\n            // Adds (or subtract, if negative) gold from the players gold supply\n            return state + (action as ModifyGoldAction).amount;\n\n        case StructureActionType.startBuildingStructure:\n            // Started building a structure\n            const structureDefinition = structureDefinitions[(action as StructureAction).structure];\n            const cost = structureDefinition.cost.gold || 0;\n            return state - cost;\n    }\n    return state;\n};\n","\nimport { ActionType as GameActionType, GameTickAction } from \"actions/game\";\nimport { AnyAction, Reducer } from \"redux\";\nimport { ActionType, AddResources } from \"../actions/resources\";\nimport { initialState, ResourceStoreState } from \"../stores/resources\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const resources: Reducer<ResourceStoreState> = (state: ResourceStoreState = initialState,\n                                                       action: AnyAction | GameTickAction) => {\n\n    const addResources = (resourcesToAdd: ResourceStoreState) => {\n        // todo: Check if warehouse can hold it\n        return Object.keys(state).reduce((accumulator: object, current: string) => {\n            accumulator[current] = state[current] + (resourcesToAdd[current] || 0);\n            return accumulator;\n        }, {});\n    };\n\n    switch (action.type) {\n        case ActionType.addResources: {\n            const resourcesToAdd = (action as AddResources).resources;\n            return addResources(resourcesToAdd);\n        }\n        case ActionType.removeResources: {\n            const resourcesToRemove = (action as AddResources).resources;\n            return Object.keys(state).reduce((accumulator: object, current: string) => {\n                accumulator[current] = state[current] - (resourcesToRemove[current] || 0);\n                return accumulator;\n            }, {});\n        }\n\n        case GameActionType.gameTick: {\n            const resourcesToAdd = (action as GameTickAction).resources;\n            return addResources(resourcesToAdd);\n        }\n    }\n    return state;\n};\n","import { ActionType, GameTickAction } from \"actions/game\";\nimport { Reducer } from \"redux\";\nimport { State as seedrandomStateType } from \"seedrandom\";\n\nconst initialState = false;\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const rngState: Reducer<seedrandomStateType, GameTickAction> = (state: seedrandomStateType = initialState,\n                                                                       action: GameTickAction) => {\n    if (action.type === ActionType.gameTick && action.rngState != null) {\n        state = Object.assign({}, action.rngState);\n    }\n    return state;\n};\n","import { Action, ActionType, ModifyWorkersAction } from \"actions\";\nimport { Reducer } from \"redux\";\n\n/**\n * reducer\n * @param state\n * @param action\n */\nexport const workers: Reducer<number> = (state: number = 13, action: Action) => {\n    switch (action.type) {\n        case ActionType.addWorkers:\n            // Adds (or subtract, if negative) from the players workers\n            return state + (action as ModifyWorkersAction).value;\n    }\n    return state;\n};\n","import { asInt } from \"constants/version\";\nimport rootReducer from \"reducers/index\";\nimport { createStore, DeepPartial } from \"redux\";\nimport { Persistor, PersistPartial, persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { storeIsRehydrated } from \"storeHelpers\";\nimport { StoreState } from \"stores\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    version: asInt,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\ninterface ConfigureStoreResult {\n    store: any;\n    persistor: Persistor;\n    isHydrated: boolean;\n}\n/**\n * Configures the redux store\n */\nexport default async (initial: DeepPartial<StoreState> = {}): Promise<ConfigureStoreResult> => {\n    return new Promise((resolve, reject) => {\n        const store = createStore<StoreState & PersistPartial, any, any, StoreState>(\n            persistedReducer,\n            initial,\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n        const persistor = persistStore(store, undefined, () => {\n            const isHydrated = storeIsRehydrated(store.getState());\n            resolve({ store, persistor, isHydrated }) ;\n        });\n    });\n};\n","import axios from \"axios\";\r\nimport { Item } from \"definitions/items/types\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Persistor } from \"redux-persist\";\r\nimport { gameTick } from \"./actions/game\";\r\nimport { addLogEntry } from \"./actions/log\";\r\nimport version from \"./constants/version\";\r\nimport App from \"./containers/App\";\r\nimport \"./index.css\";\r\nimport getProducedResources from \"./mechanics/gameTick/producedResources\";\r\nimport getQuestUpdates from \"./mechanics/gameTick/quests\";\r\nimport getRngState from \"./mechanics/gameTick/rngState\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport { StoreState } from \"./stores\";\r\nimport { TaskStoreState } from \"./stores/task\";\r\nimport { TasksStoreState } from \"./stores/tasks\";\r\nimport configureStore from \"./utils/configureStore\";\r\nimport * as Random from \"./utils/random\";\r\nimport { TextManager } from \"./utils/textManager\";\r\n\r\nlet interval: NodeJS.Timeout;\r\n\r\nconst initGame = async () => {\r\n    const axiosResult = await axios.get(\"lang/en-US.json\");\r\n    const texts = axiosResult.data as Record<string, string>;\r\n    TextManager.init(texts);\r\n    Random.init(\"GILLESROX2\");\r\n\r\n    const { store, persistor, isHydrated } = await configureStore();\r\n    if (!isHydrated) {\r\n        startNewGame(store);\r\n    } else {\r\n        continueGame(store);\r\n    }\r\n    runGame(store, persistor);\r\n};\r\n\r\n/**\r\n * Gets called when a player\r\n * @param store\r\n */\r\nconst startNewGame = (store: any) => {\r\n\r\n    store.dispatch(addLogEntry(\"test-game-welcome\"));\r\n    // todo: here is a good place to launch a tutorial or something\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Starting new GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\nconst continueGame = (store: any) => {\r\n    // tslint:disable-next-line:no-console\r\n    console.log(`Continuing existing GILLES-IDLE-GAME (version ${version})`);\r\n};\r\n\r\n// const stopGame = () => {\r\n//     clearTimeout(interval);\r\n// };\r\n\r\nconst runGame = (store: any, persistor: Persistor) => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App persistor={ persistor }/>\r\n        </Provider>,\r\n        document.getElementById(\"root\") as HTMLElement,\r\n    );\r\n    registerServiceWorker();\r\n\r\n    const processCompletedTasks = (tasks: TasksStoreState) => {\r\n        const handleCompletedTask = (task: TaskStoreState) => {\r\n            // Fire all callbacks\r\n            task.callbacks.forEach((action) => store.dispatch(action));\r\n        };\r\n\r\n        tasks.completed.forEach((task) => handleCompletedTask(task));\r\n    };\r\n\r\n    // store.dispatch(addGold(400));\r\n\r\n    // TODO: find something less ugly and hacky than this\r\n//    oracles.kill10b = theBigTree.getOracle(\"kill_10_boars\", store);\r\n  //  oracles[\"retrieve_magic_amulet\"] = backstabbed.getOracle(\"retrieve_magic_amulet\", store);\r\n    const gameLoop = () => {\r\n        const state: StoreState = store.getState();\r\n        const delta = Date.now() - state.engine.lastTick;\r\n\r\n        const resourcesUpdates = getProducedResources(delta, state);\r\n        const rngState = getRngState();\r\n        const { quests, log } = getQuestUpdates(delta, state);\r\n        store.dispatch(gameTick(delta, rngState, resourcesUpdates, quests, log));\r\n\r\n        processCompletedTasks(state.tasks);\r\n\r\n        // store.dispatch(addLogEntry(\"test-you-have-found-an-item\", LogChannel.common, { item: Item.teeth }));\r\n    };\r\n\r\n    interval = setInterval(gameLoop, 2500);\r\n};\r\n\r\ninitGame();\r\n"],"sourceRoot":""}