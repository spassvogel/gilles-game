import structureDefinitions from "src/definitions/structures";
import { ResourceStructureDefinition, ResourceStructureLevelDefinition, StructureDefinition, StructureType } from "src/definitions/structures/types";
import { ResourceStoreState } from "src/stores/resources";
import { StructuresStoreState } from "src/stores/structures";

 /*
  * Calculates how many resources are generated by the in the town.
  * Will return a ResourceStoreState with the amount of each resource to add  */
const getProducedResources = (delta: number, structures: StructuresStoreState) => {
     const result: ResourceStoreState = {};
     const resourceInterval = 60000; // every minute constitutes a resource tick. todo: move to some other shared place
     const factor = delta / resourceInterval;
     // this function can run at different intervals
     // faster or slower than once a minute
     // we will multiply the resource amount by the factor to normalize

     const handleStructure = (structure: string) => {
         const structureDefinition: StructureDefinition = structureDefinitions[structure];

         if (structureDefinition.type === StructureType.resource) {
            const resourceStructureDefinition = structureDefinition as ResourceStructureDefinition;
            const level: number = structures[structure].level;
            const levelDefinition: ResourceStructureLevelDefinition = resourceStructureDefinition.levels[level];

            // Store all the resources that this structure will generate this tick into `result`
            Object.keys(levelDefinition.generates).reduce((accumulator: ResourceStoreState, resource: string) => {
                const amount: number = levelDefinition.generates[resource] * structures[structure].workers * factor;
                accumulator[resource] = (accumulator[resource] || 0) + amount;
                return accumulator;
            }, result);
         }
     };

     Object.keys(structures).forEach((structure) => handleStructure(structure));
     return result;
};

export default getProducedResources;
